suite: basic-functions
name: haskell-basic-functions

parse_cases:
  - name: simple_function
    input: |
      hello :: String
      hello = "Hello, World!"
    output:
      type: "File"
      children:
        - type: "Function"
          roles: ["Function", "Declaration"]
          props:
            name: "hello"
          children:
            - type: "Literal"
              roles: ["Literal"]
              token: '"Hello, World!"'

  - name: function_with_params
    input: |
      add :: Int -> Int -> Int
      add a b = a + b
    output:
      type: "File"
      children:
        - type: "Function"
          roles: ["Function", "Declaration"]
          props:
            name: "add"
          children:
            - type: "ParameterList"
              children:
                - type: "Parameter"
                  roles: ["Parameter", "Declaration"]
                  props:
                    name: "a"
                - type: "Parameter"
                  roles: ["Parameter", "Declaration"]
                  props:
                    name: "b"
            - type: "BinaryExpression"
              roles: ["Binary"]
              children:
                - type: "Identifier"
                  roles: ["Name"]
                  props:
                    name: "a"
                - type: "Identifier"
                  roles: ["Name"]
                  props:
                    name: "b"

query_cases:
  - name: find_functions
    input: |
      func1 :: Int
      func1 = 1
      func2 :: Int
      func2 = 2
    query: "filter(.type == \"Function\")"
    output:
      results:
        - type: "Function"
          roles: ["Function", "Declaration"]
          props:
            name: "func1"
        - type: "Function"
          roles: ["Function", "Declaration"]
          props:
            name: "func2"

  - name: find_function_names
    input: |
      myFunction :: Int
      myFunction = 42
    query: "filter(.type == \"Function\") |> map(.name)"
    output:
      results:
        - token: "myFunction" 