package uast

// Code generated by /home/dmytrogajewski/go/bin/peg -output pkg/uast/dsl_parser.peg.go pkg/uast/dsl_parser.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	rulePipeline
	ruleExpr
	ruleFilter
	ruleMap
	ruleReduce
	ruleReducerName
	rulePredicate
	ruleOrExpr
	ruleAndExpr
	ruleNotExpr
	rulePrimaryExpr
	ruleParenExpr
	ruleComparison
	ruleCompOp
	ruleMembership
	ruleFieldAccess
	ruleValue
	ruleLiteral
	ruleString
	ruleNumber
	ruleBoolean
	ruleIdentifier
	ruleSpacing
	ruleSpace
	ruleComment
	ruleEndOfLine
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"Pipeline",
	"Expr",
	"Filter",
	"Map",
	"Reduce",
	"ReducerName",
	"Predicate",
	"OrExpr",
	"AndExpr",
	"NotExpr",
	"PrimaryExpr",
	"ParenExpr",
	"Comparison",
	"CompOp",
	"Membership",
	"FieldAccess",
	"Value",
	"Literal",
	"String",
	"Number",
	"Boolean",
	"Identifier",
	"Spacing",
	"Space",
	"Comment",
	"EndOfLine",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type QueryDSL struct {
	Buffer string
	buffer []rune
	rules  [28]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *QueryDSL) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *QueryDSL) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *QueryDSL
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *QueryDSL) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *QueryDSL) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *QueryDSL) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*QueryDSL) error {
	return func(p *QueryDSL) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*QueryDSL) error {
	return func(p *QueryDSL) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *QueryDSL) Init(options ...func(*QueryDSL) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(Spacing Pipeline !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleSpacing]() {
					goto l0
				}
				if !_rules[rulePipeline]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					if !matchDot() {
						goto l2
					}
					goto l0
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Pipeline <- <(Expr (Spacing '|' '>' Spacing Expr)*)> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				if !_rules[ruleExpr]() {
					goto l3
				}
			l5:
				{
					position6, tokenIndex6 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l6
					}
					if buffer[position] != rune('|') {
						goto l6
					}
					position++
					if buffer[position] != rune('>') {
						goto l6
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l6
					}
					if !_rules[ruleExpr]() {
						goto l6
					}
					goto l5
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
				add(rulePipeline, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 Expr <- <(Filter / Map / Reduce / OrExpr)> */
		func() bool {
			position7, tokenIndex7 := position, tokenIndex
			{
				position8 := position
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[ruleFilter]() {
						goto l10
					}
					goto l9
				l10:
					position, tokenIndex = position9, tokenIndex9
					if !_rules[ruleMap]() {
						goto l11
					}
					goto l9
				l11:
					position, tokenIndex = position9, tokenIndex9
					if !_rules[ruleReduce]() {
						goto l12
					}
					goto l9
				l12:
					position, tokenIndex = position9, tokenIndex9
					if !_rules[ruleOrExpr]() {
						goto l7
					}
				}
			l9:
				add(ruleExpr, position8)
			}
			return true
		l7:
			position, tokenIndex = position7, tokenIndex7
			return false
		},
		/* 3 Filter <- <('f' 'i' 'l' 't' 'e' 'r' ((Spacing '(' Spacing Predicate Spacing ')') / (Spacing Predicate)))> */
		func() bool {
			position13, tokenIndex13 := position, tokenIndex
			{
				position14 := position
				if buffer[position] != rune('f') {
					goto l13
				}
				position++
				if buffer[position] != rune('i') {
					goto l13
				}
				position++
				if buffer[position] != rune('l') {
					goto l13
				}
				position++
				if buffer[position] != rune('t') {
					goto l13
				}
				position++
				if buffer[position] != rune('e') {
					goto l13
				}
				position++
				if buffer[position] != rune('r') {
					goto l13
				}
				position++
				{
					position15, tokenIndex15 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l16
					}
					if buffer[position] != rune('(') {
						goto l16
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l16
					}
					if !_rules[rulePredicate]() {
						goto l16
					}
					if !_rules[ruleSpacing]() {
						goto l16
					}
					if buffer[position] != rune(')') {
						goto l16
					}
					position++
					goto l15
				l16:
					position, tokenIndex = position15, tokenIndex15
					if !_rules[ruleSpacing]() {
						goto l13
					}
					if !_rules[rulePredicate]() {
						goto l13
					}
				}
			l15:
				add(ruleFilter, position14)
			}
			return true
		l13:
			position, tokenIndex = position13, tokenIndex13
			return false
		},
		/* 4 Map <- <('m' 'a' 'p' ((Spacing '(' Spacing OrExpr Spacing ')') / (Spacing OrExpr)))> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				if buffer[position] != rune('m') {
					goto l17
				}
				position++
				if buffer[position] != rune('a') {
					goto l17
				}
				position++
				if buffer[position] != rune('p') {
					goto l17
				}
				position++
				{
					position19, tokenIndex19 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l20
					}
					if buffer[position] != rune('(') {
						goto l20
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l20
					}
					if !_rules[ruleOrExpr]() {
						goto l20
					}
					if !_rules[ruleSpacing]() {
						goto l20
					}
					if buffer[position] != rune(')') {
						goto l20
					}
					position++
					goto l19
				l20:
					position, tokenIndex = position19, tokenIndex19
					if !_rules[ruleSpacing]() {
						goto l17
					}
					if !_rules[ruleOrExpr]() {
						goto l17
					}
				}
			l19:
				add(ruleMap, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 5 Reduce <- <('r' 'e' 'd' 'u' 'c' 'e' ((Spacing '(' Spacing ReducerName Spacing ')') / (Spacing ReducerName)))> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				if buffer[position] != rune('r') {
					goto l21
				}
				position++
				if buffer[position] != rune('e') {
					goto l21
				}
				position++
				if buffer[position] != rune('d') {
					goto l21
				}
				position++
				if buffer[position] != rune('u') {
					goto l21
				}
				position++
				if buffer[position] != rune('c') {
					goto l21
				}
				position++
				if buffer[position] != rune('e') {
					goto l21
				}
				position++
				{
					position23, tokenIndex23 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l24
					}
					if buffer[position] != rune('(') {
						goto l24
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l24
					}
					if !_rules[ruleReducerName]() {
						goto l24
					}
					if !_rules[ruleSpacing]() {
						goto l24
					}
					if buffer[position] != rune(')') {
						goto l24
					}
					position++
					goto l23
				l24:
					position, tokenIndex = position23, tokenIndex23
					if !_rules[ruleSpacing]() {
						goto l21
					}
					if !_rules[ruleReducerName]() {
						goto l21
					}
				}
			l23:
				add(ruleReduce, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 6 ReducerName <- <(([a-z] / [A-Z] / '_') ([a-z] / [A-Z] / [0-9] / '_')*)> */
		func() bool {
			position25, tokenIndex25 := position, tokenIndex
			{
				position26 := position
				{
					position27, tokenIndex27 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l28
					}
					position++
					goto l27
				l28:
					position, tokenIndex = position27, tokenIndex27
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l29
					}
					position++
					goto l27
				l29:
					position, tokenIndex = position27, tokenIndex27
					if buffer[position] != rune('_') {
						goto l25
					}
					position++
				}
			l27:
			l30:
				{
					position31, tokenIndex31 := position, tokenIndex
					{
						position32, tokenIndex32 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l33
						}
						position++
						goto l32
					l33:
						position, tokenIndex = position32, tokenIndex32
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l34
						}
						position++
						goto l32
					l34:
						position, tokenIndex = position32, tokenIndex32
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l35
						}
						position++
						goto l32
					l35:
						position, tokenIndex = position32, tokenIndex32
						if buffer[position] != rune('_') {
							goto l31
						}
						position++
					}
				l32:
					goto l30
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
				add(ruleReducerName, position26)
			}
			return true
		l25:
			position, tokenIndex = position25, tokenIndex25
			return false
		},
		/* 7 Predicate <- <OrExpr> */
		func() bool {
			position36, tokenIndex36 := position, tokenIndex
			{
				position37 := position
				if !_rules[ruleOrExpr]() {
					goto l36
				}
				add(rulePredicate, position37)
			}
			return true
		l36:
			position, tokenIndex = position36, tokenIndex36
			return false
		},
		/* 8 OrExpr <- <(AndExpr (Spacing '|' '|' Spacing AndExpr)*)> */
		func() bool {
			position38, tokenIndex38 := position, tokenIndex
			{
				position39 := position
				if !_rules[ruleAndExpr]() {
					goto l38
				}
			l40:
				{
					position41, tokenIndex41 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l41
					}
					if buffer[position] != rune('|') {
						goto l41
					}
					position++
					if buffer[position] != rune('|') {
						goto l41
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l41
					}
					if !_rules[ruleAndExpr]() {
						goto l41
					}
					goto l40
				l41:
					position, tokenIndex = position41, tokenIndex41
				}
				add(ruleOrExpr, position39)
			}
			return true
		l38:
			position, tokenIndex = position38, tokenIndex38
			return false
		},
		/* 9 AndExpr <- <(NotExpr (Spacing '&' '&' Spacing NotExpr)*)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				if !_rules[ruleNotExpr]() {
					goto l42
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l45
					}
					if buffer[position] != rune('&') {
						goto l45
					}
					position++
					if buffer[position] != rune('&') {
						goto l45
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l45
					}
					if !_rules[ruleNotExpr]() {
						goto l45
					}
					goto l44
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
				add(ruleAndExpr, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 10 NotExpr <- <(('!' Spacing PrimaryExpr) / PrimaryExpr)> */
		func() bool {
			position46, tokenIndex46 := position, tokenIndex
			{
				position47 := position
				{
					position48, tokenIndex48 := position, tokenIndex
					if buffer[position] != rune('!') {
						goto l49
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l49
					}
					if !_rules[rulePrimaryExpr]() {
						goto l49
					}
					goto l48
				l49:
					position, tokenIndex = position48, tokenIndex48
					if !_rules[rulePrimaryExpr]() {
						goto l46
					}
				}
			l48:
				add(ruleNotExpr, position47)
			}
			return true
		l46:
			position, tokenIndex = position46, tokenIndex46
			return false
		},
		/* 11 PrimaryExpr <- <(Membership / Comparison / ParenExpr / FieldAccess / Literal)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				{
					position52, tokenIndex52 := position, tokenIndex
					if !_rules[ruleMembership]() {
						goto l53
					}
					goto l52
				l53:
					position, tokenIndex = position52, tokenIndex52
					if !_rules[ruleComparison]() {
						goto l54
					}
					goto l52
				l54:
					position, tokenIndex = position52, tokenIndex52
					if !_rules[ruleParenExpr]() {
						goto l55
					}
					goto l52
				l55:
					position, tokenIndex = position52, tokenIndex52
					if !_rules[ruleFieldAccess]() {
						goto l56
					}
					goto l52
				l56:
					position, tokenIndex = position52, tokenIndex52
					if !_rules[ruleLiteral]() {
						goto l50
					}
				}
			l52:
				add(rulePrimaryExpr, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 12 ParenExpr <- <('(' Spacing OrExpr Spacing ')')> */
		func() bool {
			position57, tokenIndex57 := position, tokenIndex
			{
				position58 := position
				if buffer[position] != rune('(') {
					goto l57
				}
				position++
				if !_rules[ruleSpacing]() {
					goto l57
				}
				if !_rules[ruleOrExpr]() {
					goto l57
				}
				if !_rules[ruleSpacing]() {
					goto l57
				}
				if buffer[position] != rune(')') {
					goto l57
				}
				position++
				add(ruleParenExpr, position58)
			}
			return true
		l57:
			position, tokenIndex = position57, tokenIndex57
			return false
		},
		/* 13 Comparison <- <(Value Spacing CompOp Spacing Value)> */
		func() bool {
			position59, tokenIndex59 := position, tokenIndex
			{
				position60 := position
				if !_rules[ruleValue]() {
					goto l59
				}
				if !_rules[ruleSpacing]() {
					goto l59
				}
				if !_rules[ruleCompOp]() {
					goto l59
				}
				if !_rules[ruleSpacing]() {
					goto l59
				}
				if !_rules[ruleValue]() {
					goto l59
				}
				add(ruleComparison, position60)
			}
			return true
		l59:
			position, tokenIndex = position59, tokenIndex59
			return false
		},
		/* 14 CompOp <- <(('=' '=') / ('!' '=') / ('>' '=') / ('<' '=') / '>' / '<')> */
		func() bool {
			position61, tokenIndex61 := position, tokenIndex
			{
				position62 := position
				{
					position63, tokenIndex63 := position, tokenIndex
					if buffer[position] != rune('=') {
						goto l64
					}
					position++
					if buffer[position] != rune('=') {
						goto l64
					}
					position++
					goto l63
				l64:
					position, tokenIndex = position63, tokenIndex63
					if buffer[position] != rune('!') {
						goto l65
					}
					position++
					if buffer[position] != rune('=') {
						goto l65
					}
					position++
					goto l63
				l65:
					position, tokenIndex = position63, tokenIndex63
					if buffer[position] != rune('>') {
						goto l66
					}
					position++
					if buffer[position] != rune('=') {
						goto l66
					}
					position++
					goto l63
				l66:
					position, tokenIndex = position63, tokenIndex63
					if buffer[position] != rune('<') {
						goto l67
					}
					position++
					if buffer[position] != rune('=') {
						goto l67
					}
					position++
					goto l63
				l67:
					position, tokenIndex = position63, tokenIndex63
					if buffer[position] != rune('>') {
						goto l68
					}
					position++
					goto l63
				l68:
					position, tokenIndex = position63, tokenIndex63
					if buffer[position] != rune('<') {
						goto l61
					}
					position++
				}
			l63:
				add(ruleCompOp, position62)
			}
			return true
		l61:
			position, tokenIndex = position61, tokenIndex61
			return false
		},
		/* 15 Membership <- <(FieldAccess Spacing ('h' 'a' 's') Spacing Value)> */
		func() bool {
			position69, tokenIndex69 := position, tokenIndex
			{
				position70 := position
				if !_rules[ruleFieldAccess]() {
					goto l69
				}
				if !_rules[ruleSpacing]() {
					goto l69
				}
				if buffer[position] != rune('h') {
					goto l69
				}
				position++
				if buffer[position] != rune('a') {
					goto l69
				}
				position++
				if buffer[position] != rune('s') {
					goto l69
				}
				position++
				if !_rules[ruleSpacing]() {
					goto l69
				}
				if !_rules[ruleValue]() {
					goto l69
				}
				add(ruleMembership, position70)
			}
			return true
		l69:
			position, tokenIndex = position69, tokenIndex69
			return false
		},
		/* 16 FieldAccess <- <('.' Identifier ('.' Identifier)*)> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				if buffer[position] != rune('.') {
					goto l71
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l71
				}
			l73:
				{
					position74, tokenIndex74 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l74
					}
					position++
					if !_rules[ruleIdentifier]() {
						goto l74
					}
					goto l73
				l74:
					position, tokenIndex = position74, tokenIndex74
				}
				add(ruleFieldAccess, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 17 Value <- <(FieldAccess / Literal)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				{
					position77, tokenIndex77 := position, tokenIndex
					if !_rules[ruleFieldAccess]() {
						goto l78
					}
					goto l77
				l78:
					position, tokenIndex = position77, tokenIndex77
					if !_rules[ruleLiteral]() {
						goto l75
					}
				}
			l77:
				add(ruleValue, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 18 Literal <- <(String / Number / Boolean)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81, tokenIndex81 := position, tokenIndex
					if !_rules[ruleString]() {
						goto l82
					}
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleNumber]() {
						goto l83
					}
					goto l81
				l83:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleBoolean]() {
						goto l79
					}
				}
			l81:
				add(ruleLiteral, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 19 String <- <(('"' (!'"' .)* '"') / ('\'' (!'\'' .)* '\''))> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				{
					position86, tokenIndex86 := position, tokenIndex
					if buffer[position] != rune('"') {
						goto l87
					}
					position++
				l88:
					{
						position89, tokenIndex89 := position, tokenIndex
						{
							position90, tokenIndex90 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l90
							}
							position++
							goto l89
						l90:
							position, tokenIndex = position90, tokenIndex90
						}
						if !matchDot() {
							goto l89
						}
						goto l88
					l89:
						position, tokenIndex = position89, tokenIndex89
					}
					if buffer[position] != rune('"') {
						goto l87
					}
					position++
					goto l86
				l87:
					position, tokenIndex = position86, tokenIndex86
					if buffer[position] != rune('\'') {
						goto l84
					}
					position++
				l91:
					{
						position92, tokenIndex92 := position, tokenIndex
						{
							position93, tokenIndex93 := position, tokenIndex
							if buffer[position] != rune('\'') {
								goto l93
							}
							position++
							goto l92
						l93:
							position, tokenIndex = position93, tokenIndex93
						}
						if !matchDot() {
							goto l92
						}
						goto l91
					l92:
						position, tokenIndex = position92, tokenIndex92
					}
					if buffer[position] != rune('\'') {
						goto l84
					}
					position++
				}
			l86:
				add(ruleString, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 20 Number <- <([0-9]+ ('.' [0-9]+)?)> */
		func() bool {
			position94, tokenIndex94 := position, tokenIndex
			{
				position95 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l94
				}
				position++
			l96:
				{
					position97, tokenIndex97 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l97
					}
					position++
					goto l96
				l97:
					position, tokenIndex = position97, tokenIndex97
				}
				{
					position98, tokenIndex98 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l98
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l98
					}
					position++
				l100:
					{
						position101, tokenIndex101 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l101
						}
						position++
						goto l100
					l101:
						position, tokenIndex = position101, tokenIndex101
					}
					goto l99
				l98:
					position, tokenIndex = position98, tokenIndex98
				}
			l99:
				add(ruleNumber, position95)
			}
			return true
		l94:
			position, tokenIndex = position94, tokenIndex94
			return false
		},
		/* 21 Boolean <- <(('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e'))> */
		func() bool {
			position102, tokenIndex102 := position, tokenIndex
			{
				position103 := position
				{
					position104, tokenIndex104 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l105
					}
					position++
					if buffer[position] != rune('r') {
						goto l105
					}
					position++
					if buffer[position] != rune('u') {
						goto l105
					}
					position++
					if buffer[position] != rune('e') {
						goto l105
					}
					position++
					goto l104
				l105:
					position, tokenIndex = position104, tokenIndex104
					if buffer[position] != rune('f') {
						goto l102
					}
					position++
					if buffer[position] != rune('a') {
						goto l102
					}
					position++
					if buffer[position] != rune('l') {
						goto l102
					}
					position++
					if buffer[position] != rune('s') {
						goto l102
					}
					position++
					if buffer[position] != rune('e') {
						goto l102
					}
					position++
				}
			l104:
				add(ruleBoolean, position103)
			}
			return true
		l102:
			position, tokenIndex = position102, tokenIndex102
			return false
		},
		/* 22 Identifier <- <(([a-z] / [A-Z] / '_') ([a-z] / [A-Z] / [0-9] / '_')*)> */
		func() bool {
			position106, tokenIndex106 := position, tokenIndex
			{
				position107 := position
				{
					position108, tokenIndex108 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l109
					}
					position++
					goto l108
				l109:
					position, tokenIndex = position108, tokenIndex108
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l110
					}
					position++
					goto l108
				l110:
					position, tokenIndex = position108, tokenIndex108
					if buffer[position] != rune('_') {
						goto l106
					}
					position++
				}
			l108:
			l111:
				{
					position112, tokenIndex112 := position, tokenIndex
					{
						position113, tokenIndex113 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l114
						}
						position++
						goto l113
					l114:
						position, tokenIndex = position113, tokenIndex113
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l115
						}
						position++
						goto l113
					l115:
						position, tokenIndex = position113, tokenIndex113
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l116
						}
						position++
						goto l113
					l116:
						position, tokenIndex = position113, tokenIndex113
						if buffer[position] != rune('_') {
							goto l112
						}
						position++
					}
				l113:
					goto l111
				l112:
					position, tokenIndex = position112, tokenIndex112
				}
				add(ruleIdentifier, position107)
			}
			return true
		l106:
			position, tokenIndex = position106, tokenIndex106
			return false
		},
		/* 23 Spacing <- <(Space / Comment)*> */
		func() bool {
			{
				position118 := position
			l119:
				{
					position120, tokenIndex120 := position, tokenIndex
					{
						position121, tokenIndex121 := position, tokenIndex
						if !_rules[ruleSpace]() {
							goto l122
						}
						goto l121
					l122:
						position, tokenIndex = position121, tokenIndex121
						if !_rules[ruleComment]() {
							goto l120
						}
					}
				l121:
					goto l119
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
				add(ruleSpacing, position118)
			}
			return true
		},
		/* 24 Space <- <(' ' / '\t' / '\n' / '\r')> */
		func() bool {
			position123, tokenIndex123 := position, tokenIndex
			{
				position124 := position
				{
					position125, tokenIndex125 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l126
					}
					position++
					goto l125
				l126:
					position, tokenIndex = position125, tokenIndex125
					if buffer[position] != rune('\t') {
						goto l127
					}
					position++
					goto l125
				l127:
					position, tokenIndex = position125, tokenIndex125
					if buffer[position] != rune('\n') {
						goto l128
					}
					position++
					goto l125
				l128:
					position, tokenIndex = position125, tokenIndex125
					if buffer[position] != rune('\r') {
						goto l123
					}
					position++
				}
			l125:
				add(ruleSpace, position124)
			}
			return true
		l123:
			position, tokenIndex = position123, tokenIndex123
			return false
		},
		/* 25 Comment <- <(('#' (!EndOfLine .)* EndOfLine) / ('/' '/' (!EndOfLine .)* EndOfLine))> */
		func() bool {
			position129, tokenIndex129 := position, tokenIndex
			{
				position130 := position
				{
					position131, tokenIndex131 := position, tokenIndex
					if buffer[position] != rune('#') {
						goto l132
					}
					position++
				l133:
					{
						position134, tokenIndex134 := position, tokenIndex
						{
							position135, tokenIndex135 := position, tokenIndex
							if !_rules[ruleEndOfLine]() {
								goto l135
							}
							goto l134
						l135:
							position, tokenIndex = position135, tokenIndex135
						}
						if !matchDot() {
							goto l134
						}
						goto l133
					l134:
						position, tokenIndex = position134, tokenIndex134
					}
					if !_rules[ruleEndOfLine]() {
						goto l132
					}
					goto l131
				l132:
					position, tokenIndex = position131, tokenIndex131
					if buffer[position] != rune('/') {
						goto l129
					}
					position++
					if buffer[position] != rune('/') {
						goto l129
					}
					position++
				l136:
					{
						position137, tokenIndex137 := position, tokenIndex
						{
							position138, tokenIndex138 := position, tokenIndex
							if !_rules[ruleEndOfLine]() {
								goto l138
							}
							goto l137
						l138:
							position, tokenIndex = position138, tokenIndex138
						}
						if !matchDot() {
							goto l137
						}
						goto l136
					l137:
						position, tokenIndex = position137, tokenIndex137
					}
					if !_rules[ruleEndOfLine]() {
						goto l129
					}
				}
			l131:
				add(ruleComment, position130)
			}
			return true
		l129:
			position, tokenIndex = position129, tokenIndex129
			return false
		},
		/* 26 EndOfLine <- <(('\r' '\n') / '\n' / '\r')> */
		func() bool {
			position139, tokenIndex139 := position, tokenIndex
			{
				position140 := position
				{
					position141, tokenIndex141 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l142
					}
					position++
					if buffer[position] != rune('\n') {
						goto l142
					}
					position++
					goto l141
				l142:
					position, tokenIndex = position141, tokenIndex141
					if buffer[position] != rune('\n') {
						goto l143
					}
					position++
					goto l141
				l143:
					position, tokenIndex = position141, tokenIndex141
					if buffer[position] != rune('\r') {
						goto l139
					}
					position++
				}
			l141:
				add(ruleEndOfLine, position140)
			}
			return true
		l139:
			position, tokenIndex = position139, tokenIndex139
			return false
		},
	}
	p.rules = _rules
	return nil
}
