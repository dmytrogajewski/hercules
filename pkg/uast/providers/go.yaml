language: go
extensions: [".go"]
parser: tree-sitter
mapping:
  source_file:
    type: File
    skip_if_empty: true
  function_declaration:
    type: Function
    roles: [Function, Declaration]
    props:
      name: descendant:identifier
    token: descendant:identifier
  method_declaration:
    type: Method
    roles: [Method, Declaration]
    props:
      name: Name
      receiver: Receiver
  import_declaration:
    type: Import
  import_spec_list:
    type: ImportList
  import_spec:
    type: ImportSpec
  var_declaration:
    type: Variable
  var_spec:
    type: VariableSpec
  expression_list:
    type: ExpressionList
  comment:
    type: Comment
  identifier:
    type: Identifier
    roles: [Name]
  parameter_list:
    type: ParameterList
  parameter_declaration:
    type: Parameter
    roles: [Parameter, Declaration]
  block:
    type: Block
  return_statement:
    type: Return
    roles: [Return]
  call_expression:
    type: Call
    roles: [Call]
  selector_expression:
    type: Selector
  field_identifier:
    type: Field
    roles: [Name]
  argument_list:
    type: ArgumentList
  interpreted_string_literal:
    type: Literal
    roles: [Literal]
    children:
      - interpreted_string_literal_content: {}
  interpreted_string_literal_content:
    type: Literal
    roles: [Literal]
    token: text
  binary_expression:
    type: Synthetic
    children:
      - identifier: {}
      - identifier: {}
  pointer_type:
    type: PointerType
  qualified_type:
    type: QualifiedType
  slice_type:
    type: SliceType
  composite_literal:
    type: CompositeLiteral
  literal_value:
    type: LiteralValue
  keyed_element:
    type: KeyValue
    roles: [Key, Value]
  literal_element:
    type: Literal
    roles: [Literal]
  func_literal:
    type: Lambda
    roles: [Lambda]
  expression_statement:
    type: ExpressionStatement
  package_clause:
    type: Package
    roles: [Package, Declaration]
  package_identifier:
    type: Identifier
    roles: [Name] 