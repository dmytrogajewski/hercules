language: haskell
extensions: [".hs"]
parser: tree-sitter
mapping:
  haskell:
    type: File
    skip_if_empty: true
  function:
    type: Function
    roles: [Function, Declaration]
    props:
      name: Name
  class:
    type: Class
    roles: [Class, Declaration]
    props:
      name: Name
  data:
    type: Struct
    roles: [Struct, Declaration]
    props:
      name: Name
  newtype:
    type: Struct
    roles: [Struct, Declaration]
    props:
      name: Name
  type:
    type: Type
    roles: [Type, Declaration]
    props:
      name: Name
  import:
    type: Import
    roles: [Import]
  identifier:
    type: Identifier
    roles: [Name]
  parameter:
    type: Parameter
    roles: [Parameter, Declaration]
  parameter_list:
    type: ParameterList
  block:
    type: Block
  return:
    type: Return
    roles: [Return]
  call:
    type: Call
    roles: [Call]
  argument_list:
    type: ArgumentList
  string:
    type: Literal
    roles: [Literal]
  integer:
    type: Literal
    roles: [Literal]
  float:
    type: Literal
    roles: [Literal]
  comment:
    type: Comment
    roles: [Comment]
  if:
    type: If
  for:
    type: For
    roles: [Loop]
  while:
    type: While
    roles: [Loop]
  assignment:
    type: Assignment
    roles: [Assignment]
  array:
    type: List
  map:
    type: Dict
  lambda:
    type: Lambda
    roles: [Lambda] 