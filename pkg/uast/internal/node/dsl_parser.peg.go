package node

// Code generated by /home/dmytrogajewski/go/bin/peg -switch -inline dsl_parser.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	rulePipeline
	ruleExpr
	ruleFilter
	ruleRFilter
	ruleMap
	ruleRMap
	ruleReduce
	ruleReducerName
	rulePredicate
	ruleOrExpr
	ruleAndExpr
	ruleNotExpr
	rulePrimaryExpr
	ruleParenExpr
	ruleComparison
	ruleCompOp
	ruleMembership
	ruleFieldAccess
	ruleValue
	ruleLiteral
	ruleString
	ruleNumber
	ruleBoolean
	ruleIdentifier
	ruleSpacing
	ruleSpace
	ruleComment
	ruleEndOfLine
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"Pipeline",
	"Expr",
	"Filter",
	"RFilter",
	"Map",
	"RMap",
	"Reduce",
	"ReducerName",
	"Predicate",
	"OrExpr",
	"AndExpr",
	"NotExpr",
	"PrimaryExpr",
	"ParenExpr",
	"Comparison",
	"CompOp",
	"Membership",
	"FieldAccess",
	"Value",
	"Literal",
	"String",
	"Number",
	"Boolean",
	"Identifier",
	"Spacing",
	"Space",
	"Comment",
	"EndOfLine",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type QueryDSL struct {
	Buffer string
	buffer []rune
	rules  [30]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *QueryDSL) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *QueryDSL) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *QueryDSL
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *QueryDSL) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *QueryDSL) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *QueryDSL) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*QueryDSL) error {
	return func(p *QueryDSL) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*QueryDSL) error {
	return func(p *QueryDSL) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *QueryDSL) Init(options ...func(*QueryDSL) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(Spacing Pipeline !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleSpacing]() {
					goto l0
				}
				{
					position2 := position
					if !_rules[ruleExpr]() {
						goto l0
					}
				l3:
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[ruleSpacing]() {
							goto l4
						}
						if buffer[position] != rune('|') {
							goto l4
						}
						position++
						if buffer[position] != rune('>') {
							goto l4
						}
						position++
						if !_rules[ruleSpacing]() {
							goto l4
						}
						if !_rules[ruleExpr]() {
							goto l4
						}
						goto l3
					l4:
						position, tokenIndex = position4, tokenIndex4
					}
					add(rulePipeline, position2)
				}
				{
					position5, tokenIndex5 := position, tokenIndex
					if !matchDot() {
						goto l5
					}
					goto l0
				l5:
					position, tokenIndex = position5, tokenIndex5
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Pipeline <- <(Expr (Spacing '|' '>' Spacing Expr)*)> */
		nil,
		/* 2 Expr <- <(RFilter / RMap / Filter / ((&('r') Reduce) | (&('m') Map) | (&('!' | '"' | '\'' | '(' | '.' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'f' | 't') OrExpr)))> */
		func() bool {
			position7, tokenIndex7 := position, tokenIndex
			{
				position8 := position
				{
					position9, tokenIndex9 := position, tokenIndex
					{
						position11 := position
						if buffer[position] != rune('r') {
							goto l10
						}
						position++
						if buffer[position] != rune('f') {
							goto l10
						}
						position++
						if buffer[position] != rune('i') {
							goto l10
						}
						position++
						if buffer[position] != rune('l') {
							goto l10
						}
						position++
						if buffer[position] != rune('t') {
							goto l10
						}
						position++
						if buffer[position] != rune('e') {
							goto l10
						}
						position++
						if buffer[position] != rune('r') {
							goto l10
						}
						position++
						{
							position12, tokenIndex12 := position, tokenIndex
							if !_rules[ruleSpacing]() {
								goto l13
							}
							if buffer[position] != rune('(') {
								goto l13
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l13
							}
							if !_rules[rulePredicate]() {
								goto l13
							}
							if !_rules[ruleSpacing]() {
								goto l13
							}
							if buffer[position] != rune(')') {
								goto l13
							}
							position++
							goto l12
						l13:
							position, tokenIndex = position12, tokenIndex12
							if !_rules[ruleSpacing]() {
								goto l10
							}
							if !_rules[rulePredicate]() {
								goto l10
							}
						}
					l12:
						add(ruleRFilter, position11)
					}
					goto l9
				l10:
					position, tokenIndex = position9, tokenIndex9
					{
						position15 := position
						if buffer[position] != rune('r') {
							goto l14
						}
						position++
						if buffer[position] != rune('m') {
							goto l14
						}
						position++
						if buffer[position] != rune('a') {
							goto l14
						}
						position++
						if buffer[position] != rune('p') {
							goto l14
						}
						position++
						{
							position16, tokenIndex16 := position, tokenIndex
							if !_rules[ruleSpacing]() {
								goto l17
							}
							if buffer[position] != rune('(') {
								goto l17
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l17
							}
							if !_rules[ruleOrExpr]() {
								goto l17
							}
							if !_rules[ruleSpacing]() {
								goto l17
							}
							if buffer[position] != rune(')') {
								goto l17
							}
							position++
							goto l16
						l17:
							position, tokenIndex = position16, tokenIndex16
							if !_rules[ruleSpacing]() {
								goto l14
							}
							if !_rules[ruleOrExpr]() {
								goto l14
							}
						}
					l16:
						add(ruleRMap, position15)
					}
					goto l9
				l14:
					position, tokenIndex = position9, tokenIndex9
					{
						position19 := position
						if buffer[position] != rune('f') {
							goto l18
						}
						position++
						if buffer[position] != rune('i') {
							goto l18
						}
						position++
						if buffer[position] != rune('l') {
							goto l18
						}
						position++
						if buffer[position] != rune('t') {
							goto l18
						}
						position++
						if buffer[position] != rune('e') {
							goto l18
						}
						position++
						if buffer[position] != rune('r') {
							goto l18
						}
						position++
						{
							position20, tokenIndex20 := position, tokenIndex
							if !_rules[ruleSpacing]() {
								goto l21
							}
							if buffer[position] != rune('(') {
								goto l21
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l21
							}
							if !_rules[rulePredicate]() {
								goto l21
							}
							if !_rules[ruleSpacing]() {
								goto l21
							}
							if buffer[position] != rune(')') {
								goto l21
							}
							position++
							goto l20
						l21:
							position, tokenIndex = position20, tokenIndex20
							if !_rules[ruleSpacing]() {
								goto l18
							}
							if !_rules[rulePredicate]() {
								goto l18
							}
						}
					l20:
						add(ruleFilter, position19)
					}
					goto l9
				l18:
					position, tokenIndex = position9, tokenIndex9
					{
						switch buffer[position] {
						case 'r':
							{
								position23 := position
								if buffer[position] != rune('r') {
									goto l7
								}
								position++
								if buffer[position] != rune('e') {
									goto l7
								}
								position++
								if buffer[position] != rune('d') {
									goto l7
								}
								position++
								if buffer[position] != rune('u') {
									goto l7
								}
								position++
								if buffer[position] != rune('c') {
									goto l7
								}
								position++
								if buffer[position] != rune('e') {
									goto l7
								}
								position++
								{
									position24, tokenIndex24 := position, tokenIndex
									if !_rules[ruleSpacing]() {
										goto l25
									}
									if buffer[position] != rune('(') {
										goto l25
									}
									position++
									if !_rules[ruleSpacing]() {
										goto l25
									}
									if !_rules[ruleReducerName]() {
										goto l25
									}
									if !_rules[ruleSpacing]() {
										goto l25
									}
									if buffer[position] != rune(')') {
										goto l25
									}
									position++
									goto l24
								l25:
									position, tokenIndex = position24, tokenIndex24
									if !_rules[ruleSpacing]() {
										goto l7
									}
									if !_rules[ruleReducerName]() {
										goto l7
									}
								}
							l24:
								add(ruleReduce, position23)
							}
						case 'm':
							{
								position26 := position
								if buffer[position] != rune('m') {
									goto l7
								}
								position++
								if buffer[position] != rune('a') {
									goto l7
								}
								position++
								if buffer[position] != rune('p') {
									goto l7
								}
								position++
								{
									position27, tokenIndex27 := position, tokenIndex
									if !_rules[ruleSpacing]() {
										goto l28
									}
									if buffer[position] != rune('(') {
										goto l28
									}
									position++
									if !_rules[ruleSpacing]() {
										goto l28
									}
									if !_rules[ruleOrExpr]() {
										goto l28
									}
									if !_rules[ruleSpacing]() {
										goto l28
									}
									if buffer[position] != rune(')') {
										goto l28
									}
									position++
									goto l27
								l28:
									position, tokenIndex = position27, tokenIndex27
									if !_rules[ruleSpacing]() {
										goto l7
									}
									if !_rules[ruleOrExpr]() {
										goto l7
									}
								}
							l27:
								add(ruleMap, position26)
							}
						default:
							if !_rules[ruleOrExpr]() {
								goto l7
							}
						}
					}

				}
			l9:
				add(ruleExpr, position8)
			}
			return true
		l7:
			position, tokenIndex = position7, tokenIndex7
			return false
		},
		/* 3 Filter <- <('f' 'i' 'l' 't' 'e' 'r' ((Spacing '(' Spacing Predicate Spacing ')') / (Spacing Predicate)))> */
		nil,
		/* 4 RFilter <- <('r' 'f' 'i' 'l' 't' 'e' 'r' ((Spacing '(' Spacing Predicate Spacing ')') / (Spacing Predicate)))> */
		nil,
		/* 5 Map <- <('m' 'a' 'p' ((Spacing '(' Spacing OrExpr Spacing ')') / (Spacing OrExpr)))> */
		nil,
		/* 6 RMap <- <('r' 'm' 'a' 'p' ((Spacing '(' Spacing OrExpr Spacing ')') / (Spacing OrExpr)))> */
		nil,
		/* 7 Reduce <- <('r' 'e' 'd' 'u' 'c' 'e' ((Spacing '(' Spacing ReducerName Spacing ')') / (Spacing ReducerName)))> */
		nil,
		/* 8 ReducerName <- <(((&('_') '_') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z])) ((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))*)> */
		func() bool {
			position34, tokenIndex34 := position, tokenIndex
			{
				position35 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l34
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l34
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l34
						}
						position++
					}
				}

			l37:
				{
					position38, tokenIndex38 := position, tokenIndex
					{
						switch buffer[position] {
						case '_':
							if buffer[position] != rune('_') {
								goto l38
							}
							position++
						case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l38
							}
							position++
						case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l38
							}
							position++
						default:
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l38
							}
							position++
						}
					}

					goto l37
				l38:
					position, tokenIndex = position38, tokenIndex38
				}
				add(ruleReducerName, position35)
			}
			return true
		l34:
			position, tokenIndex = position34, tokenIndex34
			return false
		},
		/* 9 Predicate <- <OrExpr> */
		func() bool {
			position40, tokenIndex40 := position, tokenIndex
			{
				position41 := position
				if !_rules[ruleOrExpr]() {
					goto l40
				}
				add(rulePredicate, position41)
			}
			return true
		l40:
			position, tokenIndex = position40, tokenIndex40
			return false
		},
		/* 10 OrExpr <- <(AndExpr (Spacing '|' '|' Spacing AndExpr)*)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				if !_rules[ruleAndExpr]() {
					goto l42
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l45
					}
					if buffer[position] != rune('|') {
						goto l45
					}
					position++
					if buffer[position] != rune('|') {
						goto l45
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l45
					}
					if !_rules[ruleAndExpr]() {
						goto l45
					}
					goto l44
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
				add(ruleOrExpr, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 11 AndExpr <- <(NotExpr (Spacing '&' '&' Spacing NotExpr)*)> */
		func() bool {
			position46, tokenIndex46 := position, tokenIndex
			{
				position47 := position
				if !_rules[ruleNotExpr]() {
					goto l46
				}
			l48:
				{
					position49, tokenIndex49 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l49
					}
					if buffer[position] != rune('&') {
						goto l49
					}
					position++
					if buffer[position] != rune('&') {
						goto l49
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l49
					}
					if !_rules[ruleNotExpr]() {
						goto l49
					}
					goto l48
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
				add(ruleAndExpr, position47)
			}
			return true
		l46:
			position, tokenIndex = position46, tokenIndex46
			return false
		},
		/* 12 NotExpr <- <(('!' Spacing PrimaryExpr) / PrimaryExpr)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				{
					position52, tokenIndex52 := position, tokenIndex
					if buffer[position] != rune('!') {
						goto l53
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l53
					}
					if !_rules[rulePrimaryExpr]() {
						goto l53
					}
					goto l52
				l53:
					position, tokenIndex = position52, tokenIndex52
					if !_rules[rulePrimaryExpr]() {
						goto l50
					}
				}
			l52:
				add(ruleNotExpr, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 13 PrimaryExpr <- <(Membership / Comparison / ((&('.') FieldAccess) | (&('(') ParenExpr) | (&('"' | '\'' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'f' | 't') Literal)))> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				{
					position56, tokenIndex56 := position, tokenIndex
					{
						position58 := position
						if !_rules[ruleFieldAccess]() {
							goto l57
						}
						if !_rules[ruleSpacing]() {
							goto l57
						}
						if buffer[position] != rune('h') {
							goto l57
						}
						position++
						if buffer[position] != rune('a') {
							goto l57
						}
						position++
						if buffer[position] != rune('s') {
							goto l57
						}
						position++
						if !_rules[ruleSpacing]() {
							goto l57
						}
						if !_rules[ruleValue]() {
							goto l57
						}
						add(ruleMembership, position58)
					}
					goto l56
				l57:
					position, tokenIndex = position56, tokenIndex56
					{
						position60 := position
						if !_rules[ruleValue]() {
							goto l59
						}
						if !_rules[ruleSpacing]() {
							goto l59
						}
						{
							position61 := position
							{
								position62, tokenIndex62 := position, tokenIndex
								if buffer[position] != rune('>') {
									goto l63
								}
								position++
								if buffer[position] != rune('=') {
									goto l63
								}
								position++
								goto l62
							l63:
								position, tokenIndex = position62, tokenIndex62
								if buffer[position] != rune('<') {
									goto l64
								}
								position++
								if buffer[position] != rune('=') {
									goto l64
								}
								position++
								goto l62
							l64:
								position, tokenIndex = position62, tokenIndex62
								{
									switch buffer[position] {
									case '<':
										if buffer[position] != rune('<') {
											goto l59
										}
										position++
									case '>':
										if buffer[position] != rune('>') {
											goto l59
										}
										position++
									case '!':
										if buffer[position] != rune('!') {
											goto l59
										}
										position++
										if buffer[position] != rune('=') {
											goto l59
										}
										position++
									default:
										if buffer[position] != rune('=') {
											goto l59
										}
										position++
										if buffer[position] != rune('=') {
											goto l59
										}
										position++
									}
								}

							}
						l62:
							add(ruleCompOp, position61)
						}
						if !_rules[ruleSpacing]() {
							goto l59
						}
						if !_rules[ruleValue]() {
							goto l59
						}
						add(ruleComparison, position60)
					}
					goto l56
				l59:
					position, tokenIndex = position56, tokenIndex56
					{
						switch buffer[position] {
						case '.':
							if !_rules[ruleFieldAccess]() {
								goto l54
							}
						case '(':
							{
								position67 := position
								if buffer[position] != rune('(') {
									goto l54
								}
								position++
								if !_rules[ruleSpacing]() {
									goto l54
								}
								if !_rules[ruleOrExpr]() {
									goto l54
								}
								if !_rules[ruleSpacing]() {
									goto l54
								}
								if buffer[position] != rune(')') {
									goto l54
								}
								position++
								add(ruleParenExpr, position67)
							}
						default:
							if !_rules[ruleLiteral]() {
								goto l54
							}
						}
					}

				}
			l56:
				add(rulePrimaryExpr, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 14 ParenExpr <- <('(' Spacing OrExpr Spacing ')')> */
		nil,
		/* 15 Comparison <- <(Value Spacing CompOp Spacing Value)> */
		nil,
		/* 16 CompOp <- <(('>' '=') / ('<' '=') / ((&('<') '<') | (&('>') '>') | (&('!') ('!' '=')) | (&('=') ('=' '='))))> */
		nil,
		/* 17 Membership <- <(FieldAccess Spacing ('h' 'a' 's') Spacing Value)> */
		nil,
		/* 18 FieldAccess <- <('.' Identifier ('.' Identifier)*)> */
		func() bool {
			position72, tokenIndex72 := position, tokenIndex
			{
				position73 := position
				if buffer[position] != rune('.') {
					goto l72
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l72
				}
			l74:
				{
					position75, tokenIndex75 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l75
					}
					position++
					if !_rules[ruleIdentifier]() {
						goto l75
					}
					goto l74
				l75:
					position, tokenIndex = position75, tokenIndex75
				}
				add(ruleFieldAccess, position73)
			}
			return true
		l72:
			position, tokenIndex = position72, tokenIndex72
			return false
		},
		/* 19 Value <- <(FieldAccess / Literal)> */
		func() bool {
			position76, tokenIndex76 := position, tokenIndex
			{
				position77 := position
				{
					position78, tokenIndex78 := position, tokenIndex
					if !_rules[ruleFieldAccess]() {
						goto l79
					}
					goto l78
				l79:
					position, tokenIndex = position78, tokenIndex78
					if !_rules[ruleLiteral]() {
						goto l76
					}
				}
			l78:
				add(ruleValue, position77)
			}
			return true
		l76:
			position, tokenIndex = position76, tokenIndex76
			return false
		},
		/* 20 Literal <- <((&('f' | 't') Boolean) | (&('"' | '\'') String) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') Number))> */
		func() bool {
			position80, tokenIndex80 := position, tokenIndex
			{
				position81 := position
				{
					switch buffer[position] {
					case 'f', 't':
						{
							position83 := position
							{
								position84, tokenIndex84 := position, tokenIndex
								if buffer[position] != rune('t') {
									goto l85
								}
								position++
								if buffer[position] != rune('r') {
									goto l85
								}
								position++
								if buffer[position] != rune('u') {
									goto l85
								}
								position++
								if buffer[position] != rune('e') {
									goto l85
								}
								position++
								goto l84
							l85:
								position, tokenIndex = position84, tokenIndex84
								if buffer[position] != rune('f') {
									goto l80
								}
								position++
								if buffer[position] != rune('a') {
									goto l80
								}
								position++
								if buffer[position] != rune('l') {
									goto l80
								}
								position++
								if buffer[position] != rune('s') {
									goto l80
								}
								position++
								if buffer[position] != rune('e') {
									goto l80
								}
								position++
							}
						l84:
							add(ruleBoolean, position83)
						}
					case '"', '\'':
						{
							position86 := position
							{
								position87, tokenIndex87 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l88
								}
								position++
							l89:
								{
									position90, tokenIndex90 := position, tokenIndex
									{
										position91, tokenIndex91 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l91
										}
										position++
										goto l90
									l91:
										position, tokenIndex = position91, tokenIndex91
									}
									if !matchDot() {
										goto l90
									}
									goto l89
								l90:
									position, tokenIndex = position90, tokenIndex90
								}
								if buffer[position] != rune('"') {
									goto l88
								}
								position++
								goto l87
							l88:
								position, tokenIndex = position87, tokenIndex87
								if buffer[position] != rune('\'') {
									goto l80
								}
								position++
							l92:
								{
									position93, tokenIndex93 := position, tokenIndex
									{
										position94, tokenIndex94 := position, tokenIndex
										if buffer[position] != rune('\'') {
											goto l94
										}
										position++
										goto l93
									l94:
										position, tokenIndex = position94, tokenIndex94
									}
									if !matchDot() {
										goto l93
									}
									goto l92
								l93:
									position, tokenIndex = position93, tokenIndex93
								}
								if buffer[position] != rune('\'') {
									goto l80
								}
								position++
							}
						l87:
							add(ruleString, position86)
						}
					default:
						{
							position95 := position
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l80
							}
							position++
						l96:
							{
								position97, tokenIndex97 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l97
								}
								position++
								goto l96
							l97:
								position, tokenIndex = position97, tokenIndex97
							}
							{
								position98, tokenIndex98 := position, tokenIndex
								if buffer[position] != rune('.') {
									goto l98
								}
								position++
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l98
								}
								position++
							l100:
								{
									position101, tokenIndex101 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l101
									}
									position++
									goto l100
								l101:
									position, tokenIndex = position101, tokenIndex101
								}
								goto l99
							l98:
								position, tokenIndex = position98, tokenIndex98
							}
						l99:
							add(ruleNumber, position95)
						}
					}
				}

				add(ruleLiteral, position81)
			}
			return true
		l80:
			position, tokenIndex = position80, tokenIndex80
			return false
		},
		/* 21 String <- <(('"' (!'"' .)* '"') / ('\'' (!'\'' .)* '\''))> */
		nil,
		/* 22 Number <- <([0-9]+ ('.' [0-9]+)?)> */
		nil,
		/* 23 Boolean <- <(('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e'))> */
		nil,
		/* 24 Identifier <- <(((&('_') '_') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z])) ((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))*)> */
		func() bool {
			position105, tokenIndex105 := position, tokenIndex
			{
				position106 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l105
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l105
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l105
						}
						position++
					}
				}

			l108:
				{
					position109, tokenIndex109 := position, tokenIndex
					{
						switch buffer[position] {
						case '_':
							if buffer[position] != rune('_') {
								goto l109
							}
							position++
						case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l109
							}
							position++
						case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l109
							}
							position++
						default:
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l109
							}
							position++
						}
					}

					goto l108
				l109:
					position, tokenIndex = position109, tokenIndex109
				}
				add(ruleIdentifier, position106)
			}
			return true
		l105:
			position, tokenIndex = position105, tokenIndex105
			return false
		},
		/* 25 Spacing <- <(Space / Comment)*> */
		func() bool {
			{
				position112 := position
			l113:
				{
					position114, tokenIndex114 := position, tokenIndex
					{
						position115, tokenIndex115 := position, tokenIndex
						{
							position117 := position
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l116
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l116
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l116
									}
									position++
								default:
									if buffer[position] != rune(' ') {
										goto l116
									}
									position++
								}
							}

							add(ruleSpace, position117)
						}
						goto l115
					l116:
						position, tokenIndex = position115, tokenIndex115
						{
							position119 := position
							{
								position120, tokenIndex120 := position, tokenIndex
								if buffer[position] != rune('#') {
									goto l121
								}
								position++
							l122:
								{
									position123, tokenIndex123 := position, tokenIndex
									{
										position124, tokenIndex124 := position, tokenIndex
										if !_rules[ruleEndOfLine]() {
											goto l124
										}
										goto l123
									l124:
										position, tokenIndex = position124, tokenIndex124
									}
									if !matchDot() {
										goto l123
									}
									goto l122
								l123:
									position, tokenIndex = position123, tokenIndex123
								}
								if !_rules[ruleEndOfLine]() {
									goto l121
								}
								goto l120
							l121:
								position, tokenIndex = position120, tokenIndex120
								if buffer[position] != rune('/') {
									goto l114
								}
								position++
								if buffer[position] != rune('/') {
									goto l114
								}
								position++
							l125:
								{
									position126, tokenIndex126 := position, tokenIndex
									{
										position127, tokenIndex127 := position, tokenIndex
										if !_rules[ruleEndOfLine]() {
											goto l127
										}
										goto l126
									l127:
										position, tokenIndex = position127, tokenIndex127
									}
									if !matchDot() {
										goto l126
									}
									goto l125
								l126:
									position, tokenIndex = position126, tokenIndex126
								}
								if !_rules[ruleEndOfLine]() {
									goto l114
								}
							}
						l120:
							add(ruleComment, position119)
						}
					}
				l115:
					goto l113
				l114:
					position, tokenIndex = position114, tokenIndex114
				}
				add(ruleSpacing, position112)
			}
			return true
		},
		/* 26 Space <- <((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' '))> */
		nil,
		/* 27 Comment <- <(('#' (!EndOfLine .)* EndOfLine) / ('/' '/' (!EndOfLine .)* EndOfLine))> */
		nil,
		/* 28 EndOfLine <- <(('\r' '\n') / '\n' / '\r')> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				{
					position132, tokenIndex132 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l133
					}
					position++
					if buffer[position] != rune('\n') {
						goto l133
					}
					position++
					goto l132
				l133:
					position, tokenIndex = position132, tokenIndex132
					if buffer[position] != rune('\n') {
						goto l134
					}
					position++
					goto l132
				l134:
					position, tokenIndex = position132, tokenIndex132
					if buffer[position] != rune('\r') {
						goto l130
					}
					position++
				}
			l132:
				add(ruleEndOfLine, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
	}
	p.rules = _rules
	return nil
}
