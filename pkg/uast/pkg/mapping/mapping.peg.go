package mapping

// Code generated by peg -inline mapping.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleStart
	ruleSpacing
	ruleSpace
	ruleComment
	ruleRuleList
	ruleRule
	ruleIdentifier
	rulePattern
	ruleNodeType
	rulePatternElements
	rulePatternElement
	ruleField
	ruleFieldName
	ruleFieldValue
	ruleCapturedElement
	ruleCapture
	ruleUASTSpec
	ruleUASTFields
	ruleUASTField
	ruleUASTFieldValue
	ruleMultipleCaptures
	ruleMultipleStrings
	ruleString
	ruleCondition
	ruleConditionList
	ruleOperator
	ruleInheritanceComment
	ruleErrorRecovery
	ruleUASTFieldName
)

var rul3s = [...]string{
	"Unknown",
	"Start",
	"Spacing",
	"Space",
	"Comment",
	"RuleList",
	"Rule",
	"Identifier",
	"Pattern",
	"NodeType",
	"PatternElements",
	"PatternElement",
	"Field",
	"FieldName",
	"FieldValue",
	"CapturedElement",
	"Capture",
	"UASTSpec",
	"UASTFields",
	"UASTField",
	"UASTFieldValue",
	"MultipleCaptures",
	"MultipleStrings",
	"String",
	"Condition",
	"ConditionList",
	"Operator",
	"InheritanceComment",
	"ErrorRecovery",
	"UASTFieldName",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type MappingDSL struct {
	Buffer string
	buffer []rune
	rules  [30]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *MappingDSL) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *MappingDSL) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *MappingDSL
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *MappingDSL) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *MappingDSL) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *MappingDSL) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*MappingDSL) error {
	return func(p *MappingDSL) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*MappingDSL) error {
	return func(p *MappingDSL) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *MappingDSL) Init(options ...func(*MappingDSL) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Start <- <(Spacing RuleList Spacing !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleSpacing]() {
					goto l0
				}
				{
					position2 := position
					if !_rules[ruleRule]() {
						goto l0
					}
				l3:
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[ruleSpacing]() {
							goto l4
						}
						if !_rules[ruleRule]() {
							goto l4
						}
						goto l3
					l4:
						position, tokenIndex = position4, tokenIndex4
					}
					add(ruleRuleList, position2)
				}
				if !_rules[ruleSpacing]() {
					goto l0
				}
				{
					position5, tokenIndex5 := position, tokenIndex
					if !matchDot() {
						goto l5
					}
					goto l0
				l5:
					position, tokenIndex = position5, tokenIndex5
				}
				add(ruleStart, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Spacing <- <Space*> */
		func() bool {
			{
				position7 := position
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					{
						position10 := position
						{
							position13, tokenIndex13 := position, tokenIndex
							if buffer[position] != rune(' ') {
								goto l14
							}
							position++
							goto l13
						l14:
							position, tokenIndex = position13, tokenIndex13
							if buffer[position] != rune('\t') {
								goto l15
							}
							position++
							goto l13
						l15:
							position, tokenIndex = position13, tokenIndex13
							if buffer[position] != rune('\r') {
								goto l16
							}
							position++
							goto l13
						l16:
							position, tokenIndex = position13, tokenIndex13
							if buffer[position] != rune('\n') {
								goto l9
							}
							position++
						}
					l13:
					l11:
						{
							position12, tokenIndex12 := position, tokenIndex
							{
								position17, tokenIndex17 := position, tokenIndex
								if buffer[position] != rune(' ') {
									goto l18
								}
								position++
								goto l17
							l18:
								position, tokenIndex = position17, tokenIndex17
								if buffer[position] != rune('\t') {
									goto l19
								}
								position++
								goto l17
							l19:
								position, tokenIndex = position17, tokenIndex17
								if buffer[position] != rune('\r') {
									goto l20
								}
								position++
								goto l17
							l20:
								position, tokenIndex = position17, tokenIndex17
								if buffer[position] != rune('\n') {
									goto l12
								}
								position++
							}
						l17:
							goto l11
						l12:
							position, tokenIndex = position12, tokenIndex12
						}
						add(ruleSpace, position10)
					}
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
				add(ruleSpacing, position7)
			}
			return true
		},
		/* 2 Space <- <(' ' / '\t' / '\r' / '\n')+> */
		nil,
		/* 3 Comment <- <('/' '/' (!('\r' / '\n') .)*)> */
		nil,
		/* 4 RuleList <- <(Rule (Spacing Rule)*)> */
		nil,
		/* 5 Rule <- <(Identifier Spacing ('<' '-') Spacing Pattern Spacing ('=' '>') Spacing UASTSpec (Spacing ConditionList)? (Spacing InheritanceComment)? (Spacing ConditionList)?)> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				if !_rules[ruleIdentifier]() {
					goto l24
				}
				if !_rules[ruleSpacing]() {
					goto l24
				}
				if buffer[position] != rune('<') {
					goto l24
				}
				position++
				if buffer[position] != rune('-') {
					goto l24
				}
				position++
				if !_rules[ruleSpacing]() {
					goto l24
				}
				{
					position26 := position
					if buffer[position] != rune('(') {
						goto l24
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l24
					}
					{
						position27 := position
						if !_rules[ruleIdentifier]() {
							goto l24
						}
						add(ruleNodeType, position27)
					}
					{
						position28 := position
					l29:
						{
							position30, tokenIndex30 := position, tokenIndex
							if !_rules[ruleSpacing]() {
								goto l30
							}
							{
								position31 := position
								{
									position32, tokenIndex32 := position, tokenIndex
									{
										position34 := position
										{
											position35 := position
											if !_rules[ruleIdentifier]() {
												goto l33
											}
											add(ruleFieldName, position35)
										}
										if buffer[position] != rune(':') {
											goto l33
										}
										position++
										if !_rules[ruleSpacing]() {
											goto l33
										}
										{
											position36 := position
											if buffer[position] != rune('(') {
												goto l33
											}
											position++
											if !_rules[ruleIdentifier]() {
												goto l33
											}
											if buffer[position] != rune(')') {
												goto l33
											}
											position++
											if !_rules[ruleSpacing]() {
												goto l33
											}
											{
												position37, tokenIndex37 := position, tokenIndex
												if !_rules[ruleCapture]() {
													goto l37
												}
												goto l38
											l37:
												position, tokenIndex = position37, tokenIndex37
											}
										l38:
											add(ruleFieldValue, position36)
										}
										add(ruleField, position34)
									}
									goto l32
								l33:
									position, tokenIndex = position32, tokenIndex32
									{
										position40 := position
										if buffer[position] != rune('(') {
											goto l39
										}
										position++
										if !_rules[ruleIdentifier]() {
											goto l39
										}
										if buffer[position] != rune(')') {
											goto l39
										}
										position++
										if !_rules[ruleSpacing]() {
											goto l39
										}
										if !_rules[ruleCapture]() {
											goto l39
										}
										add(ruleCapturedElement, position40)
									}
									goto l32
								l39:
									position, tokenIndex = position32, tokenIndex32
									if !_rules[ruleIdentifier]() {
										goto l30
									}
								}
							l32:
								add(rulePatternElement, position31)
							}
							goto l29
						l30:
							position, tokenIndex = position30, tokenIndex30
						}
						add(rulePatternElements, position28)
					}
					if !_rules[ruleSpacing]() {
						goto l24
					}
					if buffer[position] != rune(')') {
						goto l24
					}
					position++
					add(rulePattern, position26)
				}
				if !_rules[ruleSpacing]() {
					goto l24
				}
				if buffer[position] != rune('=') {
					goto l24
				}
				position++
				if buffer[position] != rune('>') {
					goto l24
				}
				position++
				if !_rules[ruleSpacing]() {
					goto l24
				}
				{
					position41 := position
					if buffer[position] != rune('u') {
						goto l24
					}
					position++
					if buffer[position] != rune('a') {
						goto l24
					}
					position++
					if buffer[position] != rune('s') {
						goto l24
					}
					position++
					if buffer[position] != rune('t') {
						goto l24
					}
					position++
					if buffer[position] != rune('(') {
						goto l24
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l24
					}
					{
						position42 := position
						if !_rules[ruleUASTField]() {
							goto l24
						}
					l43:
						{
							position44, tokenIndex44 := position, tokenIndex
							if !_rules[ruleSpacing]() {
								goto l44
							}
							if buffer[position] != rune(',') {
								goto l44
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l44
							}
							if !_rules[ruleUASTField]() {
								goto l44
							}
							goto l43
						l44:
							position, tokenIndex = position44, tokenIndex44
						}
						add(ruleUASTFields, position42)
					}
					if !_rules[ruleSpacing]() {
						goto l24
					}
					if buffer[position] != rune(')') {
						goto l24
					}
					position++
					add(ruleUASTSpec, position41)
				}
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l45
					}
					if !_rules[ruleConditionList]() {
						goto l45
					}
					goto l46
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
			l46:
				{
					position47, tokenIndex47 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l47
					}
					{
						position49 := position
						if buffer[position] != rune('#') {
							goto l47
						}
						position++
						if !_rules[ruleSpacing]() {
							goto l47
						}
						if buffer[position] != rune('E') {
							goto l47
						}
						position++
						if buffer[position] != rune('x') {
							goto l47
						}
						position++
						if buffer[position] != rune('t') {
							goto l47
						}
						position++
						if buffer[position] != rune('e') {
							goto l47
						}
						position++
						if buffer[position] != rune('n') {
							goto l47
						}
						position++
						if buffer[position] != rune('d') {
							goto l47
						}
						position++
						if buffer[position] != rune('s') {
							goto l47
						}
						position++
						if !_rules[ruleSpacing]() {
							goto l47
						}
						if !_rules[ruleIdentifier]() {
							goto l47
						}
						{
							position50, tokenIndex50 := position, tokenIndex
							if !_rules[ruleConditionList]() {
								goto l50
							}
							goto l51
						l50:
							position, tokenIndex = position50, tokenIndex50
						}
					l51:
						add(ruleInheritanceComment, position49)
					}
					goto l48
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
			l48:
				{
					position52, tokenIndex52 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l52
					}
					if !_rules[ruleConditionList]() {
						goto l52
					}
					goto l53
				l52:
					position, tokenIndex = position52, tokenIndex52
				}
			l53:
				add(ruleRule, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 6 Identifier <- <(([a-z] / [A-Z] / '_') ([a-z] / [A-Z] / [0-9] / '_')*)> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				{
					position56, tokenIndex56 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l57
					}
					position++
					goto l56
				l57:
					position, tokenIndex = position56, tokenIndex56
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l58
					}
					position++
					goto l56
				l58:
					position, tokenIndex = position56, tokenIndex56
					if buffer[position] != rune('_') {
						goto l54
					}
					position++
				}
			l56:
			l59:
				{
					position60, tokenIndex60 := position, tokenIndex
					{
						position61, tokenIndex61 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l62
						}
						position++
						goto l61
					l62:
						position, tokenIndex = position61, tokenIndex61
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l63
						}
						position++
						goto l61
					l63:
						position, tokenIndex = position61, tokenIndex61
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l64
						}
						position++
						goto l61
					l64:
						position, tokenIndex = position61, tokenIndex61
						if buffer[position] != rune('_') {
							goto l60
						}
						position++
					}
				l61:
					goto l59
				l60:
					position, tokenIndex = position60, tokenIndex60
				}
				add(ruleIdentifier, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 7 Pattern <- <('(' Spacing NodeType PatternElements Spacing ')')> */
		nil,
		/* 8 NodeType <- <Identifier> */
		nil,
		/* 9 PatternElements <- <(Spacing PatternElement)*> */
		nil,
		/* 10 PatternElement <- <(Field / CapturedElement / Identifier)> */
		nil,
		/* 11 Field <- <(FieldName ':' Spacing FieldValue)> */
		nil,
		/* 12 FieldName <- <Identifier> */
		nil,
		/* 13 FieldValue <- <('(' Identifier ')' Spacing Capture?)> */
		nil,
		/* 14 CapturedElement <- <('(' Identifier ')' Spacing Capture)> */
		nil,
		/* 15 Capture <- <('@' Identifier)> */
		func() bool {
			position73, tokenIndex73 := position, tokenIndex
			{
				position74 := position
				if buffer[position] != rune('@') {
					goto l73
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l73
				}
				add(ruleCapture, position74)
			}
			return true
		l73:
			position, tokenIndex = position73, tokenIndex73
			return false
		},
		/* 16 UASTSpec <- <('u' 'a' 's' 't' '(' Spacing UASTFields Spacing ')')> */
		nil,
		/* 17 UASTFields <- <(UASTField (Spacing ',' Spacing UASTField)*)> */
		nil,
		/* 18 UASTField <- <(UASTFieldName ':' Spacing UASTFieldValue)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				{
					position79 := position
					if !_rules[ruleIdentifier]() {
						goto l77
					}
					add(ruleUASTFieldName, position79)
				}
				if buffer[position] != rune(':') {
					goto l77
				}
				position++
				if !_rules[ruleSpacing]() {
					goto l77
				}
				{
					position80 := position
					{
						position81, tokenIndex81 := position, tokenIndex
						{
							position83 := position
							if !_rules[ruleString]() {
								goto l82
							}
						l84:
							{
								position85, tokenIndex85 := position, tokenIndex
								if buffer[position] != rune(',') {
									goto l85
								}
								position++
								if !_rules[ruleSpacing]() {
									goto l85
								}
								if !_rules[ruleString]() {
									goto l85
								}
								goto l84
							l85:
								position, tokenIndex = position85, tokenIndex85
							}
							add(ruleMultipleStrings, position83)
						}
						goto l81
					l82:
						position, tokenIndex = position81, tokenIndex81
						if !_rules[ruleString]() {
							goto l86
						}
						goto l81
					l86:
						position, tokenIndex = position81, tokenIndex81
						{
							position88 := position
							if !_rules[ruleCapture]() {
								goto l87
							}
						l89:
							{
								position90, tokenIndex90 := position, tokenIndex
								if !_rules[ruleSpacing]() {
									goto l90
								}
								if buffer[position] != rune(',') {
									goto l90
								}
								position++
								if !_rules[ruleSpacing]() {
									goto l90
								}
								if !_rules[ruleCapture]() {
									goto l90
								}
								goto l89
							l90:
								position, tokenIndex = position90, tokenIndex90
							}
							add(ruleMultipleCaptures, position88)
						}
						goto l81
					l87:
						position, tokenIndex = position81, tokenIndex81
						if !_rules[ruleCapture]() {
							goto l91
						}
						goto l81
					l91:
						position, tokenIndex = position81, tokenIndex81
						if !_rules[ruleIdentifier]() {
							goto l77
						}
					}
				l81:
					add(ruleUASTFieldValue, position80)
				}
				add(ruleUASTField, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 19 UASTFieldValue <- <(MultipleStrings / String / MultipleCaptures / Capture / Identifier)> */
		nil,
		/* 20 MultipleCaptures <- <(Capture (Spacing ',' Spacing Capture)*)> */
		nil,
		/* 21 MultipleStrings <- <(String (',' Spacing String)*)> */
		nil,
		/* 22 String <- <('"' (!'"' .)* '"')> */
		func() bool {
			position95, tokenIndex95 := position, tokenIndex
			{
				position96 := position
				if buffer[position] != rune('"') {
					goto l95
				}
				position++
			l97:
				{
					position98, tokenIndex98 := position, tokenIndex
					{
						position99, tokenIndex99 := position, tokenIndex
						if buffer[position] != rune('"') {
							goto l99
						}
						position++
						goto l98
					l99:
						position, tokenIndex = position99, tokenIndex99
					}
					if !matchDot() {
						goto l98
					}
					goto l97
				l98:
					position, tokenIndex = position98, tokenIndex98
				}
				if buffer[position] != rune('"') {
					goto l95
				}
				position++
				add(ruleString, position96)
			}
			return true
		l95:
			position, tokenIndex = position95, tokenIndex95
			return false
		},
		/* 23 Condition <- <(Identifier Spacing Operator Spacing String)> */
		func() bool {
			position100, tokenIndex100 := position, tokenIndex
			{
				position101 := position
				if !_rules[ruleIdentifier]() {
					goto l100
				}
				if !_rules[ruleSpacing]() {
					goto l100
				}
				{
					position102 := position
					{
						position103, tokenIndex103 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l104
						}
						position++
						if buffer[position] != rune('=') {
							goto l104
						}
						position++
						goto l103
					l104:
						position, tokenIndex = position103, tokenIndex103
						if buffer[position] != rune('!') {
							goto l100
						}
						position++
						if buffer[position] != rune('=') {
							goto l100
						}
						position++
					}
				l103:
					add(ruleOperator, position102)
				}
				if !_rules[ruleSpacing]() {
					goto l100
				}
				if !_rules[ruleString]() {
					goto l100
				}
				add(ruleCondition, position101)
			}
			return true
		l100:
			position, tokenIndex = position100, tokenIndex100
			return false
		},
		/* 24 ConditionList <- <('w' 'h' 'e' 'n' Spacing Condition (Spacing ('a' 'n' 'd') Spacing Condition)*)> */
		func() bool {
			position105, tokenIndex105 := position, tokenIndex
			{
				position106 := position
				if buffer[position] != rune('w') {
					goto l105
				}
				position++
				if buffer[position] != rune('h') {
					goto l105
				}
				position++
				if buffer[position] != rune('e') {
					goto l105
				}
				position++
				if buffer[position] != rune('n') {
					goto l105
				}
				position++
				if !_rules[ruleSpacing]() {
					goto l105
				}
				if !_rules[ruleCondition]() {
					goto l105
				}
			l107:
				{
					position108, tokenIndex108 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l108
					}
					if buffer[position] != rune('a') {
						goto l108
					}
					position++
					if buffer[position] != rune('n') {
						goto l108
					}
					position++
					if buffer[position] != rune('d') {
						goto l108
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l108
					}
					if !_rules[ruleCondition]() {
						goto l108
					}
					goto l107
				l108:
					position, tokenIndex = position108, tokenIndex108
				}
				add(ruleConditionList, position106)
			}
			return true
		l105:
			position, tokenIndex = position105, tokenIndex105
			return false
		},
		/* 25 Operator <- <(('=' '=') / ('!' '='))> */
		nil,
		/* 26 InheritanceComment <- <('#' Spacing ('E' 'x' 't' 'e' 'n' 'd' 's') Spacing Identifier ConditionList?)> */
		nil,
		/* 27 ErrorRecovery <- <(!('\r' / '\n') .)*> */
		nil,
		/* 28 UASTFieldName <- <Identifier> */
		nil,
	}
	p.rules = _rules
	return nil
}
