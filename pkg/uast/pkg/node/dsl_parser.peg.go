package node

// Code generated by /home/dmytrogajewski/go/bin/peg -switch -inline dsl_parser.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	rulePipeline
	ruleExpr
	ruleFilter
	ruleRFilter
	ruleMap
	ruleRMap
	ruleReduce
	ruleReducerName
	rulePredicate
	ruleOrExpr
	ruleAndExpr
	ruleNotExpr
	ruleNotOp
	rulePrimaryExpr
	ruleParenExpr
	ruleComparison
	ruleCompOp
	ruleMembership
	ruleFieldAccess
	ruleValue
	ruleLiteral
	ruleString
	ruleNumber
	ruleBoolean
	ruleIdentifier
	ruleSpacing
	ruleSpace
	ruleComment
	ruleEndOfLine
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"Pipeline",
	"Expr",
	"Filter",
	"RFilter",
	"Map",
	"RMap",
	"Reduce",
	"ReducerName",
	"Predicate",
	"OrExpr",
	"AndExpr",
	"NotExpr",
	"NotOp",
	"PrimaryExpr",
	"ParenExpr",
	"Comparison",
	"CompOp",
	"Membership",
	"FieldAccess",
	"Value",
	"Literal",
	"String",
	"Number",
	"Boolean",
	"Identifier",
	"Spacing",
	"Space",
	"Comment",
	"EndOfLine",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type QueryDSL struct {
	Buffer string
	buffer []rune
	rules  [31]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *QueryDSL) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *QueryDSL) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *QueryDSL
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *QueryDSL) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *QueryDSL) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *QueryDSL) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*QueryDSL) error {
	return func(p *QueryDSL) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*QueryDSL) error {
	return func(p *QueryDSL) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *QueryDSL) Init(options ...func(*QueryDSL) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(Spacing Pipeline !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleSpacing]() {
					goto l0
				}
				{
					position2 := position
					if !_rules[ruleExpr]() {
						goto l0
					}
				l3:
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[ruleSpacing]() {
							goto l4
						}
						if buffer[position] != rune('|') {
							goto l4
						}
						position++
						if buffer[position] != rune('>') {
							goto l4
						}
						position++
						if !_rules[ruleSpacing]() {
							goto l4
						}
						if !_rules[ruleExpr]() {
							goto l4
						}
						goto l3
					l4:
						position, tokenIndex = position4, tokenIndex4
					}
					add(rulePipeline, position2)
				}
				{
					position5, tokenIndex5 := position, tokenIndex
					if !matchDot() {
						goto l5
					}
					goto l0
				l5:
					position, tokenIndex = position5, tokenIndex5
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Pipeline <- <(Expr (Spacing '|' '>' Spacing Expr)*)> */
		nil,
		/* 2 Expr <- <(RFilter / RMap / Filter / ((&('r') Reduce) | (&('m') Map) | (&('!' | '"' | '\'' | '(' | '.' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'f' | 't') OrExpr)))> */
		func() bool {
			position7, tokenIndex7 := position, tokenIndex
			{
				position8 := position
				{
					position9, tokenIndex9 := position, tokenIndex
					{
						position11 := position
						if buffer[position] != rune('r') {
							goto l10
						}
						position++
						if buffer[position] != rune('f') {
							goto l10
						}
						position++
						if buffer[position] != rune('i') {
							goto l10
						}
						position++
						if buffer[position] != rune('l') {
							goto l10
						}
						position++
						if buffer[position] != rune('t') {
							goto l10
						}
						position++
						if buffer[position] != rune('e') {
							goto l10
						}
						position++
						if buffer[position] != rune('r') {
							goto l10
						}
						position++
						{
							position12, tokenIndex12 := position, tokenIndex
							if !_rules[ruleSpacing]() {
								goto l13
							}
							if buffer[position] != rune('(') {
								goto l13
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l13
							}
							if !_rules[rulePredicate]() {
								goto l13
							}
							if !_rules[ruleSpacing]() {
								goto l13
							}
							if buffer[position] != rune(')') {
								goto l13
							}
							position++
							goto l12
						l13:
							position, tokenIndex = position12, tokenIndex12
							if !_rules[ruleSpacing]() {
								goto l10
							}
							if !_rules[rulePredicate]() {
								goto l10
							}
						}
					l12:
						add(ruleRFilter, position11)
					}
					goto l9
				l10:
					position, tokenIndex = position9, tokenIndex9
					{
						position15 := position
						if buffer[position] != rune('r') {
							goto l14
						}
						position++
						if buffer[position] != rune('m') {
							goto l14
						}
						position++
						if buffer[position] != rune('a') {
							goto l14
						}
						position++
						if buffer[position] != rune('p') {
							goto l14
						}
						position++
						{
							position16, tokenIndex16 := position, tokenIndex
							if !_rules[ruleSpacing]() {
								goto l17
							}
							if buffer[position] != rune('(') {
								goto l17
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l17
							}
							if !_rules[ruleOrExpr]() {
								goto l17
							}
							if !_rules[ruleSpacing]() {
								goto l17
							}
							if buffer[position] != rune(')') {
								goto l17
							}
							position++
							goto l16
						l17:
							position, tokenIndex = position16, tokenIndex16
							if !_rules[ruleSpacing]() {
								goto l14
							}
							if !_rules[ruleOrExpr]() {
								goto l14
							}
						}
					l16:
						add(ruleRMap, position15)
					}
					goto l9
				l14:
					position, tokenIndex = position9, tokenIndex9
					{
						position19 := position
						if buffer[position] != rune('f') {
							goto l18
						}
						position++
						if buffer[position] != rune('i') {
							goto l18
						}
						position++
						if buffer[position] != rune('l') {
							goto l18
						}
						position++
						if buffer[position] != rune('t') {
							goto l18
						}
						position++
						if buffer[position] != rune('e') {
							goto l18
						}
						position++
						if buffer[position] != rune('r') {
							goto l18
						}
						position++
						{
							position20, tokenIndex20 := position, tokenIndex
							if !_rules[ruleSpacing]() {
								goto l21
							}
							if buffer[position] != rune('(') {
								goto l21
							}
							position++
							if !_rules[ruleSpacing]() {
								goto l21
							}
							if !_rules[rulePredicate]() {
								goto l21
							}
							if !_rules[ruleSpacing]() {
								goto l21
							}
							if buffer[position] != rune(')') {
								goto l21
							}
							position++
							goto l20
						l21:
							position, tokenIndex = position20, tokenIndex20
							if !_rules[ruleSpacing]() {
								goto l18
							}
							if !_rules[rulePredicate]() {
								goto l18
							}
						}
					l20:
						add(ruleFilter, position19)
					}
					goto l9
				l18:
					position, tokenIndex = position9, tokenIndex9
					{
						switch buffer[position] {
						case 'r':
							{
								position23 := position
								if buffer[position] != rune('r') {
									goto l7
								}
								position++
								if buffer[position] != rune('e') {
									goto l7
								}
								position++
								if buffer[position] != rune('d') {
									goto l7
								}
								position++
								if buffer[position] != rune('u') {
									goto l7
								}
								position++
								if buffer[position] != rune('c') {
									goto l7
								}
								position++
								if buffer[position] != rune('e') {
									goto l7
								}
								position++
								{
									position24, tokenIndex24 := position, tokenIndex
									if !_rules[ruleSpacing]() {
										goto l25
									}
									if buffer[position] != rune('(') {
										goto l25
									}
									position++
									if !_rules[ruleSpacing]() {
										goto l25
									}
									if !_rules[ruleReducerName]() {
										goto l25
									}
									if !_rules[ruleSpacing]() {
										goto l25
									}
									if buffer[position] != rune(')') {
										goto l25
									}
									position++
									goto l24
								l25:
									position, tokenIndex = position24, tokenIndex24
									if !_rules[ruleSpacing]() {
										goto l7
									}
									if !_rules[ruleReducerName]() {
										goto l7
									}
								}
							l24:
								add(ruleReduce, position23)
							}
						case 'm':
							{
								position26 := position
								if buffer[position] != rune('m') {
									goto l7
								}
								position++
								if buffer[position] != rune('a') {
									goto l7
								}
								position++
								if buffer[position] != rune('p') {
									goto l7
								}
								position++
								{
									position27, tokenIndex27 := position, tokenIndex
									if !_rules[ruleSpacing]() {
										goto l28
									}
									if buffer[position] != rune('(') {
										goto l28
									}
									position++
									if !_rules[ruleSpacing]() {
										goto l28
									}
									if !_rules[ruleOrExpr]() {
										goto l28
									}
									if !_rules[ruleSpacing]() {
										goto l28
									}
									if buffer[position] != rune(')') {
										goto l28
									}
									position++
									goto l27
								l28:
									position, tokenIndex = position27, tokenIndex27
									if !_rules[ruleSpacing]() {
										goto l7
									}
									if !_rules[ruleOrExpr]() {
										goto l7
									}
								}
							l27:
								add(ruleMap, position26)
							}
						default:
							if !_rules[ruleOrExpr]() {
								goto l7
							}
						}
					}

				}
			l9:
				add(ruleExpr, position8)
			}
			return true
		l7:
			position, tokenIndex = position7, tokenIndex7
			return false
		},
		/* 3 Filter <- <('f' 'i' 'l' 't' 'e' 'r' ((Spacing '(' Spacing Predicate Spacing ')') / (Spacing Predicate)))> */
		nil,
		/* 4 RFilter <- <('r' 'f' 'i' 'l' 't' 'e' 'r' ((Spacing '(' Spacing Predicate Spacing ')') / (Spacing Predicate)))> */
		nil,
		/* 5 Map <- <('m' 'a' 'p' ((Spacing '(' Spacing OrExpr Spacing ')') / (Spacing OrExpr)))> */
		nil,
		/* 6 RMap <- <('r' 'm' 'a' 'p' ((Spacing '(' Spacing OrExpr Spacing ')') / (Spacing OrExpr)))> */
		nil,
		/* 7 Reduce <- <('r' 'e' 'd' 'u' 'c' 'e' ((Spacing '(' Spacing ReducerName Spacing ')') / (Spacing ReducerName)))> */
		nil,
		/* 8 ReducerName <- <(((&('_') '_') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z])) ((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))*)> */
		func() bool {
			position34, tokenIndex34 := position, tokenIndex
			{
				position35 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l34
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l34
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l34
						}
						position++
					}
				}

			l37:
				{
					position38, tokenIndex38 := position, tokenIndex
					{
						switch buffer[position] {
						case '_':
							if buffer[position] != rune('_') {
								goto l38
							}
							position++
						case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l38
							}
							position++
						case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l38
							}
							position++
						default:
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l38
							}
							position++
						}
					}

					goto l37
				l38:
					position, tokenIndex = position38, tokenIndex38
				}
				add(ruleReducerName, position35)
			}
			return true
		l34:
			position, tokenIndex = position34, tokenIndex34
			return false
		},
		/* 9 Predicate <- <OrExpr> */
		func() bool {
			position40, tokenIndex40 := position, tokenIndex
			{
				position41 := position
				if !_rules[ruleOrExpr]() {
					goto l40
				}
				add(rulePredicate, position41)
			}
			return true
		l40:
			position, tokenIndex = position40, tokenIndex40
			return false
		},
		/* 10 OrExpr <- <(AndExpr (Spacing '|' '|' Spacing AndExpr)*)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				if !_rules[ruleAndExpr]() {
					goto l42
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l45
					}
					if buffer[position] != rune('|') {
						goto l45
					}
					position++
					if buffer[position] != rune('|') {
						goto l45
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l45
					}
					if !_rules[ruleAndExpr]() {
						goto l45
					}
					goto l44
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
				add(ruleOrExpr, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 11 AndExpr <- <(NotExpr (Spacing '&' '&' Spacing NotExpr)*)> */
		func() bool {
			position46, tokenIndex46 := position, tokenIndex
			{
				position47 := position
				if !_rules[ruleNotExpr]() {
					goto l46
				}
			l48:
				{
					position49, tokenIndex49 := position, tokenIndex
					if !_rules[ruleSpacing]() {
						goto l49
					}
					if buffer[position] != rune('&') {
						goto l49
					}
					position++
					if buffer[position] != rune('&') {
						goto l49
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l49
					}
					if !_rules[ruleNotExpr]() {
						goto l49
					}
					goto l48
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
				add(ruleAndExpr, position47)
			}
			return true
		l46:
			position, tokenIndex = position46, tokenIndex46
			return false
		},
		/* 12 NotExpr <- <(('!' Spacing PrimaryExpr) / PrimaryExpr)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				{
					position52, tokenIndex52 := position, tokenIndex
					if buffer[position] != rune('!') {
						goto l53
					}
					position++
					if !_rules[ruleSpacing]() {
						goto l53
					}
					if !_rules[rulePrimaryExpr]() {
						goto l53
					}
					goto l52
				l53:
					position, tokenIndex = position52, tokenIndex52
					if !_rules[rulePrimaryExpr]() {
						goto l50
					}
				}
			l52:
				add(ruleNotExpr, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 13 NotOp <- <'!'> */
		nil,
		/* 14 PrimaryExpr <- <(Membership / Comparison / ((&('.') FieldAccess) | (&('(') ParenExpr) | (&('"' | '\'' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'f' | 't') Literal)))> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				{
					position57, tokenIndex57 := position, tokenIndex
					{
						position59 := position
						if !_rules[ruleFieldAccess]() {
							goto l58
						}
						if !_rules[ruleSpacing]() {
							goto l58
						}
						if buffer[position] != rune('h') {
							goto l58
						}
						position++
						if buffer[position] != rune('a') {
							goto l58
						}
						position++
						if buffer[position] != rune('s') {
							goto l58
						}
						position++
						if !_rules[ruleSpacing]() {
							goto l58
						}
						if !_rules[ruleValue]() {
							goto l58
						}
						add(ruleMembership, position59)
					}
					goto l57
				l58:
					position, tokenIndex = position57, tokenIndex57
					{
						position61 := position
						if !_rules[ruleValue]() {
							goto l60
						}
						if !_rules[ruleSpacing]() {
							goto l60
						}
						{
							position62 := position
							{
								position63, tokenIndex63 := position, tokenIndex
								if buffer[position] != rune('>') {
									goto l64
								}
								position++
								if buffer[position] != rune('=') {
									goto l64
								}
								position++
								goto l63
							l64:
								position, tokenIndex = position63, tokenIndex63
								if buffer[position] != rune('<') {
									goto l65
								}
								position++
								if buffer[position] != rune('=') {
									goto l65
								}
								position++
								goto l63
							l65:
								position, tokenIndex = position63, tokenIndex63
								{
									switch buffer[position] {
									case '<':
										if buffer[position] != rune('<') {
											goto l60
										}
										position++
									case '>':
										if buffer[position] != rune('>') {
											goto l60
										}
										position++
									case '=':
										if buffer[position] != rune('=') {
											goto l60
										}
										position++
										if buffer[position] != rune('=') {
											goto l60
										}
										position++
									default:
										if buffer[position] != rune('!') {
											goto l60
										}
										position++
										if buffer[position] != rune('=') {
											goto l60
										}
										position++
									}
								}

							}
						l63:
							add(ruleCompOp, position62)
						}
						if !_rules[ruleSpacing]() {
							goto l60
						}
						if !_rules[ruleValue]() {
							goto l60
						}
						add(ruleComparison, position61)
					}
					goto l57
				l60:
					position, tokenIndex = position57, tokenIndex57
					{
						switch buffer[position] {
						case '.':
							if !_rules[ruleFieldAccess]() {
								goto l55
							}
						case '(':
							{
								position68 := position
								if buffer[position] != rune('(') {
									goto l55
								}
								position++
								if !_rules[ruleSpacing]() {
									goto l55
								}
								if !_rules[ruleOrExpr]() {
									goto l55
								}
								if !_rules[ruleSpacing]() {
									goto l55
								}
								if buffer[position] != rune(')') {
									goto l55
								}
								position++
								add(ruleParenExpr, position68)
							}
						default:
							if !_rules[ruleLiteral]() {
								goto l55
							}
						}
					}

				}
			l57:
				add(rulePrimaryExpr, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 15 ParenExpr <- <('(' Spacing OrExpr Spacing ')')> */
		nil,
		/* 16 Comparison <- <(Value Spacing CompOp Spacing Value)> */
		nil,
		/* 17 CompOp <- <(('>' '=') / ('<' '=') / ((&('<') '<') | (&('>') '>') | (&('=') ('=' '=')) | (&('!') ('!' '='))))> */
		nil,
		/* 18 Membership <- <(FieldAccess Spacing ('h' 'a' 's') Spacing Value)> */
		nil,
		/* 19 FieldAccess <- <('.' Identifier ('.' Identifier)*)> */
		func() bool {
			position73, tokenIndex73 := position, tokenIndex
			{
				position74 := position
				if buffer[position] != rune('.') {
					goto l73
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l73
				}
			l75:
				{
					position76, tokenIndex76 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l76
					}
					position++
					if !_rules[ruleIdentifier]() {
						goto l76
					}
					goto l75
				l76:
					position, tokenIndex = position76, tokenIndex76
				}
				add(ruleFieldAccess, position74)
			}
			return true
		l73:
			position, tokenIndex = position73, tokenIndex73
			return false
		},
		/* 20 Value <- <(FieldAccess / Literal)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				{
					position79, tokenIndex79 := position, tokenIndex
					if !_rules[ruleFieldAccess]() {
						goto l80
					}
					goto l79
				l80:
					position, tokenIndex = position79, tokenIndex79
					if !_rules[ruleLiteral]() {
						goto l77
					}
				}
			l79:
				add(ruleValue, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 21 Literal <- <((&('f' | 't') Boolean) | (&('"' | '\'') String) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') Number))> */
		func() bool {
			position81, tokenIndex81 := position, tokenIndex
			{
				position82 := position
				{
					switch buffer[position] {
					case 'f', 't':
						{
							position84 := position
							{
								position85, tokenIndex85 := position, tokenIndex
								if buffer[position] != rune('t') {
									goto l86
								}
								position++
								if buffer[position] != rune('r') {
									goto l86
								}
								position++
								if buffer[position] != rune('u') {
									goto l86
								}
								position++
								if buffer[position] != rune('e') {
									goto l86
								}
								position++
								goto l85
							l86:
								position, tokenIndex = position85, tokenIndex85
								if buffer[position] != rune('f') {
									goto l81
								}
								position++
								if buffer[position] != rune('a') {
									goto l81
								}
								position++
								if buffer[position] != rune('l') {
									goto l81
								}
								position++
								if buffer[position] != rune('s') {
									goto l81
								}
								position++
								if buffer[position] != rune('e') {
									goto l81
								}
								position++
							}
						l85:
							add(ruleBoolean, position84)
						}
					case '"', '\'':
						{
							position87 := position
							{
								position88, tokenIndex88 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l89
								}
								position++
							l90:
								{
									position91, tokenIndex91 := position, tokenIndex
									{
										position92, tokenIndex92 := position, tokenIndex
										if buffer[position] != rune('"') {
											goto l92
										}
										position++
										goto l91
									l92:
										position, tokenIndex = position92, tokenIndex92
									}
									if !matchDot() {
										goto l91
									}
									goto l90
								l91:
									position, tokenIndex = position91, tokenIndex91
								}
								if buffer[position] != rune('"') {
									goto l89
								}
								position++
								goto l88
							l89:
								position, tokenIndex = position88, tokenIndex88
								if buffer[position] != rune('\'') {
									goto l81
								}
								position++
							l93:
								{
									position94, tokenIndex94 := position, tokenIndex
									{
										position95, tokenIndex95 := position, tokenIndex
										if buffer[position] != rune('\'') {
											goto l95
										}
										position++
										goto l94
									l95:
										position, tokenIndex = position95, tokenIndex95
									}
									if !matchDot() {
										goto l94
									}
									goto l93
								l94:
									position, tokenIndex = position94, tokenIndex94
								}
								if buffer[position] != rune('\'') {
									goto l81
								}
								position++
							}
						l88:
							add(ruleString, position87)
						}
					default:
						{
							position96 := position
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l81
							}
							position++
						l97:
							{
								position98, tokenIndex98 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l98
								}
								position++
								goto l97
							l98:
								position, tokenIndex = position98, tokenIndex98
							}
							{
								position99, tokenIndex99 := position, tokenIndex
								if buffer[position] != rune('.') {
									goto l99
								}
								position++
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l99
								}
								position++
							l101:
								{
									position102, tokenIndex102 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l102
									}
									position++
									goto l101
								l102:
									position, tokenIndex = position102, tokenIndex102
								}
								goto l100
							l99:
								position, tokenIndex = position99, tokenIndex99
							}
						l100:
							add(ruleNumber, position96)
						}
					}
				}

				add(ruleLiteral, position82)
			}
			return true
		l81:
			position, tokenIndex = position81, tokenIndex81
			return false
		},
		/* 22 String <- <(('"' (!'"' .)* '"') / ('\'' (!'\'' .)* '\''))> */
		nil,
		/* 23 Number <- <([0-9]+ ('.' [0-9]+)?)> */
		nil,
		/* 24 Boolean <- <(('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e'))> */
		nil,
		/* 25 Identifier <- <(((&('_') '_') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z])) ((&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))*)> */
		func() bool {
			position106, tokenIndex106 := position, tokenIndex
			{
				position107 := position
				{
					switch buffer[position] {
					case '_':
						if buffer[position] != rune('_') {
							goto l106
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l106
						}
						position++
					default:
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l106
						}
						position++
					}
				}

			l109:
				{
					position110, tokenIndex110 := position, tokenIndex
					{
						switch buffer[position] {
						case '_':
							if buffer[position] != rune('_') {
								goto l110
							}
							position++
						case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l110
							}
							position++
						case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l110
							}
							position++
						default:
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l110
							}
							position++
						}
					}

					goto l109
				l110:
					position, tokenIndex = position110, tokenIndex110
				}
				add(ruleIdentifier, position107)
			}
			return true
		l106:
			position, tokenIndex = position106, tokenIndex106
			return false
		},
		/* 26 Spacing <- <(Space / Comment)*> */
		func() bool {
			{
				position113 := position
			l114:
				{
					position115, tokenIndex115 := position, tokenIndex
					{
						position116, tokenIndex116 := position, tokenIndex
						{
							position118 := position
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l117
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l117
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l117
									}
									position++
								default:
									if buffer[position] != rune(' ') {
										goto l117
									}
									position++
								}
							}

							add(ruleSpace, position118)
						}
						goto l116
					l117:
						position, tokenIndex = position116, tokenIndex116
						{
							position120 := position
							{
								position121, tokenIndex121 := position, tokenIndex
								if buffer[position] != rune('#') {
									goto l122
								}
								position++
							l123:
								{
									position124, tokenIndex124 := position, tokenIndex
									{
										position125, tokenIndex125 := position, tokenIndex
										if !_rules[ruleEndOfLine]() {
											goto l125
										}
										goto l124
									l125:
										position, tokenIndex = position125, tokenIndex125
									}
									if !matchDot() {
										goto l124
									}
									goto l123
								l124:
									position, tokenIndex = position124, tokenIndex124
								}
								if !_rules[ruleEndOfLine]() {
									goto l122
								}
								goto l121
							l122:
								position, tokenIndex = position121, tokenIndex121
								if buffer[position] != rune('/') {
									goto l115
								}
								position++
								if buffer[position] != rune('/') {
									goto l115
								}
								position++
							l126:
								{
									position127, tokenIndex127 := position, tokenIndex
									{
										position128, tokenIndex128 := position, tokenIndex
										if !_rules[ruleEndOfLine]() {
											goto l128
										}
										goto l127
									l128:
										position, tokenIndex = position128, tokenIndex128
									}
									if !matchDot() {
										goto l127
									}
									goto l126
								l127:
									position, tokenIndex = position127, tokenIndex127
								}
								if !_rules[ruleEndOfLine]() {
									goto l115
								}
							}
						l121:
							add(ruleComment, position120)
						}
					}
				l116:
					goto l114
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
				add(ruleSpacing, position113)
			}
			return true
		},
		/* 27 Space <- <((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' '))> */
		nil,
		/* 28 Comment <- <(('#' (!EndOfLine .)* EndOfLine) / ('/' '/' (!EndOfLine .)* EndOfLine))> */
		nil,
		/* 29 EndOfLine <- <(('\r' '\n') / '\n' / '\r')> */
		func() bool {
			position131, tokenIndex131 := position, tokenIndex
			{
				position132 := position
				{
					position133, tokenIndex133 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l134
					}
					position++
					if buffer[position] != rune('\n') {
						goto l134
					}
					position++
					goto l133
				l134:
					position, tokenIndex = position133, tokenIndex133
					if buffer[position] != rune('\n') {
						goto l135
					}
					position++
					goto l133
				l135:
					position, tokenIndex = position133, tokenIndex133
					if buffer[position] != rune('\r') {
						goto l131
					}
					position++
				}
			l133:
				add(ruleEndOfLine, position132)
			}
			return true
		l131:
			position, tokenIndex = position131, tokenIndex131
			return false
		},
	}
	p.rules = _rules
	return nil
}
