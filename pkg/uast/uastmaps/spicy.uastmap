address6 <- (address6) => uast(
    type: "Synthetic",
    children: []
)

array_access <- (array_access) => uast(
    type: "Synthetic",
    children: []
)

assert <- (assert) => uast(
    type: "Synthetic",
    children: []
)

assign <- (assign) => uast(
    type: "Synthetic",
    children: []
)

attribute <- (attribute) => uast(
    type: "Attribute",
    roles: "Attribute"
    children: "attribute_name", "expression"
)

attribute_name <- (attribute_name) => uast(
    type: "Attribute",
    roles: "Attribute"
    children: []
)

binary_op <- (binary_op) => uast(
    type: "BinaryOp",
    roles: "Operator"
    children: "expression"
)

bitfield <- (bitfield) => uast(
    type: "Field",
    roles: "Member"
    children: []
)

bitfield_field <- (bitfield_field) => uast(
    type: "Field",
    roles: "Member"
    children: "expression", "ident"
)

block <- (block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

boolean <- (boolean) => uast(
    type: "Synthetic",
    children: []
)

case <- (case) => uast(
    type: "Case",
    roles: "Branch"
    children: []
)

cast <- (cast) => uast(
    type: "Cast",
    children: []
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

condition_check <- (condition_check) => uast(
    type: "Synthetic",
    children: "expression"
)

contains <- (contains) => uast(
    type: "Synthetic",
    children: []
)

contains_not <- (contains_not) => uast(
    type: "Synthetic",
    children: []
)

delete <- (delete) => uast(
    type: "Synthetic",
    children: []
)

enum_decl <- (enum_decl) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: "ident"
)

enum_label <- (enum_label) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: "ident"
)

error_literal <- (error_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

expression <- (expression) => uast(
    type: "Synthetic",
    children: []
)

field_decl <- (field_decl) => uast(
    type: "Field",
    roles: "Member"
    children: "array_access", "attribute", "bitfield", "bytes", "expression", "ident", "if", "is_skip", "regexp", "typename", "vector", "void"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

foreach <- (foreach) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

function_arg <- (function_arg) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "expression", "ident", "typename"
)

function_call <- (function_call) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "ident", "indent", "typename"
)

function_decl <- (function_decl) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "function_arg", "ident", "typename"
)

hook_decl <- (hook_decl) => uast(
    type: "Synthetic",
    children: "hook_name", "ident"
)

hook_name <- (hook_name) => uast(
    type: "Synthetic",
    children: []
)

hook_priority <- (hook_priority) => uast(
    type: "Synthetic",
    children: []
)

ident <- (ident) => uast(
    type: "Synthetic",
    children: []
)

if <- (if) => uast(
    type: "If",
    children: []
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

indent <- (indent) => uast(
    type: "Synthetic",
    children: []
)

integer <- (integer) => uast(
    type: "Synthetic",
    children: []
)

len <- (len) => uast(
    type: "Synthetic",
    children: []
)

library_type <- (library_type) => uast(
    type: "Synthetic",
    children: []
)

linkage <- (linkage) => uast(
    type: "Synthetic",
    children: []
)

list <- (list) => uast(
    type: "List",
    children: []
)

list_comp <- (list_comp) => uast(
    type: "List",
    children: []
)

map <- (map) => uast(
    type: "Synthetic",
    children: []
)

module <- (module) => uast(
    type: "Module",
    roles: "Module"
    children: "enum_decl", "function_decl", "hook_decl", "import", "module_decl", "property", "statement", "struct_decl", "type_decl", "var_decl"
)

module_decl <- (module_decl) => uast(
    type: "Module",
    roles: "Module"
    children: "ident"
)

network <- (network) => uast(
    type: "Synthetic",
    children: []
)

network_prefix <- (network_prefix) => uast(
    type: "Synthetic",
    children: []
)

new <- (new) => uast(
    type: "Synthetic",
    children: []
)

parameterized_type <- (parameterized_type) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: "ident", "typename"
)

params <- (params) => uast(
    type: "Synthetic",
    children: []
)

post <- (post) => uast(
    type: "Synthetic",
    children: []
)

pre <- (pre) => uast(
    type: "Synthetic",
    children: []
)

preproc <- (preproc) => uast(
    type: "Synthetic",
    children: "enum_decl", "field_decl", "function_decl", "hook_decl", "import", "module_decl", "property", "statement", "struct_decl", "type_decl", "var_decl"
)

print <- (print) => uast(
    type: "Synthetic",
    children: []
)

property <- (property) => uast(
    type: "Property",
    roles: "Member"
    children: "expression", "property_name"
)

property_name <- (property_name) => uast(
    type: "Property",
    roles: "Member"
    children: []
)

real <- (real) => uast(
    type: "Synthetic",
    children: []
)

regexp <- (regexp) => uast(
    type: "Synthetic",
    children: []
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
    children: []
)

set_add <- (set_add) => uast(
    type: "Set",
    children: []
)

sink_decl <- (sink_decl) => uast(
    type: "Synthetic",
    children: []
)

statement <- (statement) => uast(
    type: "Synthetic",
    children: []
)

struct_ctr <- (struct_ctr) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: []
)

struct_decl <- (struct_decl) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: "ident"
)

switch <- (switch) => uast(
    type: "Switch",
    children: []
)

ternary <- (ternary) => uast(
    type: "Synthetic",
    children: []
)

throw_ <- (throw_) => uast(
    type: "Throw",
    roles: "Throw"
    children: []
)

tuple <- (tuple) => uast(
    type: "Tuple",
    children: []
)

type_decl <- (type_decl) => uast(
    type: "Synthetic",
    children: "field_decl", "ident"
)

type_member <- (type_member) => uast(
    type: "Synthetic",
    children: []
)

type_member_call <- (type_member_call) => uast(
    type: "Call",
    roles: "Call"
    children: []
)

type_member_check <- (type_member_check) => uast(
    type: "Synthetic",
    children: []
)

type_member_checked <- (type_member_checked) => uast(
    type: "Synthetic",
    children: []
)

type_member_ident <- (type_member_ident) => uast(
    type: "Synthetic",
    children: []
)

typename <- (typename) => uast(
    type: "Synthetic",
    children: []
)

unary_op <- (unary_op) => uast(
    type: "UnaryOp",
    roles: "Operator"
    children: []
)

unit_if_else <- (unit_if_else) => uast(
    type: "If",
    children: "field_decl"
)

unit_switch <- (unit_switch) => uast(
    type: "Switch",
    children: []
)

unit_switch_case <- (unit_switch_case) => uast(
    type: "Switch",
    children: []
)

unset <- (unset) => uast(
    type: "Set",
    children: []
)

var_decl <- (var_decl) => uast(
    type: "Synthetic",
    children: "expression", "ident", "typename"
)

vector <- (vector) => uast(
    type: "Synthetic",
    children: "array_access", "attribute", "bitfield", "bytes", "expression", "regexp", "typename", "vector", "void"
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

BTEST <- (BTEST) => uast(
    type: "Synthetic",
    children: []
)

False <- (False) => uast(
    type: "Synthetic",
    children: []
)

True <- (True) => uast(
    type: "Synthetic",
    children: []
)

__library_type <- (__library_type) => uast(
    type: "Synthetic",
    children: []
)

add <- (add) => uast(
    type: "Synthetic",
    children: []
)

address4 <- (address4) => uast(
    type: "Synthetic",
    children: []
)

assert <- (assert) => uast(
    type: "Synthetic",
    children: []
)

bitfield <- (bitfield) => uast(
    type: "Field",
    roles: "Member"
    children: []
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
    children: []
)

bytes <- (bytes) => uast(
    type: "Synthetic",
    children: []
)

capture_group <- (capture_group) => uast(
    type: "Synthetic",
    children: []
)

case <- (case) => uast(
    type: "Case",
    roles: "Branch"
    children: []
)

cast <- (cast) => uast(
    type: "Cast",
    children: []
)

char <- (char) => uast(
    type: "Synthetic",
    children: []
)

comment_body <- (comment_body) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

const <- (const) => uast(
    type: "Synthetic",
    children: []
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue"
    children: []
)

dd <- (dd) => uast(
    type: "Synthetic",
    children: []
)

default <- (default) => uast(
    type: "Synthetic",
    children: []
)

delete <- (delete) => uast(
    type: "Synthetic",
    children: []
)

else <- (else) => uast(
    type: "Synthetic",
    children: []
)

enum <- (enum) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: []
)

error <- (error) => uast(
    type: "Synthetic",
    children: []
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

foreach <- (foreach) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

function <- (function) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: []
)

global <- (global) => uast(
    type: "Synthetic",
    children: []
)

if <- (if) => uast(
    type: "If",
    children: []
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

in <- (in) => uast(
    type: "Synthetic",
    children: []
)

inout <- (inout) => uast(
    type: "Synthetic",
    children: []
)

is_debug <- (is_debug) => uast(
    type: "Synthetic",
    children: []
)

is_error <- (is_error) => uast(
    type: "Synthetic",
    children: []
)

is_skip <- (is_skip) => uast(
    type: "Synthetic",
    children: []
)

iterator <- (iterator) => uast(
    type: "Synthetic",
    children: []
)

local <- (local) => uast(
    type: "Synthetic",
    children: []
)

map <- (map) => uast(
    type: "Synthetic",
    children: []
)

module <- (module) => uast(
    type: "Module",
    roles: "Module"
    children: []
)

name <- (name) => uast(
    type: "Synthetic",
    children: []
)

new <- (new) => uast(
    type: "Synthetic",
    children: []
)

null <- (null) => uast(
    type: "Synthetic",
    children: []
)

on <- (on) => uast(
    type: "Synthetic",
    children: []
)

optional <- (optional) => uast(
    type: "Synthetic",
    children: []
)

optional <- (optional) => uast(
    type: "Synthetic",
    children: []
)

port <- (port) => uast(
    type: "Synthetic",
    children: []
)

print <- (print) => uast(
    type: "Synthetic",
    children: []
)

priority <- (priority) => uast(
    type: "Synthetic",
    children: []
)

regexp_pattern <- (regexp_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

result <- (result) => uast(
    type: "Synthetic",
    children: []
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
    children: []
)

self_id <- (self_id) => uast(
    type: "Synthetic",
    children: []
)

set <- (set) => uast(
    type: "Set",
    children: []
)

sink <- (sink) => uast(
    type: "Synthetic",
    children: []
)

stop <- (stop) => uast(
    type: "Synthetic",
    children: []
)

string <- (string) => uast(
    type: "Synthetic",
    children: []
)

struct <- (struct) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: []
)

struct_ctr_id <- (struct_ctr_id) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: []
)

switch <- (switch) => uast(
    type: "Switch",
    children: []
)

throw <- (throw) => uast(
    type: "Throw",
    roles: "Throw"
    children: []
)

tuple <- (tuple) => uast(
    type: "Tuple",
    children: []
)

type <- (type) => uast(
    type: "Synthetic",
    children: []
)

unit <- (unit) => uast(
    type: "Synthetic",
    children: []
)

unpack <- (unpack) => uast(
    type: "Synthetic",
    children: []
)

unset <- (unset) => uast(
    type: "Set",
    children: []
)

var <- (var) => uast(
    type: "Synthetic",
    children: []
)

vector <- (vector) => uast(
    type: "Synthetic",
    children: []
)

view <- (view) => uast(
    type: "Synthetic",
    children: []
)

visibility <- (visibility) => uast(
    type: "Synthetic",
    children: []
)

void <- (void) => uast(
    type: "Synthetic",
    children: []
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

