arguments <- (arguments) => uast(
    type: "Synthetic",
    children: "binary_expression", "call", "compound_name", "dollars", "group", "literal", "unary_expression"
)

assign <- (assign) => uast(
    type: "Synthetic",
    children: "binary_expression", "call", "compound_name", "dollars", "group", "literal", "name", "unary_expression"
)

behavior <- (behavior) => uast(
    type: "Synthetic",
    children: "behavior_body", "name"
)

behavior_body <- (behavior_body) => uast(
    type: "Synthetic",
    children: "blocking", "compound", "enum", "extern", "function", "guard", "int", "invariant", "on", "variable"
)

binary_expression <- (binary_expression) => uast(
    type: "Synthetic",
    children: "binary_expression", "call", "compound_name", "dollars", "group", "literal", "unary_expression"
)

binding <- (binding) => uast(
    type: "Synthetic",
    children: "end_point"
)

blocking <- (blocking) => uast(
    type: "Block",
    roles: "Body",
    children: "assign", "blocking", "call_statement", "compound", "defer", "guard", "if_statement", "illegal", "interface_action_statement", "invariant", "on", "reply", "return", "skip_statement", "variable"
)

call <- (call) => uast(
    type: "Call",
    roles: "Call",
    children: "arguments", "compound_name"
)

call_statement <- (call_statement) => uast(
    type: "Call",
    roles: "Call",
    children: "call"
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
)

component <- (component) => uast(
    type: "Synthetic",
    children: "behavior", "port", "scoped_name", "system"
)

compound <- (compound) => uast(
    type: "Synthetic",
    children: "assign", "blocking", "call_statement", "compound", "defer", "guard", "if_statement", "illegal", "interface_action_statement", "invariant", "on", "reply", "return", "skip_statement", "variable"
)

compound_name <- (compound_name) => uast(
    type: "Synthetic",
    children: "identifier"
)

defer <- (defer) => uast(
    type: "Synthetic",
    children: "arguments", "assign", "call_statement", "compound", "defer", "if_statement", "illegal", "interface_action_statement", "reply", "return", "skip_statement", "variable"
)

direction <- (direction) => uast(
    type: "Synthetic"
)

dollars <- (dollars) => uast(
    type: "Synthetic",
    children: "dollars_content"
)

end_point <- (end_point) => uast(
    type: "Synthetic",
    children: "asterisk", "compound_name"
)

enum <- (enum) => uast(
    type: "Enum",
    roles: "Enum", "Declaration",
    children: "fields", "scoped_name"
)

event <- (event) => uast(
    type: "Synthetic",
    children: "direction", "event_name", "formals", "type_name"
)

event_name <- (event_name) => uast(
    type: "Synthetic"
)

extern <- (extern) => uast(
    type: "Synthetic",
    children: "dollars_content", "scoped_name"
)

fields <- (fields) => uast(
    type: "Field",
    roles: "Member",
    children: "member_name"
)

formal <- (formal) => uast(
    type: "Loop",
    roles: "Loop",
    children: "formal_direction", "type_name", "var_name"
)

formal_direction <- (formal_direction) => uast(
    type: "Loop",
    roles: "Loop"
)

formals <- (formals) => uast(
    type: "Loop",
    roles: "Loop",
    children: "formal"
)

function <- (function) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "compound", "formals", "function_body_one_line", "name", "type_name"
)

function_body_one_line <- (function_body_one_line) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "binary_expression", "call", "compound_name", "dollars", "group", "literal", "unary_expression"
)

group <- (group) => uast(
    type: "Synthetic",
    children: "binary_expression", "call", "compound_name", "dollars", "group", "literal", "unary_expression"
)

guard <- (guard) => uast(
    type: "Synthetic",
    children: "assign", "blocking", "call_statement", "compound", "defer", "guard", "guard_condition", "if_statement", "illegal", "interface_action_statement", "invariant", "on", "reply", "return", "skip_statement", "variable"
)

guard_condition <- (guard_condition) => uast(
    type: "Synthetic",
    children: "binary_expression", "call", "compound_name", "dollars", "group", "literal", "otherwise", "unary_expression"
)

identifier <- (identifier) => uast(
    type: "If"
)

if_statement <- (if_statement) => uast(
    type: "If",
    children: "assign", "binary_expression", "call", "call_statement", "compound", "compound_name", "defer", "dollars", "group", "if_statement", "illegal", "interface_action_statement", "literal", "reply", "return", "skip_statement", "unary_expression", "variable"
)

illegal <- (illegal) => uast(
    type: "Synthetic"
)

import <- (import) => uast(
    type: "Import",
    roles: "Import",
    children: "file_name"
)

instance <- (instance) => uast(
    type: "Synthetic",
    children: "compound_name", "name"
)

int <- (int) => uast(
    type: "Synthetic",
    children: "number", "scoped_name"
)

interface <- (interface) => uast(
    type: "Interface",
    roles: "Interface", "Declaration",
    children: "interface_body", "scoped_name"
)

interface_action <- (interface_action) => uast(
    type: "Interface",
    roles: "Interface", "Declaration"
)

interface_action_statement <- (interface_action_statement) => uast(
    type: "Interface",
    roles: "Interface", "Declaration",
    children: "interface_action"
)

interface_body <- (interface_body) => uast(
    type: "Interface",
    roles: "Interface", "Declaration",
    children: "behavior", "enum", "event", "extern", "int"
)

invariant <- (invariant) => uast(
    type: "Synthetic",
    children: "binary_expression", "call", "compound_name", "dollars", "group", "literal", "unary_expression"
)

literal <- (literal) => uast(
    type: "Literal",
    roles: "Literal"
)

name <- (name) => uast(
    type: "Synthetic"
)

namespace <- (namespace) => uast(
    type: "Namespace",
    roles: "Module",
    children: "component", "compound_name", "enum", "extern", "function", "int", "interface", "namespace"
)

on <- (on) => uast(
    type: "Synthetic",
    children: "assign", "blocking", "call_statement", "compound", "defer", "guard", "if_statement", "illegal", "interface_action_statement", "invariant", "on", "reply", "return", "skip_statement", "triggers", "variable"
)

port <- (port) => uast(
    type: "Synthetic",
    children: "compound_name", "formals", "name", "port_direction", "port_qualifiers"
)

port_direction <- (port_direction) => uast(
    type: "Synthetic"
)

port_qualifier <- (port_qualifier) => uast(
    type: "If"
)

port_qualifiers <- (port_qualifiers) => uast(
    type: "If",
    children: "port_qualifier"
)

reply <- (reply) => uast(
    type: "Synthetic",
    children: "binary_expression", "call", "compound_name", "dollars", "group", "literal", "name", "unary_expression"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return",
    children: "binary_expression", "call", "compound_name", "dollars", "group", "literal", "unary_expression"
)

root <- (root) => uast(
    type: "Synthetic",
    children: "component", "dollars", "enum", "extern", "function", "import", "int", "interface", "namespace"
)

scoped_name <- (scoped_name) => uast(
    type: "Synthetic"
)

skip_statement <- (skip_statement) => uast(
    type: "Synthetic"
)

system <- (system) => uast(
    type: "Synthetic",
    children: "system_body"
)

system_body <- (system_body) => uast(
    type: "Synthetic",
    children: "binding", "instance"
)

trigger <- (trigger) => uast(
    type: "Synthetic",
    children: "compound_name", "inevitable", "optional", "trigger_formals"
)

trigger_formal <- (trigger_formal) => uast(
    type: "Loop",
    roles: "Loop",
    children: "name"
)

trigger_formals <- (trigger_formals) => uast(
    type: "Loop",
    roles: "Loop",
    children: "trigger_formal"
)

triggers <- (triggers) => uast(
    type: "Synthetic",
    children: "trigger"
)

type_name <- (type_name) => uast(
    type: "Synthetic",
    children: "compound_name"
)

unary_expression <- (unary_expression) => uast(
    type: "Synthetic",
    children: "binary_expression", "call", "compound_name", "dollars", "group", "literal", "unary_expression"
)

var_name <- (var_name) => uast(
    type: "Synthetic"
)

variable <- (variable) => uast(
    type: "Variable",
    roles: "Variable", "Declaration",
    children: "binary_expression", "call", "compound_name", "dollars", "group", "literal", "type_name", "unary_expression", "var_name"
)

asterisk <- (asterisk) => uast(
    type: "Synthetic"
)

behavior <- (behavior) => uast(
    type: "Synthetic"
)

behaviour <- (behaviour) => uast(
    type: "Synthetic"
)

blocking <- (blocking) => uast(
    type: "Block",
    roles: "Body"
)

bool <- (bool) => uast(
    type: "Synthetic"
)

component <- (component) => uast(
    type: "Synthetic"
)

defer <- (defer) => uast(
    type: "Synthetic"
)

dollars_content <- (dollars_content) => uast(
    type: "Synthetic"
)

else <- (else) => uast(
    type: "Synthetic"
)

enum <- (enum) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
)

extern <- (extern) => uast(
    type: "Synthetic"
)

external <- (external) => uast(
    type: "Synthetic"
)

false <- (false) => uast(
    type: "Synthetic"
)

file_name <- (file_name) => uast(
    type: "Synthetic"
)

if <- (if) => uast(
    type: "If"
)

illegal <- (illegal) => uast(
    type: "Synthetic"
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
)

in <- (in) => uast(
    type: "Synthetic"
)

inevitable <- (inevitable) => uast(
    type: "Synthetic"
)

injected <- (injected) => uast(
    type: "Synthetic"
)

inout <- (inout) => uast(
    type: "Synthetic"
)

interface <- (interface) => uast(
    type: "Interface",
    roles: "Interface", "Declaration"
)

invariant <- (invariant) => uast(
    type: "Synthetic"
)

member_name <- (member_name) => uast(
    type: "Synthetic"
)

namespace <- (namespace) => uast(
    type: "Namespace",
    roles: "Module"
)

number <- (number) => uast(
    type: "Synthetic"
)

on <- (on) => uast(
    type: "Synthetic"
)

optional <- (optional) => uast(
    type: "Synthetic"
)

otherwise <- (otherwise) => uast(
    type: "Synthetic"
)

out <- (out) => uast(
    type: "Synthetic"
)

provides <- (provides) => uast(
    type: "Synthetic"
)

reply <- (reply) => uast(
    type: "Synthetic"
)

requires <- (requires) => uast(
    type: "Synthetic"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
)

subint <- (subint) => uast(
    type: "Synthetic"
)

system <- (system) => uast(
    type: "Synthetic"
)

true <- (true) => uast(
    type: "Synthetic"
)

void <- (void) => uast(
    type: "Synthetic"
)

