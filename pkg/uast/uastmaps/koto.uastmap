alignment <- (alignment) => uast(
    type: "Synthetic"
)

arg <- (arg) => uast(
    type: "Synthetic"
)

args <- (args) => uast(
    type: "Synthetic"
)

assign <- (assign) => uast(
    type: "Synthetic",
    children: "assign", "assign_expressions", "binary_op", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "false", "for", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

assign_expressions <- (assign_expressions) => uast(
    type: "Synthetic"
)

assign_targets <- (assign_targets) => uast(
    type: "Synthetic"
)

binary_op <- (binary_op) => uast(
    type: "BinaryOp",
    roles: "Operator"
)

block <- (block) => uast(
    type: "Block",
    roles: "Body"
)

boolean_op <- (boolean_op) => uast(
    type: "Synthetic"
)

call <- (call) => uast(
    type: "Call",
    roles: "Call",
    children: "chain", "identifier"
)

call_arg <- (call_arg) => uast(
    type: "Call",
    roles: "Call"
)

call_args <- (call_args) => uast(
    type: "Call",
    roles: "Call"
)

catch <- (catch) => uast(
    type: "Catch",
    roles: "Catch"
)

chain <- (chain) => uast(
    type: "Synthetic",
    children: "binary_op", "boolean_op", "call_args", "chain", "comparison_op", "debug", "false", "function", "identifier", "if", "list", "map", "match", "meta", "negate", "not", "null", "number", "parenthesized", "range", "range_from", "range_full", "range_inclusive", "range_to", "range_to_inclusive", "self", "string", "switch", "true", "tuple"
)

comparison_op <- (comparison_op) => uast(
    type: "Synthetic"
)

debug <- (debug) => uast(
    type: "Synthetic"
)

default <- (default) => uast(
    type: "Synthetic"
)

element <- (element) => uast(
    type: "Synthetic"
)

else <- (else) => uast(
    type: "Synthetic"
)

else_if <- (else_if) => uast(
    type: "If",
    children: "assign", "binary_op", "block", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "false", "for", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

entry_block <- (entry_block) => uast(
    type: "Block",
    roles: "Body",
    children: "assign", "binary_op", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "false", "for", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

entry_inline <- (entry_inline) => uast(
    type: "Try",
    roles: "Try",
    children: "assign", "binary_op", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "false", "for", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

escape <- (escape) => uast(
    type: "Synthetic"
)

export <- (export) => uast(
    type: "Synthetic"
)

expressions <- (expressions) => uast(
    type: "Synthetic"
)

fill_char <- (fill_char) => uast(
    type: "Synthetic"
)

finally <- (finally) => uast(
    type: "Finally",
    roles: "Finally"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop",
    children: "assign", "binary_op", "block", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "false", "for", "for_args", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

for_args <- (for_args) => uast(
    type: "Loop",
    roles: "Loop"
)

format <- (format) => uast(
    type: "Loop",
    roles: "Loop"
)

function <- (function) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "assign", "binary_op", "block", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "expressions", "false", "for", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "multi_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

if <- (if) => uast(
    type: "If",
    children: "assign", "binary_op", "block", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "false", "for", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
)

import_item <- (import_item) => uast(
    type: "Import",
    roles: "Import"
)

import_module <- (import_module) => uast(
    type: "Import",
    roles: "Import"
)

interpolation <- (interpolation) => uast(
    type: "Synthetic"
)

let_assign <- (let_assign) => uast(
    type: "Synthetic",
    children: "assign", "assign_expressions", "binary_op", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "false", "for", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

list <- (list) => uast(
    type: "List"
)

loop <- (loop) => uast(
    type: "Loop",
    roles: "Loop"
)

map <- (map) => uast(
    type: "Synthetic"
)

map_block <- (map_block) => uast(
    type: "Block",
    roles: "Body"
)

match <- (match) => uast(
    type: "Match",
    roles: "Match",
    children: "assign", "binary_op", "block", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "expressions", "false", "for", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "multi_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

match_arm <- (match_arm) => uast(
    type: "Match",
    roles: "Match",
    children: "assign", "binary_op", "block", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "expressions", "false", "for", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "multi_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

match_conditions <- (match_conditions) => uast(
    type: "Match",
    roles: "Match"
)

match_patterns <- (match_patterns) => uast(
    type: "Pattern",
    roles: "Pattern"
)

match_terms <- (match_terms) => uast(
    type: "Match",
    roles: "Match"
)

meta <- (meta) => uast(
    type: "Synthetic",
    children: "identifier", "meta_id"
)

modify_assign <- (modify_assign) => uast(
    type: "If"
)

module <- (module) => uast(
    type: "Module",
    roles: "Module"
)

multi_assign <- (multi_assign) => uast(
    type: "Synthetic",
    children: "assign", "assign_expressions", "assign_targets", "binary_op", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "false", "for", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

negate <- (negate) => uast(
    type: "Synthetic"
)

not <- (not) => uast(
    type: "Synthetic"
)

null_check <- (null_check) => uast(
    type: "Synthetic"
)

parenthesized <- (parenthesized) => uast(
    type: "Synthetic"
)

range <- (range) => uast(
    type: "Synthetic"
)

range_from <- (range_from) => uast(
    type: "Synthetic"
)

range_full <- (range_full) => uast(
    type: "Synthetic"
)

range_inclusive <- (range_inclusive) => uast(
    type: "Synthetic"
)

range_to <- (range_to) => uast(
    type: "Synthetic"
)

range_to_inclusive <- (range_to_inclusive) => uast(
    type: "Synthetic"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
)

string <- (string) => uast(
    type: "Synthetic"
)

switch <- (switch) => uast(
    type: "Switch",
    children: "assign", "binary_op", "block", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "expressions", "false", "for", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "multi_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

switch_arm <- (switch_arm) => uast(
    type: "Switch",
    children: "assign", "binary_op", "block", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "expressions", "false", "for", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "multi_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

throw <- (throw) => uast(
    type: "Throw",
    roles: "Throw"
)

try <- (try) => uast(
    type: "Try",
    roles: "Try"
)

tuple <- (tuple) => uast(
    type: "Tuple"
)

type <- (type) => uast(
    type: "Synthetic"
)

until <- (until) => uast(
    type: "Synthetic",
    children: "assign", "binary_op", "block", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "false", "for", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

variable <- (variable) => uast(
    type: "Variable",
    roles: "Variable", "Declaration"
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop",
    children: "assign", "binary_op", "block", "boolean_op", "break", "call", "chain", "comparison_op", "continue", "debug", "export", "false", "for", "function", "identifier", "if", "import", "let_assign", "list", "loop", "map", "map_block", "match", "meta", "modify_assign", "negate", "not", "null", "number", "parenthesized", "range", "range_inclusive", "return", "self", "string", "switch", "throw", "true", "try", "tuple", "until", "while", "yield"
)

yield <- (yield) => uast(
    type: "Yield",
    roles: "Yield"
)

and <- (and) => uast(
    type: "Synthetic"
)

as <- (as) => uast(
    type: "Synthetic"
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
)

catch <- (catch) => uast(
    type: "Catch",
    roles: "Catch"
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue"
)

debug <- (debug) => uast(
    type: "Synthetic"
)

ellipsis <- (ellipsis) => uast(
    type: "Synthetic"
)

else <- (else) => uast(
    type: "Synthetic"
)

export <- (export) => uast(
    type: "Synthetic"
)

false <- (false) => uast(
    type: "Synthetic"
)

finally <- (finally) => uast(
    type: "Finally",
    roles: "Finally"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
)

from <- (from) => uast(
    type: "Synthetic"
)

identifier <- (identifier) => uast(
    type: "If"
)

if <- (if) => uast(
    type: "If"
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
)

in <- (in) => uast(
    type: "Synthetic"
)

let <- (let) => uast(
    type: "Synthetic"
)

loop <- (loop) => uast(
    type: "Loop",
    roles: "Loop"
)

match <- (match) => uast(
    type: "Match",
    roles: "Match"
)

meta_id <- (meta_id) => uast(
    type: "Synthetic"
)

not <- (not) => uast(
    type: "Synthetic"
)

null <- (null) => uast(
    type: "Synthetic"
)

number <- (number) => uast(
    type: "Synthetic"
)

or <- (or) => uast(
    type: "Synthetic"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
)

self <- (self) => uast(
    type: "Synthetic"
)

switch <- (switch) => uast(
    type: "Switch"
)

test <- (test) => uast(
    type: "Synthetic"
)

then <- (then) => uast(
    type: "Synthetic"
)

throw <- (throw) => uast(
    type: "Throw",
    roles: "Throw"
)

true <- (true) => uast(
    type: "Synthetic"
)

try <- (try) => uast(
    type: "Try",
    roles: "Try"
)

until <- (until) => uast(
    type: "Synthetic"
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
)

yield <- (yield) => uast(
    type: "Yield",
    roles: "Yield"
)

