abs_operators <- (abs_operators) => uast(
    type: "Synthetic",
    children: []
)

assert_panic_statement <- (assert_panic_statement) => uast(
    type: "Synthetic",
    children: []
)

assignment_statement <- (assignment_statement) => uast(
    type: "Assignment",
    roles: "Assignment"
    children: []
)

binary_operators <- (binary_operators) => uast(
    type: "BinaryOp",
    roles: "Operator"
    children: []
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

comparison_operators <- (comparison_operators) => uast(
    type: "Synthetic",
    children: []
)

compound_operators <- (compound_operators) => uast(
    type: "Synthetic",
    children: []
)

decorated_args <- (decorated_args) => uast(
    type: "Synthetic",
    children: []
)

dict <- (dict) => uast(
    type: "Dict",
    children: []
)

for_statement <- (for_statement) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

function <- (function) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: []
)

function_body <- (function_body) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: []
)

function_calling <- (function_calling) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: []
)

function_definition <- (function_definition) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: []
)

identifier <- (identifier) => uast(
    type: "If",
    children: []
)

if_statement <- (if_statement) => uast(
    type: "If",
    children: []
)

implicit_arguments <- (implicit_arguments) => uast(
    type: "Synthetic",
    children: []
)

import_identifier <- (import_identifier) => uast(
    type: "If",
    children: []
)

import_statement <- (import_statement) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

key_value_pair <- (key_value_pair) => uast(
    type: "KeyValue",
    roles: "Key", "Value"
    children: []
)

keyword_operators <- (keyword_operators) => uast(
    type: "Synthetic",
    children: []
)

list <- (list) => uast(
    type: "List",
    children: []
)

list_calling <- (list_calling) => uast(
    type: "Call",
    roles: "Call"
    children: []
)

method_calling <- (method_calling) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: []
)

parenthesis_included_params <- (parenthesis_included_params) => uast(
    type: "Synthetic",
    children: []
)

print_statement <- (print_statement) => uast(
    type: "Synthetic",
    children: []
)

range_expression <- (range_expression) => uast(
    type: "Synthetic",
    children: []
)

return_statement <- (return_statement) => uast(
    type: "Return",
    roles: "Return"
    children: []
)

source_file <- (source_file) => uast(
    type: "Synthetic",
    children: []
)

string <- (string) => uast(
    type: "Synthetic",
    children: []
)

tuple_lhs <- (tuple_lhs) => uast(
    type: "Tuple",
    children: []
)

while_statement <- (while_statement) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

as <- (as) => uast(
    type: "Synthetic",
    children: []
)

assert <- (assert) => uast(
    type: "Synthetic",
    children: []
)

break_statement <- (break_statement) => uast(
    type: "Break",
    roles: "Break"
    children: []
)

def <- (def) => uast(
    type: "Synthetic",
    children: []
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

if <- (if) => uast(
    type: "If",
    children: []
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

isa <- (isa) => uast(
    type: "Synthetic",
    children: []
)

number <- (number) => uast(
    type: "Synthetic",
    children: []
)

panic <- (panic) => uast(
    type: "Synthetic",
    children: []
)

printf <- (printf) => uast(
    type: "Synthetic",
    children: []
)

println <- (println) => uast(
    type: "Synthetic",
    children: []
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
    children: []
)

where <- (where) => uast(
    type: "Synthetic",
    children: []
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

