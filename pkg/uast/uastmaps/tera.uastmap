argument_list <- (argument_list) => uast(
    type: "List",
    children: []
)

array <- (array) => uast(
    type: "Synthetic",
    children: []
)

assignment_expression <- (assignment_expression) => uast(
    type: "Assignment",
    roles: "Assignment"
    children: "array", "binary_expression", "bool", "call_expression", "filter_expression", "identifier", "member_expression", "number", "parenthesized_expression", "string", "unary_expression"
)

binary_expression <- (binary_expression) => uast(
    type: "Synthetic",
    children: "and", "array", "binary_expression", "bool", "call_expression", "filter_expression", "identifier", "in", "member_expression", "number", "or", "parenthesized_expression", "string", "unary_expression"
)

block_statement <- (block_statement) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

call_expression <- (call_expression) => uast(
    type: "Call",
    roles: "Call"
    children: "argument_list", "identifier"
)

comment_tag <- (comment_tag) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

elif_clause <- (elif_clause) => uast(
    type: "If",
    children: "array", "binary_expression", "block_statement", "bool", "call_expression", "comment_tag", "content", "elif", "expression_tag", "extends_statement", "filter_expression", "filter_statement", "for_break_statement", "for_continue_statement", "for_statement", "identifier", "if_statement", "import_statement", "include_statement", "macro_statement", "member_expression", "number", "parenthesized_expression", "raw_statement", "set_statement", "string", "test_expression", "unary_expression"
)

else_clause <- (else_clause) => uast(
    type: "Synthetic",
    children: "block_statement", "comment_tag", "content", "expression_tag", "extends_statement", "filter_statement", "for_break_statement", "for_continue_statement", "for_statement", "if_statement", "import_statement", "include_statement", "macro_statement", "raw_statement", "set_statement"
)

expression_tag <- (expression_tag) => uast(
    type: "Synthetic",
    children: []
)

extends_statement <- (extends_statement) => uast(
    type: "Synthetic",
    children: []
)

filter_expression <- (filter_expression) => uast(
    type: "Synthetic",
    children: "argument_list", "array", "binary_expression", "bool", "call_expression", "filter_expression", "identifier", "member_expression", "number", "parenthesized_expression", "string", "unary_expression"
)

filter_statement <- (filter_statement) => uast(
    type: "Synthetic",
    children: []
)

for_break_statement <- (for_break_statement) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

for_continue_statement <- (for_continue_statement) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

for_statement <- (for_statement) => uast(
    type: "Loop",
    roles: "Loop"
    children: "array", "binary_expression", "block_statement", "bool", "call_expression", "comment_tag", "content", "else_clause", "expression_tag", "extends_statement", "filter_expression", "filter_statement", "for_break_statement", "for_continue_statement", "for_statement", "identifier", "if_statement", "import_statement", "include_statement", "macro_statement", "member_expression", "number", "parenthesized_expression", "raw_statement", "set_statement", "string", "unary_expression"
)

frontmatter <- (frontmatter) => uast(
    type: "Synthetic",
    children: []
)

if_statement <- (if_statement) => uast(
    type: "If",
    children: "array", "binary_expression", "block_statement", "bool", "call_expression", "comment_tag", "content", "elif_clause", "else_clause", "expression_tag", "extends_statement", "filter_expression", "filter_statement", "for_break_statement", "for_continue_statement", "for_statement", "identifier", "if_statement", "import_statement", "include_statement", "macro_statement", "member_expression", "number", "parenthesized_expression", "raw_statement", "set_statement", "string", "test_expression", "unary_expression"
)

import_statement <- (import_statement) => uast(
    type: "Import",
    roles: "Import"
    children: "identifier"
)

include_statement <- (include_statement) => uast(
    type: "Synthetic",
    children: []
)

keyword_argument <- (keyword_argument) => uast(
    type: "Synthetic",
    children: "array", "binary_expression", "bool", "call_expression", "filter_expression", "identifier", "member_expression", "number", "parenthesized_expression", "string", "unary_expression"
)

macro_statement <- (macro_statement) => uast(
    type: "Synthetic",
    children: "block_statement", "comment_tag", "content", "expression_tag", "extends_statement", "filter_statement", "for_break_statement", "for_continue_statement", "for_statement", "identifier", "if_statement", "import_statement", "include_statement", "macro_statement", "parameter_list", "raw_statement", "set_statement"
)

member_expression <- (member_expression) => uast(
    type: "Synthetic",
    children: "array", "binary_expression", "bool", "call_expression", "filter_expression", "identifier", "member_expression", "number", "parenthesized_expression", "string", "unary_expression"
)

optional_parameter <- (optional_parameter) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: "bool", "identifier", "number", "string"
)

parameter_list <- (parameter_list) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: "identifier"
)

parenthesized_expression <- (parenthesized_expression) => uast(
    type: "Synthetic",
    children: []
)

raw_statement <- (raw_statement) => uast(
    type: "Synthetic",
    children: "block_statement", "comment_tag", "content", "expression_tag", "extends_statement", "filter_statement", "for_break_statement", "for_continue_statement", "for_statement", "if_statement", "import_statement", "include_statement", "macro_statement", "raw_statement", "set_statement"
)

set_statement <- (set_statement) => uast(
    type: "Set",
    children: []
)

source_file <- (source_file) => uast(
    type: "Synthetic",
    children: []
)

string <- (string) => uast(
    type: "Synthetic",
    children: []
)

test_expression <- (test_expression) => uast(
    type: "Synthetic",
    children: "array", "binary_expression", "bool", "call_expression", "filter_expression", "identifier", "member_expression", "number", "parenthesized_expression", "string", "unary_expression"
)

unary_expression <- (unary_expression) => uast(
    type: "Synthetic",
    children: []
)

and <- (and) => uast(
    type: "Synthetic",
    children: []
)

as <- (as) => uast(
    type: "Synthetic",
    children: []
)

block <- (block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

bool <- (bool) => uast(
    type: "Synthetic",
    children: []
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
    children: []
)

content <- (content) => uast(
    type: "Synthetic",
    children: []
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue"
    children: []
)

elif <- (elif) => uast(
    type: "If",
    children: []
)

else <- (else) => uast(
    type: "Synthetic",
    children: []
)

endblock <- (endblock) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

endfilter <- (endfilter) => uast(
    type: "Synthetic",
    children: []
)

endfor <- (endfor) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

endif <- (endif) => uast(
    type: "If",
    children: []
)

endmacro <- (endmacro) => uast(
    type: "Synthetic",
    children: []
)

endraw <- (endraw) => uast(
    type: "Synthetic",
    children: []
)

extends <- (extends) => uast(
    type: "Synthetic",
    children: []
)

filter <- (filter) => uast(
    type: "Synthetic",
    children: []
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

frontmatter_delimiter <- (frontmatter_delimiter) => uast(
    type: "Synthetic",
    children: []
)

identifier <- (identifier) => uast(
    type: "If",
    children: []
)

if <- (if) => uast(
    type: "If",
    children: []
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

in <- (in) => uast(
    type: "Synthetic",
    children: []
)

include <- (include) => uast(
    type: "Synthetic",
    children: []
)

is <- (is) => uast(
    type: "Synthetic",
    children: []
)

macro <- (macro) => uast(
    type: "Synthetic",
    children: []
)

not <- (not) => uast(
    type: "Synthetic",
    children: []
)

number <- (number) => uast(
    type: "Synthetic",
    children: []
)

or <- (or) => uast(
    type: "Synthetic",
    children: []
)

raw <- (raw) => uast(
    type: "Synthetic",
    children: []
)

set <- (set) => uast(
    type: "Set",
    children: []
)

set_global <- (set_global) => uast(
    type: "Set",
    children: []
)

