_expression <- (_expression) => uast(
    type: "Synthetic"
)

arg_item <- (arg_item) => uast(
    type: "Synthetic",
    children: "_expression", "for_comprehension", "ref", "reg"
)

arg_item_list <- (arg_item_list) => uast(
    type: "List"
)

arg_list <- (arg_list) => uast(
    type: "List"
)

array_type <- (array_type) => uast(
    type: "Synthetic",
    children: "array_type", "expression_type", "function_type", "primitive_type", "tuple_sq"
)

assignment_or_declaration_statement <- (assignment_or_declaration_statement) => uast(
    type: "Assignment",
    roles: "Assignment",
    children: "_expression", "assignment_operator", "complex_identifier", "complex_identifier_list", "cycle_select_or_pound", "enum_definition", "for_comprehension", "ref_identifier", "type_cast", "var_or_let_or_reg", "when_unless_cond"
)

attributes <- (attributes) => uast(
    type: "Attribute",
    roles: "Attribute"
)

binary_expression <- (binary_expression) => uast(
    type: "Synthetic",
    children: "_expression", "and", "and_then", "case", "does", "equals", "has", "implies", "in", "is", "or", "or_else", "step"
)

bit_select <- (bit_select) => uast(
    type: "Synthetic",
    children: "bit_select_type", "select"
)

bit_select_type <- (bit_select_type) => uast(
    type: "Synthetic"
)

bit_selection <- (bit_selection) => uast(
    type: "Synthetic",
    children: "bit_select", "complex_identifier", "constant", "function_call", "if_expression", "lambda", "match_expression", "optional_expression", "scope_expression", "tuple", "tuple_sq"
)

bounded_integer_type <- (bounded_integer_type) => uast(
    type: "Synthetic",
    children: "select_options"
)

capture_list <- (capture_list) => uast(
    type: "List",
    children: "_expression", "for_comprehension"
)

complex_identifier <- (complex_identifier) => uast(
    type: "If"
)

complex_identifier_list <- (complex_identifier_list) => uast(
    type: "If",
    children: "complex_identifier"
)

complex_string_literal <- (complex_string_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

constant <- (constant) => uast(
    type: "Synthetic"
)

control_statement <- (control_statement) => uast(
    type: "Synthetic",
    children: "_expression", "for_comprehension", "when_unless_cond"
)

cycle_select <- (cycle_select) => uast(
    type: "Synthetic"
)

cycle_select_or_pound <- (cycle_select_or_pound) => uast(
    type: "Synthetic"
)

cycle_selection <- (cycle_selection) => uast(
    type: "Synthetic",
    children: "complex_identifier", "constant", "cycle_select", "function_call", "if_expression", "lambda", "match_expression", "optional_expression", "scope_expression", "tuple", "tuple_sq"
)

description <- (description) => uast(
    type: "Synthetic"
)

dot_expression <- (dot_expression) => uast(
    type: "Synthetic",
    children: "complex_identifier", "constant", "function_call", "if_expression", "lambda", "match_expression", "optional_expression", "scope_expression", "tuple", "tuple_sq"
)

dot_expression_type <- (dot_expression_type) => uast(
    type: "Synthetic",
    children: "expression_type"
)

enum_definition <- (enum_definition) => uast(
    type: "Enum",
    roles: "Enum", "Declaration",
    children: "arg_list"
)

expression_list <- (expression_list) => uast(
    type: "List",
    children: "_expression"
)

expression_statement <- (expression_statement) => uast(
    type: "Synthetic",
    children: "when_unless_cond"
)

expression_type <- (expression_type) => uast(
    type: "Synthetic"
)

for_comprehension <- (for_comprehension) => uast(
    type: "Loop",
    roles: "Loop",
    children: "expression_list", "stmt_list", "typed_identifier_list"
)

for_statement <- (for_statement) => uast(
    type: "Loop",
    roles: "Loop",
    children: "expression_list", "scope_statement", "typed_identifier_list"
)

func_def_verification <- (func_def_verification) => uast(
    type: "If"
)

function_call <- (function_call) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "complex_identifier", "tuple"
)

function_call_statement <- (function_call_statement) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "when_unless_cond"
)

function_call_type <- (function_call_type) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "complex_identifier", "tuple"
)

function_definition <- (function_definition) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "arg_list", "capture_list", "expression_list", "func_def_verification", "scope_statement", "type_or_identifier", "typed_identifier_list", "where"
)

function_definition_statement <- (function_definition_statement) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "complex_identifier", "fun_tok", "proc_tok"
)

function_inline <- (function_inline) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "arg_list", "fun_tok", "identifier", "proc_tok", "typed_identifier_list"
)

function_type <- (function_type) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "arg_list", "fun_tok", "proc_tok", "typed_identifier_list"
)

if_expression <- (if_expression) => uast(
    type: "If",
    children: "elif", "else", "pipestage_scope_statement", "scope_statement", "stmt_list"
)

lambda <- (lambda) => uast(
    type: "Lambda",
    roles: "Lambda",
    children: "fun_tok", "proc_tok"
)

loop_statement <- (loop_statement) => uast(
    type: "Loop",
    roles: "Loop",
    children: "pipestage_scope_statement", "scope_statement"
)

match_expression <- (match_expression) => uast(
    type: "Match",
    roles: "Match",
    children: "match_list", "stmt_list"
)

match_list <- (match_list) => uast(
    type: "List",
    children: "else", "expression_list", "match_operator", "pipestage_scope_statement", "scope_statement"
)

match_operator <- (match_operator) => uast(
    type: "Match",
    roles: "Match"
)

member_select <- (member_select) => uast(
    type: "Synthetic"
)

member_selection <- (member_selection) => uast(
    type: "Synthetic",
    children: "complex_identifier", "constant", "function_call", "if_expression", "lambda", "match_expression", "member_select", "optional_expression", "scope_expression", "tuple", "tuple_sq"
)

optional_expression <- (optional_expression) => uast(
    type: "Synthetic",
    children: "_expression"
)

pipestage_scope_statement <- (pipestage_scope_statement) => uast(
    type: "Synthetic",
    children: "identifier", "scope_statement", "tuple_sq"
)

primitive_type <- (primitive_type) => uast(
    type: "Synthetic"
)

range_type <- (range_type) => uast(
    type: "Synthetic"
)

ref_identifier <- (ref_identifier) => uast(
    type: "If"
)

scope_expression <- (scope_expression) => uast(
    type: "Synthetic"
)

scope_statement <- (scope_statement) => uast(
    type: "Synthetic"
)

select <- (select) => uast(
    type: "Synthetic"
)

select_options <- (select_options) => uast(
    type: "Synthetic",
    children: "_expression", "expression_list"
)

selection <- (selection) => uast(
    type: "Synthetic"
)

simple_assignment <- (simple_assignment) => uast(
    type: "Assignment",
    roles: "Assignment",
    children: "_expression", "assignment_operator", "cycle_select_or_pound", "for_comprehension", "identifier", "ref_identifier", "type_cast", "type_specification", "var_or_let_or_reg"
)

simple_function_call <- (simple_function_call) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "always_tok", "complex_identifier", "expression_list"
)

statement <- (statement) => uast(
    type: "Synthetic"
)

stmt_list <- (stmt_list) => uast(
    type: "List",
    children: "_expression", "for_comprehension", "function_inline", "ref_identifier", "scope_statement", "simple_assignment"
)

test_statement <- (test_statement) => uast(
    type: "Synthetic",
    children: "expression_list", "scope_statement", "where"
)

tuple <- (tuple) => uast(
    type: "Tuple"
)

tuple_list <- (tuple_list) => uast(
    type: "Tuple",
    children: "_expression", "for_comprehension", "function_inline", "ref_identifier", "scope_statement", "simple_assignment"
)

tuple_sq <- (tuple_sq) => uast(
    type: "Tuple"
)

type_cast <- (type_cast) => uast(
    type: "Cast",
    children: "array_type", "attributes", "expression_type", "function_type", "primitive_type"
)

type_or_identifier <- (type_or_identifier) => uast(
    type: "If",
    children: "type_cast"
)

type_specification <- (type_specification) => uast(
    type: "If",
    children: "array_type", "attributes", "complex_identifier", "constant", "expression_type", "function_call", "function_type", "if_expression", "lambda", "match_expression", "optional_expression", "primitive_type", "scope_expression", "tuple", "tuple_sq"
)

typed_identifier <- (typed_identifier) => uast(
    type: "If",
    children: "identifier", "type_cast"
)

typed_identifier_list <- (typed_identifier_list) => uast(
    type: "If",
    children: "typed_identifier"
)

unary_expression <- (unary_expression) => uast(
    type: "Synthetic",
    children: "_expression", "not"
)

unsized_integer_type <- (unsized_integer_type) => uast(
    type: "Synthetic"
)

var_or_let_or_reg <- (var_or_let_or_reg) => uast(
    type: "Synthetic"
)

when_unless_cond <- (when_unless_cond) => uast(
    type: "Synthetic",
    children: "_expression"
)

while_statement <- (while_statement) => uast(
    type: "Loop",
    roles: "Loop",
    children: "pipestage_scope_statement", "scope_statement", "stmt_list"
)

always_tok <- (always_tok) => uast(
    type: "Synthetic"
)

and <- (and) => uast(
    type: "Synthetic"
)

and_then <- (and_then) => uast(
    type: "Synthetic"
)

assignment_operator <- (assignment_operator) => uast(
    type: "Assignment",
    roles: "Assignment"
)

boolean_type <- (boolean_type) => uast(
    type: "Synthetic"
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
)

case <- (case) => uast(
    type: "Case",
    roles: "Branch"
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue"
)

does <- (does) => uast(
    type: "Synthetic"
)

elif <- (elif) => uast(
    type: "If"
)

else <- (else) => uast(
    type: "Synthetic"
)

ensures <- (ensures) => uast(
    type: "Synthetic"
)

enum <- (enum) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
)

equals <- (equals) => uast(
    type: "Synthetic"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
)

fun_tok <- (fun_tok) => uast(
    type: "Synthetic"
)

has <- (has) => uast(
    type: "Synthetic"
)

identifier <- (identifier) => uast(
    type: "If"
)

if <- (if) => uast(
    type: "If"
)

implies <- (implies) => uast(
    type: "Synthetic"
)

in <- (in) => uast(
    type: "Synthetic"
)

int <- (int) => uast(
    type: "Synthetic"
)

integer <- (integer) => uast(
    type: "Synthetic"
)

is <- (is) => uast(
    type: "Synthetic"
)

let <- (let) => uast(
    type: "Synthetic"
)

loop <- (loop) => uast(
    type: "Loop",
    roles: "Loop"
)

match <- (match) => uast(
    type: "Match",
    roles: "Match"
)

not <- (not) => uast(
    type: "Synthetic"
)

or <- (or) => uast(
    type: "Synthetic"
)

or_else <- (or_else) => uast(
    type: "Synthetic"
)

proc_tok <- (proc_tok) => uast(
    type: "Synthetic"
)

range <- (range) => uast(
    type: "Synthetic"
)

ref <- (ref) => uast(
    type: "Synthetic"
)

reg <- (reg) => uast(
    type: "Synthetic"
)

requires <- (requires) => uast(
    type: "Synthetic"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
)

sext <- (sext) => uast(
    type: "Synthetic"
)

signed <- (signed) => uast(
    type: "Synthetic"
)

sized_integer_type <- (sized_integer_type) => uast(
    type: "Synthetic"
)

step <- (step) => uast(
    type: "Synthetic"
)

string_type <- (string_type) => uast(
    type: "Synthetic"
)

test <- (test) => uast(
    type: "Synthetic"
)

type_type <- (type_type) => uast(
    type: "Synthetic"
)

uint <- (uint) => uast(
    type: "Synthetic"
)

unique <- (unique) => uast(
    type: "Synthetic"
)

unless <- (unless) => uast(
    type: "Synthetic"
)

unsigned <- (unsigned) => uast(
    type: "Synthetic"
)

var <- (var) => uast(
    type: "Synthetic"
)

variant <- (variant) => uast(
    type: "Synthetic"
)

when <- (when) => uast(
    type: "Synthetic"
)

where <- (where) => uast(
    type: "Synthetic"
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
)

zext <- (zext) => uast(
    type: "Synthetic"
)

