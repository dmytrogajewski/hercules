access <- (access) => uast(
    type: "Synthetic",
    children: "expression", "identifier"
)

additive_operator <- (additive_operator) => uast(
    type: "Synthetic"
)

arg_list <- (arg_list) => uast(
    type: "List"
)

assert <- (assert) => uast(
    type: "Synthetic",
    children: "expression"
)

assignment <- (assignment) => uast(
    type: "Assignment",
    roles: "Assignment",
    children: "access", "expression", "identifier", "index"
)

binary_expression <- (binary_expression) => uast(
    type: "Synthetic",
    children: "additive_operator", "and_operator", "comparative_operator", "expression", "multiplicative_operator", "or_operator", "power_operator"
)

block <- (block) => uast(
    type: "Block",
    roles: "Body",
    children: "block", "break", "class_declaration", "continue", "for_loop", "function_declaration", "if_chain", "statement"
)

bool <- (bool) => uast(
    type: "Synthetic"
)

call <- (call) => uast(
    type: "Call",
    roles: "Call",
    children: "arg_list", "expression"
)

class_declaration <- (class_declaration) => uast(
    type: "Class",
    roles: "Class", "Declaration",
    children: "block", "identifier", "param_list"
)

comparative_operator <- (comparative_operator) => uast(
    type: "Synthetic"
)

doc_comment <- (doc_comment) => uast(
    type: "Comment",
    roles: "Comment"
)

expression <- (expression) => uast(
    type: "Synthetic"
)

for_loop <- (for_loop) => uast(
    type: "Loop",
    roles: "Loop",
    children: "block", "expression", "identifier"
)

function_declaration <- (function_declaration) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "block", "identifier", "overloadable_operator", "param_list", "qualifier_list", "type"
)

identifier <- (identifier) => uast(
    type: "If"
)

if_chain <- (if_chain) => uast(
    type: "If",
    children: "block", "expression"
)

import <- (import) => uast(
    type: "Import",
    roles: "Import",
    children: "import_path", "import_relative_dot"
)

import_path <- (import_path) => uast(
    type: "Import",
    roles: "Import",
    children: "identifier", "import_path"
)

import_relative_dot <- (import_relative_dot) => uast(
    type: "Import",
    roles: "Import"
)

index <- (index) => uast(
    type: "Index",
    roles: "Index",
    children: "expression"
)

lambda <- (lambda) => uast(
    type: "Lambda",
    roles: "Lambda",
    children: "block", "expression", "param_list"
)

literal <- (literal) => uast(
    type: "Literal",
    roles: "Literal"
)

map <- (map) => uast(
    type: "Synthetic"
)

map_item <- (map_item) => uast(
    type: "Synthetic",
    children: "expression"
)

multiplicative_operator <- (multiplicative_operator) => uast(
    type: "Synthetic"
)

or_operator <- (or_operator) => uast(
    type: "Synthetic"
)

overloadable_operator <- (overloadable_operator) => uast(
    type: "Synthetic"
)

param <- (param) => uast(
    type: "Synthetic",
    children: "identifier", "type"
)

param_list <- (param_list) => uast(
    type: "List"
)

parenthesized_expression <- (parenthesized_expression) => uast(
    type: "Synthetic",
    children: "expression"
)

primitive_type <- (primitive_type) => uast(
    type: "Synthetic"
)

print <- (print) => uast(
    type: "Synthetic",
    children: "expression"
)

proto <- (proto) => uast(
    type: "Synthetic",
    children: "identifier", "overloadable_operator", "param_list", "qualifier_list", "type"
)

qualifier <- (qualifier) => uast(
    type: "If"
)

qualifier_list <- (qualifier_list) => uast(
    type: "If"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return",
    children: "expression"
)

slice <- (slice) => uast(
    type: "Slice",
    children: "expression"
)

source_file <- (source_file) => uast(
    type: "Synthetic"
)

statement <- (statement) => uast(
    type: "Synthetic"
)

type <- (type) => uast(
    type: "Synthetic"
)

type_name <- (type_name) => uast(
    type: "Synthetic"
)

unary_expression <- (unary_expression) => uast(
    type: "Synthetic",
    children: "expression", "unary_operator"
)

unary_operator <- (unary_operator) => uast(
    type: "UnaryOp",
    roles: "Operator"
)

var_decl <- (var_decl) => uast(
    type: "Synthetic",
    children: "expression", "identifier", "qualifier_list", "type"
)

vec <- (vec) => uast(
    type: "Synthetic"
)

and_operator <- (and_operator) => uast(
    type: "Synthetic"
)

any <- (any) => uast(
    type: "Synthetic"
)

assert <- (assert) => uast(
    type: "Synthetic"
)

bool <- (bool) => uast(
    type: "Synthetic"
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
)

class <- (class) => uast(
    type: "Class",
    roles: "Class", "Declaration"
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue"
)

doc_comment_content <- (doc_comment_content) => uast(
    type: "Comment",
    roles: "Comment"
)

elif <- (elif) => uast(
    type: "If"
)

else <- (else) => uast(
    type: "Synthetic"
)

error <- (error) => uast(
    type: "Synthetic"
)

false <- (false) => uast(
    type: "Synthetic"
)

fn <- (fn) => uast(
    type: "Synthetic"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
)

if <- (if) => uast(
    type: "If"
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
)

in <- (in) => uast(
    type: "Synthetic"
)

int <- (int) => uast(
    type: "Synthetic"
)

let <- (let) => uast(
    type: "Synthetic"
)

map <- (map) => uast(
    type: "Synthetic"
)

none <- (none) => uast(
    type: "Synthetic"
)

number <- (number) => uast(
    type: "Synthetic"
)

power_operator <- (power_operator) => uast(
    type: "Synthetic"
)

print <- (print) => uast(
    type: "Synthetic"
)

proto <- (proto) => uast(
    type: "Synthetic"
)

pure <- (pure) => uast(
    type: "Synthetic"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
)

static <- (static) => uast(
    type: "Synthetic"
)

str <- (str) => uast(
    type: "Synthetic"
)

string <- (string) => uast(
    type: "Synthetic"
)

true <- (true) => uast(
    type: "Synthetic"
)

vec <- (vec) => uast(
    type: "Synthetic"
)

void <- (void) => uast(
    type: "Synthetic"
)

