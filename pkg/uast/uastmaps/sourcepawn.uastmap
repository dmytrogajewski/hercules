_expression <- (_expression) => uast(
    type: "Synthetic",
    children: []
)

_statement <- (_statement) => uast(
    type: "Synthetic",
    children: []
)

alias_assignment <- (alias_assignment) => uast(
    type: "Assignment",
    roles: "Assignment"
    children: "builtin_type", "old_builtin_type", "parameter_declarations"
)

alias_declaration <- (alias_declaration) => uast(
    type: "Synthetic",
    children: "_statement", "old_type", "parameter_declarations", "type"
)

array_indexed_access <- (array_indexed_access) => uast(
    type: "Index",
    roles: "Index"
    children: "_expression", "array_indexed_access", "field_access", "identifier"
)

array_literal <- (array_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

array_scope_access <- (array_scope_access) => uast(
    type: "Synthetic",
    children: "identifier"
)

array_type <- (array_type) => uast(
    type: "Synthetic",
    children: []
)

assertion <- (assertion) => uast(
    type: "Synthetic",
    children: []
)

assignment_expression <- (assignment_expression) => uast(
    type: "Assignment",
    roles: "Assignment"
    children: "_expression", "array_indexed_access", "dynamic_array", "field_access", "identifier", "scope_access", "this", "view_as"
)

binary_expression <- (binary_expression) => uast(
    type: "Synthetic",
    children: "_expression"
)

block <- (block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

break_statement <- (break_statement) => uast(
    type: "Break",
    roles: "Break"
    children: []
)

builtin_type <- (builtin_type) => uast(
    type: "Synthetic",
    children: []
)

call_arguments <- (call_arguments) => uast(
    type: "Call",
    roles: "Call"
    children: []
)

call_expression <- (call_expression) => uast(
    type: "Call",
    roles: "Call"
    children: "builtin_type", "call_arguments", "field_access", "identifier"
)

case_binary_expression <- (case_binary_expression) => uast(
    type: "Case",
    roles: "Branch"
    children: "array_literal", "bool_literal", "case_binary_expression", "case_unary_expression", "char_literal", "float_literal", "identifier", "int_literal", "new_expression", "null", "parenthesized_expression", "scope_access", "sizeof_expression", "string_literal", "view_as"
)

case_unary_expression <- (case_unary_expression) => uast(
    type: "Case",
    roles: "Branch"
    children: "array_literal", "bool_literal", "case_binary_expression", "case_unary_expression", "char_literal", "float_literal", "identifier", "int_literal", "new_expression", "null", "parenthesized_expression", "scope_access", "sizeof_expression", "string_literal", "view_as"
)

char_literal <- (char_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

comma_expression <- (comma_expression) => uast(
    type: "Synthetic",
    children: "_expression", "comma_expression"
)

condition_statement <- (condition_statement) => uast(
    type: "Synthetic",
    children: "_expression", "_statement"
)

continue_statement <- (continue_statement) => uast(
    type: "Continue",
    roles: "Continue"
    children: []
)

delete_statement <- (delete_statement) => uast(
    type: "Synthetic",
    children: "_expression"
)

dimension <- (dimension) => uast(
    type: "Synthetic",
    children: []
)

do_while_statement <- (do_while_statement) => uast(
    type: "Loop",
    roles: "Loop"
    children: "_expression", "_statement"
)

dynamic_array <- (dynamic_array) => uast(
    type: "Synthetic",
    children: "builtin_type", "identifier"
)

dynamic_array_declaration <- (dynamic_array_declaration) => uast(
    type: "Synthetic",
    children: "dynamic_array", "identifier", "string_literal"
)

enum <- (enum) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: "enum_entries", "identifier"
)

enum_entries <- (enum_entries) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: []
)

enum_entry <- (enum_entry) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: "_expression", "builtin_type", "identifier"
)

enum_struct <- (enum_struct) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: "identifier"
)

enum_struct_field <- (enum_struct_field) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: "identifier", "type"
)

enum_struct_method <- (enum_struct_method) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "block", "dimension", "identifier", "parameter_declarations", "type"
)

expression_statement <- (expression_statement) => uast(
    type: "Synthetic",
    children: []
)

field_access <- (field_access) => uast(
    type: "Field",
    roles: "Member"
    children: "_expression", "identifier"
)

fixed_dimension <- (fixed_dimension) => uast(
    type: "Synthetic",
    children: []
)

for_statement <- (for_statement) => uast(
    type: "Loop",
    roles: "Loop"
    children: "_expression", "_statement", "assignment_expression", "comma_expression", "old_for_loop_variable_declaration_statement", "variable_declaration_statement"
)

funcenum <- (funcenum) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: "identifier"
)

funcenum_member <- (funcenum_member) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: "old_type", "parameter_declarations"
)

functag <- (functag) => uast(
    type: "Synthetic",
    children: "identifier", "old_type", "parameter_declarations"
)

function_declaration <- (function_declaration) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "dimension", "function_declaration_kind", "identifier", "old_type", "parameter_declarations", "type"
)

function_declaration_kind <- (function_declaration_kind) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: []
)

function_definition <- (function_definition) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "_statement", "dimension", "identifier", "old_type", "parameter_declarations", "type", "visibility"
)

global_variable_declaration <- (global_variable_declaration) => uast(
    type: "Variable",
    roles: "Variable", "Declaration"
    children: "type", "variable_storage_class", "visibility"
)

hardcoded_symbol <- (hardcoded_symbol) => uast(
    type: "Synthetic",
    children: []
)

ignore_argument <- (ignore_argument) => uast(
    type: "Synthetic",
    children: []
)

methodmap <- (methodmap) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "identifier"
)

methodmap_alias <- (methodmap_alias) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "identifier"
)

methodmap_method <- (methodmap_method) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "block", "dimension", "identifier", "parameter_declarations", "type"
)

methodmap_method_constructor <- (methodmap_method_constructor) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "block", "identifier", "parameter_declarations"
)

methodmap_method_destructor <- (methodmap_method_destructor) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "block", "identifier"
)

methodmap_native <- (methodmap_native) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "dimension", "identifier", "parameter_declarations", "type"
)

methodmap_native_constructor <- (methodmap_native_constructor) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "identifier", "parameter_declarations"
)

methodmap_native_destructor <- (methodmap_native_destructor) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "identifier"
)

methodmap_property <- (methodmap_property) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "identifier", "type"
)

methodmap_property_alias <- (methodmap_property_alias) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "identifier"
)

methodmap_property_getter <- (methodmap_property_getter) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "get"
)

methodmap_property_method <- (methodmap_property_method) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "block"
)

methodmap_property_native <- (methodmap_property_native) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: []
)

methodmap_property_setter <- (methodmap_property_setter) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "parameter_declaration", "set"
)

named_arg <- (named_arg) => uast(
    type: "Synthetic",
    children: "_expression", "identifier"
)

new_expression <- (new_expression) => uast(
    type: "Synthetic",
    children: "call_arguments", "identifier"
)

old_builtin_type <- (old_builtin_type) => uast(
    type: "Synthetic",
    children: []
)

old_for_loop_variable_declaration_statement <- (old_for_loop_variable_declaration_statement) => uast(
    type: "Variable",
    roles: "Variable", "Declaration"
    children: []
)

old_global_variable_declaration <- (old_global_variable_declaration) => uast(
    type: "Variable",
    roles: "Variable", "Declaration"
    children: "variable_storage_class", "visibility"
)

old_type <- (old_type) => uast(
    type: "Synthetic",
    children: []
)

old_type_cast <- (old_type_cast) => uast(
    type: "Cast",
    children: "_expression", "old_type"
)

old_variable_declaration <- (old_variable_declaration) => uast(
    type: "Variable",
    roles: "Variable", "Declaration"
    children: "_expression", "identifier", "old_type"
)

old_variable_declaration_statement <- (old_variable_declaration_statement) => uast(
    type: "Variable",
    roles: "Variable", "Declaration"
    children: []
)

parameter_declaration <- (parameter_declaration) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: "_expression", "array_type", "identifier", "old_type", "type", "variable_storage_class"
)

parameter_declarations <- (parameter_declarations) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: []
)

parenthesized_expression <- (parenthesized_expression) => uast(
    type: "Synthetic",
    children: "_expression", "comma_expression"
)

preproc_assert <- (preproc_assert) => uast(
    type: "Synthetic",
    children: "preproc_arg"
)

preproc_binary_expression <- (preproc_binary_expression) => uast(
    type: "Synthetic",
    children: "array_literal", "bool_literal", "char_literal", "float_literal", "identifier", "int_literal", "null", "preproc_binary_expression", "preproc_defined_condition", "preproc_parenthesized_expression", "preproc_unary_expression", "string_literal"
)

preproc_define <- (preproc_define) => uast(
    type: "Synthetic",
    children: "identifier", "preproc_arg"
)

preproc_defined_condition <- (preproc_defined_condition) => uast(
    type: "Synthetic",
    children: "identifier"
)

preproc_elseif <- (preproc_elseif) => uast(
    type: "If",
    children: "preproc_arg"
)

preproc_error <- (preproc_error) => uast(
    type: "Synthetic",
    children: []
)

preproc_if <- (preproc_if) => uast(
    type: "If",
    children: "preproc_arg"
)

preproc_include <- (preproc_include) => uast(
    type: "Synthetic",
    children: "string_literal", "system_lib_string"
)

preproc_macro <- (preproc_macro) => uast(
    type: "Synthetic",
    children: "identifier", "macro_param", "preproc_arg"
)

preproc_parenthesized_expression <- (preproc_parenthesized_expression) => uast(
    type: "Synthetic",
    children: []
)

preproc_pragma <- (preproc_pragma) => uast(
    type: "Synthetic",
    children: []
)

preproc_tryinclude <- (preproc_tryinclude) => uast(
    type: "Try",
    roles: "Try"
    children: "string_literal", "system_lib_string"
)

preproc_unary_expression <- (preproc_unary_expression) => uast(
    type: "Synthetic",
    children: "array_literal", "bool_literal", "char_literal", "float_literal", "identifier", "int_literal", "null", "preproc_binary_expression", "preproc_defined_condition", "preproc_parenthesized_expression", "preproc_unary_expression", "string_literal"
)

preproc_undefine <- (preproc_undefine) => uast(
    type: "Synthetic",
    children: "identifier"
)

preproc_warning <- (preproc_warning) => uast(
    type: "Synthetic",
    children: []
)

rest_operator <- (rest_operator) => uast(
    type: "Synthetic",
    children: []
)

rest_parameter <- (rest_parameter) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: "array_type", "old_type", "type", "variable_storage_class"
)

return_statement <- (return_statement) => uast(
    type: "Return",
    roles: "Return"
    children: "_expression", "comma_expression"
)

scope_access <- (scope_access) => uast(
    type: "Synthetic",
    children: "identifier"
)

sizeof_expression <- (sizeof_expression) => uast(
    type: "Synthetic",
    children: "array_indexed_access", "array_literal", "array_scope_access", "bool_literal", "call_expression", "char_literal", "dimension", "field_access", "float_literal", "identifier", "int_literal", "null", "parenthesized_expression", "scope_access", "string_literal", "this"
)

source_file <- (source_file) => uast(
    type: "Synthetic",
    children: []
)

string_literal <- (string_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

struct <- (struct) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: "identifier"
)

struct_constructor <- (struct_constructor) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: []
)

struct_declaration <- (struct_declaration) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: "identifier", "struct_constructor"
)

struct_field <- (struct_field) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: "dimension", "fixed_dimension", "identifier", "type"
)

struct_field_value <- (struct_field_value) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: "_expression", "identifier"
)

switch_case <- (switch_case) => uast(
    type: "Switch",
    children: "_statement", "array_literal", "bool_literal", "case_binary_expression", "case_unary_expression", "char_literal", "float_literal", "identifier", "int_literal", "new_expression", "null", "parenthesized_expression", "scope_access", "sizeof_expression", "string_literal", "view_as"
)

switch_statement <- (switch_statement) => uast(
    type: "Switch",
    children: "_expression"
)

ternary_expression <- (ternary_expression) => uast(
    type: "Synthetic",
    children: "_expression"
)

type <- (type) => uast(
    type: "Synthetic",
    children: []
)

typedef <- (typedef) => uast(
    type: "Synthetic",
    children: "identifier"
)

typedef_expression <- (typedef_expression) => uast(
    type: "Synthetic",
    children: "dimension", "fixed_dimension", "parameter_declarations", "type"
)

typeset <- (typeset) => uast(
    type: "Set",
    children: "identifier"
)

unary_expression <- (unary_expression) => uast(
    type: "Synthetic",
    children: "_expression"
)

update_expression <- (update_expression) => uast(
    type: "Synthetic",
    children: "_expression"
)

variable_declaration <- (variable_declaration) => uast(
    type: "Variable",
    roles: "Variable", "Declaration"
    children: "_expression", "identifier"
)

variable_declaration_statement <- (variable_declaration_statement) => uast(
    type: "Variable",
    roles: "Variable", "Declaration"
    children: "type"
)

variable_storage_class <- (variable_storage_class) => uast(
    type: "Class",
    roles: "Class", "Declaration"
    children: []
)

view_as <- (view_as) => uast(
    type: "Synthetic",
    children: "_expression", "type"
)

visibility <- (visibility) => uast(
    type: "Synthetic",
    children: []
)

while_statement <- (while_statement) => uast(
    type: "Loop",
    roles: "Loop"
    children: "_expression", "_statement"
)

Float <- (Float) => uast(
    type: "Synthetic",
    children: []
)

String <- (String) => uast(
    type: "Synthetic",
    children: []
)

_ <- (_) => uast(
    type: "Synthetic",
    children: []
)

__nullable__ <- (__nullable__) => uast(
    type: "Synthetic",
    children: []
)

alias_operator <- (alias_operator) => uast(
    type: "Synthetic",
    children: []
)

any_type <- (any_type) => uast(
    type: "Synthetic",
    children: []
)

assert <- (assert) => uast(
    type: "Synthetic",
    children: []
)

bool <- (bool) => uast(
    type: "Synthetic",
    children: []
)

bool_literal <- (bool_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
    children: []
)

case <- (case) => uast(
    type: "Case",
    roles: "Branch"
    children: []
)

char <- (char) => uast(
    type: "Synthetic",
    children: []
)

character <- (character) => uast(
    type: "Synthetic",
    children: []
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

const <- (const) => uast(
    type: "Synthetic",
    children: []
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue"
    children: []
)

decl <- (decl) => uast(
    type: "Synthetic",
    children: []
)

default <- (default) => uast(
    type: "Synthetic",
    children: []
)

defined <- (defined) => uast(
    type: "Synthetic",
    children: []
)

delete <- (delete) => uast(
    type: "Synthetic",
    children: []
)

do <- (do) => uast(
    type: "Synthetic",
    children: []
)

else <- (else) => uast(
    type: "Synthetic",
    children: []
)

enum <- (enum) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: []
)

escape_sequence <- (escape_sequence) => uast(
    type: "Synthetic",
    children: []
)

float <- (float) => uast(
    type: "Synthetic",
    children: []
)

float_literal <- (float_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

forward <- (forward) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

funcenum <- (funcenum) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: []
)

functag <- (functag) => uast(
    type: "Synthetic",
    children: []
)

function <- (function) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: []
)

get <- (get) => uast(
    type: "Synthetic",
    children: []
)

identifier <- (identifier) => uast(
    type: "If",
    children: []
)

if <- (if) => uast(
    type: "If",
    children: []
)

int <- (int) => uast(
    type: "Synthetic",
    children: []
)

int_literal <- (int_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

macro_param <- (macro_param) => uast(
    type: "Synthetic",
    children: []
)

methodmap <- (methodmap) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: []
)

native <- (native) => uast(
    type: "Synthetic",
    children: []
)

new <- (new) => uast(
    type: "Synthetic",
    children: []
)

null <- (null) => uast(
    type: "Synthetic",
    children: []
)

operator <- (operator) => uast(
    type: "Synthetic",
    children: []
)

preproc_arg <- (preproc_arg) => uast(
    type: "Synthetic",
    children: []
)

preproc_else <- (preproc_else) => uast(
    type: "Synthetic",
    children: []
)

preproc_endif <- (preproc_endif) => uast(
    type: "If",
    children: []
)

preproc_endinput <- (preproc_endinput) => uast(
    type: "Synthetic",
    children: []
)

property <- (property) => uast(
    type: "Property",
    roles: "Member"
    children: []
)

public <- (public) => uast(
    type: "Synthetic",
    children: []
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
    children: []
)

set <- (set) => uast(
    type: "Set",
    children: []
)

sizeof <- (sizeof) => uast(
    type: "Synthetic",
    children: []
)

static <- (static) => uast(
    type: "Synthetic",
    children: []
)

static_assert <- (static_assert) => uast(
    type: "Synthetic",
    children: []
)

stock <- (stock) => uast(
    type: "Synthetic",
    children: []
)

struct <- (struct) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: []
)

switch <- (switch) => uast(
    type: "Switch",
    children: []
)

system_lib_string <- (system_lib_string) => uast(
    type: "Synthetic",
    children: []
)

this <- (this) => uast(
    type: "Synthetic",
    children: []
)

typedef <- (typedef) => uast(
    type: "Synthetic",
    children: []
)

typeset <- (typeset) => uast(
    type: "Set",
    children: []
)

view_as <- (view_as) => uast(
    type: "Synthetic",
    children: []
)

void <- (void) => uast(
    type: "Synthetic",
    children: []
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

