additive <- (additive) => uast(
    type: "Synthetic"
)

anonymous_function <- (anonymous_function) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "anonymous_function", "array", "assert", "binary", "conditional", "dollar", "error", "false", "fieldaccess", "fieldaccess_super", "forloop", "functioncall", "id", "implicit_plus", "import", "importstr", "in_super", "indexing", "indexing_super", "local_bind", "null", "number", "object", "params", "parenthesis", "self", "string", "true", "unary"
)

args <- (args) => uast(
    type: "Synthetic"
)

array <- (array) => uast(
    type: "Synthetic"
)

assert <- (assert) => uast(
    type: "Synthetic"
)

binary <- (binary) => uast(
    type: "Synthetic",
    children: "additive", "and", "anonymous_function", "array", "assert", "binary", "bitand", "bitor", "bitshift", "bitxor", "comparison", "conditional", "dollar", "equality", "error", "false", "fieldaccess", "fieldaccess_super", "forloop", "functioncall", "id", "implicit_plus", "import", "importstr", "in_super", "indexing", "indexing_super", "local_bind", "multiplicative", "null", "number", "object", "or", "parenthesis", "self", "string", "true", "unary"
)

bind <- (bind) => uast(
    type: "Synthetic",
    children: "anonymous_function", "array", "assert", "binary", "conditional", "dollar", "error", "false", "fieldaccess", "fieldaccess_super", "forloop", "functioncall", "id", "implicit_plus", "import", "importstr", "in_super", "indexing", "indexing_super", "local_bind", "null", "number", "object", "params", "parenthesis", "self", "string", "true", "unary"
)

bitshift <- (bitshift) => uast(
    type: "If"
)

comparison <- (comparison) => uast(
    type: "Synthetic"
)

compspec <- (compspec) => uast(
    type: "Synthetic"
)

conditional <- (conditional) => uast(
    type: "Synthetic",
    children: "anonymous_function", "array", "assert", "binary", "conditional", "dollar", "error", "false", "fieldaccess", "fieldaccess_super", "forloop", "functioncall", "id", "implicit_plus", "import", "importstr", "in_super", "indexing", "indexing_super", "local_bind", "null", "number", "object", "parenthesis", "self", "string", "true", "unary"
)

document <- (document) => uast(
    type: "Synthetic"
)

equality <- (equality) => uast(
    type: "Synthetic"
)

error <- (error) => uast(
    type: "Synthetic"
)

field <- (field) => uast(
    type: "Field",
    roles: "Member",
    children: "fieldname"
)

fieldaccess <- (fieldaccess) => uast(
    type: "Field",
    roles: "Member",
    children: "id"
)

fieldaccess_super <- (fieldaccess_super) => uast(
    type: "Field",
    roles: "Member"
)

fieldname <- (fieldname) => uast(
    type: "Field",
    roles: "Member"
)

forloop <- (forloop) => uast(
    type: "Loop",
    roles: "Loop"
)

forspec <- (forspec) => uast(
    type: "Loop",
    roles: "Loop"
)

functioncall <- (functioncall) => uast(
    type: "Function",
    roles: "Function", "Declaration"
)

id <- (id) => uast(
    type: "Synthetic"
)

ifspec <- (ifspec) => uast(
    type: "If"
)

implicit_plus <- (implicit_plus) => uast(
    type: "Synthetic"
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
)

importstr <- (importstr) => uast(
    type: "Import",
    roles: "Import"
)

in_super <- (in_super) => uast(
    type: "Synthetic"
)

indexing <- (indexing) => uast(
    type: "Index",
    roles: "Index"
)

indexing_super <- (indexing_super) => uast(
    type: "Index",
    roles: "Index"
)

local_bind <- (local_bind) => uast(
    type: "Synthetic"
)

member <- (member) => uast(
    type: "Synthetic"
)

multiplicative <- (multiplicative) => uast(
    type: "Synthetic"
)

named_argument <- (named_argument) => uast(
    type: "Synthetic"
)

number <- (number) => uast(
    type: "Synthetic"
)

object <- (object) => uast(
    type: "Synthetic"
)

objforloop <- (objforloop) => uast(
    type: "Loop",
    roles: "Loop"
)

objlocal <- (objlocal) => uast(
    type: "Synthetic"
)

param <- (param) => uast(
    type: "Synthetic",
    children: "anonymous_function", "array", "assert", "binary", "conditional", "dollar", "error", "false", "fieldaccess", "fieldaccess_super", "forloop", "functioncall", "id", "implicit_plus", "import", "importstr", "in_super", "indexing", "indexing_super", "local_bind", "null", "number", "object", "parenthesis", "self", "string", "true", "unary"
)

params <- (params) => uast(
    type: "Synthetic"
)

parenthesis <- (parenthesis) => uast(
    type: "Synthetic"
)

string <- (string) => uast(
    type: "Synthetic"
)

string_content <- (string_content) => uast(
    type: "Synthetic"
)

unary <- (unary) => uast(
    type: "Synthetic",
    children: "anonymous_function", "array", "assert", "binary", "conditional", "dollar", "error", "false", "fieldaccess", "fieldaccess_super", "forloop", "functioncall", "id", "implicit_plus", "import", "importstr", "in_super", "indexing", "indexing_super", "local_bind", "null", "number", "object", "parenthesis", "self", "string", "true", "unary", "unaryop"
)

unaryop <- (unaryop) => uast(
    type: "Synthetic"
)

and <- (and) => uast(
    type: "Synthetic"
)

assert <- (assert) => uast(
    type: "Synthetic"
)

bitand <- (bitand) => uast(
    type: "Synthetic"
)

bitor <- (bitor) => uast(
    type: "Synthetic"
)

bitxor <- (bitxor) => uast(
    type: "Synthetic"
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
)

dollar <- (dollar) => uast(
    type: "Synthetic"
)

else <- (else) => uast(
    type: "Synthetic"
)

error <- (error) => uast(
    type: "Synthetic"
)

escape_sequence <- (escape_sequence) => uast(
    type: "Synthetic"
)

false <- (false) => uast(
    type: "Synthetic"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
)

function <- (function) => uast(
    type: "Function",
    roles: "Function", "Declaration"
)

if <- (if) => uast(
    type: "If"
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
)

importstr <- (importstr) => uast(
    type: "Import",
    roles: "Import"
)

in <- (in) => uast(
    type: "Synthetic"
)

local <- (local) => uast(
    type: "Synthetic"
)

null <- (null) => uast(
    type: "Synthetic"
)

or <- (or) => uast(
    type: "Synthetic"
)

self <- (self) => uast(
    type: "Synthetic"
)

string_end <- (string_end) => uast(
    type: "Synthetic"
)

string_start <- (string_start) => uast(
    type: "Synthetic"
)

super <- (super) => uast(
    type: "Synthetic"
)

tailstrict <- (tailstrict) => uast(
    type: "Synthetic"
)

then <- (then) => uast(
    type: "Synthetic"
)

true <- (true) => uast(
    type: "Synthetic"
)

