access_modifier <- (access_modifier) => uast(
    type: "If"
)

access_op <- (access_op) => uast(
    type: "Synthetic"
)

annotation <- (annotation) => uast(
    type: "Synthetic"
)

argument_list <- (argument_list) => uast(
    type: "List"
)

array_type <- (array_type) => uast(
    type: "Synthetic"
)

assertion <- (assertion) => uast(
    type: "Synthetic"
)

assignment <- (assignment) => uast(
    type: "Assignment",
    roles: "Assignment"
)

binary_op <- (binary_op) => uast(
    type: "BinaryOp",
    roles: "Operator"
)

boolean_literal <- (boolean_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

builtintype <- (builtintype) => uast(
    type: "Synthetic"
)

case <- (case) => uast(
    type: "Case",
    roles: "Branch",
    children: "access_op", "binary_op", "boolean_literal", "closure", "dotted_identifier", "function_call", "identifier", "increment_op", "index", "list", "map", "null", "number_literal", "parenthesized_expression", "string", "ternary_op", "this", "unary_op"
)

class_definition <- (class_definition) => uast(
    type: "Class",
    roles: "Class", "Declaration",
    children: "boolean_literal", "closure", "dotted_identifier", "function_call", "generic_parameters", "identifier", "index", "list", "map", "number_literal", "parenthesized_expression", "string", "this"
)

closure <- (closure) => uast(
    type: "Synthetic"
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
)

declaration <- (declaration) => uast(
    type: "Synthetic",
    children: "access_op", "array_type", "binary_op", "boolean_literal", "builtintype", "closure", "dotted_identifier", "function_call", "identifier", "increment_op", "index", "list", "map", "null", "number_literal", "parenthesized_expression", "string", "ternary_op", "this", "type_with_generics", "unary_op"
)

do_while_loop <- (do_while_loop) => uast(
    type: "Loop",
    roles: "Loop",
    children: "access_op", "assertion", "assignment", "binary_op", "boolean_literal", "break", "class_definition", "closure", "continue", "declaration", "do_while_loop", "dotted_identifier", "for_in_loop", "for_loop", "function_call", "function_declaration", "function_definition", "groovy_import", "groovy_package", "identifier", "if_statement", "increment_op", "index", "juxt_function_call", "label", "list", "map", "null", "number_literal", "parenthesized_expression", "return", "string", "switch_statement", "ternary_op", "this", "try_statement", "unary_op", "while_loop"
)

dotted_identifier <- (dotted_identifier) => uast(
    type: "If"
)

for_in_loop <- (for_in_loop) => uast(
    type: "Loop",
    roles: "Loop",
    children: "access_op", "assertion", "assignment", "binary_op", "boolean_literal", "break", "class_definition", "closure", "continue", "declaration", "do_while_loop", "dotted_identifier", "for_in_loop", "for_loop", "function_call", "function_declaration", "function_definition", "groovy_import", "groovy_package", "identifier", "if_statement", "increment_op", "index", "juxt_function_call", "label", "list", "map", "null", "number_literal", "parenthesized_expression", "return", "string", "switch_statement", "ternary_op", "this", "try_statement", "unary_op", "while_loop"
)

for_loop <- (for_loop) => uast(
    type: "Loop",
    roles: "Loop",
    children: "access_op", "assertion", "assignment", "binary_op", "boolean_literal", "break", "class_definition", "closure", "continue", "declaration", "do_while_loop", "dotted_identifier", "for_in_loop", "for_loop", "function_call", "function_declaration", "function_definition", "groovy_import", "groovy_package", "identifier", "if_statement", "increment_op", "index", "juxt_function_call", "label", "list", "map", "null", "number_literal", "parenthesized_expression", "return", "string", "switch_statement", "ternary_op", "this", "try_statement", "unary_op", "while_loop"
)

for_parameters <- (for_parameters) => uast(
    type: "Parameter",
    roles: "Parameter",
    children: "access_op", "assertion", "assignment", "binary_op", "boolean_literal", "break", "class_definition", "closure", "continue", "declaration", "do_while_loop", "dotted_identifier", "for_in_loop", "for_loop", "function_call", "function_declaration", "function_definition", "groovy_import", "groovy_package", "identifier", "if_statement", "increment_op", "index", "juxt_function_call", "label", "list", "map", "null", "number_literal", "parenthesized_expression", "return", "string", "switch_statement", "ternary_op", "this", "try_statement", "unary_op", "while_loop"
)

function_call <- (function_call) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "argument_list", "closure", "dotted_identifier", "function_call", "identifier", "index", "parenthesized_expression", "this"
)

function_declaration <- (function_declaration) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "array_type", "builtintype", "def", "identifier", "parameter_list", "type_with_generics"
)

function_definition <- (function_definition) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "array_type", "builtintype", "closure", "def", "identifier", "parameter_list", "type_with_generics"
)

generic_param <- (generic_param) => uast(
    type: "Synthetic",
    children: "array_type", "builtintype", "identifier", "type_with_generics"
)

generic_parameters <- (generic_parameters) => uast(
    type: "Parameter",
    roles: "Parameter"
)

generics <- (generics) => uast(
    type: "Synthetic"
)

groovy_doc <- (groovy_doc) => uast(
    type: "Synthetic"
)

groovy_doc_param <- (groovy_doc_param) => uast(
    type: "Synthetic"
)

groovy_doc_throws <- (groovy_doc_throws) => uast(
    type: "Throw",
    roles: "Throw"
)

groovy_import <- (groovy_import) => uast(
    type: "Import",
    roles: "Import",
    children: "identifier", "qualified_name"
)

groovy_package <- (groovy_package) => uast(
    type: "Package",
    roles: "Module"
)

if_statement <- (if_statement) => uast(
    type: "If",
    children: "access_op", "assertion", "assignment", "binary_op", "boolean_literal", "break", "class_definition", "closure", "continue", "declaration", "do_while_loop", "dotted_identifier", "for_in_loop", "for_loop", "function_call", "function_declaration", "function_definition", "groovy_import", "groovy_package", "identifier", "if_statement", "increment_op", "index", "juxt_function_call", "label", "list", "map", "null", "number_literal", "parenthesized_expression", "return", "string", "switch_statement", "ternary_op", "this", "try_statement", "unary_op", "while_loop"
)

increment_op <- (increment_op) => uast(
    type: "Synthetic"
)

index <- (index) => uast(
    type: "Index",
    roles: "Index"
)

interpolation <- (interpolation) => uast(
    type: "Synthetic"
)

juxt_function_call <- (juxt_function_call) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "argument_list", "dotted_identifier", "identifier", "index"
)

label <- (label) => uast(
    type: "Synthetic",
    children: "identifier"
)

list <- (list) => uast(
    type: "List"
)

map <- (map) => uast(
    type: "Synthetic"
)

map_item <- (map_item) => uast(
    type: "Synthetic",
    children: "access_op", "binary_op", "boolean_literal", "closure", "dotted_identifier", "function_call", "identifier", "increment_op", "index", "list", "map", "null", "number_literal", "parenthesized_expression", "string", "ternary_op", "this", "unary_op"
)

modifier <- (modifier) => uast(
    type: "If"
)

number_literal <- (number_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

parameter <- (parameter) => uast(
    type: "Parameter",
    roles: "Parameter",
    children: "access_op", "array_type", "binary_op", "boolean_literal", "builtintype", "closure", "def", "dotted_identifier", "function_call", "identifier", "increment_op", "index", "list", "map", "null", "number_literal", "parenthesized_expression", "string", "ternary_op", "this", "type_with_generics", "unary_op"
)

parameter_list <- (parameter_list) => uast(
    type: "Parameter",
    roles: "Parameter"
)

parenthesized_expression <- (parenthesized_expression) => uast(
    type: "Synthetic"
)

pipeline <- (pipeline) => uast(
    type: "Synthetic"
)

qualified_name <- (qualified_name) => uast(
    type: "If"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
)

shebang <- (shebang) => uast(
    type: "Synthetic"
)

source_file <- (source_file) => uast(
    type: "Synthetic"
)

string <- (string) => uast(
    type: "Synthetic"
)

switch_block <- (switch_block) => uast(
    type: "Block",
    roles: "Body"
)

switch_statement <- (switch_statement) => uast(
    type: "Switch",
    children: "parenthesized_expression", "switch_block"
)

ternary_op <- (ternary_op) => uast(
    type: "Synthetic",
    children: "access_op", "binary_op", "boolean_literal", "closure", "dotted_identifier", "function_call", "identifier", "increment_op", "index", "list", "map", "null", "number_literal", "parenthesized_expression", "string", "ternary_op", "this", "unary_op"
)

try_statement <- (try_statement) => uast(
    type: "Try",
    roles: "Try",
    children: "access_op", "assertion", "assignment", "binary_op", "boolean_literal", "break", "class_definition", "closure", "continue", "declaration", "do_while_loop", "dotted_identifier", "for_in_loop", "for_loop", "function_call", "function_declaration", "function_definition", "groovy_import", "groovy_package", "identifier", "if_statement", "increment_op", "index", "juxt_function_call", "label", "list", "map", "null", "number_literal", "parenthesized_expression", "return", "string", "switch_statement", "ternary_op", "this", "try_statement", "unary_op", "while_loop"
)

type_with_generics <- (type_with_generics) => uast(
    type: "Synthetic"
)

unary_op <- (unary_op) => uast(
    type: "UnaryOp",
    roles: "Operator"
)

while_loop <- (while_loop) => uast(
    type: "Loop",
    roles: "Loop",
    children: "access_op", "assertion", "assignment", "binary_op", "boolean_literal", "break", "class_definition", "closure", "continue", "declaration", "do_while_loop", "dotted_identifier", "for_in_loop", "for_loop", "function_call", "function_declaration", "function_definition", "groovy_import", "groovy_package", "identifier", "if_statement", "increment_op", "index", "juxt_function_call", "label", "list", "map", "null", "number_literal", "parenthesized_expression", "return", "string", "switch_statement", "ternary_op", "this", "try_statement", "unary_op", "while_loop"
)

_ <- (_) => uast(
    type: "Synthetic"
)

as <- (as) => uast(
    type: "Synthetic"
)

assert <- (assert) => uast(
    type: "Synthetic"
)

boolean <- (boolean) => uast(
    type: "Synthetic"
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
)

case <- (case) => uast(
    type: "Case",
    roles: "Branch"
)

catch <- (catch) => uast(
    type: "Catch",
    roles: "Catch"
)

char <- (char) => uast(
    type: "Synthetic"
)

class <- (class) => uast(
    type: "Class",
    roles: "Class", "Declaration"
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue"
)

def <- (def) => uast(
    type: "Synthetic"
)

default <- (default) => uast(
    type: "Synthetic"
)

do <- (do) => uast(
    type: "Synthetic"
)

double <- (double) => uast(
    type: "Synthetic"
)

else <- (else) => uast(
    type: "Synthetic"
)

escape_sequence <- (escape_sequence) => uast(
    type: "Synthetic"
)

extends <- (extends) => uast(
    type: "Synthetic"
)

false <- (false) => uast(
    type: "Synthetic"
)

final <- (final) => uast(
    type: "Synthetic"
)

finally <- (finally) => uast(
    type: "Finally",
    roles: "Finally"
)

first_line <- (first_line) => uast(
    type: "Synthetic"
)

float <- (float) => uast(
    type: "Synthetic"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
)

groovy_doc_at_text <- (groovy_doc_at_text) => uast(
    type: "Synthetic"
)

groovy_doc_tag <- (groovy_doc_tag) => uast(
    type: "Synthetic"
)

identifier <- (identifier) => uast(
    type: "If"
)

if <- (if) => uast(
    type: "If"
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
)

in <- (in) => uast(
    type: "Synthetic"
)

instanceof <- (instanceof) => uast(
    type: "Synthetic"
)

int <- (int) => uast(
    type: "Synthetic"
)

interface <- (interface) => uast(
    type: "Interface",
    roles: "Interface", "Declaration"
)

long <- (long) => uast(
    type: "Synthetic"
)

new <- (new) => uast(
    type: "Synthetic"
)

null <- (null) => uast(
    type: "Synthetic"
)

package <- (package) => uast(
    type: "Package",
    roles: "Module"
)

pipeline <- (pipeline) => uast(
    type: "Synthetic"
)

private <- (private) => uast(
    type: "Synthetic"
)

protected <- (protected) => uast(
    type: "Synthetic"
)

public <- (public) => uast(
    type: "Synthetic"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
)

short <- (short) => uast(
    type: "Synthetic"
)

static <- (static) => uast(
    type: "Synthetic"
)

string_content <- (string_content) => uast(
    type: "Synthetic"
)

string_internal_quote <- (string_internal_quote) => uast(
    type: "Synthetic"
)

switch <- (switch) => uast(
    type: "Switch"
)

synchronized <- (synchronized) => uast(
    type: "Synthetic"
)

this <- (this) => uast(
    type: "Synthetic"
)

true <- (true) => uast(
    type: "Synthetic"
)

try <- (try) => uast(
    type: "Try",
    roles: "Try"
)

void <- (void) => uast(
    type: "Synthetic"
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
)

wildcard_import <- (wildcard_import) => uast(
    type: "Import",
    roles: "Import"
)

