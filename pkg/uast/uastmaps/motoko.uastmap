dec_nonvar <- (dec_nonvar) => uast(
    type: "Synthetic"
)

exp_nondec <- (exp_nondec) => uast(
    type: "Synthetic"
)

exp_nullary <- (exp_nullary) => uast(
    type: "Synthetic"
)

lit <- (lit) => uast(
    type: "Synthetic"
)

pat_plain <- (pat_plain) => uast(
    type: "Synthetic"
)

typ_nullary <- (typ_nullary) => uast(
    type: "Synthetic"
)

array <- (array) => uast(
    type: "Synthetic"
)

assert <- (assert) => uast(
    type: "Synthetic"
)

assign <- (assign) => uast(
    type: "Synthetic",
    children: "array", "call", "exp", "exp_annotated", "exp_bin", "exp_nullary", "exp_post", "exp_un", "exp_variant", "sec_ctor"
)

async <- (async) => uast(
    type: "Synthetic"
)

asyncstar <- (asyncstar) => uast(
    type: "Synthetic"
)

await <- (await) => uast(
    type: "Await",
    roles: "Await"
)

awaitstar <- (awaitstar) => uast(
    type: "Await",
    roles: "Await"
)

binassign <- (binassign) => uast(
    type: "Synthetic",
    children: "array", "call", "exp", "exp_annotated", "exp_bin", "exp_nullary", "exp_post", "exp_un", "exp_variant", "sec_ctor"
)

block <- (block) => uast(
    type: "Block",
    roles: "Body"
)

bool <- (bool) => uast(
    type: "Synthetic"
)

break <- (break) => uast(
    type: "Break",
    roles: "Break",
    children: "exp_nullary", "name"
)

byte <- (byte) => uast(
    type: "Synthetic"
)

call <- (call) => uast(
    type: "Call",
    roles: "Call",
    children: "array", "call", "exp_nullary", "exp_post", "sec_ctor"
)

case <- (case) => uast(
    type: "Case",
    roles: "Branch",
    children: "block", "exp", "pat_field", "pat_plain"
)

catch <- (catch) => uast(
    type: "Catch",
    roles: "Catch",
    children: "block", "exp", "pat_field", "pat_plain"
)

char <- (char) => uast(
    type: "Synthetic"
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue",
    children: "name"
)

debug <- (debug) => uast(
    type: "Synthetic"
)

dec <- (dec) => uast(
    type: "Synthetic"
)

dec_class <- (dec_class) => uast(
    type: "Class",
    roles: "Class", "Declaration",
    children: "name", "obj_sort", "pat_plain", "shared_pat_opt", "typ"
)

dec_field <- (dec_field) => uast(
    type: "Field",
    roles: "Member",
    children: "stab", "vis"
)

dec_func <- (dec_func) => uast(
    type: "Synthetic",
    children: "block", "exp", "name", "pat_plain", "shared_pat_opt", "typ"
)

dec_let <- (dec_let) => uast(
    type: "Synthetic",
    children: "exp", "pat"
)

dec_let_else <- (dec_let_else) => uast(
    type: "Synthetic",
    children: "block", "exp", "pat"
)

dec_obj <- (dec_obj) => uast(
    type: "Synthetic",
    children: "name", "obj_sort"
)

dec_type <- (dec_type) => uast(
    type: "Synthetic",
    children: "name", "typ"
)

dec_var <- (dec_var) => uast(
    type: "Synthetic",
    children: "exp", "name", "typ"
)

do <- (do) => uast(
    type: "Synthetic"
)

do_option <- (do_option) => uast(
    type: "Synthetic"
)

escape <- (escape) => uast(
    type: "Synthetic"
)

exp <- (exp) => uast(
    type: "Synthetic"
)

exp_annotated <- (exp_annotated) => uast(
    type: "Synthetic",
    children: "typ_func", "typ_nullary", "typ_pre", "typ_un"
)

exp_bin <- (exp_bin) => uast(
    type: "Synthetic",
    children: "and", "array", "call", "exp_annotated", "exp_bin", "exp_nullary", "exp_post", "exp_un", "exp_variant", "or", "sec_ctor"
)

exp_field <- (exp_field) => uast(
    type: "Field",
    roles: "Member",
    children: "exp", "name", "typ"
)

exp_obj <- (exp_obj) => uast(
    type: "Synthetic"
)

exp_plain <- (exp_plain) => uast(
    type: "Synthetic"
)

exp_post <- (exp_post) => uast(
    type: "Synthetic",
    children: "exp", "name", "nat"
)

exp_un <- (exp_un) => uast(
    type: "Synthetic",
    children: "actor", "debug_show", "from_candid", "not", "to_candid"
)

exp_variant <- (exp_variant) => uast(
    type: "Synthetic",
    children: "exp_nullary", "name"
)

float <- (float) => uast(
    type: "Synthetic"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop",
    children: "block", "exp", "pat"
)

func_sort_opt <- (func_sort_opt) => uast(
    type: "Synthetic"
)

if <- (if) => uast(
    type: "If",
    children: "block", "exp", "exp_nullary"
)

ifelse <- (ifelse) => uast(
    type: "If",
    children: "block", "exp", "exp_nullary"
)

ignore <- (ignore) => uast(
    type: "Synthetic"
)

imp <- (imp) => uast(
    type: "Synthetic"
)

label <- (label) => uast(
    type: "Synthetic",
    children: "name", "typ"
)

loop <- (loop) => uast(
    type: "Loop",
    roles: "Loop"
)

loopwhile <- (loopwhile) => uast(
    type: "Loop",
    roles: "Loop",
    children: "block", "exp"
)

nat <- (nat) => uast(
    type: "Synthetic"
)

obj_sort <- (obj_sort) => uast(
    type: "Synthetic"
)

pat <- (pat) => uast(
    type: "Synthetic"
)

pat_bin <- (pat_bin) => uast(
    type: "Synthetic",
    children: "or", "pat_bin", "pat_field", "pat_plain", "pat_un", "typ"
)

pat_field <- (pat_field) => uast(
    type: "Field",
    roles: "Member",
    children: "name", "pat", "typ"
)

pat_tuple <- (pat_tuple) => uast(
    type: "Tuple"
)

pat_un <- (pat_un) => uast(
    type: "Synthetic",
    children: "name", "pat_field", "pat_plain", "pat_un"
)

prog <- (prog) => uast(
    type: "Synthetic"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return",
    children: "exp"
)

sec_ctor <- (sec_ctor) => uast(
    type: "Synthetic",
    children: "array", "call", "exp_nullary", "exp_post", "name", "sec_ctor"
)

shared_pat_opt <- (shared_pat_opt) => uast(
    type: "Synthetic"
)

stab <- (stab) => uast(
    type: "Synthetic"
)

switch <- (switch) => uast(
    type: "Switch",
    children: "exp_nullary"
)

text <- (text) => uast(
    type: "Synthetic"
)

throw <- (throw) => uast(
    type: "Throw",
    roles: "Throw"
)

try <- (try) => uast(
    type: "Try",
    roles: "Try",
    children: "block", "exp"
)

typ <- (typ) => uast(
    type: "Synthetic"
)

typ_and <- (typ_and) => uast(
    type: "Synthetic",
    children: "and", "typ"
)

typ_args <- (typ_args) => uast(
    type: "Synthetic"
)

typ_array <- (typ_array) => uast(
    type: "Synthetic"
)

typ_bind <- (typ_bind) => uast(
    type: "Synthetic",
    children: "name"
)

typ_field <- (typ_field) => uast(
    type: "Field",
    roles: "Member",
    children: "name", "typ"
)

typ_func <- (typ_func) => uast(
    type: "Synthetic",
    children: "typ_func", "typ_nullary", "typ_pre", "typ_un"
)

typ_id <- (typ_id) => uast(
    type: "Synthetic",
    children: "name"
)

typ_item <- (typ_item) => uast(
    type: "Synthetic",
    children: "name", "typ"
)

typ_obj <- (typ_obj) => uast(
    type: "Synthetic"
)

typ_or <- (typ_or) => uast(
    type: "Synthetic",
    children: "or", "typ"
)

typ_pre <- (typ_pre) => uast(
    type: "Synthetic"
)

typ_tag <- (typ_tag) => uast(
    type: "Synthetic",
    children: "name"
)

typ_tuple <- (typ_tuple) => uast(
    type: "Tuple"
)

typ_un <- (typ_un) => uast(
    type: "Synthetic"
)

typ_variant <- (typ_variant) => uast(
    type: "Synthetic"
)

unassign <- (unassign) => uast(
    type: "Synthetic"
)

unop <- (unop) => uast(
    type: "Synthetic"
)

utf8_enc <- (utf8_enc) => uast(
    type: "Synthetic"
)

utf8code <- (utf8code) => uast(
    type: "Synthetic"
)

vis <- (vis) => uast(
    type: "Synthetic"
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop",
    children: "block", "exp", "exp_nullary"
)

actor <- (actor) => uast(
    type: "Synthetic"
)

and <- (and) => uast(
    type: "Synthetic"
)

assert <- (assert) => uast(
    type: "Synthetic"
)

async <- (async) => uast(
    type: "Synthetic"
)

await <- (await) => uast(
    type: "Await",
    roles: "Await"
)

blockcomment <- (blockcomment) => uast(
    type: "Block",
    roles: "Body"
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
)

case <- (case) => uast(
    type: "Case",
    roles: "Branch"
)

catch <- (catch) => uast(
    type: "Catch",
    roles: "Catch"
)

class <- (class) => uast(
    type: "Class",
    roles: "Class", "Declaration"
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue"
)

debug <- (debug) => uast(
    type: "Synthetic"
)

debug_show <- (debug_show) => uast(
    type: "Synthetic"
)

do <- (do) => uast(
    type: "Synthetic"
)

else <- (else) => uast(
    type: "Synthetic"
)

false <- (false) => uast(
    type: "Synthetic"
)

flexible <- (flexible) => uast(
    type: "Synthetic"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
)

from_candid <- (from_candid) => uast(
    type: "Synthetic"
)

func <- (func) => uast(
    type: "Synthetic"
)

if <- (if) => uast(
    type: "If"
)

ignore <- (ignore) => uast(
    type: "Synthetic"
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
)

in <- (in) => uast(
    type: "Synthetic"
)

label <- (label) => uast(
    type: "Synthetic"
)

let <- (let) => uast(
    type: "Synthetic"
)

linecomment <- (linecomment) => uast(
    type: "Comment",
    roles: "Comment"
)

loop <- (loop) => uast(
    type: "Loop",
    roles: "Loop"
)

module <- (module) => uast(
    type: "Module",
    roles: "Module"
)

name <- (name) => uast(
    type: "Synthetic"
)

not <- (not) => uast(
    type: "Synthetic"
)

null <- (null) => uast(
    type: "Synthetic"
)

object <- (object) => uast(
    type: "Synthetic"
)

or <- (or) => uast(
    type: "Synthetic"
)

placeholder <- (placeholder) => uast(
    type: "Synthetic"
)

private <- (private) => uast(
    type: "Synthetic"
)

public <- (public) => uast(
    type: "Synthetic"
)

query <- (query) => uast(
    type: "Synthetic"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
)

shared <- (shared) => uast(
    type: "Synthetic"
)

stable <- (stable) => uast(
    type: "Synthetic"
)

switch <- (switch) => uast(
    type: "Switch"
)

system <- (system) => uast(
    type: "Synthetic"
)

throw <- (throw) => uast(
    type: "Throw",
    roles: "Throw"
)

to_candid <- (to_candid) => uast(
    type: "Synthetic"
)

true <- (true) => uast(
    type: "Synthetic"
)

try <- (try) => uast(
    type: "Try",
    roles: "Try"
)

type <- (type) => uast(
    type: "Synthetic"
)

var <- (var) => uast(
    type: "Synthetic"
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
)

with <- (with) => uast(
    type: "Synthetic"
)

