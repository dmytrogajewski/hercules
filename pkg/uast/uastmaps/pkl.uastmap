additiveExpr <- (additiveExpr) => uast(
    type: "Synthetic"
)

amendExpr <- (amendExpr) => uast(
    type: "Synthetic",
    children: "amendExpr", "newExpr", "parenthesizedExpr"
)

annotation <- (annotation) => uast(
    type: "Synthetic"
)

argumentList <- (argumentList) => uast(
    type: "List"
)

classBody <- (classBody) => uast(
    type: "Class",
    roles: "Class", "Declaration"
)

classExtendsClause <- (classExtendsClause) => uast(
    type: "Class",
    roles: "Class", "Declaration"
)

classMethod <- (classMethod) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
)

classProperty <- (classProperty) => uast(
    type: "Class",
    roles: "Class", "Declaration"
)

clazz <- (clazz) => uast(
    type: "Synthetic"
)

comparisonExpr <- (comparisonExpr) => uast(
    type: "Synthetic"
)

constrainedType <- (constrainedType) => uast(
    type: "Synthetic"
)

declaredType <- (declaredType) => uast(
    type: "Synthetic"
)

defaultUnionType <- (defaultUnionType) => uast(
    type: "Synthetic"
)

docComment <- (docComment) => uast(
    type: "Comment",
    roles: "Comment"
)

equalityExpr <- (equalityExpr) => uast(
    type: "Synthetic"
)

exponentiationExpr <- (exponentiationExpr) => uast(
    type: "Synthetic"
)

extendsOrAmendsClause <- (extendsOrAmendsClause) => uast(
    type: "Synthetic"
)

forGenerator <- (forGenerator) => uast(
    type: "Loop",
    roles: "Loop"
)

functionLiteralExpr <- (functionLiteralExpr) => uast(
    type: "Function",
    roles: "Function", "Declaration"
)

functionLiteralType <- (functionLiteralType) => uast(
    type: "Function",
    roles: "Function", "Declaration"
)

ifExpr <- (ifExpr) => uast(
    type: "If"
)

importClause <- (importClause) => uast(
    type: "Import",
    roles: "Import"
)

importExpr <- (importExpr) => uast(
    type: "Import",
    roles: "Import",
    children: "import"
)

importGlobClause <- (importGlobClause) => uast(
    type: "Import",
    roles: "Import"
)

letExpr <- (letExpr) => uast(
    type: "Synthetic"
)

lineComment <- (lineComment) => uast(
    type: "Comment",
    roles: "Comment"
)

logicalAndExpr <- (logicalAndExpr) => uast(
    type: "Synthetic"
)

logicalNotExpr <- (logicalNotExpr) => uast(
    type: "Synthetic"
)

logicalOrExpr <- (logicalOrExpr) => uast(
    type: "Synthetic"
)

memberPredicate <- (memberPredicate) => uast(
    type: "Synthetic",
    children: "additiveExpr", "amendExpr", "comparisonExpr", "equalityExpr", "exponentiationExpr", "falseLiteralExpr", "floatLiteralExpr", "functionLiteralExpr", "ifExpr", "importExpr", "intLiteralExpr", "letExpr", "logicalAndExpr", "logicalNotExpr", "logicalOrExpr", "mlStringLiteralExpr", "moduleExpr", "multiplicativeExpr", "newExpr", "nonNullExpr", "nullCoalesceExpr", "nullLiteralExpr", "outerExpr", "parenthesizedExpr", "pipeExpr", "qualifiedAccessExpr", "readExpr", "slStringLiteralExpr", "subscriptExpr", "superAccessExpr", "superSubscriptExpr", "thisExpr", "throwExpr", "traceExpr", "trueLiteralExpr", "typeCastExpr", "typeTestExpr", "unaryMinusExpr", "unqualifiedAccessExpr"
)

methodHeader <- (methodHeader) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
)

mlStringLiteralExpr <- (mlStringLiteralExpr) => uast(
    type: "Literal",
    roles: "Literal"
)

mlStringLiteralPart <- (mlStringLiteralPart) => uast(
    type: "Literal",
    roles: "Literal"
)

modifier <- (modifier) => uast(
    type: "If"
)

module <- (module) => uast(
    type: "Module",
    roles: "Module"
)

moduleClause <- (moduleClause) => uast(
    type: "Module",
    roles: "Module"
)

moduleExpr <- (moduleExpr) => uast(
    type: "Module",
    roles: "Module"
)

moduleHeader <- (moduleHeader) => uast(
    type: "Module",
    roles: "Module"
)

multiplicativeExpr <- (multiplicativeExpr) => uast(
    type: "Synthetic"
)

newExpr <- (newExpr) => uast(
    type: "Synthetic"
)

nonNullExpr <- (nonNullExpr) => uast(
    type: "Synthetic"
)

nullCoalesceExpr <- (nullCoalesceExpr) => uast(
    type: "Synthetic"
)

nullableType <- (nullableType) => uast(
    type: "Synthetic"
)

objectBody <- (objectBody) => uast(
    type: "Synthetic"
)

objectBodyParameters <- (objectBodyParameters) => uast(
    type: "Parameter",
    roles: "Parameter"
)

objectElement <- (objectElement) => uast(
    type: "Synthetic"
)

objectEntry <- (objectEntry) => uast(
    type: "Try",
    roles: "Try",
    children: "additiveExpr", "amendExpr", "comparisonExpr", "equalityExpr", "exponentiationExpr", "falseLiteralExpr", "floatLiteralExpr", "functionLiteralExpr", "ifExpr", "importExpr", "intLiteralExpr", "letExpr", "logicalAndExpr", "logicalNotExpr", "logicalOrExpr", "mlStringLiteralExpr", "moduleExpr", "multiplicativeExpr", "newExpr", "nonNullExpr", "nullCoalesceExpr", "nullLiteralExpr", "outerExpr", "parenthesizedExpr", "pipeExpr", "qualifiedAccessExpr", "readExpr", "slStringLiteralExpr", "subscriptExpr", "superAccessExpr", "superSubscriptExpr", "thisExpr", "throwExpr", "traceExpr", "trueLiteralExpr", "typeCastExpr", "typeTestExpr", "unaryMinusExpr", "unqualifiedAccessExpr"
)

objectMethod <- (objectMethod) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
)

objectProperty <- (objectProperty) => uast(
    type: "Property",
    roles: "Member"
)

objectSpread <- (objectSpread) => uast(
    type: "Spread",
    roles: "Spread"
)

parameterList <- (parameterList) => uast(
    type: "Parameter",
    roles: "Parameter"
)

parenthesizedExpr <- (parenthesizedExpr) => uast(
    type: "Synthetic"
)

parenthesizedType <- (parenthesizedType) => uast(
    type: "Synthetic"
)

pipeExpr <- (pipeExpr) => uast(
    type: "Synthetic"
)

qualifiedAccessExpr <- (qualifiedAccessExpr) => uast(
    type: "If",
    children: "additiveExpr", "amendExpr", "comparisonExpr", "equalityExpr", "exponentiationExpr", "falseLiteralExpr", "floatLiteralExpr", "functionLiteralExpr", "ifExpr", "importExpr", "intLiteralExpr", "letExpr", "logicalAndExpr", "logicalNotExpr", "logicalOrExpr", "mlStringLiteralExpr", "moduleExpr", "multiplicativeExpr", "newExpr", "nonNullExpr", "nullCoalesceExpr", "nullLiteralExpr", "outerExpr", "parenthesizedExpr", "pipeExpr", "qualifiedAccessExpr", "readExpr", "slStringLiteralExpr", "subscriptExpr", "superAccessExpr", "superSubscriptExpr", "thisExpr", "throwExpr", "traceExpr", "trueLiteralExpr", "typeCastExpr", "typeTestExpr", "unaryMinusExpr", "unqualifiedAccessExpr"
)

qualifiedIdentifier <- (qualifiedIdentifier) => uast(
    type: "If"
)

readExpr <- (readExpr) => uast(
    type: "Synthetic",
    children: "read"
)

shebangComment <- (shebangComment) => uast(
    type: "Comment",
    roles: "Comment"
)

slStringLiteralExpr <- (slStringLiteralExpr) => uast(
    type: "Literal",
    roles: "Literal"
)

slStringLiteralPart <- (slStringLiteralPart) => uast(
    type: "Literal",
    roles: "Literal"
)

stringConstant <- (stringConstant) => uast(
    type: "Synthetic"
)

stringInterpolation <- (stringInterpolation) => uast(
    type: "Synthetic"
)

stringLiteralType <- (stringLiteralType) => uast(
    type: "Literal",
    roles: "Literal"
)

subscriptExpr <- (subscriptExpr) => uast(
    type: "Synthetic",
    children: "additiveExpr", "amendExpr", "comparisonExpr", "equalityExpr", "exponentiationExpr", "falseLiteralExpr", "floatLiteralExpr", "functionLiteralExpr", "ifExpr", "importExpr", "intLiteralExpr", "letExpr", "logicalAndExpr", "logicalNotExpr", "logicalOrExpr", "mlStringLiteralExpr", "moduleExpr", "multiplicativeExpr", "newExpr", "nonNullExpr", "nullCoalesceExpr", "nullLiteralExpr", "outerExpr", "parenthesizedExpr", "pipeExpr", "qualifiedAccessExpr", "readExpr", "slStringLiteralExpr", "subscriptExpr", "superAccessExpr", "superSubscriptExpr", "thisExpr", "throwExpr", "traceExpr", "trueLiteralExpr", "typeCastExpr", "typeTestExpr", "unaryMinusExpr", "unqualifiedAccessExpr"
)

superAccessExpr <- (superAccessExpr) => uast(
    type: "Synthetic"
)

superSubscriptExpr <- (superSubscriptExpr) => uast(
    type: "Synthetic"
)

throwExpr <- (throwExpr) => uast(
    type: "Throw",
    roles: "Throw"
)

traceExpr <- (traceExpr) => uast(
    type: "Synthetic"
)

typeAlias <- (typeAlias) => uast(
    type: "Synthetic"
)

typeAnnotation <- (typeAnnotation) => uast(
    type: "Synthetic"
)

typeArgumentList <- (typeArgumentList) => uast(
    type: "List"
)

typeCastExpr <- (typeCastExpr) => uast(
    type: "Cast",
    children: "as"
)

typeParameter <- (typeParameter) => uast(
    type: "Parameter",
    roles: "Parameter"
)

typeParameterList <- (typeParameterList) => uast(
    type: "Parameter",
    roles: "Parameter"
)

typeTestExpr <- (typeTestExpr) => uast(
    type: "Synthetic",
    children: "is"
)

typedIdentifier <- (typedIdentifier) => uast(
    type: "If"
)

unaryMinusExpr <- (unaryMinusExpr) => uast(
    type: "Synthetic"
)

unionType <- (unionType) => uast(
    type: "Synthetic"
)

unqualifiedAccessExpr <- (unqualifiedAccessExpr) => uast(
    type: "If"
)

whenGenerator <- (whenGenerator) => uast(
    type: "Generator",
    roles: "Generator",
    children: "additiveExpr", "amendExpr", "comparisonExpr", "equalityExpr", "exponentiationExpr", "falseLiteralExpr", "floatLiteralExpr", "functionLiteralExpr", "ifExpr", "importExpr", "intLiteralExpr", "letExpr", "logicalAndExpr", "logicalNotExpr", "logicalOrExpr", "mlStringLiteralExpr", "moduleExpr", "multiplicativeExpr", "newExpr", "nonNullExpr", "nullCoalesceExpr", "nullLiteralExpr", "objectBody", "outerExpr", "parenthesizedExpr", "pipeExpr", "qualifiedAccessExpr", "readExpr", "slStringLiteralExpr", "subscriptExpr", "superAccessExpr", "superSubscriptExpr", "thisExpr", "throwExpr", "traceExpr", "trueLiteralExpr", "typeCastExpr", "typeTestExpr", "unaryMinusExpr", "unqualifiedAccessExpr"
)

abstract <- (abstract) => uast(
    type: "Synthetic"
)

amends <- (amends) => uast(
    type: "Synthetic"
)

as <- (as) => uast(
    type: "Synthetic"
)

blankIdentifier <- (blankIdentifier) => uast(
    type: "If"
)

blockComment <- (blockComment) => uast(
    type: "Block",
    roles: "Body"
)

class <- (class) => uast(
    type: "Class",
    roles: "Class", "Declaration"
)

const <- (const) => uast(
    type: "Synthetic"
)

else <- (else) => uast(
    type: "Synthetic"
)

escapeSequence <- (escapeSequence) => uast(
    type: "Synthetic"
)

extends <- (extends) => uast(
    type: "Synthetic"
)

external <- (external) => uast(
    type: "Synthetic"
)

falseLiteralExpr <- (falseLiteralExpr) => uast(
    type: "Literal",
    roles: "Literal"
)

fixed <- (fixed) => uast(
    type: "Synthetic"
)

floatLiteralExpr <- (floatLiteralExpr) => uast(
    type: "Literal",
    roles: "Literal"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
)

function <- (function) => uast(
    type: "Function",
    roles: "Function", "Declaration"
)

hidden <- (hidden) => uast(
    type: "Synthetic"
)

identifier <- (identifier) => uast(
    type: "If"
)

if <- (if) => uast(
    type: "If"
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
)

in <- (in) => uast(
    type: "Synthetic"
)

intLiteralExpr <- (intLiteralExpr) => uast(
    type: "Literal",
    roles: "Literal"
)

is <- (is) => uast(
    type: "Synthetic"
)

let <- (let) => uast(
    type: "Synthetic"
)

local <- (local) => uast(
    type: "Synthetic"
)

module <- (module) => uast(
    type: "Module",
    roles: "Module"
)

moduleType <- (moduleType) => uast(
    type: "Module",
    roles: "Module"
)

new <- (new) => uast(
    type: "Synthetic"
)

nothingType <- (nothingType) => uast(
    type: "Synthetic"
)

nullLiteralExpr <- (nullLiteralExpr) => uast(
    type: "Literal",
    roles: "Literal"
)

open <- (open) => uast(
    type: "Synthetic"
)

out <- (out) => uast(
    type: "Synthetic"
)

outerExpr <- (outerExpr) => uast(
    type: "Synthetic"
)

read <- (read) => uast(
    type: "Synthetic"
)

super <- (super) => uast(
    type: "Synthetic"
)

thisExpr <- (thisExpr) => uast(
    type: "Synthetic"
)

throw <- (throw) => uast(
    type: "Throw",
    roles: "Throw"
)

trace <- (trace) => uast(
    type: "Synthetic"
)

trueLiteralExpr <- (trueLiteralExpr) => uast(
    type: "Literal",
    roles: "Literal"
)

typealias <- (typealias) => uast(
    type: "Synthetic"
)

unknownType <- (unknownType) => uast(
    type: "Synthetic"
)

when <- (when) => uast(
    type: "Synthetic"
)

