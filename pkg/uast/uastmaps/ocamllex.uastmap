_regexp <- (_regexp) => uast(
    type: "Synthetic"
)

action <- (action) => uast(
    type: "Synthetic"
)

aliased_regexp <- (aliased_regexp) => uast(
    type: "Synthetic"
)

character <- (character) => uast(
    type: "Synthetic"
)

character_range <- (character_range) => uast(
    type: "Synthetic"
)

character_set <- (character_set) => uast(
    type: "Set"
)

escape_sequence <- (escape_sequence) => uast(
    type: "Synthetic"
)

lexer_case <- (lexer_case) => uast(
    type: "Case",
    roles: "Branch"
)

lexer_definition <- (lexer_definition) => uast(
    type: "Synthetic"
)

lexer_entry <- (lexer_entry) => uast(
    type: "Try",
    roles: "Try",
    children: "lexer_entry_name"
)

named_regexp <- (named_regexp) => uast(
    type: "Synthetic",
    children: "_regexp", "regexp_name"
)

parenthesized_regexp <- (parenthesized_regexp) => uast(
    type: "Synthetic"
)

refill_handler <- (refill_handler) => uast(
    type: "Synthetic"
)

regexp_alternative <- (regexp_alternative) => uast(
    type: "Synthetic"
)

regexp_concatenation <- (regexp_concatenation) => uast(
    type: "Synthetic"
)

regexp_difference <- (regexp_difference) => uast(
    type: "If"
)

regexp_repetition <- (regexp_repetition) => uast(
    type: "Synthetic"
)

string <- (string) => uast(
    type: "Synthetic"
)

and <- (and) => uast(
    type: "Synthetic"
)

any <- (any) => uast(
    type: "Synthetic"
)

as <- (as) => uast(
    type: "Synthetic"
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
)

eof <- (eof) => uast(
    type: "Synthetic"
)

let <- (let) => uast(
    type: "Synthetic"
)

lexer_argument <- (lexer_argument) => uast(
    type: "Synthetic"
)

lexer_entry_name <- (lexer_entry_name) => uast(
    type: "Try",
    roles: "Try"
)

ocaml <- (ocaml) => uast(
    type: "Synthetic"
)

parse <- (parse) => uast(
    type: "Synthetic"
)

refill <- (refill) => uast(
    type: "Synthetic"
)

regexp_name <- (regexp_name) => uast(
    type: "Synthetic"
)

rule <- (rule) => uast(
    type: "Synthetic"
)

shortest <- (shortest) => uast(
    type: "Synthetic"
)

