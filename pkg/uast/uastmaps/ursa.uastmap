assignment <- (assignment) => uast(
    type: "Assignment",
    roles: "Assignment"
)

await <- (await) => uast(
    type: "Await",
    roles: "Await"
)

binary_exp <- (binary_exp) => uast(
    type: "Synthetic",
    children: "and", "or"
)

block <- (block) => uast(
    type: "Block",
    roles: "Body"
)

bool <- (bool) => uast(
    type: "Synthetic"
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
)

call <- (call) => uast(
    type: "Call",
    roles: "Call",
    children: "assignment", "await", "binary_exp", "block", "bool", "call", "fn", "for", "identifier", "if", "launch", "list", "loop", "map", "null", "number", "object", "property_exp", "raw_string_literal", "string", "unary_exp", "yield"
)

fn <- (fn) => uast(
    type: "Synthetic"
)

fn_type <- (fn_type) => uast(
    type: "Synthetic"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop",
    children: "assignment", "await", "binary_exp", "block", "bool", "call", "fn", "for", "identifier", "if", "launch", "list", "loop", "map", "null", "number", "object", "property_exp", "raw_string_literal", "string", "unary_exp", "yield"
)

if <- (if) => uast(
    type: "If"
)

launch <- (launch) => uast(
    type: "Synthetic"
)

let <- (let) => uast(
    type: "Synthetic",
    children: "assignment", "await", "binary_exp", "block", "bool", "call", "fn", "for", "identifier", "if", "launch", "list", "loop", "map", "null", "number", "object", "property_exp", "raw_string_literal", "string", "unary_exp", "yield"
)

list <- (list) => uast(
    type: "List"
)

loop <- (loop) => uast(
    type: "Loop",
    roles: "Loop"
)

map <- (map) => uast(
    type: "Synthetic"
)

member <- (member) => uast(
    type: "Synthetic"
)

module <- (module) => uast(
    type: "Module",
    roles: "Module"
)

named_type <- (named_type) => uast(
    type: "Synthetic"
)

object <- (object) => uast(
    type: "Synthetic"
)

params <- (params) => uast(
    type: "Synthetic"
)

property_exp <- (property_exp) => uast(
    type: "Property",
    roles: "Member"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
)

statement <- (statement) => uast(
    type: "Synthetic"
)

string <- (string) => uast(
    type: "Synthetic"
)

type <- (type) => uast(
    type: "Synthetic"
)

type_annotation <- (type_annotation) => uast(
    type: "TypeAnnotation",
    roles: "Type"
)

type_args <- (type_args) => uast(
    type: "Synthetic"
)

type_param <- (type_param) => uast(
    type: "Synthetic"
)

unary_exp <- (unary_exp) => uast(
    type: "Synthetic"
)

use <- (use) => uast(
    type: "Synthetic"
)

yield <- (yield) => uast(
    type: "Yield",
    roles: "Yield"
)

and <- (and) => uast(
    type: "Synthetic"
)

await <- (await) => uast(
    type: "Await",
    roles: "Await"
)

block_comment <- (block_comment) => uast(
    type: "Block",
    roles: "Body"
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue"
)

else <- (else) => uast(
    type: "Synthetic"
)

false <- (false) => uast(
    type: "Synthetic"
)

fn <- (fn) => uast(
    type: "Synthetic"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
)

gen <- (gen) => uast(
    type: "Synthetic"
)

identifier <- (identifier) => uast(
    type: "If"
)

if <- (if) => uast(
    type: "If"
)

in <- (in) => uast(
    type: "Synthetic"
)

launch <- (launch) => uast(
    type: "Synthetic"
)

let <- (let) => uast(
    type: "Synthetic"
)

line_comment <- (line_comment) => uast(
    type: "Comment",
    roles: "Comment"
)

loop <- (loop) => uast(
    type: "Loop",
    roles: "Loop"
)

not <- (not) => uast(
    type: "Synthetic"
)

null <- (null) => uast(
    type: "Synthetic"
)

number <- (number) => uast(
    type: "Synthetic"
)

or <- (or) => uast(
    type: "Synthetic"
)

property_identifier <- (property_identifier) => uast(
    type: "If"
)

raw_string_literal <- (raw_string_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
)

true <- (true) => uast(
    type: "Synthetic"
)

use <- (use) => uast(
    type: "Synthetic"
)

var <- (var) => uast(
    type: "Synthetic"
)

yield <- (yield) => uast(
    type: "Yield",
    roles: "Yield"
)

