expression <- (expression) => uast(
    type: "Synthetic",
    children: []
)

literal <- (literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

number <- (number) => uast(
    type: "Synthetic",
    children: []
)

preprocessor_expression <- (preprocessor_expression) => uast(
    type: "Synthetic",
    children: []
)

statement <- (statement) => uast(
    type: "Synthetic",
    children: []
)

and <- (and) => uast(
    type: "Synthetic",
    children: "expression", "preprocessor_expression"
)

arguments <- (arguments) => uast(
    type: "Synthetic",
    children: []
)

array <- (array) => uast(
    type: "Synthetic",
    children: []
)

assign <- (assign) => uast(
    type: "Synthetic",
    children: "expression", "logic"
)

boolean <- (boolean) => uast(
    type: "Synthetic",
    children: []
)

call <- (call) => uast(
    type: "Call",
    roles: "Call"
    children: "arguments", "array", "identifier", "preprocessor_expression"
)

compare <- (compare) => uast(
    type: "Synthetic",
    children: "expression"
)

compound <- (compound) => uast(
    type: "Synthetic",
    children: "usage"
)

concatenate <- (concatenate) => uast(
    type: "Synthetic",
    children: "expression", "logic"
)

define <- (define) => uast(
    type: "Synthetic",
    children: "identifier"
)

else <- (else) => uast(
    type: "Synthetic",
    children: []
)

endif <- (endif) => uast(
    type: "If",
    children: []
)

function_definition <- (function_definition) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "arguments", "array", "identifier"
)

if <- (if) => uast(
    type: "If",
    children: "preprocessor_expression"
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
    children: "identifier"
)

in <- (in) => uast(
    type: "Synthetic",
    children: "expression", "in"
)

include <- (include) => uast(
    type: "Synthetic",
    children: "string"
)

interpolation <- (interpolation) => uast(
    type: "Synthetic",
    children: "identifier"
)

logic <- (logic) => uast(
    type: "Synthetic",
    children: "expression"
)

not <- (not) => uast(
    type: "Synthetic",
    children: "expression", "preprocessor_expression"
)

not_in <- (not_in) => uast(
    type: "Synthetic",
    children: "expression"
)

once <- (once) => uast(
    type: "Synthetic",
    children: []
)

or <- (or) => uast(
    type: "Synthetic",
    children: "expression", "preprocessor_expression"
)

parenthesis <- (parenthesis) => uast(
    type: "Synthetic",
    children: []
)

placeholder <- (placeholder) => uast(
    type: "Synthetic",
    children: "decimal"
)

source_file <- (source_file) => uast(
    type: "Synthetic",
    children: []
)

string <- (string) => uast(
    type: "Synthetic",
    children: "double_quoted", "escape_sequence", "interpolation", "placeholder", "single_quoted"
)

struct <- (struct) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: []
)

subtract <- (subtract) => uast(
    type: "Synthetic",
    children: "expression", "logic"
)

undef <- (undef) => uast(
    type: "Synthetic",
    children: "identifier"
)

unknown <- (unknown) => uast(
    type: "Synthetic",
    children: []
)

usage <- (usage) => uast(
    type: "Synthetic",
    children: "identifier", "string"
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

decimal <- (decimal) => uast(
    type: "Synthetic",
    children: []
)

double_quoted <- (double_quoted) => uast(
    type: "Synthetic",
    children: []
)

escape_sequence <- (escape_sequence) => uast(
    type: "Synthetic",
    children: []
)

false <- (false) => uast(
    type: "Synthetic",
    children: []
)

function <- (function) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: []
)

identifier <- (identifier) => uast(
    type: "If",
    children: []
)

in <- (in) => uast(
    type: "Synthetic",
    children: []
)

single_quoted <- (single_quoted) => uast(
    type: "Synthetic",
    children: []
)

true <- (true) => uast(
    type: "Synthetic",
    children: []
)

