array_elements <- (array_elements) => uast(
    type: "Synthetic",
    children: []
)

array_literal <- (array_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: "array_literal", "assignment_expression", "binary_expression", "block", "bool_literal", "byte_literal", "call_expression", "else_expression", "field_expression", "fn_expr", "for_expression", "identifier", "if_expression", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

array_type <- (array_type) => uast(
    type: "Synthetic",
    children: "array_type", "fn_type", "map_type", "pointer_type", "primitive_type", "qualified_type_identifier", "reference_type", "slice_type", "type_identifier"
)

assignment_expression <- (assignment_expression) => uast(
    type: "Assignment",
    roles: "Assignment"
    children: "assignment_operator", "expression_list"
)

assignment_operator <- (assignment_operator) => uast(
    type: "Assignment",
    roles: "Assignment"
    children: []
)

base_case <- (base_case) => uast(
    type: "Case",
    roles: "Branch"
    children: "branch_sep", "case_body"
)

binary_expression <- (binary_expression) => uast(
    type: "Synthetic",
    children: "array_literal", "assignment_expression", "binary_expression", "binary_operator", "block", "bool_literal", "byte_literal", "call_expression", "else_expression", "field_expression", "fn_expr", "for_expression", "identifier", "if_expression", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

block <- (block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

block_comment <- (block_comment) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

bool_literal <- (bool_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

break_statement <- (break_statement) => uast(
    type: "Break",
    roles: "Break"
    children: "identifier"
)

call_args <- (call_args) => uast(
    type: "Call",
    roles: "Call"
    children: []
)

call_expression <- (call_expression) => uast(
    type: "Call",
    roles: "Call"
    children: "array_literal", "assignment_expression", "binary_expression", "block", "bool_literal", "byte_literal", "call_args", "call_expression", "else_expression", "err_tkn", "field_expression", "fn_expr", "for_expression", "identifier", "if_expression", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

case_body <- (case_body) => uast(
    type: "Case",
    roles: "Branch"
    children: []
)

const_decl <- (const_decl) => uast(
    type: "Synthetic",
    children: "array_literal", "array_type", "assignment_expression", "binary_expression", "block", "bool_literal", "byte_literal", "call_expression", "else_expression", "field_expression", "fn_expr", "fn_type", "for_expression", "identifier", "if_expression", "index_expression", "map_literal", "map_type", "nil_literal", "number_literal", "parenthesized_expression", "pointer_type", "primitive_type", "qualified_identifier", "qualified_type_identifier", "raw_string_literal", "reference_type", "rune_literal", "slice_expression", "slice_type", "string_literal", "type_identifier", "unary_expression"
)

continue_statement <- (continue_statement) => uast(
    type: "Continue",
    roles: "Continue"
    children: "identifier"
)

cpp_flag <- (cpp_flag) => uast(
    type: "Synthetic",
    children: []
)

defer_block <- (defer_block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

else_clause <- (else_clause) => uast(
    type: "Synthetic",
    children: []
)

else_expression <- (else_expression) => uast(
    type: "Synthetic",
    children: []
)

enum_body <- (enum_body) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: []
)

enum_decl <- (enum_decl) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: "array_type", "enum_body", "fn_type", "identifier", "map_type", "pointer_type", "primitive_type", "qualified_type_identifier", "reference_type", "slice_type", "type_identifier"
)

enum_field <- (enum_field) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: "array_literal", "assignment_expression", "binary_expression", "bool_literal", "byte_literal", "call_expression", "field_expression", "field_identifier", "fn_expr", "identifier", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

err_tkn <- (err_tkn) => uast(
    type: "Synthetic",
    children: []
)

expression_list <- (expression_list) => uast(
    type: "List",
    children: []
)

field_expression <- (field_expression) => uast(
    type: "Field",
    roles: "Member"
    children: "array_literal", "assignment_expression", "binary_expression", "bool_literal", "byte_literal", "call_expression", "field_expression", "field_identifier", "fn_expr", "identifier", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

fn_block <- (fn_block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

fn_body <- (fn_body) => uast(
    type: "Synthetic",
    children: []
)

fn_decl <- (fn_decl) => uast(
    type: "Synthetic",
    children: "fn_body", "fn_modifiers", "generic_params", "identifier", "param_list", "return_spec"
)

fn_expr <- (fn_expr) => uast(
    type: "Synthetic",
    children: "array_type", "block", "fn_type", "map_type", "param_list", "pointer_type", "primitive_type", "qualified_type_identifier", "reference_type", "slice_type", "type_identifier"
)

fn_modifiers <- (fn_modifiers) => uast(
    type: "If",
    children: []
)

fn_type <- (fn_type) => uast(
    type: "Synthetic",
    children: "array_type", "fn_type", "map_type", "param_list", "pointer_type", "primitive_type", "qualified_type_identifier", "reference_type", "slice_type", "type_identifier"
)

for_each <- (for_each) => uast(
    type: "Loop",
    roles: "Loop"
    children: "array_literal", "assignment_expression", "binary_expression", "block", "bool_literal", "byte_literal", "call_expression", "field_expression", "fn_expr", "identifier", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

for_expression <- (for_expression) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

foreach_bind <- (foreach_bind) => uast(
    type: "Loop",
    roles: "Loop"
    children: "identifier", "ignore_operator", "mut_bind", "qualified_identifier", "ref_bind"
)

generic_param <- (generic_param) => uast(
    type: "Synthetic",
    children: "array_type", "fn_type", "identifier", "map_type", "pointer_type", "primitive_type", "qualified_type_identifier", "reference_type", "slice_type", "type_identifier"
)

generic_params <- (generic_params) => uast(
    type: "Synthetic",
    children: []
)

goto_statement <- (goto_statement) => uast(
    type: "Synthetic",
    children: "identifier"
)

if_expression <- (if_expression) => uast(
    type: "If",
    children: "array_literal", "assignment_expression", "binary_expression", "block", "bool_literal", "byte_literal", "call_expression", "else_clause", "else_expression", "field_expression", "fn_expr", "for_expression", "identifier", "if_expression", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

impl_decl <- (impl_decl) => uast(
    type: "Synthetic",
    children: "block", "identifier", "qualified_identifier"
)

index_expression <- (index_expression) => uast(
    type: "Index",
    roles: "Index"
    children: "array_literal", "assignment_expression", "binary_expression", "bool_literal", "byte_literal", "call_expression", "field_expression", "fn_expr", "identifier", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

label <- (label) => uast(
    type: "Synthetic",
    children: "identifier"
)

let_decl <- (let_decl) => uast(
    type: "Synthetic",
    children: []
)

map_entry <- (map_entry) => uast(
    type: "Try",
    roles: "Try"
    children: "array_literal", "assignment_expression", "binary_expression", "bool_literal", "byte_literal", "call_expression", "field_expression", "fn_expr", "identifier", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

map_literal <- (map_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

map_type <- (map_type) => uast(
    type: "Synthetic",
    children: "array_type", "fn_type", "map_type", "pointer_type", "primitive_type", "qualified_type_identifier", "reference_type", "slice_type", "type_identifier"
)

match_block <- (match_block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

match_case <- (match_case) => uast(
    type: "Case",
    roles: "Branch"
    children: "branch_sep", "case_body", "pattern_list"
)

match_statement <- (match_statement) => uast(
    type: "Match",
    roles: "Match"
    children: "array_literal", "assignment_expression", "binary_expression", "bool_literal", "byte_literal", "call_expression", "const", "field_expression", "fn_expr", "identifier", "index_expression", "map_literal", "match_block", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "type", "unary_expression"
)

multi_ret <- (multi_ret) => uast(
    type: "Synthetic",
    children: []
)

multi_var <- (multi_var) => uast(
    type: "Synthetic",
    children: "expression_list", "tuple_pattern"
)

mut_bind <- (mut_bind) => uast(
    type: "Synthetic",
    children: []
)

mut_pattern <- (mut_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

named_ret <- (named_ret) => uast(
    type: "Synthetic",
    children: "array_type", "fn_type", "map_type", "pointer_type", "primitive_type", "qualified_type_identifier", "reference_type", "ret_id", "slice_type", "type_identifier"
)

named_ret_list <- (named_ret_list) => uast(
    type: "List",
    children: []
)

number_literal <- (number_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

param <- (param) => uast(
    type: "Synthetic",
    children: "identifier", "ignore_operator", "mut_bind", "qualified_identifier", "ref_bind"
)

param_list <- (param_list) => uast(
    type: "List",
    children: []
)

parenthesized_expression <- (parenthesized_expression) => uast(
    type: "Synthetic",
    children: "array_literal", "assignment_expression", "binary_expression", "block", "bool_literal", "byte_literal", "call_expression", "else_expression", "field_expression", "fn_expr", "for_expression", "identifier", "if_expression", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

pattern_list <- (pattern_list) => uast(
    type: "List",
    children: "array_literal", "array_type", "assignment_expression", "binary_expression", "bool_literal", "byte_literal", "call_expression", "field_expression", "fn_expr", "fn_type", "identifier", "index_expression", "map_literal", "map_type", "nil_literal", "number_literal", "parenthesized_expression", "pointer_type", "primitive_type", "qualified_identifier", "qualified_type_identifier", "raw_string_literal", "reference_type", "rune_literal", "slice_expression", "slice_type", "string_literal", "type_identifier", "unary_expression"
)

pointer_type <- (pointer_type) => uast(
    type: "Synthetic",
    children: "array_type", "fn_type", "map_type", "pointer_type", "primitive_type", "qualified_type_identifier", "reference_type", "slice_type", "type_identifier"
)

pragma <- (pragma) => uast(
    type: "Synthetic",
    children: "array_literal", "assignment_expression", "binary_expression", "block", "bool_literal", "byte_literal", "call_expression", "else_expression", "field_expression", "fn_expr", "for_expression", "identifier", "if_expression", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

primitive_type <- (primitive_type) => uast(
    type: "Synthetic",
    children: []
)

qualified_identifier <- (qualified_identifier) => uast(
    type: "If",
    children: "identifier", "qualified_identifier"
)

qualified_type_identifier <- (qualified_type_identifier) => uast(
    type: "If",
    children: "identifier", "qualified_type_identifier", "type_identifier"
)

raw_string_literal <- (raw_string_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

ref_bind <- (ref_bind) => uast(
    type: "Synthetic",
    children: []
)

ref_pattern <- (ref_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

reference_type <- (reference_type) => uast(
    type: "Synthetic",
    children: "array_type", "fn_type", "map_type", "pointer_type", "primitive_type", "qualified_type_identifier", "reference_type", "slice_type", "type_identifier"
)

return_expression <- (return_expression) => uast(
    type: "Return",
    roles: "Return"
    children: []
)

return_spec <- (return_spec) => uast(
    type: "Return",
    roles: "Return"
    children: "array_type", "err_tkn", "fn_type", "map_type", "multi_ret", "named_ret_list", "pointer_type", "primitive_type", "qualified_type_identifier", "reference_type", "slice_type", "type_identifier"
)

self_param <- (self_param) => uast(
    type: "Synthetic",
    children: []
)

short_decl <- (short_decl) => uast(
    type: "Synthetic",
    children: "expression_list", "short_names"
)

short_names <- (short_names) => uast(
    type: "Synthetic",
    children: []
)

single_var <- (single_var) => uast(
    type: "Synthetic",
    children: "array_literal", "array_type", "assignment_expression", "binary_expression", "block", "bool_literal", "byte_literal", "call_expression", "else_expression", "field_expression", "fn_expr", "fn_type", "for_expression", "identifier", "if_expression", "index_expression", "map_literal", "map_type", "nil_literal", "number_literal", "parenthesized_expression", "pointer_type", "primitive_type", "qualified_identifier", "qualified_type_identifier", "raw_string_literal", "ref_pattern", "reference_type", "rune_literal", "slice_expression", "slice_type", "string_literal", "type_identifier", "unary_expression"
)

slice_expression <- (slice_expression) => uast(
    type: "Slice",
    children: "array_literal", "assignment_expression", "binary_expression", "bool_literal", "byte_literal", "call_expression", "field_expression", "fn_expr", "identifier", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

slice_type <- (slice_type) => uast(
    type: "Slice",
    children: "array_type", "fn_type", "map_type", "pointer_type", "primitive_type", "qualified_type_identifier", "reference_type", "slice_type", "type_identifier"
)

source_file <- (source_file) => uast(
    type: "Synthetic",
    children: []
)

static_decl <- (static_decl) => uast(
    type: "Synthetic",
    children: "array_literal", "array_type", "assignment_expression", "binary_expression", "block", "bool_literal", "byte_literal", "call_expression", "else_expression", "field_expression", "fn_expr", "fn_type", "for_expression", "identifier", "if_expression", "index_expression", "map_literal", "map_type", "nil_literal", "number_literal", "parenthesized_expression", "pointer_type", "primitive_type", "qualified_identifier", "qualified_type_identifier", "raw_string_literal", "reference_type", "rune_literal", "slice_expression", "slice_type", "string_literal", "type_identifier", "unary_expression"
)

string_literal <- (string_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

struct_decl <- (struct_decl) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: "generic_params", "identifier"
)

struct_field <- (struct_field) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: "array_literal", "array_type", "assignment_expression", "binary_expression", "bool_literal", "byte_literal", "call_expression", "field_expression", "fn_expr", "fn_type", "identifier", "index_expression", "map_literal", "map_type", "nil_literal", "number_literal", "parenthesized_expression", "pointer_type", "primitive_type", "qualified_identifier", "qualified_type_identifier", "raw_string_literal", "reference_type", "rune_literal", "slice_expression", "slice_type", "string_literal", "type_identifier", "unary_expression"
)

trait_body <- (trait_body) => uast(
    type: "Synthetic",
    children: []
)

trait_decl <- (trait_decl) => uast(
    type: "Synthetic",
    children: "identifier", "trait_body"
)

tuple_pattern <- (tuple_pattern) => uast(
    type: "Tuple",
    children: []
)

type_alias_decl <- (type_alias_decl) => uast(
    type: "Synthetic",
    children: "array_type", "fn_type", "map_type", "pointer_type", "primitive_type", "qualified_type_identifier", "reference_type", "slice_type", "type_identifier"
)

type_annotation <- (type_annotation) => uast(
    type: "TypeAnnotation",
    roles: "Type"
    children: "array_type", "fn_type", "map_type", "pointer_type", "primitive_type", "qualified_type_identifier", "reference_type", "slice_type", "type_identifier"
)

unary_expression <- (unary_expression) => uast(
    type: "Synthetic",
    children: "array_literal", "assignment_expression", "binary_expression", "block", "bool_literal", "byte_literal", "call_expression", "else_expression", "field_expression", "fn_expr", "for_expression", "identifier", "if_expression", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

unsafe_block <- (unsafe_block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

unsafe_defer_block <- (unsafe_defer_block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

use_decl <- (use_decl) => uast(
    type: "Synthetic",
    children: "identifier", "string_literal"
)

var_decl <- (var_decl) => uast(
    type: "Synthetic",
    children: []
)

variadic_argument <- (variadic_argument) => uast(
    type: "Synthetic",
    children: []
)

variadic_param <- (variadic_param) => uast(
    type: "Synthetic",
    children: "array_type", "fn_type", "identifier", "ignore_operator", "map_type", "mut_bind", "pointer_type", "primitive_type", "qualified_identifier", "qualified_type_identifier", "ref_bind", "reference_type", "slice_type", "type_identifier"
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
    children: "array_literal", "assignment_expression", "binary_expression", "block", "bool_literal", "byte_literal", "call_expression", "field_expression", "fn_expr", "identifier", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

while_next <- (while_next) => uast(
    type: "Loop",
    roles: "Loop"
    children: "array_literal", "assignment_expression", "binary_expression", "block", "bool_literal", "byte_literal", "call_expression", "field_expression", "fn_expr", "identifier", "index_expression", "map_literal", "nil_literal", "number_literal", "parenthesized_expression", "qualified_identifier", "raw_string_literal", "rune_literal", "slice_expression", "string_literal", "unary_expression"
)

any <- (any) => uast(
    type: "Synthetic",
    children: []
)

binary_operator <- (binary_operator) => uast(
    type: "BinaryOp",
    roles: "Operator"
    children: []
)

block_comment_text <- (block_comment_text) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

bool <- (bool) => uast(
    type: "Synthetic",
    children: []
)

branch_sep <- (branch_sep) => uast(
    type: "Synthetic",
    children: []
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
    children: []
)

byte <- (byte) => uast(
    type: "Synthetic",
    children: []
)

byte_literal <- (byte_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

const <- (const) => uast(
    type: "Synthetic",
    children: []
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue"
    children: []
)

cpp <- (cpp) => uast(
    type: "Synthetic",
    children: []
)

defer <- (defer) => uast(
    type: "Synthetic",
    children: []
)

else <- (else) => uast(
    type: "Synthetic",
    children: []
)

enum <- (enum) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: []
)

escape_sequence <- (escape_sequence) => uast(
    type: "Synthetic",
    children: []
)

f32 <- (f32) => uast(
    type: "Synthetic",
    children: []
)

f64 <- (f64) => uast(
    type: "Synthetic",
    children: []
)

fall_through <- (fall_through) => uast(
    type: "Synthetic",
    children: []
)

false <- (false) => uast(
    type: "Synthetic",
    children: []
)

field_identifier <- (field_identifier) => uast(
    type: "If",
    children: []
)

float_literal <- (float_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

fn <- (fn) => uast(
    type: "Synthetic",
    children: []
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

goto <- (goto) => uast(
    type: "Synthetic",
    children: []
)

i16 <- (i16) => uast(
    type: "Synthetic",
    children: []
)

i32 <- (i32) => uast(
    type: "Synthetic",
    children: []
)

i64 <- (i64) => uast(
    type: "Synthetic",
    children: []
)

i8 <- (i8) => uast(
    type: "Synthetic",
    children: []
)

identifier <- (identifier) => uast(
    type: "If",
    children: []
)

if <- (if) => uast(
    type: "If",
    children: []
)

ignore_operator <- (ignore_operator) => uast(
    type: "Synthetic",
    children: []
)

impl <- (impl) => uast(
    type: "Synthetic",
    children: []
)

int <- (int) => uast(
    type: "Synthetic",
    children: []
)

integer_literal <- (integer_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

keyword <- (keyword) => uast(
    type: "Synthetic",
    children: []
)

let <- (let) => uast(
    type: "Synthetic",
    children: []
)

line_comment <- (line_comment) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

match <- (match) => uast(
    type: "Match",
    roles: "Match"
    children: []
)

mut <- (mut) => uast(
    type: "Synthetic",
    children: []
)

nil_literal <- (nil_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

raw_string_content <- (raw_string_content) => uast(
    type: "Synthetic",
    children: []
)

ret <- (ret) => uast(
    type: "Synthetic",
    children: []
)

ret_id <- (ret_id) => uast(
    type: "Synthetic",
    children: []
)

rune <- (rune) => uast(
    type: "Synthetic",
    children: []
)

rune_literal <- (rune_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

self <- (self) => uast(
    type: "Synthetic",
    children: []
)

static <- (static) => uast(
    type: "Synthetic",
    children: []
)

str <- (str) => uast(
    type: "Synthetic",
    children: []
)

string_content <- (string_content) => uast(
    type: "Synthetic",
    children: []
)

struct <- (struct) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: []
)

trait <- (trait) => uast(
    type: "Synthetic",
    children: []
)

true <- (true) => uast(
    type: "Synthetic",
    children: []
)

type <- (type) => uast(
    type: "Synthetic",
    children: []
)

type_identifier <- (type_identifier) => uast(
    type: "If",
    children: []
)

u16 <- (u16) => uast(
    type: "Synthetic",
    children: []
)

u32 <- (u32) => uast(
    type: "Synthetic",
    children: []
)

u64 <- (u64) => uast(
    type: "Synthetic",
    children: []
)

u8 <- (u8) => uast(
    type: "Synthetic",
    children: []
)

uint <- (uint) => uast(
    type: "Synthetic",
    children: []
)

uintptr <- (uintptr) => uast(
    type: "Synthetic",
    children: []
)

unsafe <- (unsafe) => uast(
    type: "Synthetic",
    children: []
)

use <- (use) => uast(
    type: "Synthetic",
    children: []
)

