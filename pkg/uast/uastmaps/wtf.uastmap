assertion <- (assertion) => uast(
    type: "Synthetic"
)

assignment <- (assignment) => uast(
    type: "Assignment",
    roles: "Assignment"
)

assignment_operator <- (assignment_operator) => uast(
    type: "Assignment",
    roles: "Assignment"
)

binary_operator <- (binary_operator) => uast(
    type: "BinaryOp",
    roles: "Operator"
)

bool <- (bool) => uast(
    type: "Synthetic"
)

call <- (call) => uast(
    type: "Call",
    roles: "Call"
)

conditional <- (conditional) => uast(
    type: "Synthetic"
)

constructor <- (constructor) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
)

control <- (control) => uast(
    type: "Synthetic"
)

declaration <- (declaration) => uast(
    type: "Synthetic"
)

enum <- (enum) => uast(
    type: "Enum",
    roles: "Enum", "Declaration",
    children: "ident"
)

expression <- (expression) => uast(
    type: "Synthetic"
)

field <- (field) => uast(
    type: "Field",
    roles: "Member"
)

func <- (func) => uast(
    type: "Synthetic"
)

list <- (list) => uast(
    type: "List"
)

loop <- (loop) => uast(
    type: "Loop",
    roles: "Loop"
)

member_call <- (member_call) => uast(
    type: "Call",
    roles: "Call"
)

member_operator <- (member_operator) => uast(
    type: "Synthetic"
)

newline <- (newline) => uast(
    type: "Synthetic"
)

overload <- (overload) => uast(
    type: "Synthetic"
)

package_header <- (package_header) => uast(
    type: "Package",
    roles: "Module"
)

path <- (path) => uast(
    type: "Synthetic"
)

record <- (record) => uast(
    type: "Synthetic"
)

resource <- (resource) => uast(
    type: "Synthetic"
)

source_file <- (source_file) => uast(
    type: "Synthetic"
)

statement <- (statement) => uast(
    type: "Synthetic"
)

struct <- (struct) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
)

test <- (test) => uast(
    type: "Synthetic"
)

toplevel <- (toplevel) => uast(
    type: "Synthetic"
)

type <- (type) => uast(
    type: "Synthetic"
)

use <- (use) => uast(
    type: "Synthetic",
    children: "ident"
)

variant <- (variant) => uast(
    type: "Synthetic",
    children: "ident"
)

yeet <- (yeet) => uast(
    type: "Synthetic"
)

and <- (and) => uast(
    type: "Synthetic"
)

assert <- (assert) => uast(
    type: "Synthetic"
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
)

char <- (char) => uast(
    type: "Synthetic"
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
)

constructor <- (constructor) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue"
)

else <- (else) => uast(
    type: "Synthetic"
)

enum <- (enum) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
)

export <- (export) => uast(
    type: "Synthetic"
)

false <- (false) => uast(
    type: "Synthetic"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
)

func <- (func) => uast(
    type: "Synthetic"
)

ident <- (ident) => uast(
    type: "Synthetic"
)

if <- (if) => uast(
    type: "If"
)

in <- (in) => uast(
    type: "Synthetic"
)

let <- (let) => uast(
    type: "Synthetic"
)

none <- (none) => uast(
    type: "Synthetic"
)

number <- (number) => uast(
    type: "Synthetic"
)

or <- (or) => uast(
    type: "Synthetic"
)

overload <- (overload) => uast(
    type: "Synthetic"
)

package <- (package) => uast(
    type: "Package",
    roles: "Module"
)

record <- (record) => uast(
    type: "Synthetic"
)

resource <- (resource) => uast(
    type: "Synthetic"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
)

string <- (string) => uast(
    type: "Synthetic"
)

test <- (test) => uast(
    type: "Synthetic"
)

throw <- (throw) => uast(
    type: "Throw",
    roles: "Throw"
)

true <- (true) => uast(
    type: "Synthetic"
)

use <- (use) => uast(
    type: "Synthetic"
)

var <- (var) => uast(
    type: "Synthetic"
)

variant <- (variant) => uast(
    type: "Synthetic"
)

version <- (version) => uast(
    type: "Synthetic"
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
)

