abilities <- (abilities) => uast(
    type: "Synthetic",
    children: []
)

ability <- (ability) => uast(
    type: "Synthetic",
    children: []
)

abort_expr <- (abort_expr) => uast(
    type: "Synthetic",
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr"
)

aborts_if <- (aborts_if) => uast(
    type: "If",
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr"
)

aborts_with_or_modifies <- (aborts_with_or_modifies) => uast(
    type: "If",
    children: "aborts_with", "modifies"
)

access_field <- (access_field) => uast(
    type: "Field",
    roles: "Member"
    children: "access_field", "anon_field_index", "expr_term", "identifier", "mem_access", "receiver_call"
)

access_specifier <- (access_specifier) => uast(
    type: "If",
    children: "identifier", "name_access_chain", "numerical_addr"
)

access_specifier_list <- (access_specifier_list) => uast(
    type: "If",
    children: []
)

address_block <- (address_block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

anon_fields <- (anon_fields) => uast(
    type: "Field",
    roles: "Member"
    children: []
)

asserts <- (asserts) => uast(
    type: "Synthetic",
    children: "access_field", "assert", "assignment", "assume", "bin_op_expr", "copy_expr", "deref_expr", "ensures", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr", "requires"
)

assignment <- (assignment) => uast(
    type: "Assignment",
    roles: "Assignment"
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr"
)

attribute <- (attribute) => uast(
    type: "Attribute",
    roles: "Attribute"
    children: "identifier", "name_access_chain", "value"
)

attributes <- (attributes) => uast(
    type: "Attribute",
    roles: "Attribute"
    children: []
)

bin_op_expr <- (bin_op_expr) => uast(
    type: "Synthetic",
    children: "access_field", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "mem_access", "move_expr", "not_expr", "receiver_call", "ref_expr", "ref_mut_expr"
)

bind_field <- (bind_field) => uast(
    type: "Field",
    roles: "Member"
    children: "fields", "name_access_chain", "shorthand_field_identifier", "tuple", "type_args", "var_name"
)

bind_list <- (bind_list) => uast(
    type: "List",
    children: "name_access_chain", "var_name"
)

block <- (block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

block_comment <- (block_comment) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

body <- (body) => uast(
    type: "Synthetic",
    children: []
)

bool_literal <- (bool_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

byte_string <- (byte_string) => uast(
    type: "Synthetic",
    children: []
)

call_args <- (call_args) => uast(
    type: "Call",
    roles: "Call"
    children: []
)

call_expr <- (call_expr) => uast(
    type: "Call",
    roles: "Call"
    children: "call_args", "name_access_chain", "type_args"
)

cast_expr <- (cast_expr) => uast(
    type: "Cast",
    children: []
)

closure_type <- (closure_type) => uast(
    type: "Synthetic",
    children: "type"
)

condition <- (condition) => uast(
    type: "Synthetic",
    children: []
)

condition_props <- (condition_props) => uast(
    type: "Synthetic",
    children: "name_access_chain", "value", "var_name"
)

constant_decl <- (constant_decl) => uast(
    type: "Synthetic",
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "identifier", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr", "type"
)

constraints <- (constraints) => uast(
    type: "Synthetic",
    children: []
)

copy_expr <- (copy_expr) => uast(
    type: "Synthetic",
    children: "identifier"
)

declaration <- (declaration) => uast(
    type: "Synthetic",
    children: []
)

deref_expr <- (deref_expr) => uast(
    type: "Synthetic",
    children: []
)

discouraged_name <- (discouraged_name) => uast(
    type: "Synthetic",
    children: []
)

emits <- (emits) => uast(
    type: "Synthetic",
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr"
)

enum_body <- (enum_body) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: []
)

enum_decl <- (enum_decl) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: "identifier"
)

enum_variant <- (enum_variant) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: []
)

enum_variant_posit <- (enum_variant_posit) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: "identifier"
)

enum_variant_struct <- (enum_variant_struct) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: "identifier"
)

expr_field <- (expr_field) => uast(
    type: "Field",
    roles: "Member"
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "identifier", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr", "shorthand_field_identifier"
)

expr_term <- (expr_term) => uast(
    type: "Synthetic",
    children: []
)

field_annot <- (field_annot) => uast(
    type: "Field",
    roles: "Member"
    children: "identifier"
)

fields <- (fields) => uast(
    type: "Field",
    roles: "Member"
    children: []
)

for_loop_expr <- (for_loop_expr) => uast(
    type: "Loop",
    roles: "Loop"
    children: "access_field", "block", "copy_expr", "deref_expr", "expr_term", "mem_access", "move_expr", "not_expr", "receiver_call", "ref_expr", "ref_mut_expr", "var_name"
)

friend_decl <- (friend_decl) => uast(
    type: "Synthetic",
    children: "name_access_chain"
)

function_decl <- (function_decl) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "access_specifier_list", "acquires", "block", "identifier", "parameters", "pure", "reads", "type", "type_params", "writes"
)

if_expr <- (if_expr) => uast(
    type: "If",
    children: "access_field", "assignment", "bin_op_expr", "block", "copy_expr", "deref_expr", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "parenthesized_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr"
)

lambda <- (lambda) => uast(
    type: "Lambda",
    roles: "Lambda"
    children: "name_access_chain", "var_name"
)

let_expr <- (let_expr) => uast(
    type: "Synthetic",
    children: "access_field", "assignment", "bin_op_expr", "bind_list", "copy_expr", "deref_expr", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr", "type"
)

line_comment <- (line_comment) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

loop_expr <- (loop_expr) => uast(
    type: "Loop",
    roles: "Loop"
    children: "access_field", "assignment", "bin_op_expr", "block", "copy_expr", "deref_expr", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr"
)

macro_call_expr <- (macro_call_expr) => uast(
    type: "Call",
    roles: "Call"
    children: "call_args", "name_access_chain"
)

match_arm <- (match_arm) => uast(
    type: "Match",
    roles: "Match"
    children: []
)

match_expr <- (match_expr) => uast(
    type: "Match",
    roles: "Match"
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr"
)

mem_access <- (mem_access) => uast(
    type: "Synthetic",
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr"
)

member <- (member) => uast(
    type: "Synthetic",
    children: []
)

module <- (module) => uast(
    type: "Module",
    roles: "Module"
    children: "identifier", "numerical_addr"
)

module_ident <- (module_ident) => uast(
    type: "Module",
    roles: "Module"
    children: "identifier"
)

module_member_modifier <- (module_member_modifier) => uast(
    type: "If",
    children: []
)

move_expr <- (move_expr) => uast(
    type: "Synthetic",
    children: "identifier"
)

name_access_chain <- (name_access_chain) => uast(
    type: "Synthetic",
    children: "discouraged_name", "identifier"
)

name_access_chain_wildcard <- (name_access_chain_wildcard) => uast(
    type: "Synthetic",
    children: "discouraged_name", "identifier"
)

not_expr <- (not_expr) => uast(
    type: "Synthetic",
    children: []
)

number <- (number) => uast(
    type: "Synthetic",
    children: []
)

number_type <- (number_type) => uast(
    type: "Synthetic",
    children: []
)

numerical_addr <- (numerical_addr) => uast(
    type: "Synthetic",
    children: []
)

pack_expr <- (pack_expr) => uast(
    type: "Synthetic",
    children: "name_access_chain", "type_args"
)

parameter <- (parameter) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: "identifier"
)

parameters <- (parameters) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: []
)

parenthesized_expr <- (parenthesized_expr) => uast(
    type: "Synthetic",
    children: []
)

pattern <- (pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: "name_access_chain", "var_name"
)

primitive_type <- (primitive_type) => uast(
    type: "Synthetic",
    children: []
)

quantifier <- (quantifier) => uast(
    type: "If",
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "exists", "expr_term", "forall", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr", "triggers"
)

quantifier_bind <- (quantifier_bind) => uast(
    type: "If",
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "identifier", "in", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr", "type"
)

receiver_call <- (receiver_call) => uast(
    type: "Call",
    roles: "Call"
    children: "access_field", "anon_field_index", "call_args", "expr_term", "identifier", "mem_access", "receiver_call", "type_args"
)

ref_expr <- (ref_expr) => uast(
    type: "Synthetic",
    children: []
)

ref_mut_expr <- (ref_mut_expr) => uast(
    type: "Synthetic",
    children: []
)

result <- (result) => uast(
    type: "Synthetic",
    children: []
)

return_expr <- (return_expr) => uast(
    type: "Return",
    roles: "Return"
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr"
)

script <- (script) => uast(
    type: "Synthetic",
    children: []
)

shorthand_field_identifier <- (shorthand_field_identifier) => uast(
    type: "If",
    children: []
)

source_file <- (source_file) => uast(
    type: "Synthetic",
    children: []
)

spec_apply <- (spec_apply) => uast(
    type: "Synthetic",
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "identifier", "internal", "lambda", "mem_access", "move_expr", "not_expr", "public", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr", "type_params"
)

spec_axiom <- (spec_axiom) => uast(
    type: "Synthetic",
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr", "type_params"
)

spec_block <- (spec_block) => uast(
    type: "Block",
    roles: "Body"
    children: "spec_apply", "spec_axiom", "spec_condition", "spec_func", "spec_include", "spec_invariant", "spec_let", "spec_pragma", "spec_update", "spec_variable", "use_decl"
)

spec_block_target <- (spec_block_target) => uast(
    type: "Block",
    roles: "Body"
    children: "identifier", "parameters", "schema", "type", "type_params"
)

spec_condition <- (spec_condition) => uast(
    type: "Synthetic",
    children: []
)

spec_func <- (spec_func) => uast(
    type: "Synthetic",
    children: "block", "identifier", "parameters", "type", "type_params"
)

spec_include <- (spec_include) => uast(
    type: "Synthetic",
    children: []
)

spec_invariant <- (spec_invariant) => uast(
    type: "Synthetic",
    children: "type_params", "update"
)

spec_let <- (spec_let) => uast(
    type: "Synthetic",
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "post", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr", "var_name"
)

spec_loop_invariant <- (spec_loop_invariant) => uast(
    type: "Loop",
    roles: "Loop"
    children: "spec_apply", "spec_axiom", "spec_condition", "spec_func", "spec_include", "spec_invariant", "spec_let", "spec_pragma", "spec_update", "spec_variable", "use_decl"
)

spec_pragma <- (spec_pragma) => uast(
    type: "Synthetic",
    children: "name_access_chain", "value", "var_name"
)

spec_update <- (spec_update) => uast(
    type: "Synthetic",
    children: []
)

spec_variable <- (spec_variable) => uast(
    type: "Variable",
    roles: "Variable", "Declaration"
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "global", "identifier", "lambda", "local", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr"
)

struct_body <- (struct_body) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: []
)

struct_decl <- (struct_decl) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: "identifier"
)

triggers <- (triggers) => uast(
    type: "Synthetic",
    children: "access_field", "assignment", "bin_op_expr", "copy_expr", "deref_expr", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr"
)

tuple <- (tuple) => uast(
    type: "Tuple",
    children: "name_access_chain", "var_name"
)

tuple_expr <- (tuple_expr) => uast(
    type: "Tuple",
    children: []
)

tuple_type <- (tuple_type) => uast(
    type: "Tuple",
    children: []
)

type <- (type) => uast(
    type: "Synthetic",
    children: "closure_type", "name_access_chain", "primitive_type", "tuple_type", "type_args"
)

type_args <- (type_args) => uast(
    type: "Synthetic",
    children: []
)

type_hint_expr <- (type_hint_expr) => uast(
    type: "Synthetic",
    children: []
)

type_param <- (type_param) => uast(
    type: "Synthetic",
    children: "identifier"
)

type_params <- (type_params) => uast(
    type: "Synthetic",
    children: []
)

typed_number <- (typed_number) => uast(
    type: "Synthetic",
    children: []
)

use_decl <- (use_decl) => uast(
    type: "Synthetic",
    children: "member", "module_ident"
)

value <- (value) => uast(
    type: "Synthetic",
    children: []
)

var <- (var) => uast(
    type: "Synthetic",
    children: "type_args"
)

var_name <- (var_name) => uast(
    type: "Synthetic",
    children: []
)

vector_value_expr <- (vector_value_expr) => uast(
    type: "Synthetic",
    children: []
)

visibility <- (visibility) => uast(
    type: "Synthetic",
    children: []
)

while_expr <- (while_expr) => uast(
    type: "Loop",
    roles: "Loop"
    children: "access_field", "assignment", "bin_op_expr", "block", "copy_expr", "deref_expr", "expr_term", "lambda", "mem_access", "move_expr", "not_expr", "parenthesized_expr", "quantifier", "receiver_call", "ref_expr", "ref_mut_expr"
)

abort <- (abort) => uast(
    type: "Synthetic",
    children: []
)

aborts_if <- (aborts_if) => uast(
    type: "If",
    children: []
)

aborts_with <- (aborts_with) => uast(
    type: "Synthetic",
    children: []
)

acquires <- (acquires) => uast(
    type: "Synthetic",
    children: []
)

address <- (address) => uast(
    type: "Synthetic",
    children: []
)

alias <- (alias) => uast(
    type: "Synthetic",
    children: []
)

anon_field_index <- (anon_field_index) => uast(
    type: "Field",
    roles: "Member"
    children: []
)

apply <- (apply) => uast(
    type: "Synthetic",
    children: []
)

as <- (as) => uast(
    type: "Synthetic",
    children: []
)

assert <- (assert) => uast(
    type: "Synthetic",
    children: []
)

assume <- (assume) => uast(
    type: "Synthetic",
    children: []
)

axiom <- (axiom) => uast(
    type: "Synthetic",
    children: []
)

binary_operator <- (binary_operator) => uast(
    type: "BinaryOp",
    roles: "Operator"
    children: []
)

bool <- (bool) => uast(
    type: "Synthetic",
    children: []
)

break_expr <- (break_expr) => uast(
    type: "Break",
    roles: "Break"
    children: []
)

choose <- (choose) => uast(
    type: "Synthetic",
    children: []
)

const <- (const) => uast(
    type: "Synthetic",
    children: []
)

continue_expr <- (continue_expr) => uast(
    type: "Continue",
    roles: "Continue"
    children: []
)

copy <- (copy) => uast(
    type: "Synthetic",
    children: []
)

doc_comment <- (doc_comment) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

drop <- (drop) => uast(
    type: "Synthetic",
    children: []
)

else <- (else) => uast(
    type: "Synthetic",
    children: []
)

emits <- (emits) => uast(
    type: "Synthetic",
    children: []
)

ensures <- (ensures) => uast(
    type: "Synthetic",
    children: []
)

entry <- (entry) => uast(
    type: "Try",
    roles: "Try"
    children: []
)

enum <- (enum) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: []
)

except <- (except) => uast(
    type: "Synthetic",
    children: []
)

exists <- (exists) => uast(
    type: "Synthetic",
    children: []
)

false <- (false) => uast(
    type: "Synthetic",
    children: []
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

forall <- (forall) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

friend <- (friend) => uast(
    type: "Synthetic",
    children: []
)

fun <- (fun) => uast(
    type: "Synthetic",
    children: []
)

global <- (global) => uast(
    type: "Synthetic",
    children: []
)

has <- (has) => uast(
    type: "Synthetic",
    children: []
)

identifier <- (identifier) => uast(
    type: "If",
    children: []
)

if <- (if) => uast(
    type: "If",
    children: []
)

in <- (in) => uast(
    type: "Synthetic",
    children: []
)

include <- (include) => uast(
    type: "Synthetic",
    children: []
)

inline <- (inline) => uast(
    type: "Synthetic",
    children: []
)

internal <- (internal) => uast(
    type: "Synthetic",
    children: []
)

invariant <- (invariant) => uast(
    type: "Synthetic",
    children: []
)

key <- (key) => uast(
    type: "Synthetic",
    children: []
)

let <- (let) => uast(
    type: "Synthetic",
    children: []
)

local <- (local) => uast(
    type: "Synthetic",
    children: []
)

loop <- (loop) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

match <- (match) => uast(
    type: "Match",
    roles: "Match"
    children: []
)

min <- (min) => uast(
    type: "Synthetic",
    children: []
)

modifies <- (modifies) => uast(
    type: "If",
    children: []
)

module <- (module) => uast(
    type: "Module",
    roles: "Module"
    children: []
)

move <- (move) => uast(
    type: "Synthetic",
    children: []
)

native <- (native) => uast(
    type: "Synthetic",
    children: []
)

package <- (package) => uast(
    type: "Package",
    roles: "Module"
    children: []
)

phantom <- (phantom) => uast(
    type: "Synthetic",
    children: []
)

post <- (post) => uast(
    type: "Synthetic",
    children: []
)

pragma <- (pragma) => uast(
    type: "Synthetic",
    children: []
)

public <- (public) => uast(
    type: "Synthetic",
    children: []
)

pure <- (pure) => uast(
    type: "Synthetic",
    children: []
)

reads <- (reads) => uast(
    type: "Synthetic",
    children: []
)

requires <- (requires) => uast(
    type: "Synthetic",
    children: []
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
    children: []
)

schema <- (schema) => uast(
    type: "Synthetic",
    children: []
)

script <- (script) => uast(
    type: "Synthetic",
    children: []
)

spec <- (spec) => uast(
    type: "Synthetic",
    children: []
)

store <- (store) => uast(
    type: "Synthetic",
    children: []
)

struct <- (struct) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: []
)

to <- (to) => uast(
    type: "Synthetic",
    children: []
)

true <- (true) => uast(
    type: "Synthetic",
    children: []
)

u128 <- (u128) => uast(
    type: "Synthetic",
    children: []
)

u16 <- (u16) => uast(
    type: "Synthetic",
    children: []
)

u256 <- (u256) => uast(
    type: "Synthetic",
    children: []
)

u32 <- (u32) => uast(
    type: "Synthetic",
    children: []
)

u64 <- (u64) => uast(
    type: "Synthetic",
    children: []
)

u8 <- (u8) => uast(
    type: "Synthetic",
    children: []
)

update <- (update) => uast(
    type: "Synthetic",
    children: []
)

use <- (use) => uast(
    type: "Synthetic",
    children: []
)

vector <- (vector) => uast(
    type: "Synthetic",
    children: []
)

where <- (where) => uast(
    type: "Synthetic",
    children: []
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

with <- (with) => uast(
    type: "Synthetic",
    children: []
)

writes <- (writes) => uast(
    type: "Synthetic",
    children: []
)

