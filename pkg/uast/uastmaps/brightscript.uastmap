additive_expression <- (additive_expression) => uast(
    type: "Synthetic",
    children: "annonymous_function", "annonymous_sub", "binary_expression", "literal", "prefix_exp", "unary_expression"
)

annonymous_function <- (annonymous_function) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "block", "parameter_list"
)

annonymous_sub <- (annonymous_sub) => uast(
    type: "Synthetic",
    children: "block", "parameter_list"
)

arithmetic_expression <- (arithmetic_expression) => uast(
    type: "Synthetic"
)

array <- (array) => uast(
    type: "Synthetic"
)

array_access_expression <- (array_access_expression) => uast(
    type: "Synthetic",
    children: "annonymous_function", "annonymous_sub", "array_access_expression", "binary_expression", "call_expression", "identifier", "literal", "prefix_exp", "unary_expression"
)

assignment_statement <- (assignment_statement) => uast(
    type: "Assignment",
    roles: "Assignment",
    children: "annonymous_function", "annonymous_sub", "binary_expression", "literal", "prefix_exp", "unary_expression", "variable_declarator"
)

assoc_array <- (assoc_array) => uast(
    type: "Synthetic"
)

assoc_array_element <- (assoc_array_element) => uast(
    type: "Synthetic",
    children: "annonymous_function", "annonymous_sub", "binary_expression", "identifier", "literal", "prefix_exp", "string", "unary_expression"
)

binary_expression <- (binary_expression) => uast(
    type: "Synthetic"
)

block <- (block) => uast(
    type: "Block",
    roles: "Body"
)

boolean <- (boolean) => uast(
    type: "Synthetic"
)

call_expression <- (call_expression) => uast(
    type: "Call",
    roles: "Call",
    children: "identifier", "parenthesized_expression", "property_access_expression"
)

catch_clause <- (catch_clause) => uast(
    type: "Catch",
    roles: "Catch",
    children: "block", "identifier"
)

comparison_expression <- (comparison_expression) => uast(
    type: "Synthetic",
    children: "annonymous_function", "annonymous_sub", "binary_expression", "literal", "prefix_exp", "unary_expression"
)

conditional_compl <- (conditional_compl) => uast(
    type: "Synthetic"
)

conditional_compl_else_clause <- (conditional_compl_else_clause) => uast(
    type: "Synthetic"
)

conditional_compl_else_if_clause <- (conditional_compl_else_if_clause) => uast(
    type: "If"
)

constant <- (constant) => uast(
    type: "Synthetic"
)

continue_for_statement <- (continue_for_statement) => uast(
    type: "Loop",
    roles: "Loop"
)

continue_while_statement <- (continue_while_statement) => uast(
    type: "Loop",
    roles: "Loop"
)

else_clause <- (else_clause) => uast(
    type: "Synthetic",
    children: "assignment_statement", "conditional_compl", "constant", "continue_for_statement", "continue_while_statement", "exit_for_statement", "exit_while_statement", "for_statement", "function_call", "function_statement", "if_statement", "increment_decrement_statement", "library_statement", "print_statement", "return_statement", "sub_statement", "throw_statement", "try_statement", "while_statement"
)

else_if_clause <- (else_if_clause) => uast(
    type: "If",
    children: "annonymous_function", "annonymous_sub", "assignment_statement", "binary_expression", "conditional_compl", "constant", "continue_for_statement", "continue_while_statement", "exit_for_statement", "exit_while_statement", "for_statement", "function_call", "function_statement", "if_statement", "increment_decrement_statement", "library_statement", "literal", "prefix_exp", "print_statement", "return_statement", "sub_statement", "throw_statement", "try_statement", "unary_expression", "while_statement"
)

end_statement <- (end_statement) => uast(
    type: "Synthetic"
)

exit_for_statement <- (exit_for_statement) => uast(
    type: "Loop",
    roles: "Loop"
)

exit_while_statement <- (exit_while_statement) => uast(
    type: "Loop",
    roles: "Loop"
)

for_statement <- (for_statement) => uast(
    type: "Loop",
    roles: "Loop",
    children: "annonymous_function", "annonymous_sub", "assignment_statement", "binary_expression", "block", "literal", "prefix_exp", "unary_expression"
)

function_call <- (function_call) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "parenthesized_expression", "prefix_exp"
)

function_statement <- (function_statement) => uast(
    type: "Function",
    roles: "Function", "Declaration",
    children: "block", "identifier", "parameter_list", "return_type"
)

if_block <- (if_block) => uast(
    type: "Block",
    roles: "Body"
)

if_statement <- (if_statement) => uast(
    type: "If"
)

increment_decrement_statement <- (increment_decrement_statement) => uast(
    type: "Synthetic"
)

left_paren <- (left_paren) => uast(
    type: "Synthetic"
)

library_statement <- (library_statement) => uast(
    type: "Synthetic",
    children: "string"
)

literal <- (literal) => uast(
    type: "Literal",
    roles: "Literal"
)

logical_expression <- (logical_expression) => uast(
    type: "Synthetic",
    children: "and", "annonymous_function", "annonymous_sub", "binary_expression", "literal", "or", "prefix_exp", "unary_expression"
)

logical_not_expression <- (logical_not_expression) => uast(
    type: "Synthetic",
    children: "annonymous_function", "annonymous_sub", "binary_expression", "literal", "not", "prefix_exp", "unary_expression"
)

multi_line_if <- (multi_line_if) => uast(
    type: "If"
)

multiplicative_expression <- (multiplicative_expression) => uast(
    type: "Synthetic",
    children: "annonymous_function", "annonymous_sub", "binary_expression", "literal", "mod", "prefix_exp", "unary_expression"
)

parameter <- (parameter) => uast(
    type: "Parameter",
    roles: "Parameter",
    children: "identifier"
)

parameter_list <- (parameter_list) => uast(
    type: "Parameter",
    roles: "Parameter"
)

parenthesized_expression <- (parenthesized_expression) => uast(
    type: "Synthetic"
)

postfix_decrement_expression <- (postfix_decrement_expression) => uast(
    type: "Synthetic",
    children: "annonymous_function", "annonymous_sub", "binary_expression", "literal", "prefix_exp", "unary_expression"
)

postfix_increment_expression <- (postfix_increment_expression) => uast(
    type: "Synthetic",
    children: "annonymous_function", "annonymous_sub", "binary_expression", "literal", "prefix_exp", "unary_expression"
)

prefix_decrement_expression <- (prefix_decrement_expression) => uast(
    type: "Synthetic",
    children: "annonymous_function", "annonymous_sub", "binary_expression", "literal", "prefix_exp", "unary_expression"
)

prefix_exp <- (prefix_exp) => uast(
    type: "Synthetic"
)

prefix_increment_expression <- (prefix_increment_expression) => uast(
    type: "Synthetic",
    children: "annonymous_function", "annonymous_sub", "binary_expression", "literal", "prefix_exp", "unary_expression"
)

print_statement <- (print_statement) => uast(
    type: "Synthetic",
    children: "annonymous_function", "annonymous_sub", "binary_expression", "literal", "prefix_exp", "unary_expression"
)

property_access_expression <- (property_access_expression) => uast(
    type: "Property",
    roles: "Member",
    children: "array_access_expression", "call_expression", "identifier", "property_access_expression"
)

return_statement <- (return_statement) => uast(
    type: "Return",
    roles: "Return",
    children: "annonymous_function", "annonymous_sub", "binary_expression", "literal", "prefix_exp", "unary_expression"
)

return_type <- (return_type) => uast(
    type: "Return",
    roles: "Return"
)

right_paren <- (right_paren) => uast(
    type: "Synthetic"
)

single_line_if <- (single_line_if) => uast(
    type: "If"
)

source_file <- (source_file) => uast(
    type: "Synthetic"
)

string <- (string) => uast(
    type: "Synthetic"
)

sub_statement <- (sub_statement) => uast(
    type: "Synthetic",
    children: "block", "identifier", "parameter_list"
)

throw_statement <- (throw_statement) => uast(
    type: "Throw",
    roles: "Throw",
    children: "annonymous_function", "annonymous_sub", "binary_expression", "literal", "prefix_exp", "unary_expression"
)

try_statement <- (try_statement) => uast(
    type: "Try",
    roles: "Try",
    children: "block", "catch_clause"
)

type_specifier <- (type_specifier) => uast(
    type: "If"
)

unary_expression <- (unary_expression) => uast(
    type: "Synthetic"
)

variable_declarator <- (variable_declarator) => uast(
    type: "Variable",
    roles: "Variable", "Declaration"
)

while_statement <- (while_statement) => uast(
    type: "Loop",
    roles: "Loop",
    children: "annonymous_function", "annonymous_sub", "binary_expression", "block", "literal", "prefix_exp", "unary_expression"
)

and <- (and) => uast(
    type: "Synthetic"
)

as <- (as) => uast(
    type: "Synthetic"
)

conditional_compl_end_if <- (conditional_compl_end_if) => uast(
    type: "If"
)

else <- (else) => uast(
    type: "Synthetic"
)

else_if <- (else_if) => uast(
    type: "If"
)

end_for <- (end_for) => uast(
    type: "Loop",
    roles: "Loop"
)

end_function <- (end_function) => uast(
    type: "Function",
    roles: "Function", "Declaration"
)

end_if <- (end_if) => uast(
    type: "If"
)

end_sub <- (end_sub) => uast(
    type: "Synthetic"
)

end_try <- (end_try) => uast(
    type: "Try",
    roles: "Try"
)

end_while <- (end_while) => uast(
    type: "Loop",
    roles: "Loop"
)

escaped_quote <- (escaped_quote) => uast(
    type: "Synthetic"
)

for_each <- (for_each) => uast(
    type: "Loop",
    roles: "Loop"
)

for_in <- (for_in) => uast(
    type: "Loop",
    roles: "Loop"
)

for_start <- (for_start) => uast(
    type: "Loop",
    roles: "Loop"
)

for_step <- (for_step) => uast(
    type: "Loop",
    roles: "Loop"
)

for_to <- (for_to) => uast(
    type: "Loop",
    roles: "Loop"
)

function_start <- (function_start) => uast(
    type: "Function",
    roles: "Function", "Declaration"
)

identifier <- (identifier) => uast(
    type: "If"
)

if_start <- (if_start) => uast(
    type: "If"
)

invalid <- (invalid) => uast(
    type: "Synthetic"
)

mod <- (mod) => uast(
    type: "Synthetic"
)

not <- (not) => uast(
    type: "Synthetic"
)

number <- (number) => uast(
    type: "Synthetic"
)

or <- (or) => uast(
    type: "Synthetic"
)

print <- (print) => uast(
    type: "Synthetic"
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
)

string_contents <- (string_contents) => uast(
    type: "Synthetic"
)

sub_start <- (sub_start) => uast(
    type: "Synthetic"
)

then <- (then) => uast(
    type: "Synthetic"
)

throw <- (throw) => uast(
    type: "Throw",
    roles: "Throw"
)

try_catch <- (try_catch) => uast(
    type: "Try",
    roles: "Try"
)

try_start <- (try_start) => uast(
    type: "Try",
    roles: "Try"
)

while_start <- (while_start) => uast(
    type: "Loop",
    roles: "Loop"
)

