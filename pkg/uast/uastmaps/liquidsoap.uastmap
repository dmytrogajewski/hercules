and <- (and) => uast(
    type: "Synthetic",
    children: []
)

anonymous_arg <- (anonymous_arg) => uast(
    type: "Synthetic",
    children: []
)

anonymous_argument <- (anonymous_argument) => uast(
    type: "Synthetic",
    children: []
)

anonymous_function <- (anonymous_function) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: []
)

app <- (app) => uast(
    type: "Synthetic",
    children: "var"
)

append <- (append) => uast(
    type: "Synthetic",
    children: []
)

arg_type <- (arg_type) => uast(
    type: "Synthetic",
    children: []
)

arglist <- (arglist) => uast(
    type: "List",
    children: []
)

args_type <- (args_type) => uast(
    type: "Synthetic",
    children: []
)

argsof <- (argsof) => uast(
    type: "Synthetic",
    children: []
)

assoc <- (assoc) => uast(
    type: "Synthetic",
    children: []
)

binding <- (binding) => uast(
    type: "Synthetic",
    children: "_", "var"
)

block <- (block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

bool <- (bool) => uast(
    type: "Synthetic",
    children: []
)

coalesce <- (coalesce) => uast(
    type: "Synthetic",
    children: []
)

coerce <- (coerce) => uast(
    type: "Synthetic",
    children: []
)

content_arg_type <- (content_arg_type) => uast(
    type: "Synthetic",
    children: []
)

content_args_type <- (content_args_type) => uast(
    type: "Synthetic",
    children: []
)

content_type <- (content_type) => uast(
    type: "Synthetic",
    children: []
)

def <- (def) => uast(
    type: "Synthetic",
    children: "_", "arglist", "subfield", "type", "var"
)

definition <- (definition) => uast(
    type: "Synthetic",
    children: []
)

elsif_condition <- (elsif_condition) => uast(
    type: "If",
    children: []
)

elsif_then <- (elsif_then) => uast(
    type: "If",
    children: []
)

encoder <- (encoder) => uast(
    type: "Synthetic",
    children: []
)

encoder_params <- (encoder_params) => uast(
    type: "Synthetic",
    children: []
)

exclude_arg <- (exclude_arg) => uast(
    type: "Synthetic",
    children: []
)

float <- (float) => uast(
    type: "Synthetic",
    children: []
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

for_do <- (for_do) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

for_from <- (for_from) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

for_iteration <- (for_iteration) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

for_to <- (for_to) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

for_var <- (for_var) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

get <- (get) => uast(
    type: "Synthetic",
    children: []
)

if <- (if) => uast(
    type: "If",
    children: []
)

if_condition <- (if_condition) => uast(
    type: "If",
    children: []
)

if_def <- (if_def) => uast(
    type: "If",
    children: []
)

if_else <- (if_else) => uast(
    type: "If",
    children: []
)

if_encoder <- (if_encoder) => uast(
    type: "If",
    children: []
)

if_then <- (if_then) => uast(
    type: "If",
    children: []
)

if_version <- (if_version) => uast(
    type: "If",
    children: []
)

include <- (include) => uast(
    type: "Synthetic",
    children: []
)

infix <- (infix) => uast(
    type: "Synthetic",
    children: []
)

inline_if <- (inline_if) => uast(
    type: "If",
    children: "and", "anonymous_function", "app", "append", "assoc", "block", "bool", "coalesce", "coerce", "encoder", "float", "for", "get", "if", "if_def", "if_encoder", "if_version", "include", "infix", "inline_if", "integer", "invoke", "list", "not", "or", "parens", "record", "regexp", "set", "simple_fun", "string", "time_interval", "time_predicate", "try", "tuple", "var", "while"
)

invoke <- (invoke) => uast(
    type: "Synthetic",
    children: []
)

keep_arg <- (keep_arg) => uast(
    type: "Synthetic",
    children: []
)

labeled_argument <- (labeled_argument) => uast(
    type: "Synthetic",
    children: "var"
)

let <- (let) => uast(
    type: "Synthetic",
    children: "_", "list_pattern", "meth_pattern", "subfield", "tuple_pattern", "type", "var"
)

let_decoration <- (let_decoration) => uast(
    type: "Synthetic",
    children: []
)

list <- (list) => uast(
    type: "List",
    children: []
)

list_pattern <- (list_pattern) => uast(
    type: "List",
    children: []
)

meth_pattern <- (meth_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

meth_type <- (meth_type) => uast(
    type: "Synthetic",
    children: []
)

method <- (method) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: []
)

method_app <- (method_app) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "var"
)

named_arg <- (named_arg) => uast(
    type: "Synthetic",
    children: "and", "anonymous_function", "app", "append", "assoc", "block", "bool", "coalesce", "coerce", "encoder", "float", "for", "get", "if", "if_def", "if_encoder", "if_version", "include", "infix", "inline_if", "integer", "invoke", "list", "not", "or", "parens", "record", "regexp", "set", "simple_fun", "string", "time_interval", "time_predicate", "try", "tuple", "var", "while"
)

not <- (not) => uast(
    type: "Synthetic",
    children: []
)

or <- (or) => uast(
    type: "Synthetic",
    children: []
)

parens <- (parens) => uast(
    type: "Synthetic",
    children: []
)

record <- (record) => uast(
    type: "Synthetic",
    children: "and", "anonymous_function", "app", "append", "assoc", "block", "bool", "coalesce", "coerce", "encoder", "float", "for", "get", "if", "if_def", "if_encoder", "if_version", "include", "infix", "inline_if", "integer", "invoke", "list", "not", "or", "parens", "record", "regexp", "set", "simple_fun", "string", "time_interval", "time_predicate", "try", "tuple", "var", "while"
)

record_entry <- (record_entry) => uast(
    type: "Try",
    roles: "Try"
    children: "and", "anonymous_function", "app", "append", "assoc", "block", "bool", "coalesce", "coerce", "encoder", "float", "for", "get", "if", "if_def", "if_encoder", "if_version", "include", "infix", "inline_if", "integer", "invoke", "list", "method", "not", "or", "parens", "record", "regexp", "set", "simple_fun", "string", "time_interval", "time_predicate", "try", "tuple", "var", "while"
)

record_type <- (record_type) => uast(
    type: "Synthetic",
    children: []
)

regexp <- (regexp) => uast(
    type: "Synthetic",
    children: []
)

set <- (set) => uast(
    type: "Set",
    children: "and", "anonymous_function", "app", "append", "assoc", "block", "bool", "coalesce", "coerce", "encoder", "float", "for", "get", "if", "if_def", "if_encoder", "if_version", "include", "infix", "inline_if", "integer", "invoke", "list", "not", "or", "parens", "record", "regexp", "set", "simple_fun", "string", "time_interval", "time_predicate", "try", "tuple", "var", "while"
)

simple_fun <- (simple_fun) => uast(
    type: "Synthetic",
    children: []
)

source_file <- (source_file) => uast(
    type: "Synthetic",
    children: []
)

source_tracks_type <- (source_tracks_type) => uast(
    type: "Synthetic",
    children: []
)

source_type <- (source_type) => uast(
    type: "Synthetic",
    children: []
)

spread <- (spread) => uast(
    type: "Spread",
    roles: "Spread"
    children: []
)

string <- (string) => uast(
    type: "Synthetic",
    children: []
)

string_interpolation <- (string_interpolation) => uast(
    type: "Synthetic",
    children: []
)

subfield <- (subfield) => uast(
    type: "Field",
    roles: "Member"
    children: []
)

try <- (try) => uast(
    type: "Try",
    roles: "Try"
    children: "_", "list", "var"
)

try_body <- (try_body) => uast(
    type: "Try",
    roles: "Try"
    children: []
)

try_do <- (try_do) => uast(
    type: "Try",
    roles: "Try"
    children: []
)

try_finally <- (try_finally) => uast(
    type: "Try",
    roles: "Try"
    children: []
)

try_finqlly <- (try_finqlly) => uast(
    type: "Try",
    roles: "Try"
    children: []
)

tuple <- (tuple) => uast(
    type: "Tuple",
    children: []
)

tuple_pattern <- (tuple_pattern) => uast(
    type: "Tuple",
    children: []
)

tuple_type <- (tuple_type) => uast(
    type: "Tuple",
    children: []
)

type <- (type) => uast(
    type: "Synthetic",
    children: []
)

var <- (var) => uast(
    type: "Synthetic",
    children: []
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

while_do <- (while_do) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

_ <- (_) => uast(
    type: "Synthetic",
    children: []
)

and <- (and) => uast(
    type: "Synthetic",
    children: []
)

as <- (as) => uast(
    type: "Synthetic",
    children: []
)

begin <- (begin) => uast(
    type: "Synthetic",
    children: []
)

block_end <- (block_end) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

catch <- (catch) => uast(
    type: "Catch",
    roles: "Catch"
    children: []
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

def <- (def) => uast(
    type: "Synthetic",
    children: []
)

def_end <- (def_end) => uast(
    type: "Synthetic",
    children: []
)

do <- (do) => uast(
    type: "Synthetic",
    children: []
)

else <- (else) => uast(
    type: "Synthetic",
    children: []
)

elsif <- (elsif) => uast(
    type: "If",
    children: []
)

encoder_name <- (encoder_name) => uast(
    type: "Synthetic",
    children: []
)

end <- (end) => uast(
    type: "Synthetic",
    children: []
)

eval <- (eval) => uast(
    type: "Synthetic",
    children: []
)

false <- (false) => uast(
    type: "Synthetic",
    children: []
)

finally <- (finally) => uast(
    type: "Finally",
    roles: "Finally"
    children: []
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

for_end <- (for_end) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

fun <- (fun) => uast(
    type: "Synthetic",
    children: []
)

if <- (if) => uast(
    type: "If",
    children: []
)

if_end <- (if_end) => uast(
    type: "If",
    children: []
)

integer <- (integer) => uast(
    type: "Synthetic",
    children: []
)

let <- (let) => uast(
    type: "Synthetic",
    children: []
)

not <- (not) => uast(
    type: "Synthetic",
    children: []
)

op <- (op) => uast(
    type: "Synthetic",
    children: []
)

open <- (open) => uast(
    type: "Synthetic",
    children: []
)

or <- (or) => uast(
    type: "Synthetic",
    children: []
)

rec <- (rec) => uast(
    type: "Synthetic",
    children: []
)

replaces <- (replaces) => uast(
    type: "Synthetic",
    children: []
)

then <- (then) => uast(
    type: "Synthetic",
    children: []
)

time_interval <- (time_interval) => uast(
    type: "Synthetic",
    children: []
)

time_predicate <- (time_predicate) => uast(
    type: "Synthetic",
    children: []
)

to <- (to) => uast(
    type: "Synthetic",
    children: []
)

true <- (true) => uast(
    type: "Synthetic",
    children: []
)

try <- (try) => uast(
    type: "Try",
    roles: "Try"
    children: []
)

try_end <- (try_end) => uast(
    type: "Try",
    roles: "Try"
    children: []
)

version <- (version) => uast(
    type: "Synthetic",
    children: []
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

while_end <- (while_end) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

