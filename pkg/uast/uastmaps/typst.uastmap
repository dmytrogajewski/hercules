add <- (add) => uast(
    type: "Synthetic",
    children: []
)

align <- (align) => uast(
    type: "Synthetic",
    children: []
)

and <- (and) => uast(
    type: "Synthetic",
    children: []
)

apply <- (apply) => uast(
    type: "Synthetic",
    children: "escape", "field", "ident", "letter", "shorthand", "string"
)

as <- (as) => uast(
    type: "Synthetic",
    children: []
)

assign <- (assign) => uast(
    type: "Synthetic",
    children: "add", "and", "assign", "auto", "block", "bool", "branch", "call", "cmp", "content", "context", "div", "elude", "field", "flow", "for", "group", "ident", "import", "in", "include", "label", "lambda", "let", "math", "mul", "none", "not", "number", "or", "raw_blck", "raw_span", "return", "set", "show", "sign", "string", "sub", "tagged", "while"
)

attach <- (attach) => uast(
    type: "Synthetic",
    children: "align", "apply", "attach", "call", "code", "escape", "fac", "field", "fraction", "group", "ident", "letter", "linebreak", "number", "prime", "root", "shorthand", "string", "symbol"
)

binding <- (binding) => uast(
    type: "Synthetic",
    children: []
)

block <- (block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

bool <- (bool) => uast(
    type: "Synthetic",
    children: []
)

branch <- (branch) => uast(
    type: "Synthetic",
    children: "add", "and", "assign", "auto", "block", "bool", "branch", "call", "cmp", "content", "context", "div", "elude", "field", "flow", "for", "group", "ident", "import", "in", "include", "label", "lambda", "let", "math", "mul", "none", "not", "number", "or", "raw_blck", "raw_span", "return", "set", "show", "sign", "string", "sub", "tagged", "while"
)

call <- (call) => uast(
    type: "Call",
    roles: "Call"
    children: "add", "and", "assign", "auto", "block", "bool", "branch", "call", "cmp", "content", "context", "div", "elude", "field", "flow", "for", "group", "ident", "import", "in", "include", "label", "lambda", "let", "math", "mul", "none", "not", "number", "or", "raw_blck", "raw_span", "return", "set", "show", "sign", "string", "sub", "tagged", "while"
)

cmp <- (cmp) => uast(
    type: "Synthetic",
    children: []
)

code <- (code) => uast(
    type: "Synthetic",
    children: []
)

content <- (content) => uast(
    type: "Synthetic",
    children: []
)

context <- (context) => uast(
    type: "Synthetic",
    children: []
)

div <- (div) => uast(
    type: "Synthetic",
    children: []
)

elude <- (elude) => uast(
    type: "Synthetic",
    children: []
)

emph <- (emph) => uast(
    type: "Synthetic",
    children: []
)

escape <- (escape) => uast(
    type: "Synthetic",
    children: []
)

fac <- (fac) => uast(
    type: "Synthetic",
    children: []
)

field <- (field) => uast(
    type: "Field",
    roles: "Member"
    children: "ident"
)

flow <- (flow) => uast(
    type: "Synthetic",
    children: []
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
    children: "add", "and", "assign", "auto", "block", "bool", "branch", "call", "cmp", "content", "context", "div", "elude", "field", "flow", "for", "group", "ident", "import", "in", "include", "label", "lambda", "let", "math", "mul", "none", "not", "number", "or", "raw_blck", "raw_span", "return", "set", "show", "sign", "string", "sub", "tagged", "while"
)

formula <- (formula) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

fraction <- (fraction) => uast(
    type: "Synthetic",
    children: []
)

group <- (group) => uast(
    type: "Synthetic",
    children: []
)

heading <- (heading) => uast(
    type: "Synthetic",
    children: []
)

ident <- (ident) => uast(
    type: "Synthetic",
    children: []
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
    children: "add", "and", "assign", "auto", "block", "bool", "branch", "call", "cmp", "content", "context", "div", "elude", "field", "flow", "for", "group", "ident", "import", "in", "include", "label", "lambda", "let", "math", "mul", "none", "not", "number", "or", "raw_blck", "raw_span", "return", "set", "show", "sign", "string", "sub", "tagged", "while"
)

in <- (in) => uast(
    type: "Synthetic",
    children: []
)

include <- (include) => uast(
    type: "Synthetic",
    children: []
)

item <- (item) => uast(
    type: "Synthetic",
    children: []
)

label <- (label) => uast(
    type: "Synthetic",
    children: []
)

lambda <- (lambda) => uast(
    type: "Lambda",
    roles: "Lambda"
    children: "add", "and", "assign", "auto", "block", "bool", "branch", "call", "cmp", "content", "context", "div", "elude", "field", "flow", "for", "group", "ident", "import", "in", "include", "label", "lambda", "let", "math", "mul", "none", "not", "number", "or", "raw_blck", "raw_span", "return", "set", "show", "sign", "string", "sub", "tagged", "while"
)

let <- (let) => uast(
    type: "Synthetic",
    children: "add", "and", "assign", "auto", "block", "bool", "branch", "call", "cmp", "content", "context", "div", "elude", "field", "flow", "for", "group", "ident", "import", "in", "include", "label", "lambda", "let", "math", "mul", "none", "not", "number", "or", "raw_blck", "raw_span", "return", "set", "show", "sign", "string", "sub", "tagged", "while"
)

math <- (math) => uast(
    type: "Synthetic",
    children: []
)

mul <- (mul) => uast(
    type: "Synthetic",
    children: []
)

not <- (not) => uast(
    type: "Synthetic",
    children: []
)

number <- (number) => uast(
    type: "Synthetic",
    children: []
)

or <- (or) => uast(
    type: "Synthetic",
    children: []
)

prime <- (prime) => uast(
    type: "Synthetic",
    children: []
)

raw_blck <- (raw_blck) => uast(
    type: "Synthetic",
    children: "ident"
)

raw_span <- (raw_span) => uast(
    type: "Synthetic",
    children: []
)

ref <- (ref) => uast(
    type: "Synthetic",
    children: []
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
    children: []
)

root <- (root) => uast(
    type: "Synthetic",
    children: []
)

section <- (section) => uast(
    type: "Synthetic",
    children: []
)

set <- (set) => uast(
    type: "Set",
    children: "add", "and", "assign", "auto", "block", "bool", "branch", "call", "cmp", "content", "context", "div", "elude", "field", "flow", "for", "group", "ident", "import", "in", "include", "label", "lambda", "let", "math", "mul", "none", "not", "number", "or", "raw_blck", "raw_span", "return", "set", "show", "sign", "string", "sub", "tagged", "while"
)

shorthand <- (shorthand) => uast(
    type: "Synthetic",
    children: []
)

show <- (show) => uast(
    type: "Synthetic",
    children: "add", "and", "assign", "auto", "block", "bool", "branch", "call", "cmp", "content", "context", "div", "elude", "field", "flow", "for", "group", "ident", "import", "in", "include", "label", "lambda", "let", "math", "mul", "none", "not", "number", "or", "raw_blck", "raw_span", "return", "set", "show", "sign", "string", "sub", "tagged", "while"
)

sign <- (sign) => uast(
    type: "Synthetic",
    children: []
)

source_file <- (source_file) => uast(
    type: "Synthetic",
    children: []
)

string <- (string) => uast(
    type: "Synthetic",
    children: []
)

strong <- (strong) => uast(
    type: "Synthetic",
    children: []
)

sub <- (sub) => uast(
    type: "Synthetic",
    children: []
)

symbol <- (symbol) => uast(
    type: "Synthetic",
    children: []
)

tagged <- (tagged) => uast(
    type: "Synthetic",
    children: "add", "and", "assign", "auto", "block", "bool", "branch", "call", "cmp", "content", "context", "div", "elude", "field", "flow", "for", "group", "ident", "import", "in", "include", "label", "lambda", "let", "math", "mul", "none", "not", "number", "or", "raw_blck", "raw_span", "return", "set", "show", "sign", "string", "sub", "tagged", "while"
)

term <- (term) => uast(
    type: "Synthetic",
    children: "code", "emph", "item", "label", "linebreak", "math", "parbreak", "quote", "raw_blck", "raw_span", "ref", "section", "shorthand", "strong", "term", "text", "url"
)

text <- (text) => uast(
    type: "Synthetic",
    children: []
)

unit <- (unit) => uast(
    type: "Synthetic",
    children: []
)

url <- (url) => uast(
    type: "Synthetic",
    children: []
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
    children: "add", "and", "assign", "auto", "block", "bool", "branch", "call", "cmp", "content", "context", "div", "elude", "field", "flow", "for", "group", "ident", "import", "in", "include", "label", "lambda", "let", "math", "mul", "none", "not", "number", "or", "raw_blck", "raw_span", "return", "set", "show", "sign", "string", "sub", "tagged", "while"
)

_ <- (_) => uast(
    type: "Synthetic",
    children: []
)

and <- (and) => uast(
    type: "Synthetic",
    children: []
)

as <- (as) => uast(
    type: "Synthetic",
    children: []
)

assign <- (assign) => uast(
    type: "Synthetic",
    children: []
)

auto <- (auto) => uast(
    type: "Synthetic",
    children: []
)

blob <- (blob) => uast(
    type: "Synthetic",
    children: []
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
    children: []
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

context <- (context) => uast(
    type: "Synthetic",
    children: []
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue"
    children: []
)

else <- (else) => uast(
    type: "Synthetic",
    children: []
)

end <- (end) => uast(
    type: "Synthetic",
    children: []
)

false <- (false) => uast(
    type: "Synthetic",
    children: []
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

if <- (if) => uast(
    type: "If",
    children: []
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

in <- (in) => uast(
    type: "Synthetic",
    children: []
)

include <- (include) => uast(
    type: "Synthetic",
    children: []
)

let <- (let) => uast(
    type: "Synthetic",
    children: []
)

letter <- (letter) => uast(
    type: "Synthetic",
    children: []
)

linebreak <- (linebreak) => uast(
    type: "Break",
    roles: "Break"
    children: []
)

none <- (none) => uast(
    type: "Synthetic",
    children: []
)

not <- (not) => uast(
    type: "Synthetic",
    children: []
)

or <- (or) => uast(
    type: "Synthetic",
    children: []
)

parbreak <- (parbreak) => uast(
    type: "Break",
    roles: "Break"
    children: []
)

quote <- (quote) => uast(
    type: "Synthetic",
    children: []
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
    children: []
)

sep <- (sep) => uast(
    type: "Synthetic",
    children: []
)

set <- (set) => uast(
    type: "Set",
    children: []
)

show <- (show) => uast(
    type: "Synthetic",
    children: []
)

true <- (true) => uast(
    type: "Synthetic",
    children: []
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

wildcard <- (wildcard) => uast(
    type: "Synthetic",
    children: []
)

