arg <- (arg) => uast(
    type: "Synthetic"
)

assignment_expression <- (assignment_expression) => uast(
    type: "Assignment",
    roles: "Assignment"
)

attribute_context <- (attribute_context) => uast(
    type: "Attribute",
    roles: "Attribute"
)

attribute_ignore <- (attribute_ignore) => uast(
    type: "Attribute",
    roles: "Attribute"
)

autoescape_statement <- (autoescape_statement) => uast(
    type: "Synthetic"
)

big_dec_literal <- (big_dec_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

binary_expression <- (binary_expression) => uast(
    type: "Synthetic"
)

binary_operator <- (binary_operator) => uast(
    type: "BinaryOp",
    roles: "Operator"
)

block_statement <- (block_statement) => uast(
    type: "Block",
    roles: "Body"
)

boolean_literal <- (boolean_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

builtin_test <- (builtin_test) => uast(
    type: "Synthetic"
)

call_statement <- (call_statement) => uast(
    type: "Call",
    roles: "Call"
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
)

dict_literal <- (dict_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

do_statement <- (do_statement) => uast(
    type: "Synthetic"
)

expression <- (expression) => uast(
    type: "Synthetic"
)

extends_statement <- (extends_statement) => uast(
    type: "Synthetic"
)

filter_statement <- (filter_statement) => uast(
    type: "Synthetic"
)

float_literal <- (float_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

for_statement <- (for_statement) => uast(
    type: "Loop",
    roles: "Loop"
)

function_call <- (function_call) => uast(
    type: "Function",
    roles: "Function", "Declaration"
)

if_expression <- (if_expression) => uast(
    type: "If"
)

import_as <- (import_as) => uast(
    type: "Import",
    roles: "Import"
)

import_attribute <- (import_attribute) => uast(
    type: "Import",
    roles: "Import"
)

import_from <- (import_from) => uast(
    type: "Import",
    roles: "Import"
)

import_statement <- (import_statement) => uast(
    type: "Import",
    roles: "Import"
)

in_expression <- (in_expression) => uast(
    type: "Synthetic"
)

include_attribute <- (include_attribute) => uast(
    type: "Attribute",
    roles: "Attribute"
)

include_statement <- (include_statement) => uast(
    type: "Synthetic"
)

inline_trans <- (inline_trans) => uast(
    type: "Synthetic"
)

line_statement <- (line_statement) => uast(
    type: "Synthetic"
)

list_literal <- (list_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

literal <- (literal) => uast(
    type: "Literal",
    roles: "Literal"
)

macro_statement <- (macro_statement) => uast(
    type: "Synthetic"
)

null_literal <- (null_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

number_literal <- (number_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

pluralize_statement <- (pluralize_statement) => uast(
    type: "Synthetic"
)

primary_expression <- (primary_expression) => uast(
    type: "Synthetic"
)

raw_block <- (raw_block) => uast(
    type: "Block",
    roles: "Body"
)

raw_body <- (raw_body) => uast(
    type: "Synthetic"
)

set_statement <- (set_statement) => uast(
    type: "Set"
)

source <- (source) => uast(
    type: "Synthetic"
)

statement <- (statement) => uast(
    type: "Synthetic"
)

string_literal <- (string_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

ternary_expression <- (ternary_expression) => uast(
    type: "Synthetic"
)

trans_statement <- (trans_statement) => uast(
    type: "Synthetic"
)

tuple_literal <- (tuple_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

unary_expression <- (unary_expression) => uast(
    type: "Synthetic"
)

unary_operator <- (unary_operator) => uast(
    type: "UnaryOp",
    roles: "Operator"
)

with_statement <- (with_statement) => uast(
    type: "Synthetic"
)

_ <- (_) => uast(
    type: "Synthetic"
)

and <- (and) => uast(
    type: "Synthetic"
)

as <- (as) => uast(
    type: "Synthetic"
)

autoescape <- (autoescape) => uast(
    type: "Synthetic"
)

bin_literal <- (bin_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

block <- (block) => uast(
    type: "Block",
    roles: "Body"
)

boolean <- (boolean) => uast(
    type: "Synthetic"
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
)

call <- (call) => uast(
    type: "Call",
    roles: "Call"
)

callable <- (callable) => uast(
    type: "Call",
    roles: "Call"
)

context <- (context) => uast(
    type: "Synthetic"
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue"
)

debug <- (debug) => uast(
    type: "Synthetic"
)

dec_literal <- (dec_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

defined <- (defined) => uast(
    type: "Synthetic"
)

divisibleby <- (divisibleby) => uast(
    type: "Synthetic"
)

do <- (do) => uast(
    type: "Synthetic"
)

e <- (e) => uast(
    type: "Synthetic"
)

elif <- (elif) => uast(
    type: "If"
)

else <- (else) => uast(
    type: "Synthetic"
)

endautoescape <- (endautoescape) => uast(
    type: "Synthetic"
)

endblock <- (endblock) => uast(
    type: "Block",
    roles: "Body"
)

endcall <- (endcall) => uast(
    type: "Call",
    roles: "Call"
)

endfilter <- (endfilter) => uast(
    type: "Synthetic"
)

endfor <- (endfor) => uast(
    type: "Loop",
    roles: "Loop"
)

endif <- (endif) => uast(
    type: "If"
)

endmacro <- (endmacro) => uast(
    type: "Synthetic"
)

endset <- (endset) => uast(
    type: "Set"
)

endtrans <- (endtrans) => uast(
    type: "Synthetic"
)

endwith <- (endwith) => uast(
    type: "Synthetic"
)

eq <- (eq) => uast(
    type: "Synthetic"
)

escaped <- (escaped) => uast(
    type: "Synthetic"
)

even <- (even) => uast(
    type: "Synthetic"
)

extends <- (extends) => uast(
    type: "Synthetic"
)

false <- (false) => uast(
    type: "Synthetic"
)

filter <- (filter) => uast(
    type: "Synthetic"
)

float <- (float) => uast(
    type: "Synthetic"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
)

from <- (from) => uast(
    type: "Synthetic"
)

ge <- (ge) => uast(
    type: "Synthetic"
)

gt <- (gt) => uast(
    type: "Synthetic"
)

hex_literal <- (hex_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

identifier <- (identifier) => uast(
    type: "If"
)

if <- (if) => uast(
    type: "If"
)

ignore <- (ignore) => uast(
    type: "Synthetic"
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
)

in <- (in) => uast(
    type: "Synthetic"
)

include <- (include) => uast(
    type: "Synthetic"
)

integer <- (integer) => uast(
    type: "Synthetic"
)

iterable <- (iterable) => uast(
    type: "Synthetic"
)

le <- (le) => uast(
    type: "Synthetic"
)

lower <- (lower) => uast(
    type: "Synthetic"
)

lt <- (lt) => uast(
    type: "Synthetic"
)

macro <- (macro) => uast(
    type: "Synthetic"
)

mapping <- (mapping) => uast(
    type: "Synthetic"
)

missing <- (missing) => uast(
    type: "Synthetic"
)

ne <- (ne) => uast(
    type: "Synthetic"
)

none <- (none) => uast(
    type: "Synthetic"
)

not <- (not) => uast(
    type: "Synthetic"
)

null <- (null) => uast(
    type: "Synthetic"
)

number <- (number) => uast(
    type: "Synthetic"
)

oct_literal <- (oct_literal) => uast(
    type: "Literal",
    roles: "Literal"
)

odd <- (odd) => uast(
    type: "Synthetic"
)

or <- (or) => uast(
    type: "Synthetic"
)

pluralize <- (pluralize) => uast(
    type: "Synthetic"
)

raw <- (raw) => uast(
    type: "Synthetic"
)

raw_end <- (raw_end) => uast(
    type: "Synthetic"
)

recursive <- (recursive) => uast(
    type: "Synthetic"
)

sameas <- (sameas) => uast(
    type: "Synthetic"
)

sequence <- (sequence) => uast(
    type: "Synthetic"
)

set <- (set) => uast(
    type: "Set"
)

string <- (string) => uast(
    type: "Synthetic"
)

test <- (test) => uast(
    type: "Synthetic"
)

trans <- (trans) => uast(
    type: "Synthetic"
)

true <- (true) => uast(
    type: "Synthetic"
)

undefined <- (undefined) => uast(
    type: "Synthetic"
)

upper <- (upper) => uast(
    type: "Synthetic"
)

with <- (with) => uast(
    type: "Synthetic"
)

without <- (without) => uast(
    type: "Synthetic"
)

