argument <- (argument) => uast(
    type: "Synthetic",
    children: "fn_type", "generic_type", "identifier", "move_type", "mut_type", "ref_type", "tuple_type", "type", "uni_type"
)

arguments <- (arguments) => uast(
    type: "Synthetic",
    children: []
)

array <- (array) => uast(
    type: "Synthetic",
    children: []
)

assign_field <- (assign_field) => uast(
    type: "Field",
    roles: "Member"
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

assign_local <- (assign_local) => uast(
    type: "Synthetic",
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

assign_receiver_field <- (assign_receiver_field) => uast(
    type: "Field",
    roles: "Member"
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "name", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

binary <- (binary) => uast(
    type: "Synthetic",
    children: "and", "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "next", "nil", "or", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

block <- (block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

boolean_pattern <- (boolean_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

bound <- (bound) => uast(
    type: "Synthetic",
    children: "constant", "requirements"
)

bounds <- (bounds) => uast(
    type: "Synthetic",
    children: []
)

call <- (call) => uast(
    type: "Call",
    roles: "Call"
    children: "arguments", "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "name", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

case <- (case) => uast(
    type: "Case",
    roles: "Branch"
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "boolean_pattern", "break", "call", "cast", "class_pattern", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "constant_pattern", "define_variable", "enum_pattern", "false", "field", "float", "for", "grouped_expression", "identifier", "identifier_pattern", "if", "integer", "integer_pattern", "loop", "match", "mut", "mutable_pattern", "next", "nil", "or_pattern", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "string_pattern", "throw", "true", "try", "tuple", "tuple_pattern", "while", "wildcard_pattern"
)

cases <- (cases) => uast(
    type: "Case",
    roles: "Branch"
    children: []
)

cast <- (cast) => uast(
    type: "Cast",
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "fn_type", "for", "generic_type", "grouped_expression", "identifier", "if", "integer", "loop", "match", "move_type", "mut", "mut_type", "next", "nil", "recover", "ref", "ref_type", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "tuple_type", "type", "uni_type", "while"
)

class <- (class) => uast(
    type: "Class",
    roles: "Class", "Declaration"
    children: "class_body", "constant", "modifier", "type_parameters", "visibility"
)

class_body <- (class_body) => uast(
    type: "Class",
    roles: "Class", "Declaration"
    children: []
)

class_pattern <- (class_pattern) => uast(
    type: "Class",
    roles: "Class", "Declaration"
    children: []
)

closure <- (closure) => uast(
    type: "Synthetic",
    children: "arguments", "block", "fn_type", "generic_type", "modifier", "move_type", "mut_type", "ref_type", "tuple_type", "type", "uni_type"
)

compound_assign_field <- (compound_assign_field) => uast(
    type: "Field",
    roles: "Member"
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

compound_assign_local <- (compound_assign_local) => uast(
    type: "Synthetic",
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

compound_assign_receiver_field <- (compound_assign_receiver_field) => uast(
    type: "Field",
    roles: "Member"
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

constant_pattern <- (constant_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: "constant", "identifier"
)

copy <- (copy) => uast(
    type: "Synthetic",
    children: []
)

define_case <- (define_case) => uast(
    type: "Case",
    roles: "Branch"
    children: "arguments", "constant"
)

define_constant <- (define_constant) => uast(
    type: "Synthetic",
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "visibility", "while"
)

define_field <- (define_field) => uast(
    type: "Field",
    roles: "Member"
    children: "field", "fn_type", "generic_type", "move_type", "mut_type", "ref_type", "tuple_type", "type", "uni_type", "visibility"
)

define_variable <- (define_variable) => uast(
    type: "Variable",
    roles: "Variable", "Declaration"
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "fn_type", "for", "generic_type", "grouped_expression", "identifier", "if", "integer", "loop", "match", "modifier", "move_type", "mut", "mut_type", "next", "nil", "recover", "ref", "ref_type", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "tuple_type", "type", "uni_type", "while"
)

else <- (else) => uast(
    type: "Synthetic",
    children: "block"
)

else_if <- (else_if) => uast(
    type: "If",
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

enum_pattern <- (enum_pattern) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: "arguments", "constant"
)

escape_sequence <- (escape_sequence) => uast(
    type: "Synthetic",
    children: []
)

extern_import <- (extern_import) => uast(
    type: "Import",
    roles: "Import"
    children: "path", "tags"
)

external_function <- (external_function) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "arguments", "block", "fn_type", "generic_type", "identifier", "move_type", "mut_type", "ref_type", "tuple_type", "type", "uni_type", "visibility"
)

false <- (false) => uast(
    type: "Synthetic",
    children: []
)

field_pattern <- (field_pattern) => uast(
    type: "Field",
    roles: "Member"
    children: "boolean_pattern", "class_pattern", "constant_pattern", "enum_pattern", "field", "identifier_pattern", "integer_pattern", "mutable_pattern", "or_pattern", "string_pattern", "tuple_pattern", "wildcard_pattern"
)

fn_type <- (fn_type) => uast(
    type: "Synthetic",
    children: "arguments", "fn_type", "generic_type", "move_type", "mut_type", "ref_type", "tuple_type", "type", "uni_type"
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "boolean_pattern", "break", "call", "cast", "class_pattern", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "constant_pattern", "define_variable", "enum_pattern", "false", "field", "float", "for", "grouped_expression", "identifier", "identifier_pattern", "if", "integer", "integer_pattern", "loop", "match", "mut", "mutable_pattern", "next", "nil", "or_pattern", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "string_pattern", "throw", "true", "try", "tuple", "tuple_pattern", "while", "wildcard_pattern"
)

generic_type <- (generic_type) => uast(
    type: "Synthetic",
    children: "constant", "type_arguments"
)

grouped_expression <- (grouped_expression) => uast(
    type: "Synthetic",
    children: []
)

identifier <- (identifier) => uast(
    type: "If",
    children: []
)

if <- (if) => uast(
    type: "If",
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "else", "else_if", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

implement_trait <- (implement_trait) => uast(
    type: "Synthetic",
    children: "bounds", "constant", "generic_type", "implement_trait_body", "type"
)

implement_trait_body <- (implement_trait_body) => uast(
    type: "Synthetic",
    children: []
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
    children: "path", "symbols", "tags"
)

import_as <- (import_as) => uast(
    type: "Import",
    roles: "Import"
    children: "as", "constant", "identifier", "self"
)

interpolation <- (interpolation) => uast(
    type: "Synthetic",
    children: []
)

loop <- (loop) => uast(
    type: "Loop",
    roles: "Loop"
    children: "block"
)

match <- (match) => uast(
    type: "Match",
    roles: "Match"
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cases", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

method <- (method) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "arguments", "block", "fn_type", "generic_type", "identifier", "modifier", "move_type", "mut_type", "ref_type", "tuple_type", "type", "type_parameters", "uni_type", "visibility"
)

modifier <- (modifier) => uast(
    type: "If",
    children: []
)

move_type <- (move_type) => uast(
    type: "Synthetic",
    children: "fn_type", "generic_type", "move_type", "mut_type", "ref_type", "tuple_type", "type", "uni_type"
)

mut <- (mut) => uast(
    type: "Synthetic",
    children: []
)

mut_type <- (mut_type) => uast(
    type: "Synthetic",
    children: "fn_type", "generic_type", "move_type", "mut_type", "ref_type", "tuple_type", "type", "uni_type"
)

mutable <- (mutable) => uast(
    type: "Synthetic",
    children: []
)

mutable_pattern <- (mutable_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

named_argument <- (named_argument) => uast(
    type: "Synthetic",
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

or_pattern <- (or_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

path <- (path) => uast(
    type: "Synthetic",
    children: []
)

recover <- (recover) => uast(
    type: "Synthetic",
    children: []
)

ref <- (ref) => uast(
    type: "Synthetic",
    children: []
)

ref_type <- (ref_type) => uast(
    type: "Synthetic",
    children: "fn_type", "generic_type", "move_type", "mut_type", "ref_type", "tuple_type", "type", "uni_type"
)

reopen_class <- (reopen_class) => uast(
    type: "Class",
    roles: "Class", "Declaration"
    children: "bounds", "constant", "reopen_class_body"
)

reopen_class_body <- (reopen_class_body) => uast(
    type: "Class",
    roles: "Class", "Declaration"
    children: []
)

replace_field <- (replace_field) => uast(
    type: "Field",
    roles: "Member"
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

replace_local <- (replace_local) => uast(
    type: "Synthetic",
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

required_traits <- (required_traits) => uast(
    type: "Synthetic",
    children: []
)

requirements <- (requirements) => uast(
    type: "Synthetic",
    children: []
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
    children: []
)

source_file <- (source_file) => uast(
    type: "Synthetic",
    children: []
)

string <- (string) => uast(
    type: "Synthetic",
    children: []
)

string_pattern <- (string_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

symbols <- (symbols) => uast(
    type: "Synthetic",
    children: []
)

tags <- (tags) => uast(
    type: "Synthetic",
    children: []
)

throw <- (throw) => uast(
    type: "Throw",
    roles: "Throw"
    children: []
)

trait <- (trait) => uast(
    type: "Synthetic",
    children: "constant", "required_traits", "trait_body", "type_parameters", "visibility"
)

trait_body <- (trait_body) => uast(
    type: "Synthetic",
    children: []
)

true <- (true) => uast(
    type: "Synthetic",
    children: []
)

try <- (try) => uast(
    type: "Try",
    roles: "Try"
    children: []
)

tuple <- (tuple) => uast(
    type: "Tuple",
    children: []
)

tuple_pattern <- (tuple_pattern) => uast(
    type: "Tuple",
    children: []
)

tuple_type <- (tuple_type) => uast(
    type: "Tuple",
    children: []
)

type_arguments <- (type_arguments) => uast(
    type: "Synthetic",
    children: []
)

type_parameter <- (type_parameter) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: "constant", "requirements"
)

type_parameters <- (type_parameters) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: []
)

uni_type <- (uni_type) => uast(
    type: "Synthetic",
    children: "fn_type", "generic_type", "move_type", "mut_type", "ref_type", "tuple_type", "type", "uni_type"
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
    children: "array", "assign_field", "assign_local", "assign_receiver_field", "binary", "block", "break", "call", "cast", "closure", "compound_assign_field", "compound_assign_local", "compound_assign_receiver_field", "constant", "define_variable", "false", "field", "float", "for", "grouped_expression", "identifier", "if", "integer", "loop", "match", "mut", "next", "nil", "recover", "ref", "replace_field", "replace_local", "return", "self", "string", "throw", "true", "try", "tuple", "while"
)

and <- (and) => uast(
    type: "Synthetic",
    children: []
)

as <- (as) => uast(
    type: "Synthetic",
    children: []
)

async <- (async) => uast(
    type: "Synthetic",
    children: []
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
    children: []
)

builtin <- (builtin) => uast(
    type: "Synthetic",
    children: []
)

case <- (case) => uast(
    type: "Case",
    roles: "Branch"
    children: []
)

constant <- (constant) => uast(
    type: "Synthetic",
    children: []
)

copy <- (copy) => uast(
    type: "Synthetic",
    children: []
)

else <- (else) => uast(
    type: "Synthetic",
    children: []
)

enum <- (enum) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: []
)

extern <- (extern) => uast(
    type: "Synthetic",
    children: []
)

false <- (false) => uast(
    type: "Synthetic",
    children: []
)

field <- (field) => uast(
    type: "Field",
    roles: "Member"
    children: []
)

float <- (float) => uast(
    type: "Synthetic",
    children: []
)

fn <- (fn) => uast(
    type: "Synthetic",
    children: []
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

identifier_pattern <- (identifier_pattern) => uast(
    type: "If",
    children: []
)

if <- (if) => uast(
    type: "If",
    children: []
)

impl <- (impl) => uast(
    type: "Synthetic",
    children: []
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

in <- (in) => uast(
    type: "Synthetic",
    children: []
)

inline <- (inline) => uast(
    type: "Synthetic",
    children: []
)

integer <- (integer) => uast(
    type: "Synthetic",
    children: []
)

integer_pattern <- (integer_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

let <- (let) => uast(
    type: "Synthetic",
    children: []
)

line_comment <- (line_comment) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

loop <- (loop) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

match <- (match) => uast(
    type: "Match",
    roles: "Match"
    children: []
)

move <- (move) => uast(
    type: "Synthetic",
    children: []
)

mut <- (mut) => uast(
    type: "Synthetic",
    children: []
)

name <- (name) => uast(
    type: "Synthetic",
    children: []
)

next <- (next) => uast(
    type: "Synthetic",
    children: []
)

nil <- (nil) => uast(
    type: "Synthetic",
    children: []
)

or <- (or) => uast(
    type: "Synthetic",
    children: []
)

recover <- (recover) => uast(
    type: "Synthetic",
    children: []
)

ref <- (ref) => uast(
    type: "Synthetic",
    children: []
)

rest_argument <- (rest_argument) => uast(
    type: "Synthetic",
    children: []
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
    children: []
)

self <- (self) => uast(
    type: "Synthetic",
    children: []
)

static <- (static) => uast(
    type: "Synthetic",
    children: []
)

string_content <- (string_content) => uast(
    type: "Synthetic",
    children: []
)

throw <- (throw) => uast(
    type: "Throw",
    roles: "Throw"
    children: []
)

trait <- (trait) => uast(
    type: "Synthetic",
    children: []
)

true <- (true) => uast(
    type: "Synthetic",
    children: []
)

try <- (try) => uast(
    type: "Try",
    roles: "Try"
    children: []
)

type <- (type) => uast(
    type: "Synthetic",
    children: []
)

type <- (type) => uast(
    type: "Synthetic",
    children: []
)

uni <- (uni) => uast(
    type: "Synthetic",
    children: []
)

visibility <- (visibility) => uast(
    type: "Synthetic",
    children: []
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

wildcard_pattern <- (wildcard_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

