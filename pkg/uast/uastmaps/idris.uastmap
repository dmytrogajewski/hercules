alt <- (alt) => uast(
    type: "Synthetic",
    children: "colon", "exp_bar_arg", "exp_braces", "exp_case", "exp_do", "exp_explicit_impl", "exp_idiom", "exp_if", "exp_lambda", "exp_lambda_case", "exp_let_in", "exp_list", "exp_list_comprehension", "exp_name", "exp_parens", "exp_quasiquotation", "exp_record_access", "exp_rewrite_in", "exp_ticked", "exp_tuple", "exp_with", "hole", "literal", "operator", "pat_at", "pat_at_braces", "pat_braces", "pat_list", "pat_literal", "pat_name", "pat_op", "pat_parens", "pat_record", "pat_string", "pragma_MkWorld", "pragma_World", "pragma_runElab", "pragma_search", "pragma_syntactic", "quantity", "raw_string", "record_update", "string", "triple_quote_string", "type_braces", "type_parens", "unit", "wildcard"
)

alts <- (alts) => uast(
    type: "Synthetic",
    children: []
)

arrow_separator <- (arrow_separator) => uast(
    type: "Synthetic",
    children: []
)

bind_alt <- (bind_alt) => uast(
    type: "Synthetic",
    children: []
)

bind_exp <- (bind_exp) => uast(
    type: "Synthetic",
    children: []
)

bind_pattern <- (bind_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

caname <- (caname) => uast(
    type: "Synthetic",
    children: []
)

colon <- (colon) => uast(
    type: "Synthetic",
    children: []
)

constraints <- (constraints) => uast(
    type: "Synthetic",
    children: []
)

constructor <- (constructor) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: "caname", "dot_operator", "operator"
)

data <- (data) => uast(
    type: "Synthetic",
    children: "data_name"
)

data_body <- (data_body) => uast(
    type: "Synthetic",
    children: []
)

data_name <- (data_name) => uast(
    type: "Synthetic",
    children: []
)

declarations <- (declarations) => uast(
    type: "Synthetic",
    children: []
)

default <- (default) => uast(
    type: "Synthetic",
    children: []
)

determining_params <- (determining_params) => uast(
    type: "Synthetic",
    children: []
)

dot_operator <- (dot_operator) => uast(
    type: "Synthetic",
    children: []
)

equal <- (equal) => uast(
    type: "Synthetic",
    children: []
)

exp_bar_arg <- (exp_bar_arg) => uast(
    type: "Synthetic",
    children: []
)

exp_braces <- (exp_braces) => uast(
    type: "Synthetic",
    children: []
)

exp_case <- (exp_case) => uast(
    type: "Case",
    roles: "Branch"
    children: "exp_bar_arg", "exp_braces", "exp_case", "exp_do", "exp_explicit_impl", "exp_idiom", "exp_if", "exp_lambda", "exp_lambda_case", "exp_let_in", "exp_list", "exp_list_comprehension", "exp_name", "exp_parens", "exp_quasiquotation", "exp_record_access", "exp_rewrite_in", "exp_ticked", "exp_tuple", "exp_with", "hole", "literal", "operator", "pragma_MkWorld", "pragma_World", "pragma_runElab", "pragma_search", "pragma_syntactic", "raw_string", "record_update", "string", "triple_quote_string", "type_braces", "type_parens", "unit", "wildcard"
)

exp_do <- (exp_do) => uast(
    type: "Synthetic",
    children: "caname"
)

exp_else <- (exp_else) => uast(
    type: "Synthetic",
    children: []
)

exp_explicit_impl <- (exp_explicit_impl) => uast(
    type: "Synthetic",
    children: []
)

exp_idiom <- (exp_idiom) => uast(
    type: "Synthetic",
    children: []
)

exp_if <- (exp_if) => uast(
    type: "If",
    children: "exp_bar_arg", "exp_braces", "exp_case", "exp_do", "exp_else", "exp_explicit_impl", "exp_idiom", "exp_if", "exp_lambda", "exp_lambda_case", "exp_let_in", "exp_list", "exp_list_comprehension", "exp_name", "exp_parens", "exp_quasiquotation", "exp_record_access", "exp_rewrite_in", "exp_then", "exp_ticked", "exp_tuple", "exp_with", "hole", "literal", "operator", "pragma_MkWorld", "pragma_World", "pragma_runElab", "pragma_search", "pragma_syntactic", "raw_string", "record_update", "string", "triple_quote_string", "type_braces", "type_parens", "unit", "wildcard"
)

exp_lambda <- (exp_lambda) => uast(
    type: "Lambda",
    roles: "Lambda"
    children: []
)

exp_lambda_case <- (exp_lambda_case) => uast(
    type: "Case",
    roles: "Branch"
    children: []
)

exp_let_in <- (exp_let_in) => uast(
    type: "Synthetic",
    children: []
)

exp_list <- (exp_list) => uast(
    type: "List",
    children: []
)

exp_list_comprehension <- (exp_list_comprehension) => uast(
    type: "List",
    children: []
)

exp_name <- (exp_name) => uast(
    type: "Synthetic",
    children: []
)

exp_parens <- (exp_parens) => uast(
    type: "Synthetic",
    children: []
)

exp_quasiquotation <- (exp_quasiquotation) => uast(
    type: "Synthetic",
    children: []
)

exp_record_access <- (exp_record_access) => uast(
    type: "Synthetic",
    children: []
)

exp_rewrite_in <- (exp_rewrite_in) => uast(
    type: "Synthetic",
    children: []
)

exp_then <- (exp_then) => uast(
    type: "Synthetic",
    children: []
)

exp_ticked <- (exp_ticked) => uast(
    type: "Synthetic",
    children: []
)

exp_tuple <- (exp_tuple) => uast(
    type: "Tuple",
    children: []
)

exp_with <- (exp_with) => uast(
    type: "Synthetic",
    children: []
)

explicit_arg <- (explicit_arg) => uast(
    type: "Synthetic",
    children: "caname", "exp_bar_arg", "exp_braces", "exp_case", "exp_do", "exp_explicit_impl", "exp_idiom", "exp_if", "exp_lambda", "exp_lambda_case", "exp_let_in", "exp_list", "exp_list_comprehension", "exp_name", "exp_parens", "exp_quasiquotation", "exp_record_access", "exp_rewrite_in", "exp_ticked", "exp_tuple", "exp_with", "hole", "literal", "loname", "operator", "pragma_MkWorld", "pragma_World", "pragma_runElab", "pragma_search", "pragma_syntactic", "raw_string", "record_update", "string", "triple_quote_string", "type_braces", "type_parens", "unit", "wildcard"
)

external <- (external) => uast(
    type: "Synthetic",
    children: []
)

field_name <- (field_name) => uast(
    type: "Field",
    roles: "Member"
    children: []
)

fixity <- (fixity) => uast(
    type: "Synthetic",
    children: "integer"
)

forall <- (forall) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

function <- (function) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: []
)

funvar <- (funvar) => uast(
    type: "Synthetic",
    children: "caname", "dot_operator", "loname", "operator", "patterns"
)

idris <- (idris) => uast(
    type: "Synthetic",
    children: []
)

implementation <- (implementation) => uast(
    type: "Synthetic",
    children: []
)

implementation_body <- (implementation_body) => uast(
    type: "Synthetic",
    children: []
)

implementation_head <- (implementation_head) => uast(
    type: "Synthetic",
    children: "interface_name"
)

implementation_name <- (implementation_name) => uast(
    type: "Synthetic",
    children: "caname"
)

implicit_record_field <- (implicit_record_field) => uast(
    type: "Field",
    roles: "Member"
    children: []
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
    children: "as", "caname", "qualified_caname"
)

in <- (in) => uast(
    type: "Synthetic",
    children: []
)

integer <- (integer) => uast(
    type: "Synthetic",
    children: []
)

interface <- (interface) => uast(
    type: "Interface",
    roles: "Interface", "Declaration"
    children: []
)

interface_body <- (interface_body) => uast(
    type: "Interface",
    roles: "Interface", "Declaration"
    children: []
)

interface_head <- (interface_head) => uast(
    type: "Interface",
    roles: "Interface", "Declaration"
    children: "interface_name"
)

interface_name <- (interface_name) => uast(
    type: "Interface",
    roles: "Interface", "Declaration"
    children: []
)

interpolation <- (interpolation) => uast(
    type: "Synthetic",
    children: []
)

lambda_args <- (lambda_args) => uast(
    type: "Lambda",
    roles: "Lambda"
    children: []
)

lambda_exp <- (lambda_exp) => uast(
    type: "Lambda",
    roles: "Lambda"
    children: []
)

let <- (let) => uast(
    type: "Synthetic",
    children: []
)

lhs <- (lhs) => uast(
    type: "Synthetic",
    children: []
)

literal <- (literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

loname <- (loname) => uast(
    type: "Synthetic",
    children: []
)

module <- (module) => uast(
    type: "Module",
    roles: "Module"
    children: "caname", "qualified_caname"
)

mutual <- (mutual) => uast(
    type: "Synthetic",
    children: []
)

mutual_body <- (mutual_body) => uast(
    type: "Synthetic",
    children: []
)

namespace <- (namespace) => uast(
    type: "Namespace",
    roles: "Module"
    children: "caname", "qualified_caname"
)

namespace_body <- (namespace_body) => uast(
    type: "Namespace",
    roles: "Module"
    children: []
)

operator <- (operator) => uast(
    type: "Synthetic",
    children: []
)

parameters <- (parameters) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: []
)

parameters_body <- (parameters_body) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: []
)

pat_at_braces <- (pat_at_braces) => uast(
    type: "Synthetic",
    children: []
)

pat_braces <- (pat_braces) => uast(
    type: "Synthetic",
    children: []
)

pat_field <- (pat_field) => uast(
    type: "Field",
    roles: "Member"
    children: []
)

pat_fields <- (pat_fields) => uast(
    type: "Field",
    roles: "Member"
    children: []
)

pat_list <- (pat_list) => uast(
    type: "List",
    children: []
)

pat_literal <- (pat_literal) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

pat_name <- (pat_name) => uast(
    type: "Synthetic",
    children: []
)

pat_op <- (pat_op) => uast(
    type: "Synthetic",
    children: []
)

pat_parens <- (pat_parens) => uast(
    type: "Synthetic",
    children: []
)

pat_record <- (pat_record) => uast(
    type: "Synthetic",
    children: "pat_fields"
)

pat_string <- (pat_string) => uast(
    type: "Synthetic",
    children: []
)

patterns <- (patterns) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

pragma_TTImpLit <- (pragma_TTImpLit) => uast(
    type: "Synthetic",
    children: []
)

pragma_allow_overloads <- (pragma_allow_overloads) => uast(
    type: "Synthetic",
    children: []
)

pragma_ambiguity_depth <- (pragma_ambiguity_depth) => uast(
    type: "Synthetic",
    children: []
)

pragma_auto_implicit_depth <- (pragma_auto_implicit_depth) => uast(
    type: "Synthetic",
    children: []
)

pragma_auto_lazy <- (pragma_auto_lazy) => uast(
    type: "Synthetic",
    children: []
)

pragma_builtin <- (pragma_builtin) => uast(
    type: "Synthetic",
    children: []
)

pragma_cg <- (pragma_cg) => uast(
    type: "Synthetic",
    children: []
)

pragma_charLit <- (pragma_charLit) => uast(
    type: "Synthetic",
    children: []
)

pragma_declsLit <- (pragma_declsLit) => uast(
    type: "Synthetic",
    children: []
)

pragma_default <- (pragma_default) => uast(
    type: "Synthetic",
    children: []
)

pragma_doubleLit <- (pragma_doubleLit) => uast(
    type: "Synthetic",
    children: []
)

pragma_export <- (pragma_export) => uast(
    type: "Synthetic",
    children: []
)

pragma_foreign <- (pragma_foreign) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

pragma_foreign_impl <- (pragma_foreign_impl) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

pragma_hide <- (pragma_hide) => uast(
    type: "Synthetic",
    children: []
)

pragma_integerLit <- (pragma_integerLit) => uast(
    type: "Synthetic",
    children: []
)

pragma_language <- (pragma_language) => uast(
    type: "Synthetic",
    children: []
)

pragma_logging <- (pragma_logging) => uast(
    type: "Synthetic",
    children: []
)

pragma_name <- (pragma_name) => uast(
    type: "Synthetic",
    children: []
)

pragma_nameLit <- (pragma_nameLit) => uast(
    type: "Synthetic",
    children: []
)

pragma_nf_metavar_threshold <- (pragma_nf_metavar_threshold) => uast(
    type: "Synthetic",
    children: []
)

pragma_pair <- (pragma_pair) => uast(
    type: "Synthetic",
    children: []
)

pragma_prefix_record_projections <- (pragma_prefix_record_projections) => uast(
    type: "Synthetic",
    children: []
)

pragma_rewrite <- (pragma_rewrite) => uast(
    type: "Synthetic",
    children: []
)

pragma_search_timeout <- (pragma_search_timeout) => uast(
    type: "Synthetic",
    children: []
)

pragma_spec <- (pragma_spec) => uast(
    type: "Synthetic",
    children: []
)

pragma_stringLit <- (pragma_stringLit) => uast(
    type: "Synthetic",
    children: []
)

pragma_transform <- (pragma_transform) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

pragma_unbound_implicits <- (pragma_unbound_implicits) => uast(
    type: "Synthetic",
    children: []
)

pragma_unhide <- (pragma_unhide) => uast(
    type: "Synthetic",
    children: []
)

proof <- (proof) => uast(
    type: "Synthetic",
    children: []
)

qualified_caname <- (qualified_caname) => uast(
    type: "If",
    children: "caname"
)

qualified_dot_operators <- (qualified_dot_operators) => uast(
    type: "If",
    children: "caname"
)

qualified_loname <- (qualified_loname) => uast(
    type: "If",
    children: "caname"
)

qualified_operator <- (qualified_operator) => uast(
    type: "If",
    children: "caname"
)

quantity <- (quantity) => uast(
    type: "Synthetic",
    children: []
)

raw_string <- (raw_string) => uast(
    type: "Synthetic",
    children: []
)

record <- (record) => uast(
    type: "Synthetic",
    children: "operator", "record_name"
)

record_body <- (record_body) => uast(
    type: "Synthetic",
    children: []
)

record_field <- (record_field) => uast(
    type: "Field",
    roles: "Member"
    children: []
)

record_name <- (record_name) => uast(
    type: "Synthetic",
    children: []
)

record_update <- (record_update) => uast(
    type: "Synthetic",
    children: []
)

rewrite <- (rewrite) => uast(
    type: "Synthetic",
    children: []
)

rewrite_exp <- (rewrite_exp) => uast(
    type: "Synthetic",
    children: []
)

rhs <- (rhs) => uast(
    type: "Synthetic",
    children: []
)

search_options <- (search_options) => uast(
    type: "Synthetic",
    children: []
)

signature <- (signature) => uast(
    type: "Synthetic",
    children: "caname", "dot_operator", "loname", "operator"
)

statement <- (statement) => uast(
    type: "Synthetic",
    children: []
)

string <- (string) => uast(
    type: "Synthetic",
    children: []
)

ticked_operator <- (ticked_operator) => uast(
    type: "Synthetic",
    children: []
)

totality <- (totality) => uast(
    type: "Synthetic",
    children: []
)

triple_quote_string <- (triple_quote_string) => uast(
    type: "Synthetic",
    children: []
)

tuple_operator <- (tuple_operator) => uast(
    type: "Tuple",
    children: []
)

type_braces <- (type_braces) => uast(
    type: "Synthetic",
    children: []
)

type_parens <- (type_parens) => uast(
    type: "Synthetic",
    children: []
)

type_signature <- (type_signature) => uast(
    type: "Synthetic",
    children: []
)

type_var <- (type_var) => uast(
    type: "Synthetic",
    children: []
)

using <- (using) => uast(
    type: "Synthetic",
    children: []
)

visibility <- (visibility) => uast(
    type: "Synthetic",
    children: []
)

with <- (with) => uast(
    type: "Synthetic",
    children: []
)

with_arg <- (with_arg) => uast(
    type: "Synthetic",
    children: []
)

with_pat <- (with_pat) => uast(
    type: "Synthetic",
    children: []
)

as <- (as) => uast(
    type: "Synthetic",
    children: []
)

auto <- (auto) => uast(
    type: "Synthetic",
    children: []
)

case <- (case) => uast(
    type: "Case",
    roles: "Branch"
    children: []
)

char <- (char) => uast(
    type: "Synthetic",
    children: []
)

comma <- (comma) => uast(
    type: "Synthetic",
    children: []
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

constructor <- (constructor) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: []
)

covering <- (covering) => uast(
    type: "Synthetic",
    children: []
)

cpp <- (cpp) => uast(
    type: "Synthetic",
    children: []
)

data <- (data) => uast(
    type: "Synthetic",
    children: []
)

default <- (default) => uast(
    type: "Synthetic",
    children: []
)

do <- (do) => uast(
    type: "Synthetic",
    children: []
)

double_star <- (double_star) => uast(
    type: "Synthetic",
    children: []
)

else <- (else) => uast(
    type: "Synthetic",
    children: []
)

empty_file <- (empty_file) => uast(
    type: "Synthetic",
    children: []
)

export <- (export) => uast(
    type: "Synthetic",
    children: []
)

external <- (external) => uast(
    type: "Synthetic",
    children: []
)

forall <- (forall) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

hole <- (hole) => uast(
    type: "Synthetic",
    children: []
)

if <- (if) => uast(
    type: "If",
    children: []
)

implementation <- (implementation) => uast(
    type: "Synthetic",
    children: []
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

impossible <- (impossible) => uast(
    type: "Synthetic",
    children: []
)

in <- (in) => uast(
    type: "Synthetic",
    children: []
)

infix <- (infix) => uast(
    type: "Synthetic",
    children: []
)

infixl <- (infixl) => uast(
    type: "Synthetic",
    children: []
)

infixr <- (infixr) => uast(
    type: "Synthetic",
    children: []
)

interface <- (interface) => uast(
    type: "Interface",
    roles: "Interface", "Declaration"
    children: []
)

let <- (let) => uast(
    type: "Synthetic",
    children: []
)

module <- (module) => uast(
    type: "Module",
    roles: "Module"
    children: []
)

mutual <- (mutual) => uast(
    type: "Synthetic",
    children: []
)

namespace <- (namespace) => uast(
    type: "Namespace",
    roles: "Module"
    children: []
)

no_hints <- (no_hints) => uast(
    type: "Synthetic",
    children: []
)

number <- (number) => uast(
    type: "Synthetic",
    children: []
)

of <- (of) => uast(
    type: "Synthetic",
    children: []
)

parameters <- (parameters) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: []
)

partial <- (partial) => uast(
    type: "Synthetic",
    children: []
)

pat_at <- (pat_at) => uast(
    type: "Synthetic",
    children: []
)

pragma_MkWorld <- (pragma_MkWorld) => uast(
    type: "Synthetic",
    children: []
)

pragma_World <- (pragma_World) => uast(
    type: "Synthetic",
    children: []
)

pragma_defaulthint <- (pragma_defaulthint) => uast(
    type: "Synthetic",
    children: []
)

pragma_deprecate <- (pragma_deprecate) => uast(
    type: "Synthetic",
    children: []
)

pragma_extern <- (pragma_extern) => uast(
    type: "Synthetic",
    children: []
)

pragma_globalhint <- (pragma_globalhint) => uast(
    type: "Synthetic",
    children: []
)

pragma_hint <- (pragma_hint) => uast(
    type: "Synthetic",
    children: []
)

pragma_inline <- (pragma_inline) => uast(
    type: "Synthetic",
    children: []
)

pragma_macro <- (pragma_macro) => uast(
    type: "Synthetic",
    children: []
)

pragma_noinline <- (pragma_noinline) => uast(
    type: "Synthetic",
    children: []
)

pragma_nomangle <- (pragma_nomangle) => uast(
    type: "Synthetic",
    children: []
)

pragma_runElab <- (pragma_runElab) => uast(
    type: "Synthetic",
    children: []
)

pragma_search <- (pragma_search) => uast(
    type: "Synthetic",
    children: []
)

pragma_start <- (pragma_start) => uast(
    type: "Synthetic",
    children: []
)

pragma_syntactic <- (pragma_syntactic) => uast(
    type: "Synthetic",
    children: []
)

pragma_tcinline <- (pragma_tcinline) => uast(
    type: "Synthetic",
    children: []
)

pragma_unsafe <- (pragma_unsafe) => uast(
    type: "Synthetic",
    children: []
)

prefix <- (prefix) => uast(
    type: "Synthetic",
    children: []
)

private <- (private) => uast(
    type: "Synthetic",
    children: []
)

proof <- (proof) => uast(
    type: "Synthetic",
    children: []
)

public <- (public) => uast(
    type: "Synthetic",
    children: []
)

record <- (record) => uast(
    type: "Synthetic",
    children: []
)

rewrite <- (rewrite) => uast(
    type: "Synthetic",
    children: []
)

search <- (search) => uast(
    type: "Synthetic",
    children: []
)

then <- (then) => uast(
    type: "Synthetic",
    children: []
)

total <- (total) => uast(
    type: "Synthetic",
    children: []
)

unit <- (unit) => uast(
    type: "Synthetic",
    children: []
)

using <- (using) => uast(
    type: "Synthetic",
    children: []
)

where <- (where) => uast(
    type: "Synthetic",
    children: []
)

wildcard <- (wildcard) => uast(
    type: "Synthetic",
    children: []
)

with <- (with) => uast(
    type: "Synthetic",
    children: []
)

