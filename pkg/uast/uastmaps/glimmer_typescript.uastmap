declaration <- (declaration) => uast(
    type: "Synthetic",
    children: []
)

expression <- (expression) => uast(
    type: "Synthetic",
    children: []
)

pattern <- (pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

primary_expression <- (primary_expression) => uast(
    type: "Synthetic",
    children: []
)

primary_type <- (primary_type) => uast(
    type: "Synthetic",
    children: []
)

statement <- (statement) => uast(
    type: "Synthetic",
    children: []
)

type <- (type) => uast(
    type: "Synthetic",
    children: []
)

abstract_class_declaration <- (abstract_class_declaration) => uast(
    type: "Class",
    roles: "Class", "Declaration"
    children: "class_body", "decorator", "type_identifier", "type_parameters"
)

abstract_method_signature <- (abstract_method_signature) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "asserts_annotation", "computed_property_name", "formal_parameters", "number", "private_property_identifier", "property_identifier", "string", "type_annotation", "type_parameters", "type_predicate_annotation"
)

accessibility_modifier <- (accessibility_modifier) => uast(
    type: "If",
    children: []
)

adding_type_annotation <- (adding_type_annotation) => uast(
    type: "TypeAnnotation",
    roles: "Type"
    children: []
)

ambient_declaration <- (ambient_declaration) => uast(
    type: "Synthetic",
    children: []
)

arguments <- (arguments) => uast(
    type: "Synthetic",
    children: []
)

array <- (array) => uast(
    type: "Synthetic",
    children: []
)

array_pattern <- (array_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

array_type <- (array_type) => uast(
    type: "Synthetic",
    children: []
)

arrow_function <- (arrow_function) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "asserts_annotation", "expression", "formal_parameters", "identifier", "statement_block", "type_annotation", "type_parameters", "type_predicate_annotation"
)

as_expression <- (as_expression) => uast(
    type: "Synthetic",
    children: []
)

asserts <- (asserts) => uast(
    type: "Synthetic",
    children: []
)

asserts_annotation <- (asserts_annotation) => uast(
    type: "Synthetic",
    children: []
)

assignment_expression <- (assignment_expression) => uast(
    type: "Assignment",
    roles: "Assignment"
    children: "array_pattern", "expression", "identifier", "member_expression", "non_null_expression", "object_pattern", "parenthesized_expression", "subscript_expression", "undefined"
)

assignment_pattern <- (assignment_pattern) => uast(
    type: "Assignment",
    roles: "Assignment"
    children: "expression", "pattern"
)

augmented_assignment_expression <- (augmented_assignment_expression) => uast(
    type: "Assignment",
    roles: "Assignment"
    children: "expression", "identifier", "member_expression", "non_null_expression", "parenthesized_expression", "subscript_expression"
)

await_expression <- (await_expression) => uast(
    type: "Await",
    roles: "Await"
    children: []
)

binary_expression <- (binary_expression) => uast(
    type: "Synthetic",
    children: "expression", "in", "instanceof", "private_property_identifier"
)

break_statement <- (break_statement) => uast(
    type: "Break",
    roles: "Break"
    children: "statement_identifier"
)

call_expression <- (call_expression) => uast(
    type: "Call",
    roles: "Call"
    children: "arguments", "expression", "import", "template_string", "type_arguments"
)

call_signature <- (call_signature) => uast(
    type: "Call",
    roles: "Call"
    children: "asserts_annotation", "formal_parameters", "type_annotation", "type_parameters", "type_predicate_annotation"
)

catch_clause <- (catch_clause) => uast(
    type: "Catch",
    roles: "Catch"
    children: "array_pattern", "identifier", "object_pattern", "statement_block", "type_annotation"
)

class <- (class) => uast(
    type: "Class",
    roles: "Class", "Declaration"
    children: "class_body", "decorator", "type_identifier", "type_parameters"
)

class_body <- (class_body) => uast(
    type: "Class",
    roles: "Class", "Declaration"
    children: "decorator", "glimmer_template"
)

class_declaration <- (class_declaration) => uast(
    type: "Class",
    roles: "Class", "Declaration"
    children: "class_body", "decorator", "type_identifier", "type_parameters"
)

class_heritage <- (class_heritage) => uast(
    type: "Class",
    roles: "Class", "Declaration"
    children: []
)

class_static_block <- (class_static_block) => uast(
    type: "Class",
    roles: "Class", "Declaration"
    children: "statement_block"
)

computed_property_name <- (computed_property_name) => uast(
    type: "Property",
    roles: "Member"
    children: []
)

conditional_type <- (conditional_type) => uast(
    type: "Synthetic",
    children: "type"
)

constraint <- (constraint) => uast(
    type: "Synthetic",
    children: []
)

construct_signature <- (construct_signature) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: "formal_parameters", "type_annotation", "type_parameters"
)

constructor_type <- (constructor_type) => uast(
    type: "Struct",
    roles: "Struct", "Declaration"
    children: "formal_parameters", "type", "type_parameters"
)

continue_statement <- (continue_statement) => uast(
    type: "Continue",
    roles: "Continue"
    children: "statement_identifier"
)

debugger_statement <- (debugger_statement) => uast(
    type: "Synthetic",
    children: []
)

decorator <- (decorator) => uast(
    type: "Decorator",
    roles: "Attribute"
    children: []
)

default_type <- (default_type) => uast(
    type: "Synthetic",
    children: []
)

do_statement <- (do_statement) => uast(
    type: "Synthetic",
    children: "parenthesized_expression", "statement"
)

else_clause <- (else_clause) => uast(
    type: "Synthetic",
    children: []
)

empty_statement <- (empty_statement) => uast(
    type: "Synthetic",
    children: []
)

enum_assignment <- (enum_assignment) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: "computed_property_name", "expression", "number", "private_property_identifier", "property_identifier", "string"
)

enum_body <- (enum_body) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: "computed_property_name", "number", "private_property_identifier", "property_identifier", "string"
)

enum_declaration <- (enum_declaration) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: "enum_body", "identifier"
)

existential_type <- (existential_type) => uast(
    type: "Synthetic",
    children: []
)

export_clause <- (export_clause) => uast(
    type: "Synthetic",
    children: []
)

export_specifier <- (export_specifier) => uast(
    type: "If",
    children: "identifier", "string"
)

export_statement <- (export_statement) => uast(
    type: "Synthetic",
    children: "declaration", "decorator", "expression", "string"
)

expression_statement <- (expression_statement) => uast(
    type: "Synthetic",
    children: []
)

extends_clause <- (extends_clause) => uast(
    type: "Synthetic",
    children: "expression", "type_arguments"
)

extends_type_clause <- (extends_type_clause) => uast(
    type: "Synthetic",
    children: "generic_type", "nested_type_identifier", "type_identifier"
)

finally_clause <- (finally_clause) => uast(
    type: "Finally",
    roles: "Finally"
    children: "statement_block"
)

flow_maybe_type <- (flow_maybe_type) => uast(
    type: "Synthetic",
    children: []
)

for_in_statement <- (for_in_statement) => uast(
    type: "Loop",
    roles: "Loop"
    children: "array_pattern", "const", "expression", "identifier", "in", "let", "member_expression", "non_null_expression", "object_pattern", "of", "parenthesized_expression", "sequence_expression", "statement", "subscript_expression", "undefined", "var"
)

for_statement <- (for_statement) => uast(
    type: "Loop",
    roles: "Loop"
    children: "empty_statement", "expression", "lexical_declaration", "sequence_expression", "statement", "variable_declaration"
)

formal_parameters <- (formal_parameters) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: []
)

function_declaration <- (function_declaration) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "asserts_annotation", "formal_parameters", "identifier", "statement_block", "type_annotation", "type_parameters", "type_predicate_annotation"
)

function_expression <- (function_expression) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "asserts_annotation", "formal_parameters", "identifier", "statement_block", "type_annotation", "type_parameters", "type_predicate_annotation"
)

function_signature <- (function_signature) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "asserts_annotation", "formal_parameters", "identifier", "type_annotation", "type_parameters", "type_predicate_annotation"
)

function_type <- (function_type) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "asserts", "formal_parameters", "type", "type_parameters", "type_predicate"
)

generator_function <- (generator_function) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "asserts_annotation", "formal_parameters", "identifier", "statement_block", "type_annotation", "type_parameters", "type_predicate_annotation"
)

generator_function_declaration <- (generator_function_declaration) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: "asserts_annotation", "formal_parameters", "identifier", "statement_block", "type_annotation", "type_parameters", "type_predicate_annotation"
)

generic_type <- (generic_type) => uast(
    type: "Synthetic",
    children: "nested_type_identifier", "type_arguments", "type_identifier"
)

glimmer_closing_tag <- (glimmer_closing_tag) => uast(
    type: "Synthetic",
    children: []
)

glimmer_opening_tag <- (glimmer_opening_tag) => uast(
    type: "Synthetic",
    children: []
)

glimmer_template <- (glimmer_template) => uast(
    type: "Synthetic",
    children: "glimmer_closing_tag", "glimmer_opening_tag"
)

identifier <- (identifier) => uast(
    type: "If",
    children: []
)

if_statement <- (if_statement) => uast(
    type: "If",
    children: "else_clause", "parenthesized_expression", "statement"
)

implements_clause <- (implements_clause) => uast(
    type: "Synthetic",
    children: []
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

import_alias <- (import_alias) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

import_attribute <- (import_attribute) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

import_clause <- (import_clause) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

import_require_clause <- (import_require_clause) => uast(
    type: "Import",
    roles: "Import"
    children: "string"
)

import_specifier <- (import_specifier) => uast(
    type: "If",
    children: "identifier", "string"
)

import_statement <- (import_statement) => uast(
    type: "Import",
    roles: "Import"
    children: "string"
)

index_signature <- (index_signature) => uast(
    type: "Index",
    roles: "Index"
    children: "adding_type_annotation", "identifier", "omitting_type_annotation", "opting_type_annotation", "type", "type_annotation"
)

index_type_query <- (index_type_query) => uast(
    type: "Index",
    roles: "Index"
    children: []
)

infer_type <- (infer_type) => uast(
    type: "Synthetic",
    children: []
)

instantiation_expression <- (instantiation_expression) => uast(
    type: "Synthetic",
    children: "identifier", "import", "member_expression", "subscript_expression", "type_arguments"
)

interface_body <- (interface_body) => uast(
    type: "Interface",
    roles: "Interface", "Declaration"
    children: []
)

interface_declaration <- (interface_declaration) => uast(
    type: "Interface",
    roles: "Interface", "Declaration"
    children: "interface_body", "type_identifier", "type_parameters"
)

internal_module <- (internal_module) => uast(
    type: "Module",
    roles: "Module"
    children: "identifier", "nested_identifier", "statement_block", "string"
)

intersection_type <- (intersection_type) => uast(
    type: "Synthetic",
    children: []
)

labeled_statement <- (labeled_statement) => uast(
    type: "Synthetic",
    children: "statement", "statement_identifier"
)

lexical_declaration <- (lexical_declaration) => uast(
    type: "Synthetic",
    children: "const", "let"
)

literal_type <- (literal_type) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

lookup_type <- (lookup_type) => uast(
    type: "Synthetic",
    children: []
)

mapped_type_clause <- (mapped_type_clause) => uast(
    type: "Synthetic",
    children: "type", "type_identifier"
)

member_expression <- (member_expression) => uast(
    type: "Synthetic",
    children: "expression", "import", "optional_chain", "private_property_identifier", "property_identifier"
)

meta_property <- (meta_property) => uast(
    type: "Property",
    roles: "Member"
    children: []
)

method_definition <- (method_definition) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "asserts_annotation", "computed_property_name", "formal_parameters", "number", "private_property_identifier", "property_identifier", "statement_block", "string", "type_annotation", "type_parameters", "type_predicate_annotation"
)

method_signature <- (method_signature) => uast(
    type: "Method",
    roles: "Function", "Declaration", "Member"
    children: "asserts_annotation", "computed_property_name", "formal_parameters", "number", "private_property_identifier", "property_identifier", "string", "type_annotation", "type_parameters", "type_predicate_annotation"
)

module <- (module) => uast(
    type: "Module",
    roles: "Module"
    children: "identifier", "nested_identifier", "statement_block", "string"
)

named_imports <- (named_imports) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

namespace_export <- (namespace_export) => uast(
    type: "Namespace",
    roles: "Module"
    children: []
)

namespace_import <- (namespace_import) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

nested_identifier <- (nested_identifier) => uast(
    type: "If",
    children: "identifier", "member_expression", "property_identifier"
)

nested_type_identifier <- (nested_type_identifier) => uast(
    type: "If",
    children: "identifier", "nested_identifier", "type_identifier"
)

new_expression <- (new_expression) => uast(
    type: "Synthetic",
    children: "arguments", "primary_expression", "type_arguments"
)

non_null_expression <- (non_null_expression) => uast(
    type: "Synthetic",
    children: []
)

object <- (object) => uast(
    type: "Synthetic",
    children: []
)

object_assignment_pattern <- (object_assignment_pattern) => uast(
    type: "Assignment",
    roles: "Assignment"
    children: "array_pattern", "expression", "object_pattern", "shorthand_property_identifier_pattern"
)

object_pattern <- (object_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

object_type <- (object_type) => uast(
    type: "Synthetic",
    children: []
)

omitting_type_annotation <- (omitting_type_annotation) => uast(
    type: "TypeAnnotation",
    roles: "Type"
    children: []
)

opting_type_annotation <- (opting_type_annotation) => uast(
    type: "TypeAnnotation",
    roles: "Type"
    children: []
)

optional_chain <- (optional_chain) => uast(
    type: "Synthetic",
    children: []
)

optional_parameter <- (optional_parameter) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: "decorator", "expression", "identifier", "pattern", "this", "type_annotation"
)

optional_type <- (optional_type) => uast(
    type: "Synthetic",
    children: []
)

override_modifier <- (override_modifier) => uast(
    type: "If",
    children: []
)

pair <- (pair) => uast(
    type: "Synthetic",
    children: "computed_property_name", "expression", "number", "private_property_identifier", "property_identifier", "string"
)

pair_pattern <- (pair_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: "assignment_pattern", "computed_property_name", "number", "pattern", "private_property_identifier", "property_identifier", "string"
)

parenthesized_expression <- (parenthesized_expression) => uast(
    type: "Synthetic",
    children: "type_annotation"
)

parenthesized_type <- (parenthesized_type) => uast(
    type: "Synthetic",
    children: []
)

predefined_type <- (predefined_type) => uast(
    type: "Synthetic",
    children: []
)

program <- (program) => uast(
    type: "Synthetic",
    children: []
)

property_signature <- (property_signature) => uast(
    type: "Property",
    roles: "Member"
    children: "computed_property_name", "number", "private_property_identifier", "property_identifier", "string", "type_annotation"
)

public_field_definition <- (public_field_definition) => uast(
    type: "Field",
    roles: "Member"
    children: "computed_property_name", "decorator", "expression", "number", "private_property_identifier", "property_identifier", "string", "type_annotation"
)

readonly_type <- (readonly_type) => uast(
    type: "Synthetic",
    children: []
)

regex <- (regex) => uast(
    type: "Synthetic",
    children: "regex_flags", "regex_pattern"
)

required_parameter <- (required_parameter) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: "decorator", "expression", "identifier", "pattern", "rest_pattern", "this", "type_annotation"
)

rest_pattern <- (rest_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

rest_type <- (rest_type) => uast(
    type: "Synthetic",
    children: []
)

return_statement <- (return_statement) => uast(
    type: "Return",
    roles: "Return"
    children: []
)

satisfies_expression <- (satisfies_expression) => uast(
    type: "Synthetic",
    children: []
)

sequence_expression <- (sequence_expression) => uast(
    type: "Synthetic",
    children: []
)

spread_element <- (spread_element) => uast(
    type: "Spread",
    roles: "Spread"
    children: []
)

statement_block <- (statement_block) => uast(
    type: "Block",
    roles: "Body"
    children: []
)

string <- (string) => uast(
    type: "Synthetic",
    children: []
)

subscript_expression <- (subscript_expression) => uast(
    type: "Synthetic",
    children: "expression", "number", "optional_chain", "predefined_type", "sequence_expression", "string"
)

switch_body <- (switch_body) => uast(
    type: "Switch",
    children: []
)

switch_case <- (switch_case) => uast(
    type: "Switch",
    children: "expression", "sequence_expression", "statement"
)

switch_default <- (switch_default) => uast(
    type: "Switch",
    children: "statement"
)

switch_statement <- (switch_statement) => uast(
    type: "Switch",
    children: "parenthesized_expression", "switch_body"
)

template_literal_type <- (template_literal_type) => uast(
    type: "Literal",
    roles: "Literal"
    children: []
)

template_string <- (template_string) => uast(
    type: "Synthetic",
    children: []
)

template_substitution <- (template_substitution) => uast(
    type: "Synthetic",
    children: []
)

template_type <- (template_type) => uast(
    type: "Synthetic",
    children: []
)

ternary_expression <- (ternary_expression) => uast(
    type: "Synthetic",
    children: "expression"
)

throw_statement <- (throw_statement) => uast(
    type: "Throw",
    roles: "Throw"
    children: []
)

try_statement <- (try_statement) => uast(
    type: "Try",
    roles: "Try"
    children: "catch_clause", "finally_clause", "statement_block"
)

tuple_type <- (tuple_type) => uast(
    type: "Tuple",
    children: []
)

type_alias_declaration <- (type_alias_declaration) => uast(
    type: "Synthetic",
    children: "type", "type_identifier", "type_parameters"
)

type_annotation <- (type_annotation) => uast(
    type: "TypeAnnotation",
    roles: "Type"
    children: []
)

type_arguments <- (type_arguments) => uast(
    type: "Synthetic",
    children: []
)

type_assertion <- (type_assertion) => uast(
    type: "Synthetic",
    children: []
)

type_parameter <- (type_parameter) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: "constraint", "default_type", "type_identifier"
)

type_parameters <- (type_parameters) => uast(
    type: "Parameter",
    roles: "Parameter"
    children: []
)

type_predicate <- (type_predicate) => uast(
    type: "Synthetic",
    children: "identifier", "this", "type"
)

type_predicate_annotation <- (type_predicate_annotation) => uast(
    type: "Synthetic",
    children: []
)

type_query <- (type_query) => uast(
    type: "Synthetic",
    children: []
)

unary_expression <- (unary_expression) => uast(
    type: "Synthetic",
    children: "delete", "expression", "number", "typeof", "void"
)

union_type <- (union_type) => uast(
    type: "Synthetic",
    children: []
)

update_expression <- (update_expression) => uast(
    type: "Synthetic",
    children: "expression"
)

variable_declaration <- (variable_declaration) => uast(
    type: "Variable",
    roles: "Variable", "Declaration"
    children: []
)

variable_declarator <- (variable_declarator) => uast(
    type: "Variable",
    roles: "Variable", "Declaration"
    children: "array_pattern", "expression", "identifier", "object_pattern", "type_annotation"
)

while_statement <- (while_statement) => uast(
    type: "Loop",
    roles: "Loop"
    children: "parenthesized_expression", "statement"
)

with_statement <- (with_statement) => uast(
    type: "Synthetic",
    children: "parenthesized_expression", "statement"
)

yield_expression <- (yield_expression) => uast(
    type: "Yield",
    roles: "Yield"
    children: []
)

abstract <- (abstract) => uast(
    type: "Synthetic",
    children: []
)

accessor <- (accessor) => uast(
    type: "Synthetic",
    children: []
)

any <- (any) => uast(
    type: "Synthetic",
    children: []
)

as <- (as) => uast(
    type: "Synthetic",
    children: []
)

assert <- (assert) => uast(
    type: "Synthetic",
    children: []
)

asserts <- (asserts) => uast(
    type: "Synthetic",
    children: []
)

async <- (async) => uast(
    type: "Synthetic",
    children: []
)

await <- (await) => uast(
    type: "Await",
    roles: "Await"
    children: []
)

boolean <- (boolean) => uast(
    type: "Synthetic",
    children: []
)

break <- (break) => uast(
    type: "Break",
    roles: "Break"
    children: []
)

case <- (case) => uast(
    type: "Case",
    roles: "Branch"
    children: []
)

catch <- (catch) => uast(
    type: "Catch",
    roles: "Catch"
    children: []
)

class <- (class) => uast(
    type: "Class",
    roles: "Class", "Declaration"
    children: []
)

comment <- (comment) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

const <- (const) => uast(
    type: "Synthetic",
    children: []
)

continue <- (continue) => uast(
    type: "Continue",
    roles: "Continue"
    children: []
)

debugger <- (debugger) => uast(
    type: "Synthetic",
    children: []
)

declare <- (declare) => uast(
    type: "Synthetic",
    children: []
)

default <- (default) => uast(
    type: "Synthetic",
    children: []
)

delete <- (delete) => uast(
    type: "Synthetic",
    children: []
)

do <- (do) => uast(
    type: "Synthetic",
    children: []
)

else <- (else) => uast(
    type: "Synthetic",
    children: []
)

enum <- (enum) => uast(
    type: "Enum",
    roles: "Enum", "Declaration"
    children: []
)

escape_sequence <- (escape_sequence) => uast(
    type: "Synthetic",
    children: []
)

export <- (export) => uast(
    type: "Synthetic",
    children: []
)

extends <- (extends) => uast(
    type: "Synthetic",
    children: []
)

false <- (false) => uast(
    type: "Synthetic",
    children: []
)

finally <- (finally) => uast(
    type: "Finally",
    roles: "Finally"
    children: []
)

for <- (for) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

from <- (from) => uast(
    type: "Synthetic",
    children: []
)

function <- (function) => uast(
    type: "Function",
    roles: "Function", "Declaration"
    children: []
)

get <- (get) => uast(
    type: "Synthetic",
    children: []
)

glimmer_template_tag_name <- (glimmer_template_tag_name) => uast(
    type: "Synthetic",
    children: []
)

global <- (global) => uast(
    type: "Synthetic",
    children: []
)

hash_bang_line <- (hash_bang_line) => uast(
    type: "Synthetic",
    children: []
)

html_comment <- (html_comment) => uast(
    type: "Comment",
    roles: "Comment"
    children: []
)

if <- (if) => uast(
    type: "If",
    children: []
)

implements <- (implements) => uast(
    type: "Synthetic",
    children: []
)

import <- (import) => uast(
    type: "Import",
    roles: "Import"
    children: []
)

in <- (in) => uast(
    type: "Synthetic",
    children: []
)

infer <- (infer) => uast(
    type: "Synthetic",
    children: []
)

instanceof <- (instanceof) => uast(
    type: "Synthetic",
    children: []
)

interface <- (interface) => uast(
    type: "Interface",
    roles: "Interface", "Declaration"
    children: []
)

is <- (is) => uast(
    type: "Synthetic",
    children: []
)

keyof <- (keyof) => uast(
    type: "Synthetic",
    children: []
)

let <- (let) => uast(
    type: "Synthetic",
    children: []
)

meta <- (meta) => uast(
    type: "Synthetic",
    children: []
)

module <- (module) => uast(
    type: "Module",
    roles: "Module"
    children: []
)

namespace <- (namespace) => uast(
    type: "Namespace",
    roles: "Module"
    children: []
)

never <- (never) => uast(
    type: "Synthetic",
    children: []
)

new <- (new) => uast(
    type: "Synthetic",
    children: []
)

null <- (null) => uast(
    type: "Synthetic",
    children: []
)

number <- (number) => uast(
    type: "Synthetic",
    children: []
)

number <- (number) => uast(
    type: "Synthetic",
    children: []
)

object <- (object) => uast(
    type: "Synthetic",
    children: []
)

of <- (of) => uast(
    type: "Synthetic",
    children: []
)

override <- (override) => uast(
    type: "Synthetic",
    children: []
)

private <- (private) => uast(
    type: "Synthetic",
    children: []
)

private_property_identifier <- (private_property_identifier) => uast(
    type: "If",
    children: []
)

property_identifier <- (property_identifier) => uast(
    type: "If",
    children: []
)

protected <- (protected) => uast(
    type: "Synthetic",
    children: []
)

public <- (public) => uast(
    type: "Synthetic",
    children: []
)

raw_text <- (raw_text) => uast(
    type: "Synthetic",
    children: []
)

readonly <- (readonly) => uast(
    type: "Synthetic",
    children: []
)

regex_flags <- (regex_flags) => uast(
    type: "Synthetic",
    children: []
)

regex_pattern <- (regex_pattern) => uast(
    type: "Pattern",
    roles: "Pattern"
    children: []
)

require <- (require) => uast(
    type: "Synthetic",
    children: []
)

return <- (return) => uast(
    type: "Return",
    roles: "Return"
    children: []
)

satisfies <- (satisfies) => uast(
    type: "Synthetic",
    children: []
)

set <- (set) => uast(
    type: "Set",
    children: []
)

shorthand_property_identifier <- (shorthand_property_identifier) => uast(
    type: "If",
    children: []
)

shorthand_property_identifier_pattern <- (shorthand_property_identifier_pattern) => uast(
    type: "If",
    children: []
)

statement_identifier <- (statement_identifier) => uast(
    type: "If",
    children: []
)

static <- (static) => uast(
    type: "Synthetic",
    children: []
)

string <- (string) => uast(
    type: "Synthetic",
    children: []
)

string_fragment <- (string_fragment) => uast(
    type: "Synthetic",
    children: []
)

super <- (super) => uast(
    type: "Synthetic",
    children: []
)

switch <- (switch) => uast(
    type: "Switch",
    children: []
)

symbol <- (symbol) => uast(
    type: "Synthetic",
    children: []
)

target <- (target) => uast(
    type: "Synthetic",
    children: []
)

this <- (this) => uast(
    type: "Synthetic",
    children: []
)

this_type <- (this_type) => uast(
    type: "Synthetic",
    children: []
)

throw <- (throw) => uast(
    type: "Throw",
    roles: "Throw"
    children: []
)

true <- (true) => uast(
    type: "Synthetic",
    children: []
)

try <- (try) => uast(
    type: "Try",
    roles: "Try"
    children: []
)

type <- (type) => uast(
    type: "Synthetic",
    children: []
)

type_identifier <- (type_identifier) => uast(
    type: "If",
    children: []
)

typeof <- (typeof) => uast(
    type: "Synthetic",
    children: []
)

undefined <- (undefined) => uast(
    type: "Synthetic",
    children: []
)

unknown <- (unknown) => uast(
    type: "Synthetic",
    children: []
)

using <- (using) => uast(
    type: "Synthetic",
    children: []
)

var <- (var) => uast(
    type: "Synthetic",
    children: []
)

void <- (void) => uast(
    type: "Synthetic",
    children: []
)

while <- (while) => uast(
    type: "Loop",
    roles: "Loop"
    children: []
)

with <- (with) => uast(
    type: "Synthetic",
    children: []
)

yield <- (yield) => uast(
    type: "Yield",
    roles: "Yield"
    children: []
)

