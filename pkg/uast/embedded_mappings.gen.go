// Code generated by scripts/precompile.go. DO NOT EDIT.

package uast

import (
	"fmt"
	"strings"
	"github.com/dmytrogajewski/hercules/pkg/uast/pkg/mapping"
)

// embeddedMappingsData contains all pre-compiled UAST mappings
var embeddedMappingsData = []PrecompiledMapping{

	{
		Language: "ansible",
		Extensions: []string{

			".yml",

			".yaml",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "alias",
				Pattern: "(alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "anchor",
				Pattern: "(anchor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "block_mapping",
				Pattern: "(block_mapping)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_mapping_pair",
				Pattern: "(block_mapping_pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"block_node",

						"flow_node",

					},
					
				},
				
			},

			{
				Name: "block_node",
				Pattern: "(block_node)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_scalar",
				Pattern: "(block_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_sequence",
				Pattern: "(block_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_sequence_item",
				Pattern: "(block_sequence_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "document",
				Pattern: "(document)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "double_quote_scalar",
				Pattern: "(double_quote_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "flow_mapping",
				Pattern: "(flow_mapping)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "flow_node",
				Pattern: "(flow_node)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "flow_pair",
				Pattern: "(flow_pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"flow_node",

					},
					
				},
				
			},

			{
				Name: "flow_sequence",
				Pattern: "(flow_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "plain_scalar",
				Pattern: "(plain_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "reserved_directive",
				Pattern: "(reserved_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "single_quote_scalar",
				Pattern: "(single_quote_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "stream",
				Pattern: "(stream)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "tag_directive",
				Pattern: "(tag_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "yaml_directive",
				Pattern: "(yaml_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "alias_name",
				Pattern: "(alias_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "anchor_name",
				Pattern: "(anchor_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "boolean_scalar",
				Pattern: "(boolean_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "directive_name",
				Pattern: "(directive_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "directive_parameter",
				Pattern: "(directive_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "float_scalar",
				Pattern: "(float_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "integer_scalar",
				Pattern: "(integer_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "null_scalar",
				Pattern: "(null_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_scalar",
				Pattern: "(string_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "tag",
				Pattern: "(tag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "tag_handle",
				Pattern: "(tag_handle)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "tag_prefix",
				Pattern: "(tag_prefix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "yaml_version",
				Pattern: "(yaml_version)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

		},
	},

	{
		Language: "bash",
		Extensions: []string{

			".sh",

			".bash",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "_expression",
				Pattern: "(_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_primary_expression",
				Pattern: "(_primary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_statement",
				Pattern: "(_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "arithmetic_expansion",
				Pattern: "(arithmetic_expansion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "array",
				Pattern: "(array)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_expression",

						"command_substitution",

						"expansion",

						"extglob_pattern",

						"number",

						"regex",

						"simple_expansion",

						"string",

						"subscript",

						"test_operator",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "brace_expression",
				Pattern: "(brace_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "c_style_for_statement",
				Pattern: "(c_style_for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"binary_expression",

						"command_substitution",

						"compound_statement",

						"do_group",

						"expansion",

						"number",

						"parenthesized_expression",

						"postfix_expression",

						"simple_expansion",

						"string",

						"unary_expression",

						"variable_assignment",

						"word",

					},
					
				},
				
			},

			{
				Name: "case_item",
				Pattern: "(case_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"_primary_expression",

						"concatenation",

						"extglob_pattern",

					},
					
				},
				
			},

			{
				Name: "case_statement",
				Pattern: "(case_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"_primary_expression",

						"concatenation",

					},
					
				},
				
			},

			{
				Name: "command",
				Pattern: "(command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_primary_expression",

						"command_name",

						"concatenation",

						"file_redirect",

						"herestring_redirect",

						"regex",

					},
					
				},
				
			},

			{
				Name: "command_name",
				Pattern: "(command_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "command_substitution",
				Pattern: "(command_substitution)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"file_redirect",

					},
					
				},
				
			},

			{
				Name: "compound_statement",
				Pattern: "(compound_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "concatenation",
				Pattern: "(concatenation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "declaration_command",
				Pattern: "(declaration_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "do_group",
				Pattern: "(do_group)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "elif_clause",
				Pattern: "(elif_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else_clause",
				Pattern: "(else_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expansion",
				Pattern: "(expansion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"A",

						"E",

						"K",

						"L",

						"P",

						"Q",

						"U",

						"a",

						"k",

						"u",

					},
					
				},
				
			},

			{
				Name: "file_redirect",
				Pattern: "(file_redirect)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_primary_expression",

						"concatenation",

						"file_descriptor",

					},
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"_primary_expression",

						"concatenation",

						"do_group",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "function_definition",
				Pattern: "(function_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"compound_statement",

						"file_redirect",

						"herestring_redirect",

						"if_statement",

						"subshell",

						"test_command",

						"word",

					},
					
				},
				
			},

			{
				Name: "heredoc_body",
				Pattern: "(heredoc_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "heredoc_redirect",
				Pattern: "(heredoc_redirect)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_primary_expression",

						"_statement",

						"concatenation",

						"file_descriptor",

						"file_redirect",

						"herestring_redirect",

					},
					
				},
				
			},

			{
				Name: "herestring_redirect",
				Pattern: "(herestring_redirect)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"file_descriptor",

					},
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"_statement",

					},
					
				},
				
			},

			{
				Name: "list",
				Pattern: "(list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					Roles: []string{

						"Condition",

					},
					
					
				},
				
			},

			{
				Name: "negated_command",
				Pattern: "(negated_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "number",
				Pattern: "(number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pipeline",
				Pattern: "(pipeline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "postfix_expression",
				Pattern: "(postfix_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "process_substitution",
				Pattern: "(process_substitution)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "program",
				Pattern: "(program)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "redirected_statement",
				Pattern: "(redirected_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "File",
					Token: "self",
					
					Children: []string{

						"_statement",

						"file_redirect",

						"heredoc_redirect",

						"herestring_redirect",

					},
					
				},
				
			},

			{
				Name: "simple_expansion",
				Pattern: "(simple_expansion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "subscript",
				Pattern: "(subscript)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_primary_expression",

						"binary_expression",

						"concatenation",

						"parenthesized_expression",

						"unary_expression",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "subshell",
				Pattern: "(subshell)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ternary_expression",
				Pattern: "(ternary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"command_substitution",

						"expansion",

						"number",

						"simple_expansion",

						"string",

						"subscript",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "test_command",
				Pattern: "(test_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "translated_string",
				Pattern: "(translated_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unary_expression",
				Pattern: "(unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"test_operator",

					},
					
				},
				
			},

			{
				Name: "unset_command",
				Pattern: "(unset_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "variable_assignment",
				Pattern: "(variable_assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"_primary_expression",

						"array",

						"binary_expression",

						"concatenation",

						"parenthesized_expression",

						"postfix_expression",

						"subscript",

						"unary_expression",

						"variable_assignment",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "variable_assignments",
				Pattern: "(variable_assignments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"_statement",

						"do_group",

					},
					
				},
				
			},

			{
				Name: "word",
				Pattern: "(word)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "A",
				Pattern: "(A)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "E",
				Pattern: "(E)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "K",
				Pattern: "(K)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "L",
				Pattern: "(L)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "P",
				Pattern: "(P)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "Q",
				Pattern: "(Q)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "U",
				Pattern: "(U)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "a",
				Pattern: "(a)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ansi_c_string",
				Pattern: "(ansi_c_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "declare",
				Pattern: "(declare)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "done",
				Pattern: "(done)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "elif",
				Pattern: "(elif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "esac",
				Pattern: "(esac)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "export",
				Pattern: "(export)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extglob_pattern",
				Pattern: "(extglob_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "fi",
				Pattern: "(fi)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "file_descriptor",
				Pattern: "(file_descriptor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "function",
				Pattern: "(function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "heredoc_content",
				Pattern: "(heredoc_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "heredoc_end",
				Pattern: "(heredoc_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "heredoc_start",
				Pattern: "(heredoc_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "k",
				Pattern: "(k)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "local",
				Pattern: "(local)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "raw_string",
				Pattern: "(raw_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "readonly",
				Pattern: "(readonly)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "regex",
				Pattern: "(regex)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "select",
				Pattern: "(select)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "special_variable_name",
				Pattern: "(special_variable_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "string_content",
				Pattern: "(string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "test_operator",
				Pattern: "(test_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "then",
				Pattern: "(then)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "typeset",
				Pattern: "(typeset)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "u",
				Pattern: "(u)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unset",
				Pattern: "(unset)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unsetenv",
				Pattern: "(unsetenv)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "until",
				Pattern: "(until)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "variable_name",
				Pattern: "(variable_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "c",
		Extensions: []string{

			".c",

			".h",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "_abstract_declarator",
				Pattern: "(_abstract_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_declarator",
				Pattern: "(_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_field_declarator",
				Pattern: "(_field_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "_type_declarator",
				Pattern: "(_type_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "expression",
				Pattern: "(expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "statement",
				Pattern: "(statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_specifier",
				Pattern: "(type_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "abstract_array_declarator",
				Pattern: "(abstract_array_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_abstract_declarator",

						"expression",

					},
					
				},
				
			},

			{
				Name: "abstract_function_declarator",
				Pattern: "(abstract_function_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"_abstract_declarator",

						"parameter_list",

					},
					
				},
				
			},

			{
				Name: "abstract_parenthesized_declarator",
				Pattern: "(abstract_parenthesized_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "abstract_pointer_declarator",
				Pattern: "(abstract_pointer_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_abstract_declarator",

					},
					
				},
				
			},

			{
				Name: "alignas_qualifier",
				Pattern: "(alignas_qualifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "alignof_expression",
				Pattern: "(alignof_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"type_descriptor",

					},
					
				},
				
			},

			{
				Name: "argument_list",
				Pattern: "(argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "array_declarator",
				Pattern: "(array_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_declarator",

						"_field_declarator",

						"_type_declarator",

						"expression",

					},
					
				},
				
			},

			{
				Name: "assignment_expression",
				Pattern: "(assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"call_expression",

						"expression",

						"field_expression",

						"identifier",

						"parenthesized_expression",

						"pointer_expression",

						"subscript_expression",

					},
					
				},
				
			},

			{
				Name: "attribute",
				Pattern: "(attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "attribute_declaration",
				Pattern: "(attribute_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "attribute_specifier",
				Pattern: "(attribute_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "attributed_declarator",
				Pattern: "(attributed_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "attributed_statement",
				Pattern: "(attributed_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

						"preproc_defined",

					},
					
				},
				
			},

			{
				Name: "bitfield_clause",
				Pattern: "(bitfield_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "break_statement",
				Pattern: "(break_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "call_expression",
				Pattern: "(call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"argument_list",

						"expression",

					},
					
				},
				
			},

			{
				Name: "case_statement",
				Pattern: "(case_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Call",

						"Branch",

					},
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "cast_expression",
				Pattern: "(cast_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					
					
					Children: []string{

						"expression",

						"type_descriptor",

					},
					
				},
				
			},

			{
				Name: "char_literal",
				Pattern: "(char_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "comma_expression",
				Pattern: "(comma_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"comma_expression",

						"expression",

					},
					
				},
				
			},

			{
				Name: "compound_literal_expression",
				Pattern: "(compound_literal_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"initializer_list",

						"type_descriptor",

					},
					
				},
				
			},

			{
				Name: "compound_statement",
				Pattern: "(compound_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "concatenated_string",
				Pattern: "(concatenated_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "conditional_expression",
				Pattern: "(conditional_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"comma_expression",

						"expression",

					},
					
				},
				
			},

			{
				Name: "continue_statement",
				Pattern: "(continue_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "declaration",
				Pattern: "(declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"array_declarator",

						"attributed_declarator",

						"function_declarator",

						"gnu_asm_expression",

						"identifier",

						"init_declarator",

						"ms_call_modifier",

						"parenthesized_declarator",

						"pointer_declarator",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "declaration_list",
				Pattern: "(declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "do_statement",
				Pattern: "(do_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "else_clause",
				Pattern: "(else_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum_specifier",
				Pattern: "(enum_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"enumerator_list",

						"primitive_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "enumerator",
				Pattern: "(enumerator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"expression",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "enumerator_list",
				Pattern: "(enumerator_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "expression_statement",
				Pattern: "(expression_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "extension_expression",
				Pattern: "(extension_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "field_declaration",
				Pattern: "(field_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"_field_declarator",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "field_declaration_list",
				Pattern: "(field_declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "field_designator",
				Pattern: "(field_designator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "field_expression",
				Pattern: "(field_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"expression",

						"field_identifier",

					},
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"comma_expression",

						"declaration",

						"expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "function_declarator",
				Pattern: "(function_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"_declarator",

						"_field_declarator",

						"_type_declarator",

						"parameter_list",

					},
					
				},
				
			},

			{
				Name: "function_definition",
				Pattern: "(function_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"_declarator",

						"compound_statement",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "generic_expression",
				Pattern: "(generic_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "gnu_asm_clobber_list",
				Pattern: "(gnu_asm_clobber_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"concatenated_string",

						"string_literal",

					},
					
				},
				
			},

			{
				Name: "gnu_asm_expression",
				Pattern: "(gnu_asm_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"concatenated_string",

						"gnu_asm_clobber_list",

						"gnu_asm_goto_list",

						"gnu_asm_input_operand_list",

						"gnu_asm_output_operand_list",

						"string_literal",

					},
					
				},
				
			},

			{
				Name: "gnu_asm_goto_list",
				Pattern: "(gnu_asm_goto_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "gnu_asm_input_operand",
				Pattern: "(gnu_asm_input_operand)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"identifier",

						"string_literal",

					},
					
				},
				
			},

			{
				Name: "gnu_asm_input_operand_list",
				Pattern: "(gnu_asm_input_operand_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"gnu_asm_input_operand",

					},
					
				},
				
			},

			{
				Name: "gnu_asm_output_operand",
				Pattern: "(gnu_asm_output_operand)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"identifier",

						"string_literal",

					},
					
				},
				
			},

			{
				Name: "gnu_asm_output_operand_list",
				Pattern: "(gnu_asm_output_operand_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"gnu_asm_output_operand",

					},
					
				},
				
			},

			{
				Name: "gnu_asm_qualifier",
				Pattern: "(gnu_asm_qualifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "goto_statement",
				Pattern: "(goto_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"statement_identifier",

					},
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					Roles: []string{

						"Condition",

					},
					Children: []string{

						"else_clause",

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "init_declarator",
				Pattern: "(init_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_declarator",

						"expression",

						"initializer_list",

					},
					
				},
				
			},

			{
				Name: "initializer_list",
				Pattern: "(initializer_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "initializer_pair",
				Pattern: "(initializer_pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"expression",

						"field_designator",

						"field_identifier",

						"initializer_list",

						"subscript_designator",

						"subscript_range_designator",

					},
					
				},
				
			},

			{
				Name: "labeled_statement",
				Pattern: "(labeled_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"statement_identifier",

					},
					
				},
				
			},

			{
				Name: "linkage_specification",
				Pattern: "(linkage_specification)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"declaration",

						"declaration_list",

						"function_definition",

						"string_literal",

					},
					
				},
				
			},

			{
				Name: "macro_type_specifier",
				Pattern: "(macro_type_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

						"type_descriptor",

					},
					
				},
				
			},

			{
				Name: "ms_based_modifier",
				Pattern: "(ms_based_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ms_call_modifier",
				Pattern: "(ms_call_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ms_declspec_modifier",
				Pattern: "(ms_declspec_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ms_pointer_modifier",
				Pattern: "(ms_pointer_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ms_unaligned_ptr_modifier",
				Pattern: "(ms_unaligned_ptr_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "null",
				Pattern: "(null)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "offsetof_expression",
				Pattern: "(offsetof_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					Children: []string{

						"field_identifier",

						"type_descriptor",

					},
					
				},
				
			},

			{
				Name: "parameter_declaration",
				Pattern: "(parameter_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_abstract_declarator",

						"_declarator",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "parameter_list",
				Pattern: "(parameter_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parenthesized_declarator",
				Pattern: "(parenthesized_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pointer_declarator",
				Pattern: "(pointer_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_declarator",

						"_field_declarator",

						"_type_declarator",

					},
					
				},
				
			},

			{
				Name: "pointer_expression",
				Pattern: "(pointer_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "preproc_call",
				Pattern: "(preproc_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"preproc_arg",

						"preproc_directive",

					},
					
				},
				
			},

			{
				Name: "preproc_def",
				Pattern: "(preproc_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					Children: []string{

						"identifier",

						"preproc_arg",

					},
					
				},
				
			},

			{
				Name: "preproc_defined",
				Pattern: "(preproc_defined)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "preproc_elif",
				Pattern: "(preproc_elif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"binary_expression",

						"call_expression",

						"char_literal",

						"identifier",

						"number_literal",

						"parenthesized_expression",

						"preproc_defined",

						"preproc_elif",

						"preproc_elifdef",

						"preproc_else",

						"unary_expression",

					},
					
				},
				
			},

			{
				Name: "preproc_elifdef",
				Pattern: "(preproc_elifdef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"identifier",

						"preproc_elif",

						"preproc_elifdef",

						"preproc_else",

					},
					
				},
				
			},

			{
				Name: "preproc_else",
				Pattern: "(preproc_else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "preproc_function_def",
				Pattern: "(preproc_function_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"identifier",

						"preproc_arg",

						"preproc_params",

					},
					
				},
				
			},

			{
				Name: "preproc_if",
				Pattern: "(preproc_if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"binary_expression",

						"call_expression",

						"char_literal",

						"identifier",

						"number_literal",

						"parenthesized_expression",

						"preproc_defined",

						"preproc_elif",

						"preproc_elifdef",

						"preproc_else",

						"unary_expression",

					},
					
				},
				
			},

			{
				Name: "preproc_ifdef",
				Pattern: "(preproc_ifdef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"identifier",

						"preproc_elif",

						"preproc_elifdef",

						"preproc_else",

					},
					
				},
				
			},

			{
				Name: "preproc_include",
				Pattern: "(preproc_include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"call_expression",

						"identifier",

						"string_literal",

						"system_lib_string",

					},
					
				},
				
			},

			{
				Name: "preproc_params",
				Pattern: "(preproc_params)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return_statement",
				Pattern: "(return_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "seh_except_clause",
				Pattern: "(seh_except_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"compound_statement",

						"parenthesized_expression",

					},
					
				},
				
			},

			{
				Name: "seh_finally_clause",
				Pattern: "(seh_finally_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					Children: []string{

						"compound_statement",

					},
					
				},
				
			},

			{
				Name: "seh_leave_statement",
				Pattern: "(seh_leave_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "seh_try_statement",
				Pattern: "(seh_try_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					Children: []string{

						"compound_statement",

					},
					
				},
				
			},

			{
				Name: "sized_type_specifier",
				Pattern: "(sized_type_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"primitive_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "sizeof_expression",
				Pattern: "(sizeof_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

						"type_descriptor",

					},
					
				},
				
			},

			{
				Name: "storage_class_specifier",
				Pattern: "(storage_class_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "string_literal",
				Pattern: "(string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "struct_specifier",
				Pattern: "(struct_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"field_declaration_list",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "subscript_designator",
				Pattern: "(subscript_designator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "subscript_expression",
				Pattern: "(subscript_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "subscript_range_designator",
				Pattern: "(subscript_range_designator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "switch_statement",
				Pattern: "(switch_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					Children: []string{

						"compound_statement",

						"parenthesized_expression",

					},
					
				},
				
			},

			{
				Name: "translation_unit",
				Pattern: "(translation_unit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "type_definition",
				Pattern: "(type_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_type_declarator",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "type_descriptor",
				Pattern: "(type_descriptor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_abstract_declarator",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "type_qualifier",
				Pattern: "(type_qualifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "unary_expression",
				Pattern: "(unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

						"preproc_defined",

					},
					
				},
				
			},

			{
				Name: "union_specifier",
				Pattern: "(union_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"field_declaration_list",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "update_expression",
				Pattern: "(update_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "variadic_parameter",
				Pattern: "(variadic_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Loop",

					},
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "NULL",
				Pattern: "(NULL)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_Alignas",
				Pattern: "(_Alignas)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_Alignof",
				Pattern: "(_Alignof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_Atomic",
				Pattern: "(_Atomic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_Generic",
				Pattern: "(_Generic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_Nonnull",
				Pattern: "(_Nonnull)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_Noreturn",
				Pattern: "(_Noreturn)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "__alignof",
				Pattern: "(__alignof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__alignof__",
				Pattern: "(__alignof__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__asm",
				Pattern: "(__asm)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__asm__",
				Pattern: "(__asm__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__attribute",
				Pattern: "(__attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "__attribute__",
				Pattern: "(__attribute__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "__based",
				Pattern: "(__based)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__cdecl",
				Pattern: "(__cdecl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__clrcall",
				Pattern: "(__clrcall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "__declspec",
				Pattern: "(__declspec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__except",
				Pattern: "(__except)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__extension__",
				Pattern: "(__extension__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__fastcall",
				Pattern: "(__fastcall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "__finally",
				Pattern: "(__finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "__forceinline",
				Pattern: "(__forceinline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "__inline",
				Pattern: "(__inline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__inline__",
				Pattern: "(__inline__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__leave",
				Pattern: "(__leave)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__restrict__",
				Pattern: "(__restrict__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__stdcall",
				Pattern: "(__stdcall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "__thiscall",
				Pattern: "(__thiscall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "__thread",
				Pattern: "(__thread)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__try",
				Pattern: "(__try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "__unaligned",
				Pattern: "(__unaligned)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__vectorcall",
				Pattern: "(__vectorcall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "__volatile__",
				Pattern: "(__volatile__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_alignof",
				Pattern: "(_alignof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_unaligned",
				Pattern: "(_unaligned)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "alignas",
				Pattern: "(alignas)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "alignof",
				Pattern: "(alignof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "asm",
				Pattern: "(asm)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "auto",
				Pattern: "(auto)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "character",
				Pattern: "(character)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "const",
				Pattern: "(const)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "constexpr",
				Pattern: "(constexpr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "defined",
				Pattern: "(defined)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "extern",
				Pattern: "(extern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field_identifier",
				Pattern: "(field_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Reference",

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "goto",
				Pattern: "(goto)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "inline",
				Pattern: "(inline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "long",
				Pattern: "(long)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ms_restrict_modifier",
				Pattern: "(ms_restrict_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ms_signed_ptr_modifier",
				Pattern: "(ms_signed_ptr_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "ms_unsigned_ptr_modifier",
				Pattern: "(ms_unsigned_ptr_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "noreturn",
				Pattern: "(noreturn)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "nullptr",
				Pattern: "(nullptr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "number_literal",
				Pattern: "(number_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "offsetof",
				Pattern: "(offsetof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "preproc_arg",
				Pattern: "(preproc_arg)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "preproc_directive",
				Pattern: "(preproc_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "primitive_type",
				Pattern: "(primitive_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "register",
				Pattern: "(register)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "restrict",
				Pattern: "(restrict)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "short",
				Pattern: "(short)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "signed",
				Pattern: "(signed)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "sizeof",
				Pattern: "(sizeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "statement_identifier",
				Pattern: "(statement_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "static",
				Pattern: "(static)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string_content",
				Pattern: "(string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "struct",
				Pattern: "(struct)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "switch",
				Pattern: "(switch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "system_lib_string",
				Pattern: "(system_lib_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "thread_local",
				Pattern: "(thread_local)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_identifier",
				Pattern: "(type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "typedef",
				Pattern: "(typedef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "union",
				Pattern: "(union)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unsigned",
				Pattern: "(unsigned)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "volatile",
				Pattern: "(volatile)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "c_sharp",
		Extensions: []string{

			".cs",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "declaration",
				Pattern: "(declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expression",
				Pattern: "(expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "literal",
				Pattern: "(literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "lvalue_expression",
				Pattern: "(lvalue_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "non_lvalue_expression",
				Pattern: "(non_lvalue_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pattern",
				Pattern: "(pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "statement",
				Pattern: "(statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_declaration",
				Pattern: "(type_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "accessor_declaration",
				Pattern: "(accessor_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "child:identifier",
					
					Children: []string{

						"add",

						"arrow_expression_clause",

						"block",

						"get",

						"identifier",

						"init",

						"remove",

						"set",

					},
					
				},
				
			},

			{
				Name: "accessor_list",
				Pattern: "(accessor_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "alias_qualified_name",
				Pattern: "(alias_qualified_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"generic_name",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "and_pattern",
				Pattern: "(and_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"and",

						"pattern",

					},
					
				},
				
			},

			{
				Name: "anonymous_method_expression",
				Pattern: "(anonymous_method_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"parameter_list",

					},
					
				},
				
			},

			{
				Name: "anonymous_object_creation_expression",
				Pattern: "(anonymous_object_creation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "argument",
				Pattern: "(argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "argument_list",
				Pattern: "(argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "array_creation_expression",
				Pattern: "(array_creation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"array_type",

					},
					
				},
				
			},

			{
				Name: "array_rank_specifier",
				Pattern: "(array_rank_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "array_type",
				Pattern: "(array_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"alias_qualified_name",

						"array_rank_specifier",

						"array_type",

						"function_pointer_type",

						"generic_name",

						"identifier",

						"nullable_type",

						"pointer_type",

						"predefined_type",

						"qualified_name",

						"tuple_type",

					},
					
				},
				
			},

			{
				Name: "arrow_expression_clause",
				Pattern: "(arrow_expression_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "as_expression",
				Pattern: "(as_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"as",

						"expression",

						"type",

					},
					
				},
				
			},

			{
				Name: "assignment_expression",
				Pattern: "(assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"expression",

						"lvalue_expression",

					},
					
				},
				
			},

			{
				Name: "attribute",
				Pattern: "(attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					Children: []string{

						"alias_qualified_name",

						"generic_name",

						"identifier",

						"qualified_name",

					},
					
				},
				
			},

			{
				Name: "attribute_argument",
				Pattern: "(attribute_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "attribute_argument_list",
				Pattern: "(attribute_argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "attribute_list",
				Pattern: "(attribute_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "attribute_target_specifier",
				Pattern: "(attribute_target_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "await_expression",
				Pattern: "(await_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "base_list",
				Pattern: "(base_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"binary_expression",

						"boolean_literal",

						"character_literal",

						"expression",

						"identifier",

						"integer_literal",

						"parenthesized_expression",

						"unary_expression",

					},
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Operator",

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "boolean_literal",
				Pattern: "(boolean_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "bracketed_argument_list",
				Pattern: "(bracketed_argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "bracketed_parameter_list",
				Pattern: "(bracketed_parameter_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"array_type",

						"identifier",

						"nullable_type",

					},
					
				},
				
			},

			{
				Name: "break_statement",
				Pattern: "(break_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "calling_convention",
				Pattern: "(calling_convention)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "cast_expression",
				Pattern: "(cast_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					Token: "self",
					
					Children: []string{

						"expression",

						"type",

					},
					
				},
				
			},

			{
				Name: "catch_clause",
				Pattern: "(catch_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "catch_declaration",
				Pattern: "(catch_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					Token: "self",
					Roles: []string{

						"Catch",

					},
					Children: []string{

						"identifier",

						"type",

					},
					
				},
				
			},

			{
				Name: "catch_filter_clause",
				Pattern: "(catch_filter_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "character_literal",
				Pattern: "(character_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "checked_expression",
				Pattern: "(checked_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "checked_statement",
				Pattern: "(checked_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "class_declaration",
				Pattern: "(class_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"declaration_list",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "compilation_unit",
				Pattern: "(compilation_unit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "child:identifier",
					Roles: []string{

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "conditional_access_expression",
				Pattern: "(conditional_access_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "conditional_expression",
				Pattern: "(conditional_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "constant_pattern",
				Pattern: "(constant_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "constructor_constraint",
				Pattern: "(constructor_constraint)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "constructor_declaration",
				Pattern: "(constructor_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"arrow_expression_clause",

						"block",

						"identifier",

						"parameter_list",

					},
					
				},
				
			},

			{
				Name: "constructor_initializer",
				Pattern: "(constructor_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "continue_statement",
				Pattern: "(continue_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "conversion_operator_declaration",
				Pattern: "(conversion_operator_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					Children: []string{

						"arrow_expression_clause",

						"block",

						"parameter_list",

						"type",

					},
					
				},
				
			},

			{
				Name: "declaration_expression",
				Pattern: "(declaration_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

						"type",

					},
					
				},
				
			},

			{
				Name: "declaration_list",
				Pattern: "(declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "declaration_pattern",
				Pattern: "(declaration_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"identifier",

						"type",

					},
					
				},
				
			},

			{
				Name: "default_expression",
				Pattern: "(default_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					Children: []string{

						"type",

					},
					
				},
				
			},

			{
				Name: "delegate_declaration",
				Pattern: "(delegate_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

						"parameter_list",

						"type",

						"type_parameter_list",

					},
					
				},
				
			},

			{
				Name: "destructor_declaration",
				Pattern: "(destructor_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"arrow_expression_clause",

						"block",

						"identifier",

						"parameter_list",

					},
					
				},
				
			},

			{
				Name: "do_statement",
				Pattern: "(do_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "element_access_expression",
				Pattern: "(element_access_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"bracketed_argument_list",

						"expression",

					},
					
				},
				
			},

			{
				Name: "element_binding_expression",
				Pattern: "(element_binding_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "empty_statement",
				Pattern: "(empty_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum_declaration",
				Pattern: "(enum_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"enum_member_declaration_list",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "enum_member_declaration",
				Pattern: "(enum_member_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "child:identifier",
					Roles: []string{

						"Declaration",

						"Enum",

						"Declaration",

					},
					Children: []string{

						"expression",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "enum_member_declaration_list",
				Pattern: "(enum_member_declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "event_declaration",
				Pattern: "(event_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"accessor_list",

						"identifier",

						"type",

					},
					
				},
				
			},

			{
				Name: "event_field_declaration",
				Pattern: "(event_field_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "explicit_interface_specifier",
				Pattern: "(explicit_interface_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "expression_statement",
				Pattern: "(expression_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extern_alias_directive",
				Pattern: "(extern_alias_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "field_declaration",
				Pattern: "(field_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "file_scoped_namespace_declaration",
				Pattern: "(file_scoped_namespace_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"alias_qualified_name",

						"generic_name",

						"identifier",

						"qualified_name",

					},
					
				},
				
			},

			{
				Name: "finally_clause",
				Pattern: "(finally_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "fixed_statement",
				Pattern: "(fixed_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"expression",

						"statement",

						"variable_declaration",

					},
					
				},
				
			},

			{
				Name: "foreach_statement",
				Pattern: "(foreach_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

						"Loop",

					},
					Children: []string{

						"expression",

						"identifier",

						"statement",

						"tuple_pattern",

						"type",

					},
					
				},
				
			},

			{
				Name: "from_clause",
				Pattern: "(from_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

						"type",

					},
					
				},
				
			},

			{
				Name: "function_pointer_parameter",
				Pattern: "(function_pointer_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"alias_qualified_name",

						"array_type",

						"function_pointer_type",

						"generic_name",

						"identifier",

						"implicit_type",

						"nullable_type",

						"pointer_type",

						"predefined_type",

						"qualified_name",

						"tuple_type",

					},
					
				},
				
			},

			{
				Name: "function_pointer_type",
				Pattern: "(function_pointer_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"type",

					},
					
				},
				
			},

			{
				Name: "generic_name",
				Pattern: "(generic_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "global_attribute",
				Pattern: "(global_attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "global_statement",
				Pattern: "(global_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "goto_statement",
				Pattern: "(goto_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "group_clause",
				Pattern: "(group_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					Children: []string{

						"expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "implicit_array_creation_expression",
				Pattern: "(implicit_array_creation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "implicit_object_creation_expression",
				Pattern: "(implicit_object_creation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "implicit_parameter",
				Pattern: "(implicit_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "implicit_stackalloc_expression",
				Pattern: "(implicit_stackalloc_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "implicit_type",
				Pattern: "(implicit_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "indexer_declaration",
				Pattern: "(indexer_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					Token: "self",
					Roles: []string{

						"Index",

					},
					Children: []string{

						"accessor_list",

						"arrow_expression_clause",

						"bracketed_parameter_list",

						"type",

					},
					
				},
				
			},

			{
				Name: "initializer_expression",
				Pattern: "(initializer_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "interface_declaration",
				Pattern: "(interface_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					Children: []string{

						"declaration_list",

						"identifier",

						"type_parameter_list",

					},
					
				},
				
			},

			{
				Name: "interpolated_string_expression",
				Pattern: "(interpolated_string_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "interpolation",
				Pattern: "(interpolation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "interpolation_alignment_clause",
				Pattern: "(interpolation_alignment_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "interpolation_format_clause",
				Pattern: "(interpolation_format_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "invocation_expression",
				Pattern: "(invocation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"argument_list",

						"expression",

					},
					
				},
				
			},

			{
				Name: "is_expression",
				Pattern: "(is_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

						"is",

						"type",

					},
					
				},
				
			},

			{
				Name: "is_pattern_expression",
				Pattern: "(is_pattern_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"expression",

						"pattern",

					},
					
				},
				
			},

			{
				Name: "join_clause",
				Pattern: "(join_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"type",

					},
					
				},
				
			},

			{
				Name: "join_into_clause",
				Pattern: "(join_into_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "labeled_statement",
				Pattern: "(labeled_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "lambda_expression",
				Pattern: "(lambda_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					
					Roles: []string{

						"Lambda",

					},
					Children: []string{

						"block",

						"expression",

						"implicit_parameter",

						"parameter_list",

						"type",

					},
					
				},
				
			},

			{
				Name: "let_clause",
				Pattern: "(let_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "list_pattern",
				Pattern: "(list_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "local_declaration_statement",
				Pattern: "(local_declaration_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "local_function_statement",
				Pattern: "(local_function_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"arrow_expression_clause",

						"block",

						"identifier",

						"parameter_list",

						"type",

						"type_parameter_list",

					},
					
				},
				
			},

			{
				Name: "lock_statement",
				Pattern: "(lock_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "makeref_expression",
				Pattern: "(makeref_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "member_access_expression",
				Pattern: "(member_access_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"alias_qualified_name",

						"expression",

						"generic_name",

						"identifier",

						"predefined_type",

						"qualified_name",

					},
					
				},
				
			},

			{
				Name: "member_binding_expression",
				Pattern: "(member_binding_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"generic_name",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "method_declaration",
				Pattern: "(method_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"arrow_expression_clause",

						"block",

						"identifier",

						"parameter_list",

						"type",

						"type_parameter_list",

					},
					
				},
				
			},

			{
				Name: "modifier",
				Pattern: "(modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "namespace_declaration",
				Pattern: "(namespace_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"alias_qualified_name",

						"declaration_list",

						"generic_name",

						"identifier",

						"qualified_name",

					},
					
				},
				
			},

			{
				Name: "negated_pattern",
				Pattern: "(negated_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "nullable_type",
				Pattern: "(nullable_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					Children: []string{

						"alias_qualified_name",

						"array_type",

						"generic_name",

						"identifier",

						"predefined_type",

						"qualified_name",

						"tuple_type",

					},
					
				},
				
			},

			{
				Name: "object_creation_expression",
				Pattern: "(object_creation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"argument_list",

						"initializer_expression",

						"type",

					},
					
				},
				
			},

			{
				Name: "operator_declaration",
				Pattern: "(operator_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"arrow_expression_clause",

						"block",

						"false",

						"parameter_list",

						"true",

						"type",

					},
					
				},
				
			},

			{
				Name: "or_pattern",
				Pattern: "(or_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"or",

						"pattern",

					},
					
				},
				
			},

			{
				Name: "order_by_clause",
				Pattern: "(order_by_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "parameter",
				Pattern: "(parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"identifier",

						"type",

					},
					
				},
				
			},

			{
				Name: "parameter_list",
				Pattern: "(parameter_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Parameter",

					},
					Children: []string{

						"array_type",

						"identifier",

						"nullable_type",

					},
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "parenthesized_pattern",
				Pattern: "(parenthesized_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "parenthesized_variable_designation",
				Pattern: "(parenthesized_variable_designation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "pointer_type",
				Pattern: "(pointer_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"alias_qualified_name",

						"function_pointer_type",

						"generic_name",

						"identifier",

						"nullable_type",

						"pointer_type",

						"predefined_type",

						"qualified_name",

						"tuple_type",

					},
					
				},
				
			},

			{
				Name: "positional_pattern_clause",
				Pattern: "(positional_pattern_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "postfix_unary_expression",
				Pattern: "(postfix_unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "prefix_unary_expression",
				Pattern: "(prefix_unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "preproc_define",
				Pattern: "(preproc_define)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "preproc_elif",
				Pattern: "(preproc_elif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"binary_expression",

						"boolean_literal",

						"character_literal",

						"identifier",

						"integer_literal",

						"parenthesized_expression",

						"preproc_elif",

						"preproc_else",

						"unary_expression",

					},
					
				},
				
			},

			{
				Name: "preproc_else",
				Pattern: "(preproc_else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "preproc_endregion",
				Pattern: "(preproc_endregion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"preproc_arg",

					},
					
				},
				
			},

			{
				Name: "preproc_error",
				Pattern: "(preproc_error)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "preproc_if",
				Pattern: "(preproc_if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"binary_expression",

						"boolean_literal",

						"character_literal",

						"identifier",

						"integer_literal",

						"parenthesized_expression",

						"preproc_elif",

						"preproc_else",

						"unary_expression",

					},
					
				},
				
			},

			{
				Name: "preproc_if_in_attribute_list",
				Pattern: "(preproc_if_in_attribute_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					Roles: []string{

						"Condition",

					},
					Children: []string{

						"binary_expression",

						"boolean_literal",

						"character_literal",

						"identifier",

						"integer_literal",

						"parenthesized_expression",

						"preproc_elif",

						"preproc_else",

						"unary_expression",

					},
					
				},
				
			},

			{
				Name: "preproc_line",
				Pattern: "(preproc_line)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "preproc_nullable",
				Pattern: "(preproc_nullable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "preproc_pragma",
				Pattern: "(preproc_pragma)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "preproc_region",
				Pattern: "(preproc_region)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"preproc_arg",

					},
					
				},
				
			},

			{
				Name: "preproc_undef",
				Pattern: "(preproc_undef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "preproc_warning",
				Pattern: "(preproc_warning)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "primary_constructor_base_type",
				Pattern: "(primary_constructor_base_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"alias_qualified_name",

						"generic_name",

						"identifier",

						"qualified_name",

					},
					
				},
				
			},

			{
				Name: "property_declaration",
				Pattern: "(property_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"accessor_list",

						"arrow_expression_clause",

						"expression",

						"identifier",

						"type",

					},
					
				},
				
			},

			{
				Name: "property_pattern_clause",
				Pattern: "(property_pattern_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "qualified_name",
				Pattern: "(qualified_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"alias_qualified_name",

						"generic_name",

						"identifier",

						"qualified_name",

					},
					
				},
				
			},

			{
				Name: "query_expression",
				Pattern: "(query_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "range_expression",
				Pattern: "(range_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "raw_string_literal",
				Pattern: "(raw_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "record_declaration",
				Pattern: "(record_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"declaration_list",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "recursive_pattern",
				Pattern: "(recursive_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"identifier",

						"type",

					},
					
				},
				
			},

			{
				Name: "ref_expression",
				Pattern: "(ref_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ref_type",
				Pattern: "(ref_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"type",

					},
					
				},
				
			},

			{
				Name: "reftype_expression",
				Pattern: "(reftype_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "refvalue_expression",
				Pattern: "(refvalue_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"type",

					},
					
				},
				
			},

			{
				Name: "relational_pattern",
				Pattern: "(relational_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "return_statement",
				Pattern: "(return_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "scoped_type",
				Pattern: "(scoped_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					Children: []string{

						"alias_qualified_name",

						"generic_name",

						"identifier",

						"qualified_name",

						"ref_type",

					},
					
				},
				
			},

			{
				Name: "select_clause",
				Pattern: "(select_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "sizeof_expression",
				Pattern: "(sizeof_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"type",

					},
					
				},
				
			},

			{
				Name: "stackalloc_expression",
				Pattern: "(stackalloc_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"array_type",

					},
					
				},
				
			},

			{
				Name: "string_literal",
				Pattern: "(string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "string_literal_content",
				Pattern: "(string_literal_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "struct_declaration",
				Pattern: "(struct_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"declaration_list",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "subpattern",
				Pattern: "(subpattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "switch_body",
				Pattern: "(switch_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "switch_expression",
				Pattern: "(switch_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					
					
				},
				
			},

			{
				Name: "switch_expression_arm",
				Pattern: "(switch_expression_arm)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "switch_section",
				Pattern: "(switch_section)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					
					
				},
				
			},

			{
				Name: "switch_statement",
				Pattern: "(switch_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					Children: []string{

						"expression",

						"switch_body",

						"tuple_expression",

					},
					
				},
				
			},

			{
				Name: "throw_expression",
				Pattern: "(throw_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "throw_statement",
				Pattern: "(throw_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					Token: "self",
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "try_statement",
				Pattern: "(try_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "tuple_element",
				Pattern: "(tuple_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					Token: "self",
					
					Children: []string{

						"identifier",

						"type",

					},
					
				},
				
			},

			{
				Name: "tuple_expression",
				Pattern: "(tuple_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					
					
				},
				
			},

			{
				Name: "tuple_pattern",
				Pattern: "(tuple_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					Token: "self",
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "tuple_type",
				Pattern: "(tuple_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					
					
				},
				
			},

			{
				Name: "type_argument_list",
				Pattern: "(type_argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_parameter",
				Pattern: "(type_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "type_parameter_constraint",
				Pattern: "(type_parameter_constraint)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Parameter",

					},
					Children: []string{

						"type",

					},
					
				},
				
			},

			{
				Name: "type_parameter_constraints_clause",
				Pattern: "(type_parameter_constraints_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_parameter_list",
				Pattern: "(type_parameter_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_pattern",
				Pattern: "(type_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"type",

					},
					
				},
				
			},

			{
				Name: "typeof_expression",
				Pattern: "(typeof_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					Children: []string{

						"type",

					},
					
				},
				
			},

			{
				Name: "unary_expression",
				Pattern: "(unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"binary_expression",

						"boolean_literal",

						"character_literal",

						"identifier",

						"integer_literal",

						"parenthesized_expression",

						"unary_expression",

					},
					
				},
				
			},

			{
				Name: "unsafe_statement",
				Pattern: "(unsafe_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "UnaryOp",
					Token: "self",
					Roles: []string{

						"Operator",

					},
					
					
				},
				
			},

			{
				Name: "using_directive",
				Pattern: "(using_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "using_statement",
				Pattern: "(using_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"statement",

					},
					
				},
				
			},

			{
				Name: "var_pattern",
				Pattern: "(var_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "variable_declaration",
				Pattern: "(variable_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"type",

					},
					
				},
				
			},

			{
				Name: "variable_declarator",
				Pattern: "(variable_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "when_clause",
				Pattern: "(when_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "where_clause",
				Pattern: "(where_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "with_expression",
				Pattern: "(with_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "with_initializer",
				Pattern: "(with_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "yield_statement",
				Pattern: "(yield_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "Cdecl",
				Pattern: "(Cdecl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "Fastcall",
				Pattern: "(Fastcall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "Stdcall",
				Pattern: "(Stdcall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "Thiscall",
				Pattern: "(Thiscall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "__makeref",
				Pattern: "(__makeref)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__reftype",
				Pattern: "(__reftype)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__refvalue",
				Pattern: "(__refvalue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "abstract",
				Pattern: "(abstract)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "add",
				Pattern: "(add)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "alias",
				Pattern: "(alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "and",
				Pattern: "(and)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "annotations",
				Pattern: "(annotations)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "as",
				Pattern: "(as)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ascending",
				Pattern: "(ascending)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "assembly",
				Pattern: "(assembly)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "async",
				Pattern: "(async)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "await",
				Pattern: "(await)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "base",
				Pattern: "(base)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "by",
				Pattern: "(by)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "catch",
				Pattern: "(catch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "character_literal_content",
				Pattern: "(character_literal_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "checked",
				Pattern: "(checked)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "checksum",
				Pattern: "(checksum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "const",
				Pattern: "(const)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "delegate",
				Pattern: "(delegate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "descending",
				Pattern: "(descending)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "disable",
				Pattern: "(disable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "discard",
				Pattern: "(discard)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "enable",
				Pattern: "(enable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "equals",
				Pattern: "(equals)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "event",
				Pattern: "(event)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "explicit",
				Pattern: "(explicit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extern",
				Pattern: "(extern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "field",
				Pattern: "(field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "file",
				Pattern: "(file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "finally",
				Pattern: "(finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "fixed",
				Pattern: "(fixed)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "foreach",
				Pattern: "(foreach)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "from",
				Pattern: "(from)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "get",
				Pattern: "(get)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "global",
				Pattern: "(global)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "goto",
				Pattern: "(goto)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "group",
				Pattern: "(group)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "hidden",
				Pattern: "(hidden)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "implicit",
				Pattern: "(implicit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "init",
				Pattern: "(init)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "integer_literal",
				Pattern: "(integer_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "interface",
				Pattern: "(interface)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "internal",
				Pattern: "(internal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "interpolation_brace",
				Pattern: "(interpolation_brace)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "interpolation_quote",
				Pattern: "(interpolation_quote)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "interpolation_start",
				Pattern: "(interpolation_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "into",
				Pattern: "(into)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "is",
				Pattern: "(is)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "join",
				Pattern: "(join)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "let",
				Pattern: "(let)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "lock",
				Pattern: "(lock)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "managed",
				Pattern: "(managed)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "method",
				Pattern: "(method)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "module",
				Pattern: "(module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "namespace",
				Pattern: "(namespace)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "new",
				Pattern: "(new)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "not",
				Pattern: "(not)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "notnull",
				Pattern: "(notnull)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "null_literal",
				Pattern: "(null_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "on",
				Pattern: "(on)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "operator",
				Pattern: "(operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "or",
				Pattern: "(or)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "orderby",
				Pattern: "(orderby)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "out",
				Pattern: "(out)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "override",
				Pattern: "(override)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "param",
				Pattern: "(param)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "params",
				Pattern: "(params)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "partial",
				Pattern: "(partial)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "predefined_type",
				Pattern: "(predefined_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "preproc_arg",
				Pattern: "(preproc_arg)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "private",
				Pattern: "(private)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "property",
				Pattern: "(property)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "protected",
				Pattern: "(protected)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "public",
				Pattern: "(public)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "raw_string_content",
				Pattern: "(raw_string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "raw_string_end",
				Pattern: "(raw_string_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "raw_string_start",
				Pattern: "(raw_string_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "readonly",
				Pattern: "(readonly)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "real_literal",
				Pattern: "(real_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "record",
				Pattern: "(record)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ref",
				Pattern: "(ref)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "remove",
				Pattern: "(remove)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "required",
				Pattern: "(required)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "restore",
				Pattern: "(restore)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "scoped",
				Pattern: "(scoped)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "sealed",
				Pattern: "(sealed)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "select",
				Pattern: "(select)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "set",
				Pattern: "(set)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "shebang_directive",
				Pattern: "(shebang_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "sizeof",
				Pattern: "(sizeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "stackalloc",
				Pattern: "(stackalloc)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "static",
				Pattern: "(static)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_content",
				Pattern: "(string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string_literal_encoding",
				Pattern: "(string_literal_encoding)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "struct",
				Pattern: "(struct)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "switch",
				Pattern: "(switch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "this",
				Pattern: "(this)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "throw",
				Pattern: "(throw)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					Token: "self",
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "typeof",
				Pattern: "(typeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "typevar",
				Pattern: "(typevar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unchecked",
				Pattern: "(unchecked)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unmanaged",
				Pattern: "(unmanaged)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unsafe",
				Pattern: "(unsafe)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "using",
				Pattern: "(using)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "var",
				Pattern: "(var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "verbatim_string_literal",
				Pattern: "(verbatim_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "virtual",
				Pattern: "(virtual)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "volatile",
				Pattern: "(volatile)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "warning",
				Pattern: "(warning)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "warnings",
				Pattern: "(warnings)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "when",
				Pattern: "(when)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "where",
				Pattern: "(where)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "with",
				Pattern: "(with)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "clojure",
		Extensions: []string{

			".clj",

			".cljs",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "anon_fn_lit",
				Pattern: "(anon_fn_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "auto_res_mark",
				Pattern: "(auto_res_mark)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "derefing_lit",
				Pattern: "(derefing_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "dis_expr",
				Pattern: "(dis_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "evaling_lit",
				Pattern: "(evaling_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"list_lit",

						"meta_lit",

						"old_meta_lit",

						"read_cond_lit",

						"sym_lit",

					},
					
				},
				
			},

			{
				Name: "kwd_lit",
				Pattern: "(kwd_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Name",

					},
					Children: []string{

						"kwd_name",

						"kwd_ns",

					},
					
				},
				
			},

			{
				Name: "list_lit",
				Pattern: "(list_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "map_lit",
				Pattern: "(map_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Map",
					Token: "self",
					Roles: []string{

						"Map",

					},
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "meta_lit",
				Pattern: "(meta_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "ns_map_lit",
				Pattern: "(ns_map_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"anon_fn_lit",

						"auto_res_mark",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "old_meta_lit",
				Pattern: "(old_meta_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "quoting_lit",
				Pattern: "(quoting_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "read_cond_lit",
				Pattern: "(read_cond_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "regex_lit",
				Pattern: "(regex_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "set_lit",
				Pattern: "(set_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					Roles: []string{

						"Set",

					},
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "source",
				Pattern: "(source)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "splicing_read_cond_lit",
				Pattern: "(splicing_read_cond_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "str_lit",
				Pattern: "(str_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "sym_lit",
				Pattern: "(sym_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					Children: []string{

						"meta_lit",

						"old_meta_lit",

						"sym_name",

						"sym_ns",

					},
					
				},
				
			},

			{
				Name: "sym_val_lit",
				Pattern: "(sym_val_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "syn_quoting_lit",
				Pattern: "(syn_quoting_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "tagged_or_ctor_lit",
				Pattern: "(tagged_or_ctor_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "unquote_splicing_lit",
				Pattern: "(unquote_splicing_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "unquoting_lit",
				Pattern: "(unquoting_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "var_quoting_lit",
				Pattern: "(var_quoting_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "vec_lit",
				Pattern: "(vec_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					Roles: []string{

						"List",

					},
					Children: []string{

						"anon_fn_lit",

						"bool_lit",

						"char_lit",

						"derefing_lit",

						"evaling_lit",

						"kwd_lit",

						"list_lit",

						"map_lit",

						"meta_lit",

						"nil_lit",

						"ns_map_lit",

						"num_lit",

						"old_meta_lit",

						"quoting_lit",

						"read_cond_lit",

						"regex_lit",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"sym_val_lit",

						"syn_quoting_lit",

						"tagged_or_ctor_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "bool_lit",
				Pattern: "(bool_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "char_lit",
				Pattern: "(char_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "kwd_name",
				Pattern: "(kwd_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "kwd_ns",
				Pattern: "(kwd_ns)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "nil_lit",
				Pattern: "(nil_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

						"Null",

					},
					
					
				},
				
			},

			{
				Name: "num_lit",
				Pattern: "(num_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

						"Number",

					},
					
					
				},
				
			},

			{
				Name: "sym_name",
				Pattern: "(sym_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "sym_ns",
				Pattern: "(sym_ns)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "cmake",
		Extensions: []string{

			".cmake",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "argument",
				Pattern: "(argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "argument_list",
				Pattern: "(argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "block_command",
				Pattern: "(block_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_def",
				Pattern: "(block_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "body",
				Pattern: "(body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bracket_argument",
				Pattern: "(bracket_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "bracket_comment",
				Pattern: "(bracket_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "cache_var",
				Pattern: "(cache_var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "else_command",
				Pattern: "(else_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "elseif_command",
				Pattern: "(elseif_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "endblock_command",
				Pattern: "(endblock_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "endforeach_command",
				Pattern: "(endforeach_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "endfunction_command",
				Pattern: "(endfunction_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "endif_command",
				Pattern: "(endif_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "endmacro_command",
				Pattern: "(endmacro_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "endwhile_command",
				Pattern: "(endwhile_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "env_var",
				Pattern: "(env_var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "foreach_command",
				Pattern: "(foreach_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "foreach_loop",
				Pattern: "(foreach_loop)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "function_command",
				Pattern: "(function_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "function_def",
				Pattern: "(function_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "if_command",
				Pattern: "(if_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					Roles: []string{

						"Condition",

					},
					
					
				},
				
			},

			{
				Name: "if_condition",
				Pattern: "(if_condition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "macro_command",
				Pattern: "(macro_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "macro_def",
				Pattern: "(macro_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "normal_command",
				Pattern: "(normal_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "normal_var",
				Pattern: "(normal_var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "quoted_argument",
				Pattern: "(quoted_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "quoted_element",
				Pattern: "(quoted_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "source_file",
				Pattern: "(source_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unquoted_argument",
				Pattern: "(unquoted_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "File",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "variable",
				Pattern: "(variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "variable_ref",
				Pattern: "(variable_ref)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "while_command",
				Pattern: "(while_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "while_loop",
				Pattern: "(while_loop)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "CACHE",
				Pattern: "(CACHE)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ENV",
				Pattern: "(ENV)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "bracket_argument_close",
				Pattern: "(bracket_argument_close)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "bracket_argument_content",
				Pattern: "(bracket_argument_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bracket_argument_open",
				Pattern: "(bracket_argument_open)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "bracket_comment_close",
				Pattern: "(bracket_comment_close)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "bracket_comment_content",
				Pattern: "(bracket_comment_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "bracket_comment_open",
				Pattern: "(bracket_comment_open)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "elseif",
				Pattern: "(elseif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					Roles: []string{

						"Condition",

					},
					
					
				},
				
			},

			{
				Name: "endblock",
				Pattern: "(endblock)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "endforeach",
				Pattern: "(endforeach)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "endfunction",
				Pattern: "(endfunction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "endif",
				Pattern: "(endif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					Roles: []string{

						"Condition",

					},
					
					
				},
				
			},

			{
				Name: "endmacro",
				Pattern: "(endmacro)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "endwhile",
				Pattern: "(endwhile)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "foreach",
				Pattern: "(foreach)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "function",
				Pattern: "(function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "line_comment",
				Pattern: "(line_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "macro",
				Pattern: "(macro)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "commonlisp",
		Extensions: []string{

			".lisp",

			".lsp",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "accumulation_clause",
				Pattern: "(accumulation_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "accumulation_verb",
				Pattern: "(accumulation_verb)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "array_dimension",
				Pattern: "(array_dimension)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "char_lit",
				Pattern: "(char_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "complex_num_lit",
				Pattern: "(complex_num_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"meta_lit",

						"num_lit",

						"old_meta_lit",

					},
					
				},
				
			},

			{
				Name: "condition_clause",
				Pattern: "(condition_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "defun",
				Pattern: "(defun)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"nil_lit",

						"num_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "defun_header",
				Pattern: "(defun_header)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"char_lit",

						"comment",

						"complex_num_lit",

						"defun_keyword",

						"dis_expr",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"nil_lit",

						"num_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "defun_keyword",
				Pattern: "(defun_keyword)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "dis_expr",
				Pattern: "(dis_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"nil_lit",

						"num_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "do_clause",
				Pattern: "(do_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "for_clause",
				Pattern: "(for_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"char_lit",

						"comment",

						"complex_num_lit",

						"dis_expr",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"nil_lit",

						"num_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "for_clause_word",
				Pattern: "(for_clause_word)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "format_directive_type",
				Pattern: "(format_directive_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"char_lit",

						"num_lit",

					},
					
				},
				
			},

			{
				Name: "format_modifiers",
				Pattern: "(format_modifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "format_prefix_parameters",
				Pattern: "(format_prefix_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "format_specifier",
				Pattern: "(format_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "include_reader_macro",
				Pattern: "(include_reader_macro)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"meta_lit",

						"nil_lit",

						"num_lit",

						"old_meta_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "kwd_lit",
				Pattern: "(kwd_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "kwd_symbol",
				Pattern: "(kwd_symbol)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "list_lit",
				Pattern: "(list_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"meta_lit",

						"nil_lit",

						"num_lit",

						"old_meta_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "loop_clause",
				Pattern: "(loop_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "loop_macro",
				Pattern: "(loop_macro)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "map_lit",
				Pattern: "(map_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"meta_lit",

						"nil_lit",

						"num_lit",

						"old_meta_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "meta_lit",
				Pattern: "(meta_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"kwd_lit",

						"map_lit",

						"read_cond_lit",

						"str_lit",

						"sym_lit",

					},
					
				},
				
			},

			{
				Name: "num_lit",
				Pattern: "(num_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "old_meta_lit",
				Pattern: "(old_meta_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"kwd_lit",

						"map_lit",

						"read_cond_lit",

						"str_lit",

						"sym_lit",

					},
					
				},
				
			},

			{
				Name: "package_lit",
				Pattern: "(package_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Package",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"cl",

						"sym_lit",

					},
					
				},
				
			},

			{
				Name: "path_lit",
				Pattern: "(path_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "quoting_lit",
				Pattern: "(quoting_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"meta_lit",

						"nil_lit",

						"num_lit",

						"old_meta_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "read_cond_lit",
				Pattern: "(read_cond_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"meta_lit",

						"nil_lit",

						"num_lit",

						"old_meta_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "repeat_clause",
				Pattern: "(repeat_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "set_lit",
				Pattern: "(set_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"meta_lit",

						"nil_lit",

						"num_lit",

						"old_meta_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "source",
				Pattern: "(source)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "splicing_read_cond_lit",
				Pattern: "(splicing_read_cond_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"meta_lit",

						"nil_lit",

						"num_lit",

						"old_meta_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "str_lit",
				Pattern: "(str_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "sym_lit",
				Pattern: "(sym_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "syn_quoting_lit",
				Pattern: "(syn_quoting_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"nil_lit",

						"num_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "termination_clause",
				Pattern: "(termination_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "unquote_splicing_lit",
				Pattern: "(unquote_splicing_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"meta_lit",

						"nil_lit",

						"num_lit",

						"old_meta_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "unquoting_lit",
				Pattern: "(unquoting_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"nil_lit",

						"num_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "var_quoting_lit",
				Pattern: "(var_quoting_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"meta_lit",

						"nil_lit",

						"num_lit",

						"old_meta_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "vec_lit",
				Pattern: "(vec_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"meta_lit",

						"nil_lit",

						"num_lit",

						"old_meta_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "while_clause",
				Pattern: "(while_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "with_clause",
				Pattern: "(with_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"char_lit",

						"complex_num_lit",

						"fancy_literal",

						"include_reader_macro",

						"kwd_lit",

						"list_lit",

						"nil_lit",

						"num_lit",

						"package_lit",

						"path_lit",

						"quoting_lit",

						"read_cond_lit",

						"self_referential_reader_macro",

						"set_lit",

						"splicing_read_cond_lit",

						"str_lit",

						"sym_lit",

						"syn_quoting_lit",

						"unquote_splicing_lit",

						"unquoting_lit",

						"var_quoting_lit",

						"vec_lit",

					},
					
				},
				
			},

			{
				Name: "Newline",
				Pattern: "(Newline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "V",
				Pattern: "(V)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_",
				Pattern: "(_)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "above",
				Pattern: "(above)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "across",
				Pattern: "(across)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "always",
				Pattern: "(always)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "and",
				Pattern: "(and)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "as",
				Pattern: "(as)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "being",
				Pattern: "(being)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "below",
				Pattern: "(below)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "block_comment",
				Pattern: "(block_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "by",
				Pattern: "(by)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "cl",
				Pattern: "(cl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "defgeneric",
				Pattern: "(defgeneric)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "defmacro",
				Pattern: "(defmacro)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "defmethod",
				Pattern: "(defmethod)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "defun",
				Pattern: "(defun)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "downfrom",
				Pattern: "(downfrom)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "downto",
				Pattern: "(downto)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "fancy_literal",
				Pattern: "(fancy_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "finally",
				Pattern: "(finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "from",
				Pattern: "(from)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "initially",
				Pattern: "(initially)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "into",
				Pattern: "(into)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "loop",
				Pattern: "(loop)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "never",
				Pattern: "(never)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "nil_lit",
				Pattern: "(nil_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "on",
				Pattern: "(on)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "repeat",
				Pattern: "(repeat)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "self_referential_reader_macro",
				Pattern: "(self_referential_reader_macro)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "then",
				Pattern: "(then)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "thereis",
				Pattern: "(thereis)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "to",
				Pattern: "(to)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unless",
				Pattern: "(unless)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "until",
				Pattern: "(until)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "upfrom",
				Pattern: "(upfrom)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "upto",
				Pattern: "(upto)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "using",
				Pattern: "(using)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "v",
				Pattern: "(v)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "when",
				Pattern: "(when)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "with",
				Pattern: "(with)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "cpp",
		Extensions: []string{

			".cpp",

			".cc",

			".cxx",

			".hpp",

			".hxx",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "_abstract_declarator",
				Pattern: "(_abstract_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_declarator",
				Pattern: "(_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_field_declarator",
				Pattern: "(_field_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "_type_declarator",
				Pattern: "(_type_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "expression",
				Pattern: "(expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "statement",
				Pattern: "(statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_specifier",
				Pattern: "(type_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "abstract_array_declarator",
				Pattern: "(abstract_array_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_abstract_declarator",

						"expression",

					},
					
				},
				
			},

			{
				Name: "abstract_function_declarator",
				Pattern: "(abstract_function_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"_abstract_declarator",

						"parameter_list",

					},
					
				},
				
			},

			{
				Name: "abstract_parenthesized_declarator",
				Pattern: "(abstract_parenthesized_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "abstract_pointer_declarator",
				Pattern: "(abstract_pointer_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_abstract_declarator",

					},
					
				},
				
			},

			{
				Name: "abstract_reference_declarator",
				Pattern: "(abstract_reference_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "access_specifier",
				Pattern: "(access_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "alias_declaration",
				Pattern: "(alias_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"type_descriptor",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "alignas_qualifier",
				Pattern: "(alignas_qualifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "alignof_expression",
				Pattern: "(alignof_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"type_descriptor",

					},
					
				},
				
			},

			{
				Name: "argument_list",
				Pattern: "(argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "array_declarator",
				Pattern: "(array_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_declarator",

						"_field_declarator",

						"_type_declarator",

						"expression",

					},
					
				},
				
			},

			{
				Name: "assignment_expression",
				Pattern: "(assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"and_eq",

						"expression",

						"initializer_list",

						"or_eq",

						"xor_eq",

					},
					
				},
				
			},

			{
				Name: "attribute",
				Pattern: "(attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "attribute_declaration",
				Pattern: "(attribute_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "attribute_specifier",
				Pattern: "(attribute_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "attributed_declarator",
				Pattern: "(attributed_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "attributed_statement",
				Pattern: "(attributed_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "base_class_clause",
				Pattern: "(base_class_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"and",

						"bitand",

						"bitor",

						"expression",

						"not_eq",

						"or",

						"preproc_defined",

						"xor",

					},
					
				},
				
			},

			{
				Name: "bitfield_clause",
				Pattern: "(bitfield_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "break_statement",
				Pattern: "(break_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "call_expression",
				Pattern: "(call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"argument_list",

						"expression",

						"primitive_type",

					},
					
				},
				
			},

			{
				Name: "case_statement",
				Pattern: "(case_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "cast_expression",
				Pattern: "(cast_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					
					
					Children: []string{

						"expression",

						"type_descriptor",

					},
					
				},
				
			},

			{
				Name: "catch_clause",
				Pattern: "(catch_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					Token: "self",
					Roles: []string{

						"Catch",

					},
					Children: []string{

						"compound_statement",

						"parameter_list",

					},
					
				},
				
			},

			{
				Name: "char_literal",
				Pattern: "(char_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "class_specifier",
				Pattern: "(class_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"field_declaration_list",

						"qualified_identifier",

						"template_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "co_await_expression",
				Pattern: "(co_await_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					
					Roles: []string{

						"Await",

					},
					Children: []string{

						"co_await",

						"expression",

					},
					
				},
				
			},

			{
				Name: "co_return_statement",
				Pattern: "(co_return_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "co_yield_statement",
				Pattern: "(co_yield_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "comma_expression",
				Pattern: "(comma_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"comma_expression",

						"expression",

					},
					
				},
				
			},

			{
				Name: "compound_literal_expression",
				Pattern: "(compound_literal_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"initializer_list",

						"primitive_type",

						"qualified_identifier",

						"template_type",

						"type_descriptor",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "compound_requirement",
				Pattern: "(compound_requirement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "compound_statement",
				Pattern: "(compound_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "concatenated_string",
				Pattern: "(concatenated_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "concept_definition",
				Pattern: "(concept_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "condition_clause",
				Pattern: "(condition_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"comma_expression",

						"declaration",

						"expression",

						"init_statement",

					},
					
				},
				
			},

			{
				Name: "conditional_expression",
				Pattern: "(conditional_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"comma_expression",

						"expression",

					},
					
				},
				
			},

			{
				Name: "constraint_conjunction",
				Pattern: "(constraint_conjunction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"and",

						"constraint_conjunction",

						"constraint_disjunction",

						"expression",

						"template_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "constraint_disjunction",
				Pattern: "(constraint_disjunction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"constraint_conjunction",

						"constraint_disjunction",

						"expression",

						"or",

						"template_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "continue_statement",
				Pattern: "(continue_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "declaration",
				Pattern: "(declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_declarator",

						"expression",

						"gnu_asm_expression",

						"init_declarator",

						"initializer_list",

						"ms_call_modifier",

						"operator_cast",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "declaration_list",
				Pattern: "(declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "decltype",
				Pattern: "(decltype)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "default_method_clause",
				Pattern: "(default_method_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "delete_expression",
				Pattern: "(delete_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "delete_method_clause",
				Pattern: "(delete_method_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "dependent_name",
				Pattern: "(dependent_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "dependent_type",
				Pattern: "(dependent_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "destructor_name",
				Pattern: "(destructor_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "do_statement",
				Pattern: "(do_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "else_clause",
				Pattern: "(else_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "enum_specifier",
				Pattern: "(enum_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"enumerator_list",

						"primitive_type",

						"qualified_identifier",

						"sized_type_specifier",

						"template_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "enumerator",
				Pattern: "(enumerator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"expression",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "enumerator_list",
				Pattern: "(enumerator_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "explicit_function_specifier",
				Pattern: "(explicit_function_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "explicit_object_parameter_declaration",
				Pattern: "(explicit_object_parameter_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "export_declaration",
				Pattern: "(export_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expression_statement",
				Pattern: "(expression_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "extension_expression",
				Pattern: "(extension_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "field_declaration",
				Pattern: "(field_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"_field_declarator",

						"expression",

						"initializer_list",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "field_declaration_list",
				Pattern: "(field_declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "field_designator",
				Pattern: "(field_designator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "field_expression",
				Pattern: "(field_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"dependent_name",

						"destructor_name",

						"expression",

						"field_identifier",

						"qualified_identifier",

						"template_method",

					},
					
				},
				
			},

			{
				Name: "field_initializer",
				Pattern: "(field_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "field_initializer_list",
				Pattern: "(field_initializer_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "fold_expression",
				Pattern: "(fold_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"and",

						"bitand",

						"bitor",

						"expression",

						"not_eq",

						"or",

						"xor",

					},
					
				},
				
			},

			{
				Name: "for_range_loop",
				Pattern: "(for_range_loop)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"_declarator",

						"expression",

						"init_statement",

						"initializer_list",

						"statement",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"comma_expression",

						"declaration",

						"expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "friend_declaration",
				Pattern: "(friend_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "function_declarator",
				Pattern: "(function_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"_declarator",

						"_field_declarator",

						"_type_declarator",

						"parameter_list",

					},
					
				},
				
			},

			{
				Name: "function_definition",
				Pattern: "(function_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"_declarator",

						"_field_declarator",

						"compound_statement",

						"operator_cast",

						"try_statement",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "generic_expression",
				Pattern: "(generic_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "global_module_fragment_declaration",
				Pattern: "(global_module_fragment_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "gnu_asm_clobber_list",
				Pattern: "(gnu_asm_clobber_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"concatenated_string",

						"raw_string_literal",

						"string_literal",

					},
					
				},
				
			},

			{
				Name: "gnu_asm_expression",
				Pattern: "(gnu_asm_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"concatenated_string",

						"gnu_asm_clobber_list",

						"gnu_asm_goto_list",

						"gnu_asm_input_operand_list",

						"gnu_asm_output_operand_list",

						"raw_string_literal",

						"string_literal",

					},
					
				},
				
			},

			{
				Name: "gnu_asm_goto_list",
				Pattern: "(gnu_asm_goto_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "gnu_asm_input_operand",
				Pattern: "(gnu_asm_input_operand)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"identifier",

						"string_literal",

					},
					
				},
				
			},

			{
				Name: "gnu_asm_input_operand_list",
				Pattern: "(gnu_asm_input_operand_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"gnu_asm_input_operand",

					},
					
				},
				
			},

			{
				Name: "gnu_asm_output_operand",
				Pattern: "(gnu_asm_output_operand)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"identifier",

						"string_literal",

					},
					
				},
				
			},

			{
				Name: "gnu_asm_output_operand_list",
				Pattern: "(gnu_asm_output_operand_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"gnu_asm_output_operand",

					},
					
				},
				
			},

			{
				Name: "gnu_asm_qualifier",
				Pattern: "(gnu_asm_qualifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "goto_statement",
				Pattern: "(goto_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"statement_identifier",

					},
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					Roles: []string{

						"Condition",

					},
					Children: []string{

						"condition_clause",

						"else_clause",

						"statement",

					},
					
				},
				
			},

			{
				Name: "import_declaration",
				Pattern: "(import_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"module_name",

						"module_partition",

						"string_literal",

						"system_lib_string",

					},
					
				},
				
			},

			{
				Name: "init_declarator",
				Pattern: "(init_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_declarator",

						"argument_list",

						"expression",

						"initializer_list",

					},
					
				},
				
			},

			{
				Name: "init_statement",
				Pattern: "(init_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "initializer_list",
				Pattern: "(initializer_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "initializer_pair",
				Pattern: "(initializer_pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"expression",

						"field_designator",

						"field_identifier",

						"initializer_list",

						"subscript_designator",

						"subscript_range_designator",

					},
					
				},
				
			},

			{
				Name: "labeled_statement",
				Pattern: "(labeled_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"statement_identifier",

					},
					
				},
				
			},

			{
				Name: "lambda_capture_initializer",
				Pattern: "(lambda_capture_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					Token: "self",
					Roles: []string{

						"Lambda",

					},
					Children: []string{

						"expression",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "lambda_capture_specifier",
				Pattern: "(lambda_capture_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "lambda_declarator",
				Pattern: "(lambda_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					Token: "self",
					Roles: []string{

						"Lambda",

					},
					Children: []string{

						"parameter_list",

					},
					
				},
				
			},

			{
				Name: "lambda_default_capture",
				Pattern: "(lambda_default_capture)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					
					Roles: []string{

						"Lambda",

					},
					
					
				},
				
			},

			{
				Name: "lambda_expression",
				Pattern: "(lambda_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					Token: "self",
					Roles: []string{

						"Lambda",

					},
					Children: []string{

						"compound_statement",

						"lambda_capture_specifier",

						"lambda_declarator",

						"requires_clause",

						"template_parameter_list",

					},
					
				},
				
			},

			{
				Name: "lambda_specifier",
				Pattern: "(lambda_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "linkage_specification",
				Pattern: "(linkage_specification)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"declaration",

						"declaration_list",

						"function_definition",

						"string_literal",

					},
					
				},
				
			},

			{
				Name: "module_declaration",
				Pattern: "(module_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					Children: []string{

						"module_name",

						"module_partition",

					},
					
				},
				
			},

			{
				Name: "module_name",
				Pattern: "(module_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "module_partition",
				Pattern: "(module_partition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "ms_based_modifier",
				Pattern: "(ms_based_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ms_call_modifier",
				Pattern: "(ms_call_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "ms_declspec_modifier",
				Pattern: "(ms_declspec_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ms_pointer_modifier",
				Pattern: "(ms_pointer_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "ms_unaligned_ptr_modifier",
				Pattern: "(ms_unaligned_ptr_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "namespace_alias_definition",
				Pattern: "(namespace_alias_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					
					Roles: []string{

						"Module",

					},
					Children: []string{

						"namespace_identifier",

					},
					
				},
				
			},

			{
				Name: "namespace_definition",
				Pattern: "(namespace_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"declaration_list",

						"namespace_identifier",

						"nested_namespace_specifier",

					},
					
				},
				
			},

			{
				Name: "nested_namespace_specifier",
				Pattern: "(nested_namespace_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "new_declarator",
				Pattern: "(new_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "new_expression",
				Pattern: "(new_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"argument_list",

						"initializer_list",

						"new_declarator",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "noexcept",
				Pattern: "(noexcept)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "null",
				Pattern: "(null)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "offsetof_expression",
				Pattern: "(offsetof_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					Children: []string{

						"field_identifier",

						"type_descriptor",

					},
					
				},
				
			},

			{
				Name: "operator_cast",
				Pattern: "(operator_cast)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					
					
					Children: []string{

						"_abstract_declarator",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "operator_name",
				Pattern: "(operator_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "optional_parameter_declaration",
				Pattern: "(optional_parameter_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_declarator",

						"abstract_reference_declarator",

						"expression",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "optional_type_parameter_declaration",
				Pattern: "(optional_type_parameter_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"type_identifier",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "parameter_declaration",
				Pattern: "(parameter_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_abstract_declarator",

						"_declarator",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "parameter_list",
				Pattern: "(parameter_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parameter_pack_expansion",
				Pattern: "(parameter_pack_expansion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"expression",

						"type_descriptor",

					},
					
				},
				
			},

			{
				Name: "parenthesized_declarator",
				Pattern: "(parenthesized_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "placeholder_type_specifier",
				Pattern: "(placeholder_type_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"qualified_identifier",

						"template_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "pointer_declarator",
				Pattern: "(pointer_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_declarator",

						"_field_declarator",

						"_type_declarator",

					},
					
				},
				
			},

			{
				Name: "pointer_expression",
				Pattern: "(pointer_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "pointer_type_declarator",
				Pattern: "(pointer_type_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_type_declarator",

					},
					
				},
				
			},

			{
				Name: "preproc_call",
				Pattern: "(preproc_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					Children: []string{

						"preproc_arg",

						"preproc_directive",

					},
					
				},
				
			},

			{
				Name: "preproc_def",
				Pattern: "(preproc_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

						"preproc_arg",

					},
					
				},
				
			},

			{
				Name: "preproc_defined",
				Pattern: "(preproc_defined)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "preproc_elif",
				Pattern: "(preproc_elif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"binary_expression",

						"call_expression",

						"char_literal",

						"identifier",

						"number_literal",

						"parenthesized_expression",

						"preproc_defined",

						"preproc_elif",

						"preproc_elifdef",

						"preproc_else",

						"unary_expression",

					},
					
				},
				
			},

			{
				Name: "preproc_elifdef",
				Pattern: "(preproc_elifdef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

						"preproc_elif",

						"preproc_elifdef",

						"preproc_else",

					},
					
				},
				
			},

			{
				Name: "preproc_else",
				Pattern: "(preproc_else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "preproc_function_def",
				Pattern: "(preproc_function_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"identifier",

						"preproc_arg",

						"preproc_params",

					},
					
				},
				
			},

			{
				Name: "preproc_if",
				Pattern: "(preproc_if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"binary_expression",

						"call_expression",

						"char_literal",

						"identifier",

						"number_literal",

						"parenthesized_expression",

						"preproc_defined",

						"preproc_elif",

						"preproc_elifdef",

						"preproc_else",

						"unary_expression",

					},
					
				},
				
			},

			{
				Name: "preproc_ifdef",
				Pattern: "(preproc_ifdef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					Roles: []string{

						"Condition",

					},
					Children: []string{

						"identifier",

						"preproc_elif",

						"preproc_elifdef",

						"preproc_else",

					},
					
				},
				
			},

			{
				Name: "preproc_include",
				Pattern: "(preproc_include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"call_expression",

						"identifier",

						"string_literal",

						"system_lib_string",

					},
					
				},
				
			},

			{
				Name: "preproc_params",
				Pattern: "(preproc_params)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "private_module_fragment_declaration",
				Pattern: "(private_module_fragment_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "pure_virtual_clause",
				Pattern: "(pure_virtual_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "qualified_identifier",
				Pattern: "(qualified_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"decltype",

						"dependent_name",

						"destructor_name",

						"field_identifier",

						"identifier",

						"namespace_identifier",

						"operator_cast",

						"operator_name",

						"pointer_type_declarator",

						"qualified_identifier",

						"template",

						"template_function",

						"template_method",

						"template_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "raw_string_literal",
				Pattern: "(raw_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Reference",

						"Literal",

					},
					Children: []string{

						"raw_string_delimiter",

					},
					
				},
				
			},

			{
				Name: "ref_qualifier",
				Pattern: "(ref_qualifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "reference_declarator",
				Pattern: "(reference_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "requirement_seq",
				Pattern: "(requirement_seq)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "requires_clause",
				Pattern: "(requires_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"constraint_conjunction",

						"constraint_disjunction",

						"expression",

						"template_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "requires_expression",
				Pattern: "(requires_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"parameter_list",

						"requirement_seq",

					},
					
				},
				
			},

			{
				Name: "return_statement",
				Pattern: "(return_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "seh_except_clause",
				Pattern: "(seh_except_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"compound_statement",

						"parenthesized_expression",

					},
					
				},
				
			},

			{
				Name: "seh_finally_clause",
				Pattern: "(seh_finally_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					Children: []string{

						"compound_statement",

					},
					
				},
				
			},

			{
				Name: "seh_leave_statement",
				Pattern: "(seh_leave_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "seh_try_statement",
				Pattern: "(seh_try_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					Children: []string{

						"compound_statement",

					},
					
				},
				
			},

			{
				Name: "simple_requirement",
				Pattern: "(simple_requirement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "sized_type_specifier",
				Pattern: "(sized_type_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"primitive_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "sizeof_expression",
				Pattern: "(sizeof_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"type_descriptor",

					},
					
				},
				
			},

			{
				Name: "static_assert_declaration",
				Pattern: "(static_assert_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"concatenated_string",

						"expression",

						"raw_string_literal",

						"string_literal",

					},
					
				},
				
			},

			{
				Name: "storage_class_specifier",
				Pattern: "(storage_class_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "string_literal",
				Pattern: "(string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "struct_specifier",
				Pattern: "(struct_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"field_declaration_list",

						"qualified_identifier",

						"template_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "structured_binding_declarator",
				Pattern: "(structured_binding_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "subscript_argument_list",
				Pattern: "(subscript_argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "subscript_designator",
				Pattern: "(subscript_designator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "subscript_expression",
				Pattern: "(subscript_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"subscript_argument_list",

					},
					
				},
				
			},

			{
				Name: "subscript_range_designator",
				Pattern: "(subscript_range_designator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "switch_statement",
				Pattern: "(switch_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					Children: []string{

						"compound_statement",

						"condition_clause",

					},
					
				},
				
			},

			{
				Name: "template_argument_list",
				Pattern: "(template_argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "template_declaration",
				Pattern: "(template_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"template_parameter_list",

					},
					
				},
				
			},

			{
				Name: "template_function",
				Pattern: "(template_function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"identifier",

						"template_argument_list",

					},
					
				},
				
			},

			{
				Name: "template_instantiation",
				Pattern: "(template_instantiation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_declarator",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "template_method",
				Pattern: "(template_method)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"field_identifier",

						"operator_name",

						"template_argument_list",

					},
					
				},
				
			},

			{
				Name: "template_parameter_list",
				Pattern: "(template_parameter_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "template_template_parameter_declaration",
				Pattern: "(template_template_parameter_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"template_parameter_list",

					},
					
				},
				
			},

			{
				Name: "template_type",
				Pattern: "(template_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"template_argument_list",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "throw_specifier",
				Pattern: "(throw_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "throw_statement",
				Pattern: "(throw_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "trailing_return_type",
				Pattern: "(trailing_return_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "translation_unit",
				Pattern: "(translation_unit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "try_statement",
				Pattern: "(try_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					Children: []string{

						"compound_statement",

					},
					
				},
				
			},

			{
				Name: "type_definition",
				Pattern: "(type_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_type_declarator",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "type_descriptor",
				Pattern: "(type_descriptor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_abstract_declarator",

						"type_specifier",

					},
					
				},
				
			},

			{
				Name: "type_parameter_declaration",
				Pattern: "(type_parameter_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_qualifier",
				Pattern: "(type_qualifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_requirement",
				Pattern: "(type_requirement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unary_expression",
				Pattern: "(unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"compl",

						"expression",

						"not",

						"preproc_defined",

					},
					
				},
				
			},

			{
				Name: "union_specifier",
				Pattern: "(union_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"field_declaration_list",

						"qualified_identifier",

						"template_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "update_expression",
				Pattern: "(update_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "user_defined_literal",
				Pattern: "(user_defined_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "using_declaration",
				Pattern: "(using_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "variadic_declarator",
				Pattern: "(variadic_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "variadic_parameter_declaration",
				Pattern: "(variadic_parameter_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"reference_declarator",

						"type_specifier",

						"variadic_declarator",

					},
					
				},
				
			},

			{
				Name: "variadic_type_parameter_declaration",
				Pattern: "(variadic_type_parameter_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "virtual_specifier",
				Pattern: "(virtual_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"condition_clause",

						"statement",

					},
					
				},
				
			},

			{
				Name: "NULL",
				Pattern: "(NULL)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "_Alignas",
				Pattern: "(_Alignas)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_Alignof",
				Pattern: "(_Alignof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_Atomic",
				Pattern: "(_Atomic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_Generic",
				Pattern: "(_Generic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_Nonnull",
				Pattern: "(_Nonnull)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_Noreturn",
				Pattern: "(_Noreturn)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "__alignof",
				Pattern: "(__alignof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__alignof__",
				Pattern: "(__alignof__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__asm",
				Pattern: "(__asm)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__asm__",
				Pattern: "(__asm__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__attribute",
				Pattern: "(__attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "__attribute__",
				Pattern: "(__attribute__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "__based",
				Pattern: "(__based)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__cdecl",
				Pattern: "(__cdecl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__clrcall",
				Pattern: "(__clrcall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "__declspec",
				Pattern: "(__declspec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__except",
				Pattern: "(__except)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__extension__",
				Pattern: "(__extension__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__fastcall",
				Pattern: "(__fastcall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "__finally",
				Pattern: "(__finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "__forceinline",
				Pattern: "(__forceinline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "__inline",
				Pattern: "(__inline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__inline__",
				Pattern: "(__inline__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__leave",
				Pattern: "(__leave)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__restrict__",
				Pattern: "(__restrict__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__stdcall",
				Pattern: "(__stdcall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "__thiscall",
				Pattern: "(__thiscall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "__thread",
				Pattern: "(__thread)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__try",
				Pattern: "(__try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "__unaligned",
				Pattern: "(__unaligned)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__vectorcall",
				Pattern: "(__vectorcall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "__volatile__",
				Pattern: "(__volatile__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_alignof",
				Pattern: "(_alignof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_unaligned",
				Pattern: "(_unaligned)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "alignas",
				Pattern: "(alignas)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "alignof",
				Pattern: "(alignof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "and",
				Pattern: "(and)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "and_eq",
				Pattern: "(and_eq)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "asm",
				Pattern: "(asm)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "auto",
				Pattern: "(auto)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "bitand",
				Pattern: "(bitand)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bitor",
				Pattern: "(bitor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "catch",
				Pattern: "(catch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "character",
				Pattern: "(character)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "co_await",
				Pattern: "(co_await)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "co_return",
				Pattern: "(co_return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "co_yield",
				Pattern: "(co_yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Return",

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "compl",
				Pattern: "(compl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "concept",
				Pattern: "(concept)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "const",
				Pattern: "(const)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "consteval",
				Pattern: "(consteval)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "constexpr",
				Pattern: "(constexpr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "constinit",
				Pattern: "(constinit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "decltype",
				Pattern: "(decltype)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "defined",
				Pattern: "(defined)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "delete",
				Pattern: "(delete)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "explicit",
				Pattern: "(explicit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "export",
				Pattern: "(export)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "extern",
				Pattern: "(extern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field_identifier",
				Pattern: "(field_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "final",
				Pattern: "(final)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "friend",
				Pattern: "(friend)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "goto",
				Pattern: "(goto)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "inline",
				Pattern: "(inline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "literal_suffix",
				Pattern: "(literal_suffix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "long",
				Pattern: "(long)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "module",
				Pattern: "(module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "ms_restrict_modifier",
				Pattern: "(ms_restrict_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "ms_signed_ptr_modifier",
				Pattern: "(ms_signed_ptr_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ms_unsigned_ptr_modifier",
				Pattern: "(ms_unsigned_ptr_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "mutable",
				Pattern: "(mutable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "namespace",
				Pattern: "(namespace)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "namespace_identifier",
				Pattern: "(namespace_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "new",
				Pattern: "(new)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "noexcept",
				Pattern: "(noexcept)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "noreturn",
				Pattern: "(noreturn)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "not",
				Pattern: "(not)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "not_eq",
				Pattern: "(not_eq)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "nullptr",
				Pattern: "(nullptr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "number_literal",
				Pattern: "(number_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "offsetof",
				Pattern: "(offsetof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "operator",
				Pattern: "(operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "or",
				Pattern: "(or)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "or_eq",
				Pattern: "(or_eq)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "override",
				Pattern: "(override)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "preproc_arg",
				Pattern: "(preproc_arg)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "preproc_directive",
				Pattern: "(preproc_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "primitive_type",
				Pattern: "(primitive_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "private",
				Pattern: "(private)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "protected",
				Pattern: "(protected)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "public",
				Pattern: "(public)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "raw_string_content",
				Pattern: "(raw_string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "raw_string_delimiter",
				Pattern: "(raw_string_delimiter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "register",
				Pattern: "(register)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "requires",
				Pattern: "(requires)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "restrict",
				Pattern: "(restrict)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "short",
				Pattern: "(short)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "signed",
				Pattern: "(signed)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "sizeof",
				Pattern: "(sizeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "statement_identifier",
				Pattern: "(statement_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "static",
				Pattern: "(static)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "static_assert",
				Pattern: "(static_assert)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_content",
				Pattern: "(string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "struct",
				Pattern: "(struct)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "switch",
				Pattern: "(switch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					
					
				},
				
			},

			{
				Name: "system_lib_string",
				Pattern: "(system_lib_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "template",
				Pattern: "(template)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "this",
				Pattern: "(this)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "thread_local",
				Pattern: "(thread_local)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "throw",
				Pattern: "(throw)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					Token: "self",
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "type_identifier",
				Pattern: "(type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "typedef",
				Pattern: "(typedef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "typename",
				Pattern: "(typename)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "union",
				Pattern: "(union)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unsigned",
				Pattern: "(unsigned)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "using",
				Pattern: "(using)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "virtual",
				Pattern: "(virtual)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "volatile",
				Pattern: "(volatile)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "xor",
				Pattern: "(xor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "xor_eq",
				Pattern: "(xor_eq)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

		},
	},

	{
		Language: "crystal",
		Extensions: []string{

			".cr",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "abstract_method_def",
				Pattern: "(abstract_method_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"class_type",

						"constant",

						"double_splat_type",

						"forall",

						"generic_instance_type",

						"identifier",

						"named_tuple_type",

						"nilable_type",

						"operator",

						"param_list",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "alias",
				Pattern: "(alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"class_type",

						"constant",

						"double_splat_type",

						"generic_instance_type",

						"named_tuple_type",

						"nilable_type",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "alignof",
				Pattern: "(alignof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "and",
				Pattern: "(and)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "annotation",
				Pattern: "(annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"argument_list",

					},
					
				},
				
			},

			{
				Name: "annotation_def",
				Pattern: "(annotation_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					
					Children: []string{

						"constant",

					},
					
				},
				
			},

			{
				Name: "argument_list",
				Pattern: "(argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "array",
				Pattern: "(array)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"class_type",

						"constant",

						"double_splat_type",

						"generic_instance_type",

						"named_tuple_type",

						"nilable_type",

						"of",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "array_like",
				Pattern: "(array_like)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"constant",

						"generic_instance_type",

						"tuple",

					},
					
				},
				
			},

			{
				Name: "asm",
				Pattern: "(asm)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"asm_clobbers",

						"asm_operands",

						"asm_options",

						"string",

					},
					
				},
				
			},

			{
				Name: "asm_clobbers",
				Pattern: "(asm_clobbers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "asm_operand",
				Pattern: "(asm_operand)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "asm_operands",
				Pattern: "(asm_operands)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "asm_options",
				Pattern: "(asm_options)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "assign",
				Pattern: "(assign)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"abstract_method_def",

						"alias",

						"alignof",

						"and",

						"annotation",

						"annotation_def",

						"array",

						"array_like",

						"asm",

						"assign",

						"assign_call",

						"begin",

						"break",

						"call",

						"case",

						"chained_string",

						"char",

						"class_def",

						"class_var",

						"command",

						"conditional",

						"const_assign",

						"constant",

						"enum_def",

						"expressions",

						"extend",

						"false",

						"float",

						"fun_def",

						"generic_instance_type",

						"global_var",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"include",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"lib_def",

						"macro_begin",

						"macro_def",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_def",

						"method_proc",

						"modifier_ensure",

						"modifier_if",

						"modifier_rescue",

						"modifier_unless",

						"module_def",

						"named_tuple",

						"next",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"require",

						"return",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"splat",

						"string",

						"struct_def",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"underscore",

						"uninitialized_var",

						"unless",

						"until",

						"visibility_modifier",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "assign_call",
				Pattern: "(assign_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "begin",
				Pattern: "(begin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"else",

						"ensure",

						"expressions",

						"rescue",

					},
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"else",

						"ensure",

						"expressions",

						"param_list",

						"rescue",

					},
					
				},
				
			},

			{
				Name: "block_argument",
				Pattern: "(block_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_param",
				Pattern: "(block_param)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"class_type",

						"class_var",

						"constant",

						"double_splat_type",

						"generic_instance_type",

						"identifier",

						"instance_var",

						"macro_var",

						"named_tuple_type",

						"nilable_type",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "c_struct_def",
				Pattern: "(c_struct_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"constant",

						"expressions",

					},
					
				},
				
			},

			{
				Name: "c_struct_fields",
				Pattern: "(c_struct_fields)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"class_type",

						"constant",

						"double_splat_type",

						"generic_instance_type",

						"identifier",

						"named_tuple_type",

						"nilable_type",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "call",
				Pattern: "(call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					Children: []string{

						"alignof",

						"and",

						"argument_list",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"block",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"operator",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "chained_string",
				Pattern: "(chained_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "char",
				Pattern: "(char)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "class_def",
				Pattern: "(class_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"constant",

						"expressions",

						"generic_instance_type",

						"generic_type",

					},
					
				},
				
			},

			{
				Name: "class_type",
				Pattern: "(class_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "command",
				Pattern: "(command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "conditional",
				Pattern: "(conditional)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "const_assign",
				Pattern: "(const_assign)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"abstract_method_def",

						"alias",

						"alignof",

						"and",

						"annotation",

						"annotation_def",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"break",

						"call",

						"case",

						"chained_string",

						"char",

						"class_def",

						"class_var",

						"command",

						"conditional",

						"const_assign",

						"constant",

						"enum_def",

						"expressions",

						"extend",

						"false",

						"float",

						"fun_def",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"include",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"lib_def",

						"macro_begin",

						"macro_def",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_def",

						"method_proc",

						"modifier_ensure",

						"modifier_if",

						"modifier_rescue",

						"modifier_unless",

						"module_def",

						"named_tuple",

						"next",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"require",

						"return",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"struct_def",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"visibility_modifier",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "constant",
				Pattern: "(constant)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "double_splat",
				Pattern: "(double_splat)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "double_splat_param",
				Pattern: "(double_splat_param)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"class_type",

						"class_var",

						"constant",

						"double_splat_type",

						"generic_instance_type",

						"identifier",

						"instance_var",

						"macro_var",

						"named_tuple_type",

						"nilable_type",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "double_splat_type",
				Pattern: "(double_splat_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expressions",

					},
					
				},
				
			},

			{
				Name: "elsif",
				Pattern: "(elsif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"else",

						"elsif",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"then",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "ensure",
				Pattern: "(ensure)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expressions",

					},
					
				},
				
			},

			{
				Name: "enum_def",
				Pattern: "(enum_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"class_type",

						"constant",

						"double_splat_type",

						"expressions",

						"generic_instance_type",

						"named_tuple_type",

						"nilable_type",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "expressions",
				Pattern: "(expressions)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extend",
				Pattern: "(extend)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "float",
				Pattern: "(float)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "forall",
				Pattern: "(forall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "fun_def",
				Pattern: "(fun_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"class_type",

						"constant",

						"double_splat_type",

						"expressions",

						"generic_instance_type",

						"identifier",

						"named_tuple_type",

						"nilable_type",

						"param_list",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"string",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "fun_param",
				Pattern: "(fun_param)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"class_type",

						"constant",

						"double_splat_type",

						"generic_instance_type",

						"identifier",

						"named_tuple_type",

						"nilable_type",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "generic_instance_type",
				Pattern: "(generic_instance_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"param_list",

					},
					
				},
				
			},

			{
				Name: "generic_type",
				Pattern: "(generic_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"param_list",

					},
					
				},
				
			},

			{
				Name: "global_var",
				Pattern: "(global_var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"class_type",

						"constant",

						"double_splat_type",

						"generic_instance_type",

						"identifier",

						"named_tuple_type",

						"nilable_type",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "hash",
				Pattern: "(hash)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"class_type",

						"constant",

						"double_splat_type",

						"generic_instance_type",

						"named_tuple_type",

						"nilable_type",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "hash_entry",
				Pattern: "(hash_entry)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "hash_like",
				Pattern: "(hash_like)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"constant",

						"generic_instance_type",

						"hash",

					},
					
				},
				
			},

			{
				Name: "heredoc_body",
				Pattern: "(heredoc_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"else",

						"elsif",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"then",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "implicit_object_call",
				Pattern: "(implicit_object_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"argument_list",

						"block",

						"identifier",

						"implicit_object_call",

						"operator",

					},
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"implicit_object_call",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "include",
				Pattern: "(include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "index_call",
				Pattern: "(index_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					Children: []string{

						"alignof",

						"and",

						"argument_list",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"operator",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "instance_alignof",
				Pattern: "(instance_alignof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "instance_sizeof",
				Pattern: "(instance_sizeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "integer",
				Pattern: "(integer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "interpolation",
				Pattern: "(interpolation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "lib_def",
				Pattern: "(lib_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"constant",

						"expressions",

						"generic_type",

					},
					
				},
				
			},

			{
				Name: "literal_content",
				Pattern: "(literal_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "macro_begin",
				Pattern: "(macro_begin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expressions",

					},
					
				},
				
			},

			{
				Name: "macro_content",
				Pattern: "(macro_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "macro_def",
				Pattern: "(macro_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expressions",

						"identifier",

						"operator",

						"param_list",

					},
					
				},
				
			},

			{
				Name: "macro_else",
				Pattern: "(macro_else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expressions",

					},
					
				},
				
			},

			{
				Name: "macro_elsif",
				Pattern: "(macro_elsif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_else",

						"macro_elsif",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "macro_expression",
				Pattern: "(macro_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "macro_for",
				Pattern: "(macro_for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"double_splat",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"splat",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"underscore",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "macro_if",
				Pattern: "(macro_if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_else",

						"macro_elsif",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "macro_statement",
				Pattern: "(macro_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "macro_unless",
				Pattern: "(macro_unless)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_else",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "macro_var",
				Pattern: "(macro_var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "macro_verbatim",
				Pattern: "(macro_verbatim)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expressions",

					},
					
				},
				
			},

			{
				Name: "method_def",
				Pattern: "(method_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"class_type",

						"constant",

						"double_splat_type",

						"else",

						"ensure",

						"expressions",

						"forall",

						"generic_instance_type",

						"identifier",

						"named_tuple_type",

						"nilable_type",

						"operator",

						"param_list",

						"pointer_type",

						"proc_type",

						"rescue",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "method_proc",
				Pattern: "(method_proc)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"class_var",

						"constant",

						"identifier",

						"instance_var",

						"operator",

						"param_list",

						"self",

					},
					
				},
				
			},

			{
				Name: "modifier_ensure",
				Pattern: "(modifier_ensure)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "modifier_if",
				Pattern: "(modifier_if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"abstract_method_def",

						"alias",

						"alignof",

						"and",

						"annotation",

						"annotation_def",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"break",

						"call",

						"case",

						"chained_string",

						"char",

						"class_def",

						"class_var",

						"command",

						"conditional",

						"const_assign",

						"constant",

						"enum_def",

						"expressions",

						"extend",

						"false",

						"float",

						"fun_def",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"include",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"lib_def",

						"macro_begin",

						"macro_def",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_def",

						"method_proc",

						"modifier_ensure",

						"modifier_if",

						"modifier_rescue",

						"modifier_unless",

						"module_def",

						"named_tuple",

						"next",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"require",

						"return",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"struct_def",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"visibility_modifier",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "modifier_rescue",
				Pattern: "(modifier_rescue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "modifier_unless",
				Pattern: "(modifier_unless)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"abstract_method_def",

						"alias",

						"alignof",

						"and",

						"annotation",

						"annotation_def",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"break",

						"call",

						"case",

						"chained_string",

						"char",

						"class_def",

						"class_var",

						"command",

						"conditional",

						"const_assign",

						"constant",

						"enum_def",

						"expressions",

						"extend",

						"false",

						"float",

						"fun_def",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"include",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"lib_def",

						"macro_begin",

						"macro_def",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_def",

						"method_proc",

						"modifier_ensure",

						"modifier_if",

						"modifier_rescue",

						"modifier_unless",

						"module_def",

						"named_tuple",

						"next",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"require",

						"return",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"struct_def",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"visibility_modifier",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "module_def",
				Pattern: "(module_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					Children: []string{

						"constant",

						"expressions",

						"generic_type",

					},
					
				},
				
			},

			{
				Name: "named_expr",
				Pattern: "(named_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "named_tuple",
				Pattern: "(named_tuple)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					
					
				},
				
			},

			{
				Name: "named_tuple_type",
				Pattern: "(named_tuple_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "named_type",
				Pattern: "(named_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "next",
				Pattern: "(next)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "nil",
				Pattern: "(nil)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "nilable_constant",
				Pattern: "(nilable_constant)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "nilable_type",
				Pattern: "(nilable_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "not",
				Pattern: "(not)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "offsetof",
				Pattern: "(offsetof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "op_assign",
				Pattern: "(op_assign)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"assign_call",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "operator",
				Pattern: "(operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "or",
				Pattern: "(or)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "out",
				Pattern: "(out)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "param",
				Pattern: "(param)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_type",

						"class_var",

						"command",

						"conditional",

						"constant",

						"double_splat_type",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"named_tuple_type",

						"nil",

						"nilable_constant",

						"nilable_type",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointer_type",

						"pointerof",

						"proc",

						"proc_type",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"splat_type",

						"static_array_type",

						"string",

						"symbol",

						"true",

						"tuple",

						"tuple_type",

						"type_declaration",

						"typeof",

						"underscore",

						"union_type",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "param_list",
				Pattern: "(param_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "pointer_type",
				Pattern: "(pointer_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pointerof",
				Pattern: "(pointerof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "proc",
				Pattern: "(proc)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"block",

						"class_type",

						"constant",

						"double_splat_type",

						"generic_instance_type",

						"named_tuple_type",

						"nilable_type",

						"param_list",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "proc_type",
				Pattern: "(proc_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"class_type",

						"constant",

						"double_splat_type",

						"generic_instance_type",

						"named_tuple_type",

						"nilable_type",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "pseudo_constant",
				Pattern: "(pseudo_constant)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "range",
				Pattern: "(range)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"operator",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "regex",
				Pattern: "(regex)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "require",
				Pattern: "(require)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "rescue",
				Pattern: "(rescue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"class_type",

						"constant",

						"double_splat_type",

						"expressions",

						"generic_instance_type",

						"identifier",

						"named_tuple_type",

						"nilable_type",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "select",
				Pattern: "(select)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "sizeof",
				Pattern: "(sizeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "splat",
				Pattern: "(splat)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "splat_param",
				Pattern: "(splat_param)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"class_type",

						"class_var",

						"constant",

						"double_splat_type",

						"generic_instance_type",

						"identifier",

						"instance_var",

						"macro_var",

						"named_tuple_type",

						"nilable_type",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "splat_type",
				Pattern: "(splat_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "static_array_type",
				Pattern: "(static_array_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "struct_def",
				Pattern: "(struct_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"constant",

						"expressions",

						"generic_instance_type",

						"generic_type",

					},
					
				},
				
			},

			{
				Name: "symbol",
				Pattern: "(symbol)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "then",
				Pattern: "(then)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "tuple",
				Pattern: "(tuple)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "tuple_type",
				Pattern: "(tuple_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					
					
				},
				
			},

			{
				Name: "type_declaration",
				Pattern: "(type_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_type",

						"class_var",

						"command",

						"conditional",

						"constant",

						"double_splat_type",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"named_tuple_type",

						"nil",

						"nilable_constant",

						"nilable_type",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointer_type",

						"pointerof",

						"proc",

						"proc_type",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"splat_type",

						"static_array_type",

						"string",

						"symbol",

						"true",

						"tuple",

						"tuple_type",

						"type_declaration",

						"typeof",

						"underscore",

						"union_type",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "type_def",
				Pattern: "(type_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"class_type",

						"constant",

						"double_splat_type",

						"generic_instance_type",

						"named_tuple_type",

						"nilable_type",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "typeof",
				Pattern: "(typeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "uninitialized_var",
				Pattern: "(uninitialized_var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "union_def",
				Pattern: "(union_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"constant",

						"expressions",

					},
					
				},
				
			},

			{
				Name: "union_fields",
				Pattern: "(union_fields)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"class_type",

						"constant",

						"double_splat_type",

						"generic_instance_type",

						"identifier",

						"named_tuple_type",

						"nilable_type",

						"pointer_type",

						"proc_type",

						"self",

						"splat_type",

						"static_array_type",

						"tuple_type",

						"typeof",

						"underscore",

						"union_type",

					},
					
				},
				
			},

			{
				Name: "union_type",
				Pattern: "(union_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unless",
				Pattern: "(unless)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"else",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"then",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "until",
				Pattern: "(until)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "visibility_modifier",
				Pattern: "(visibility_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"private",

						"protected",

					},
					
				},
				
			},

			{
				Name: "when",
				Pattern: "(when)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"implicit_object_call",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					Children: []string{

						"alignof",

						"and",

						"array",

						"array_like",

						"asm",

						"assign",

						"begin",

						"call",

						"case",

						"chained_string",

						"char",

						"class_var",

						"command",

						"conditional",

						"constant",

						"expressions",

						"false",

						"float",

						"generic_instance_type",

						"hash",

						"hash_like",

						"heredoc_start",

						"identifier",

						"if",

						"index_call",

						"instance_alignof",

						"instance_sizeof",

						"instance_var",

						"integer",

						"macro_begin",

						"macro_expression",

						"macro_for",

						"macro_if",

						"macro_statement",

						"macro_unless",

						"macro_var",

						"macro_verbatim",

						"method_proc",

						"named_tuple",

						"nil",

						"nilable_constant",

						"not",

						"offsetof",

						"op_assign",

						"or",

						"pointerof",

						"proc",

						"pseudo_constant",

						"range",

						"regex",

						"select",

						"self",

						"sizeof",

						"special_variable",

						"string",

						"symbol",

						"true",

						"tuple",

						"type_declaration",

						"typeof",

						"unless",

						"until",

						"while",

						"yield",

					},
					
				},
				
			},

			{
				Name: "__DIR__",
				Pattern: "(__DIR__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__END_LINE__",
				Pattern: "(__END_LINE__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__FILE__",
				Pattern: "(__FILE__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "__LINE__",
				Pattern: "(__LINE__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "abstract",
				Pattern: "(abstract)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "alias",
				Pattern: "(alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "alignof",
				Pattern: "(alignof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "annotation",
				Pattern: "(annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "asm",
				Pattern: "(asm)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "begin",
				Pattern: "(begin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "class_var",
				Pattern: "(class_var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "def",
				Pattern: "(def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "elsif",
				Pattern: "(elsif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "end",
				Pattern: "(end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ensure",
				Pattern: "(ensure)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extend",
				Pattern: "(extend)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "forall",
				Pattern: "(forall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "fun",
				Pattern: "(fun)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "heredoc_end",
				Pattern: "(heredoc_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "heredoc_start",
				Pattern: "(heredoc_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "include",
				Pattern: "(include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "instance_alignof",
				Pattern: "(instance_alignof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "instance_sizeof",
				Pattern: "(instance_sizeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "instance_var",
				Pattern: "(instance_var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "lib",
				Pattern: "(lib)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "loc_pragma_location",
				Pattern: "(loc_pragma_location)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "loc_pragma_pop",
				Pattern: "(loc_pragma_pop)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "loc_pragma_push",
				Pattern: "(loc_pragma_push)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "macro",
				Pattern: "(macro)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "module",
				Pattern: "(module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "next",
				Pattern: "(next)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "of",
				Pattern: "(of)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "offsetof",
				Pattern: "(offsetof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "out",
				Pattern: "(out)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pointerof",
				Pattern: "(pointerof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "private",
				Pattern: "(private)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "protected",
				Pattern: "(protected)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "regex_modifier",
				Pattern: "(regex_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					
					
					
				},
				
			},

			{
				Name: "require",
				Pattern: "(require)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "rescue",
				Pattern: "(rescue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "select",
				Pattern: "(select)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "self",
				Pattern: "(self)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "sizeof",
				Pattern: "(sizeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "special_variable",
				Pattern: "(special_variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "struct",
				Pattern: "(struct)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "then",
				Pattern: "(then)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "typeof",
				Pattern: "(typeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "underscore",
				Pattern: "(underscore)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "uninitialized",
				Pattern: "(uninitialized)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "union",
				Pattern: "(union)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unless",
				Pattern: "(unless)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "until",
				Pattern: "(until)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "verbatim",
				Pattern: "(verbatim)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "when",
				Pattern: "(when)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "with",
				Pattern: "(with)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "css",
		Extensions: []string{

			".css",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "adjacent_sibling_selector",
				Pattern: "(adjacent_sibling_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "arguments",
				Pattern: "(arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "at_rule",
				Pattern: "(at_rule)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "attribute_name",
				Pattern: "(attribute_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "attribute_selector",
				Pattern: "(attribute_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "binary_query",
				Pattern: "(binary_query)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "call_expression",
				Pattern: "(call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "charset_statement",
				Pattern: "(charset_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "child_selector",
				Pattern: "(child_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "class_name",
				Pattern: "(class_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "class_selector",
				Pattern: "(class_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "color_value",
				Pattern: "(color_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "declaration",
				Pattern: "(declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "descendant_selector",
				Pattern: "(descendant_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "feature_query",
				Pattern: "(feature_query)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "float_value",
				Pattern: "(float_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "grid_value",
				Pattern: "(grid_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "id_selector",
				Pattern: "(id_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "import_statement",
				Pattern: "(import_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "integer_value",
				Pattern: "(integer_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "keyframe_block",
				Pattern: "(keyframe_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "keyframe_block_list",
				Pattern: "(keyframe_block_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "keyframes_statement",
				Pattern: "(keyframes_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "media_statement",
				Pattern: "(media_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "namespace_selector",
				Pattern: "(namespace_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "namespace_statement",
				Pattern: "(namespace_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "parenthesized_query",
				Pattern: "(parenthesized_query)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "parenthesized_value",
				Pattern: "(parenthesized_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "postcss_statement",
				Pattern: "(postcss_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pseudo_class_selector",
				Pattern: "(pseudo_class_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "pseudo_element_selector",
				Pattern: "(pseudo_element_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "rule_set",
				Pattern: "(rule_set)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "selector_query",
				Pattern: "(selector_query)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "selectors",
				Pattern: "(selectors)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "sibling_selector",
				Pattern: "(sibling_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string_value",
				Pattern: "(string_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "stylesheet",
				Pattern: "(stylesheet)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "supports_statement",
				Pattern: "(supports_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unary_query",
				Pattern: "(unary_query)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "universal_selector",
				Pattern: "(universal_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "and",
				Pattern: "(and)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "at_keyword",
				Pattern: "(at_keyword)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "feature_name",
				Pattern: "(feature_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "from",
				Pattern: "(from)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "function_name",
				Pattern: "(function_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "id_name",
				Pattern: "(id_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "important",
				Pattern: "(important)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Reference",

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "js_comment",
				Pattern: "(js_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "keyframes_name",
				Pattern: "(keyframes_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "keyword_query",
				Pattern: "(keyword_query)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "namespace_name",
				Pattern: "(namespace_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "nesting_selector",
				Pattern: "(nesting_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "not",
				Pattern: "(not)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "of",
				Pattern: "(of)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "only",
				Pattern: "(only)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "or",
				Pattern: "(or)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "plain_value",
				Pattern: "(plain_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "property_name",
				Pattern: "(property_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "selector",
				Pattern: "(selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_content",
				Pattern: "(string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "tag_name",
				Pattern: "(tag_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "to",
				Pattern: "(to)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unit",
				Pattern: "(unit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "csv",
		Extensions: []string{

			".csv",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "boolean",
				Pattern: "(boolean)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "document",
				Pattern: "(document)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field",
				Pattern: "(field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "float",
				Pattern: "(float)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "number",
				Pattern: "(number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "row",
				Pattern: "(row)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "text",
				Pattern: "(text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

		},
	},

	{
		Language: "dart",
		Extensions: []string{

			".dart",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "_declaration",
				Pattern: "(_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_literal",
				Pattern: "(_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "_statement",
				Pattern: "(_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "abstract",
				Pattern: "(abstract)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "additive_expression",
				Pattern: "(additive_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "additive_operator",
				Pattern: "(additive_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "annotation",
				Pattern: "(annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "argument",
				Pattern: "(argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "argument_part",
				Pattern: "(argument_part)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "arguments",
				Pattern: "(arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "as_operator",
				Pattern: "(as_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "assert_statement",
				Pattern: "(assert_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "assertion",
				Pattern: "(assertion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "assertion_arguments",
				Pattern: "(assertion_arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "assignable_expression",
				Pattern: "(assignable_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "assignment_expression",
				Pattern: "(assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"_literal",

						"additive_expression",

						"assignable_expression",

						"assignment_expression",

						"bitwise_and_expression",

						"bitwise_or_expression",

						"bitwise_xor_expression",

						"cascade_section",

						"conditional_expression",

						"const_object_expression",

						"constructor_tearoff",

						"equality_expression",

						"function_expression",

						"identifier",

						"if_null_expression",

						"logical_and_expression",

						"logical_or_expression",

						"multiplicative_expression",

						"new_expression",

						"parenthesized_expression",

						"pattern_assignment",

						"postfix_expression",

						"relational_expression",

						"rethrow_expression",

						"selector",

						"shift_expression",

						"super",

						"switch_expression",

						"this",

						"throw_expression",

						"type_cast_expression",

						"type_test_expression",

						"unary_expression",

						"unconditional_assignable_selector",

					},
					
				},
				
			},

			{
				Name: "assignment_expression_without_cascade",
				Pattern: "(assignment_expression_without_cascade)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"_literal",

						"additive_expression",

						"assignable_expression",

						"assignment_expression_without_cascade",

						"bitwise_and_expression",

						"bitwise_or_expression",

						"bitwise_xor_expression",

						"conditional_expression",

						"const_object_expression",

						"constructor_tearoff",

						"equality_expression",

						"function_expression",

						"identifier",

						"if_null_expression",

						"logical_and_expression",

						"logical_or_expression",

						"multiplicative_expression",

						"new_expression",

						"parenthesized_expression",

						"postfix_expression",

						"relational_expression",

						"selector",

						"shift_expression",

						"super",

						"switch_expression",

						"this",

						"throw_expression_without_cascade",

						"type_cast_expression",

						"type_test_expression",

						"unary_expression",

						"unconditional_assignable_selector",

					},
					
				},
				
			},

			{
				Name: "await_expression",
				Pattern: "(await_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "base",
				Pattern: "(base)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "binary_operator",
				Pattern: "(binary_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "BinaryOp",
					Token: "self",
					Roles: []string{

						"Operator",

					},
					
					
				},
				
			},

			{
				Name: "bitwise_and_expression",
				Pattern: "(bitwise_and_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bitwise_operator",
				Pattern: "(bitwise_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "bitwise_or_expression",
				Pattern: "(bitwise_or_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bitwise_xor_expression",
				Pattern: "(bitwise_xor_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "break_statement",
				Pattern: "(break_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Body",

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "cascade_section",
				Pattern: "(cascade_section)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "cascade_selector",
				Pattern: "(cascade_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "case_builtin",
				Pattern: "(case_builtin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "cast_pattern",
				Pattern: "(cast_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "catch_clause",
				Pattern: "(catch_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "catch_parameters",
				Pattern: "(catch_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "class_body",
				Pattern: "(class_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "class_definition",
				Pattern: "(class_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Body",

						"Class",

						"Declaration",

					},
					Children: []string{

						"class_body",

						"identifier",

						"interfaces",

						"superclass",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "combinator",
				Pattern: "(combinator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "conditional_assignable_selector",
				Pattern: "(conditional_assignable_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "conditional_expression",
				Pattern: "(conditional_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_literal",

						"additive_expression",

						"assignment_expression_without_cascade",

						"bitwise_and_expression",

						"bitwise_or_expression",

						"bitwise_xor_expression",

						"conditional_expression",

						"const_object_expression",

						"constructor_tearoff",

						"equality_expression",

						"function_expression",

						"identifier",

						"if_null_expression",

						"logical_and_expression",

						"logical_or_expression",

						"multiplicative_expression",

						"new_expression",

						"parenthesized_expression",

						"postfix_expression",

						"relational_expression",

						"selector",

						"shift_expression",

						"super",

						"switch_expression",

						"this",

						"throw_expression_without_cascade",

						"type_cast_expression",

						"type_test_expression",

						"unary_expression",

						"unconditional_assignable_selector",

					},
					
				},
				
			},

			{
				Name: "configurable_uri",
				Pattern: "(configurable_uri)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "configuration_uri",
				Pattern: "(configuration_uri)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "configuration_uri_condition",
				Pattern: "(configuration_uri_condition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "const_object_expression",
				Pattern: "(const_object_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "constant_constructor_signature",
				Pattern: "(constant_constructor_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "constant_pattern",
				Pattern: "(constant_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "constructor_invocation",
				Pattern: "(constructor_invocation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "constructor_param",
				Pattern: "(constructor_param)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "constructor_signature",
				Pattern: "(constructor_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"formal_parameter_list",

						"identifier",

						"new",

					},
					
				},
				
			},

			{
				Name: "constructor_tearoff",
				Pattern: "(constructor_tearoff)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "continue_statement",
				Pattern: "(continue_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "declaration",
				Pattern: "(declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "do_statement",
				Pattern: "(do_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_statement",

						"parenthesized_expression",

					},
					
				},
				
			},

			{
				Name: "documentation_comment",
				Pattern: "(documentation_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "dotted_identifier_list",
				Pattern: "(dotted_identifier_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "enum_body",
				Pattern: "(enum_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enum_constant",
				Pattern: "(enum_constant)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "enum_declaration",
				Pattern: "(enum_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"enum_body",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "equality_expression",
				Pattern: "(equality_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "explicit_constructor_invocation",
				Pattern: "(explicit_constructor_invocation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"_literal",

						"arguments",

						"const_object_expression",

						"constructor_tearoff",

						"function_expression",

						"identifier",

						"new_expression",

						"parenthesized_expression",

						"scoped_identifier",

						"super",

						"switch_expression",

						"this",

						"type_arguments",

						"unconditional_assignable_selector",

					},
					
				},
				
			},

			{
				Name: "expression_statement",
				Pattern: "(expression_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "extension_body",
				Pattern: "(extension_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extension_declaration",
				Pattern: "(extension_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"Function",

						"extension_body",

						"function_type",

						"identifier",

						"nullable_type",

						"record_type",

						"type_arguments",

						"type_identifier",

						"type_parameters",

						"void_type",

					},
					
				},
				
			},

			{
				Name: "factory_constructor_signature",
				Pattern: "(factory_constructor_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field_initializer",
				Pattern: "(field_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "final_builtin",
				Pattern: "(final_builtin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "finally_clause",
				Pattern: "(finally_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "for_element",
				Pattern: "(for_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"_literal",

						"additive_expression",

						"assignment_expression",

						"bitwise_and_expression",

						"bitwise_or_expression",

						"bitwise_xor_expression",

						"cascade_section",

						"conditional_expression",

						"const_object_expression",

						"constructor_tearoff",

						"equality_expression",

						"for_element",

						"function_expression",

						"identifier",

						"if_element",

						"if_null_expression",

						"logical_and_expression",

						"logical_or_expression",

						"multiplicative_expression",

						"new_expression",

						"pair",

						"parenthesized_expression",

						"pattern_assignment",

						"postfix_expression",

						"relational_expression",

						"rethrow_expression",

						"selector",

						"shift_expression",

						"spread_element",

						"super",

						"switch_expression",

						"this",

						"throw_expression",

						"type_cast_expression",

						"type_test_expression",

						"unary_expression",

						"unconditional_assignable_selector",

					},
					
				},
				
			},

			{
				Name: "for_loop_parts",
				Pattern: "(for_loop_parts)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"_literal",

						"additive_expression",

						"assignment_expression",

						"bitwise_and_expression",

						"bitwise_or_expression",

						"bitwise_xor_expression",

						"cascade_section",

						"conditional_expression",

						"const_object_expression",

						"constructor_tearoff",

						"equality_expression",

						"function_expression",

						"identifier",

						"if_null_expression",

						"local_variable_declaration",

						"logical_and_expression",

						"logical_or_expression",

						"multiplicative_expression",

						"new_expression",

						"parenthesized_expression",

						"pattern_assignment",

						"postfix_expression",

						"relational_expression",

						"rethrow_expression",

						"selector",

						"shift_expression",

						"super",

						"switch_expression",

						"this",

						"throw_expression",

						"type_cast_expression",

						"type_test_expression",

						"unary_expression",

						"unconditional_assignable_selector",

					},
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"_statement",

					},
					
				},
				
			},

			{
				Name: "formal_parameter",
				Pattern: "(formal_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "formal_parameter_list",
				Pattern: "(formal_parameter_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "function_body",
				Pattern: "(function_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "function_expression",
				Pattern: "(function_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Body",

						"Function",

						"Declaration",

					},
					Children: []string{

						"formal_parameter_list",

						"function_expression_body",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "function_expression_body",
				Pattern: "(function_expression_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "function_signature",
				Pattern: "(function_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Body",

						"Function",

						"Declaration",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "function_type",
				Pattern: "(function_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "getter_signature",
				Pattern: "(getter_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Getter",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Getter",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "identifier_list",
				Pattern: "(identifier_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "if_element",
				Pattern: "(if_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"_literal",

						"additive_expression",

						"assignment_expression",

						"bitwise_and_expression",

						"bitwise_or_expression",

						"bitwise_xor_expression",

						"cascade_section",

						"conditional_expression",

						"const_object_expression",

						"constructor_tearoff",

						"equality_expression",

						"for_element",

						"function_expression",

						"identifier",

						"if_element",

						"if_null_expression",

						"logical_and_expression",

						"logical_or_expression",

						"multiplicative_expression",

						"new_expression",

						"pair",

						"parenthesized_expression",

						"pattern_assignment",

						"postfix_expression",

						"relational_expression",

						"rethrow_expression",

						"selector",

						"shift_expression",

						"spread_element",

						"super",

						"switch_expression",

						"this",

						"throw_expression",

						"type_cast_expression",

						"type_test_expression",

						"unary_expression",

						"unconditional_assignable_selector",

					},
					
				},
				
			},

			{
				Name: "if_null_expression",
				Pattern: "(if_null_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_literal",

						"additive_expression",

						"bitwise_and_expression",

						"bitwise_or_expression",

						"bitwise_xor_expression",

						"conditional_expression",

						"const_object_expression",

						"constructor_tearoff",

						"equality_expression",

						"function_expression",

						"identifier",

						"if_null_expression",

						"logical_and_expression",

						"logical_or_expression",

						"multiplicative_expression",

						"new_expression",

						"parenthesized_expression",

						"postfix_expression",

						"relational_expression",

						"selector",

						"shift_expression",

						"super",

						"switch_expression",

						"this",

						"type_cast_expression",

						"type_test_expression",

						"unary_expression",

						"unconditional_assignable_selector",

					},
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					Roles: []string{

						"Condition",

					},
					Children: []string{

						"_statement",

					},
					
				},
				
			},

			{
				Name: "import_or_export",
				Pattern: "(import_or_export)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Condition",

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_specification",
				Pattern: "(import_specification)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					
					
					
				},
				
			},

			{
				Name: "index_selector",
				Pattern: "(index_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					Token: "self",
					Roles: []string{

						"Index",

					},
					
					
				},
				
			},

			{
				Name: "inferred_type",
				Pattern: "(inferred_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "initialized_identifier",
				Pattern: "(initialized_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "initialized_identifier_list",
				Pattern: "(initialized_identifier_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "initialized_variable_definition",
				Pattern: "(initialized_variable_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"_literal",

						"additive_expression",

						"assignment_expression",

						"bitwise_and_expression",

						"bitwise_or_expression",

						"bitwise_xor_expression",

						"cascade_section",

						"conditional_expression",

						"const_object_expression",

						"constructor_tearoff",

						"equality_expression",

						"function_expression",

						"identifier",

						"if_null_expression",

						"logical_and_expression",

						"logical_or_expression",

						"multiplicative_expression",

						"new_expression",

						"parenthesized_expression",

						"pattern_assignment",

						"postfix_expression",

						"relational_expression",

						"rethrow_expression",

						"selector",

						"shift_expression",

						"super",

						"switch_expression",

						"this",

						"throw_expression",

						"type_cast_expression",

						"type_test_expression",

						"unary_expression",

						"unconditional_assignable_selector",

					},
					
				},
				
			},

			{
				Name: "initializer_list_entry",
				Pattern: "(initializer_list_entry)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "initializers",
				Pattern: "(initializers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "interface",
				Pattern: "(interface)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "interfaces",
				Pattern: "(interfaces)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "is_operator",
				Pattern: "(is_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "label",
				Pattern: "(label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "lambda_expression",
				Pattern: "(lambda_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					
					Roles: []string{

						"Lambda",

					},
					Children: []string{

						"function_body",

						"function_signature",

					},
					
				},
				
			},

			{
				Name: "library_export",
				Pattern: "(library_export)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "library_import",
				Pattern: "(library_import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "library_name",
				Pattern: "(library_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "list_literal",
				Pattern: "(list_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "list_pattern",
				Pattern: "(list_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "local_function_declaration",
				Pattern: "(local_function_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "local_variable_declaration",
				Pattern: "(local_variable_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "child:identifier",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "logical_and_expression",
				Pattern: "(logical_and_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "logical_and_operator",
				Pattern: "(logical_and_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "logical_or_expression",
				Pattern: "(logical_or_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "logical_or_operator",
				Pattern: "(logical_or_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "map_pattern",
				Pattern: "(map_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "method_signature",
				Pattern: "(method_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "mixin",
				Pattern: "(mixin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "mixin_application",
				Pattern: "(mixin_application)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "mixin_application_class",
				Pattern: "(mixin_application_class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "mixin_declaration",
				Pattern: "(mixin_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "mixins",
				Pattern: "(mixins)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "multiplicative_expression",
				Pattern: "(multiplicative_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "multiplicative_operator",
				Pattern: "(multiplicative_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "named_argument",
				Pattern: "(named_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "named_parameter_types",
				Pattern: "(named_parameter_types)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "negation_operator",
				Pattern: "(negation_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "new_expression",
				Pattern: "(new_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "normal_parameter_type",
				Pattern: "(normal_parameter_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "null_assert_pattern",
				Pattern: "(null_assert_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "null_check_pattern",
				Pattern: "(null_check_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "null_literal",
				Pattern: "(null_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "nullable_selector",
				Pattern: "(nullable_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "nullable_type",
				Pattern: "(nullable_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "object_pattern",
				Pattern: "(object_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "operator_signature",
				Pattern: "(operator_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "optional_formal_parameters",
				Pattern: "(optional_formal_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "optional_parameter_types",
				Pattern: "(optional_parameter_types)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "optional_positional_parameter_types",
				Pattern: "(optional_positional_parameter_types)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "pair",
				Pattern: "(pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_literal",

						"additive_expression",

						"assignment_expression",

						"bitwise_and_expression",

						"bitwise_or_expression",

						"bitwise_xor_expression",

						"cascade_section",

						"conditional_expression",

						"const_object_expression",

						"constructor_tearoff",

						"equality_expression",

						"function_expression",

						"identifier",

						"if_null_expression",

						"logical_and_expression",

						"logical_or_expression",

						"multiplicative_expression",

						"new_expression",

						"parenthesized_expression",

						"pattern_assignment",

						"postfix_expression",

						"relational_expression",

						"rethrow_expression",

						"selector",

						"shift_expression",

						"super",

						"switch_expression",

						"this",

						"throw_expression",

						"type_cast_expression",

						"type_test_expression",

						"unary_expression",

						"unconditional_assignable_selector",

					},
					
				},
				
			},

			{
				Name: "parameter_type_list",
				Pattern: "(parameter_type_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "part_directive",
				Pattern: "(part_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "part_of_directive",
				Pattern: "(part_of_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pattern_assignment",
				Pattern: "(pattern_assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					
					
				},
				
			},

			{
				Name: "pattern_variable_declaration",
				Pattern: "(pattern_variable_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "postfix_expression",
				Pattern: "(postfix_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "child:identifier",
					
					
					
				},
				
			},

			{
				Name: "postfix_operator",
				Pattern: "(postfix_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "prefix_operator",
				Pattern: "(prefix_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "program",
				Pattern: "(program)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "qualified",
				Pattern: "(qualified)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "File",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "record_field",
				Pattern: "(record_field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "record_literal",
				Pattern: "(record_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "record_pattern",
				Pattern: "(record_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "record_type",
				Pattern: "(record_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "record_type_field",
				Pattern: "(record_type_field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "record_type_named_field",
				Pattern: "(record_type_named_field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "redirecting_factory_constructor_signature",
				Pattern: "(redirecting_factory_constructor_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "redirection",
				Pattern: "(redirection)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "relational_expression",
				Pattern: "(relational_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "relational_operator",
				Pattern: "(relational_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "rest_pattern",
				Pattern: "(rest_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "rethrow_expression",
				Pattern: "(rethrow_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					Token: "self",
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "return_statement",
				Pattern: "(return_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "scoped_identifier",
				Pattern: "(scoped_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					Children: []string{

						"identifier",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "script_tag",
				Pattern: "(script_tag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "sealed",
				Pattern: "(sealed)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "selector",
				Pattern: "(selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "set_or_map_literal",
				Pattern: "(set_or_map_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "setter_signature",
				Pattern: "(setter_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Setter",
					
					Roles: []string{

						"Setter",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "shift_expression",
				Pattern: "(shift_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "shift_operator",
				Pattern: "(shift_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					
					
					
				},
				
			},

			{
				Name: "spread_element",
				Pattern: "(spread_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Spread",
					Token: "self",
					Roles: []string{

						"Spread",

					},
					
					
				},
				
			},

			{
				Name: "static_final_declaration",
				Pattern: "(static_final_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "static_final_declaration_list",
				Pattern: "(static_final_declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_literal",
				Pattern: "(string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "super",
				Pattern: "(super)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "super_formal_parameter",
				Pattern: "(super_formal_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "superclass",
				Pattern: "(superclass)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "switch_block",
				Pattern: "(switch_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "switch_expression",
				Pattern: "(switch_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"parenthesized_expression",

						"switch_expression_case",

					},
					
				},
				
			},

			{
				Name: "switch_expression_case",
				Pattern: "(switch_expression_case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					
					
				},
				
			},

			{
				Name: "switch_statement",
				Pattern: "(switch_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"parenthesized_expression",

						"switch_block",

					},
					
				},
				
			},

			{
				Name: "switch_statement_case",
				Pattern: "(switch_statement_case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					
					
				},
				
			},

			{
				Name: "switch_statement_default",
				Pattern: "(switch_statement_default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "symbol_literal",
				Pattern: "(symbol_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "template_substitution",
				Pattern: "(template_substitution)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "this",
				Pattern: "(this)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "throw_expression",
				Pattern: "(throw_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					Token: "self",
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "throw_expression_without_cascade",
				Pattern: "(throw_expression_without_cascade)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "tilde_operator",
				Pattern: "(tilde_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "try_statement",
				Pattern: "(try_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "type_alias",
				Pattern: "(type_alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_arguments",
				Pattern: "(type_arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_bound",
				Pattern: "(type_bound)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_cast",
				Pattern: "(type_cast)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_cast_expression",
				Pattern: "(type_cast_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					
					
					
					
				},
				
			},

			{
				Name: "type_parameter",
				Pattern: "(type_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_parameters",
				Pattern: "(type_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_test",
				Pattern: "(type_test)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_test_expression",
				Pattern: "(type_test_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "typed_identifier",
				Pattern: "(typed_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unary_expression",
				Pattern: "(unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unconditional_assignable_selector",
				Pattern: "(unconditional_assignable_selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "UnaryOp",
					Token: "self",
					Roles: []string{

						"Operator",

					},
					
					
				},
				
			},

			{
				Name: "uri",
				Pattern: "(uri)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "uri_test",
				Pattern: "(uri_test)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "variable_pattern",
				Pattern: "(variable_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"_statement",

						"parenthesized_expression",

					},
					
				},
				
			},

			{
				Name: "yield_each_statement",
				Pattern: "(yield_each_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "yield_statement",
				Pattern: "(yield_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "Function",
				Pattern: "(Function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "abstract",
				Pattern: "(abstract)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "as",
				Pattern: "(as)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "assert_builtin",
				Pattern: "(assert_builtin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "async",
				Pattern: "(async)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "await",
				Pattern: "(await)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "base",
				Pattern: "(base)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bool",
				Pattern: "(bool)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "break_builtin",
				Pattern: "(break_builtin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "catch",
				Pattern: "(catch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "const_builtin",
				Pattern: "(const_builtin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "covariant",
				Pattern: "(covariant)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "decimal_floating_point_literal",
				Pattern: "(decimal_floating_point_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "decimal_integer_literal",
				Pattern: "(decimal_integer_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "deferred",
				Pattern: "(deferred)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "dynamic",
				Pattern: "(dynamic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "equality_operator",
				Pattern: "(equality_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "export",
				Pattern: "(export)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extends",
				Pattern: "(extends)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "extension",
				Pattern: "(extension)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "external",
				Pattern: "(external)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "factory",
				Pattern: "(factory)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "final",
				Pattern: "(final)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "finally",
				Pattern: "(finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "get",
				Pattern: "(get)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "hex_integer_literal",
				Pattern: "(hex_integer_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "hide",
				Pattern: "(hide)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "identifier_dollar_escaped",
				Pattern: "(identifier_dollar_escaped)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "implements",
				Pattern: "(implements)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "increment_operator",
				Pattern: "(increment_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "inline",
				Pattern: "(inline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "interface",
				Pattern: "(interface)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "is",
				Pattern: "(is)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "late",
				Pattern: "(late)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "library",
				Pattern: "(library)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "minus_operator",
				Pattern: "(minus_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "mixin",
				Pattern: "(mixin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "native",
				Pattern: "(native)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "new",
				Pattern: "(new)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "null",
				Pattern: "(null)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "on",
				Pattern: "(on)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "operator",
				Pattern: "(operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "part",
				Pattern: "(part)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "part_of_builtin",
				Pattern: "(part_of_builtin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "required",
				Pattern: "(required)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "rethrow_builtin",
				Pattern: "(rethrow_builtin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					Token: "self",
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "sealed",
				Pattern: "(sealed)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "set",
				Pattern: "(set)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "show",
				Pattern: "(show)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "static",
				Pattern: "(static)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "super",
				Pattern: "(super)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "switch",
				Pattern: "(switch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					
					
				},
				
			},

			{
				Name: "this",
				Pattern: "(this)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "throw",
				Pattern: "(throw)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "type_identifier",
				Pattern: "(type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "typedef",
				Pattern: "(typedef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "var",
				Pattern: "(var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "void_type",
				Pattern: "(void_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "when",
				Pattern: "(when)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "with",
				Pattern: "(with)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "dockerfile",
		Extensions: []string{

			".dockerfile",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "add_instruction",
				Pattern: "(add_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "arg_instruction",
				Pattern: "(arg_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"double_quoted_string",

						"single_quoted_string",

						"unquoted_string",

					},
					
				},
				
			},

			{
				Name: "cmd_instruction",
				Pattern: "(cmd_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "copy_instruction",
				Pattern: "(copy_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "cross_build_instruction",
				Pattern: "(cross_build_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "double_quoted_string",
				Pattern: "(double_quoted_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "entrypoint_instruction",
				Pattern: "(entrypoint_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "env_instruction",
				Pattern: "(env_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "env_pair",
				Pattern: "(env_pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"double_quoted_string",

						"single_quoted_string",

						"unquoted_string",

					},
					
				},
				
			},

			{
				Name: "expansion",
				Pattern: "(expansion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "expose_instruction",
				Pattern: "(expose_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "expose_port",
				Pattern: "(expose_port)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "from_instruction",
				Pattern: "(from_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"image_alias",

					},
					
				},
				
			},

			{
				Name: "healthcheck_instruction",
				Pattern: "(healthcheck_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "heredoc_block",
				Pattern: "(heredoc_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "image_alias",
				Pattern: "(image_alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "image_digest",
				Pattern: "(image_digest)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "image_name",
				Pattern: "(image_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "image_spec",
				Pattern: "(image_spec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"image_digest",

						"image_name",

						"image_tag",

					},
					
				},
				
			},

			{
				Name: "image_tag",
				Pattern: "(image_tag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "json_string",
				Pattern: "(json_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "json_string_array",
				Pattern: "(json_string_array)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "label_instruction",
				Pattern: "(label_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "label_pair",
				Pattern: "(label_pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"double_quoted_string",

						"single_quoted_string",

						"unquoted_string",

					},
					
				},
				
			},

			{
				Name: "maintainer_instruction",
				Pattern: "(maintainer_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "mount_param",
				Pattern: "(mount_param)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"mount",

						"mount_param_param",

					},
					
				},
				
			},

			{
				Name: "mount_param_param",
				Pattern: "(mount_param_param)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "onbuild_instruction",
				Pattern: "(onbuild_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "param",
				Pattern: "(param)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "path",
				Pattern: "(path)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "run_instruction",
				Pattern: "(run_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "shell_command",
				Pattern: "(shell_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "shell_fragment",
				Pattern: "(shell_fragment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "shell_instruction",
				Pattern: "(shell_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "single_quoted_string",
				Pattern: "(single_quoted_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "source_file",
				Pattern: "(source_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "stopsignal_instruction",
				Pattern: "(stopsignal_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "unquoted_string",
				Pattern: "(unquoted_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "user_instruction",
				Pattern: "(user_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"unquoted_string",

					},
					
				},
				
			},

			{
				Name: "volume_instruction",
				Pattern: "(volume_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "workdir_instruction",
				Pattern: "(workdir_instruction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "ADD",
				Pattern: "(ADD)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ARG",
				Pattern: "(ARG)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "AS",
				Pattern: "(AS)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "CMD",
				Pattern: "(CMD)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "COPY",
				Pattern: "(COPY)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "CROSS_BUILD",
				Pattern: "(CROSS_BUILD)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ENTRYPOINT",
				Pattern: "(ENTRYPOINT)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "ENV",
				Pattern: "(ENV)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "EXPOSE",
				Pattern: "(EXPOSE)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "FROM",
				Pattern: "(FROM)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "HEALTHCHECK",
				Pattern: "(HEALTHCHECK)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "LABEL",
				Pattern: "(LABEL)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "MAINTAINER",
				Pattern: "(MAINTAINER)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "NONE",
				Pattern: "(NONE)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ONBUILD",
				Pattern: "(ONBUILD)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "RUN",
				Pattern: "(RUN)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "SHELL",
				Pattern: "(SHELL)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "STOPSIGNAL",
				Pattern: "(STOPSIGNAL)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "USER",
				Pattern: "(USER)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "VOLUME",
				Pattern: "(VOLUME)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "WORKDIR",
				Pattern: "(WORKDIR)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_heredoc_nl",
				Pattern: "(_heredoc_nl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "heredoc_end",
				Pattern: "(heredoc_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "heredoc_line",
				Pattern: "(heredoc_line)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "heredoc_marker",
				Pattern: "(heredoc_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "line_continuation",
				Pattern: "(line_continuation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "mount",
				Pattern: "(mount)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "variable",
				Pattern: "(variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "dotenv",
		Extensions: []string{

			".env",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "bool",
				Pattern: "(bool)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "interpolated_variable",
				Pattern: "(interpolated_variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "source_file",
				Pattern: "(source_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string_interpolated",
				Pattern: "(string_interpolated)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "File",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_literal",
				Pattern: "(string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "value",
				Pattern: "(value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "variable",
				Pattern: "(variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"identifier",

						"value",

					},
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "integer",
				Pattern: "(integer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "raw_value",
				Pattern: "(raw_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "shell_command",
				Pattern: "(shell_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "url",
				Pattern: "(url)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "elixir",
		Extensions: []string{

			".ex",

			".exs",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "access_call",
				Pattern: "(access_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"access_call",

						"alias",

						"anonymous_function",

						"atom",

						"binary_operator",

						"bitstring",

						"block",

						"boolean",

						"call",

						"char",

						"charlist",

						"dot",

						"float",

						"identifier",

						"integer",

						"list",

						"map",

						"nil",

						"operator_identifier",

						"quoted_atom",

						"sigil",

						"string",

						"tuple",

						"unary_operator",

					},
					
				},
				
			},

			{
				Name: "after_block",
				Pattern: "(after_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Call",

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "anonymous_function",
				Pattern: "(anonymous_function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "arguments",
				Pattern: "(arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "binary_operator",
				Pattern: "(binary_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "BinaryOp",
					
					Roles: []string{

						"Operator",

					},
					Children: []string{

						"access_call",

						"alias",

						"and",

						"anonymous_function",

						"arguments",

						"atom",

						"binary_operator",

						"bitstring",

						"block",

						"boolean",

						"call",

						"char",

						"charlist",

						"dot",

						"float",

						"identifier",

						"in",

						"integer",

						"keywords",

						"list",

						"map",

						"nil",

						"operator_identifier",

						"or",

						"quoted_atom",

						"sigil",

						"string",

						"tuple",

						"unary_operator",

						"when",

					},
					
				},
				
			},

			{
				Name: "bitstring",
				Pattern: "(bitstring)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "body",
				Pattern: "(body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "boolean",
				Pattern: "(boolean)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "call",
				Pattern: "(call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					Children: []string{

						"call",

						"dot",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "catch_block",
				Pattern: "(catch_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "charlist",
				Pattern: "(charlist)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "do_block",
				Pattern: "(do_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "dot",
				Pattern: "(dot)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"access_call",

						"alias",

						"anonymous_function",

						"atom",

						"binary_operator",

						"bitstring",

						"block",

						"boolean",

						"call",

						"char",

						"charlist",

						"dot",

						"float",

						"identifier",

						"integer",

						"list",

						"map",

						"nil",

						"operator_identifier",

						"quoted_atom",

						"sigil",

						"string",

						"tuple",

						"unary_operator",

					},
					
				},
				
			},

			{
				Name: "else_block",
				Pattern: "(else_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "interpolation",
				Pattern: "(interpolation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keywords",
				Pattern: "(keywords)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "list",
				Pattern: "(list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "map",
				Pattern: "(map)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "map_content",
				Pattern: "(map_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "nil",
				Pattern: "(nil)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "operator_identifier",
				Pattern: "(operator_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "pair",
				Pattern: "(pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					Children: []string{

						"access_call",

						"alias",

						"anonymous_function",

						"atom",

						"binary_operator",

						"bitstring",

						"block",

						"boolean",

						"call",

						"char",

						"charlist",

						"dot",

						"float",

						"identifier",

						"integer",

						"keyword",

						"list",

						"map",

						"nil",

						"operator_identifier",

						"quoted_atom",

						"quoted_keyword",

						"sigil",

						"string",

						"tuple",

						"unary_operator",

					},
					
				},
				
			},

			{
				Name: "quoted_atom",
				Pattern: "(quoted_atom)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "quoted_keyword",
				Pattern: "(quoted_keyword)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "rescue_block",
				Pattern: "(rescue_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "sigil",
				Pattern: "(sigil)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "source",
				Pattern: "(source)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "stab_clause",
				Pattern: "(stab_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"arguments",

						"binary_operator",

						"body",

					},
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "struct",
				Pattern: "(struct)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "tuple",
				Pattern: "(tuple)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					
					
				},
				
			},

			{
				Name: "unary_operator",
				Pattern: "(unary_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "UnaryOp",
					Token: "self",
					Roles: []string{

						"Operator",

					},
					Children: []string{

						"access_call",

						"alias",

						"anonymous_function",

						"atom",

						"binary_operator",

						"bitstring",

						"block",

						"boolean",

						"call",

						"char",

						"charlist",

						"dot",

						"float",

						"identifier",

						"integer",

						"list",

						"map",

						"nil",

						"not",

						"operator_identifier",

						"quoted_atom",

						"sigil",

						"string",

						"tuple",

						"unary_operator",

					},
					
				},
				
			},

			{
				Name: "after",
				Pattern: "(after)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "alias",
				Pattern: "(alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "and",
				Pattern: "(and)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "atom",
				Pattern: "(atom)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "catch",
				Pattern: "(catch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "char",
				Pattern: "(char)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "end",
				Pattern: "(end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "float",
				Pattern: "(float)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "fn",
				Pattern: "(fn)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "integer",
				Pattern: "(integer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword",
				Pattern: "(keyword)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "nil",
				Pattern: "(nil)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "not",
				Pattern: "(not)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "or",
				Pattern: "(or)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "quoted_content",
				Pattern: "(quoted_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "rescue",
				Pattern: "(rescue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "sigil_modifiers",
				Pattern: "(sigil_modifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "sigil_name",
				Pattern: "(sigil_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "when",
				Pattern: "(when)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "elm",
		Extensions: []string{

			".elm",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "anonymous_function_expr",
				Pattern: "(anonymous_function_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"anonymous_function_expr",

						"bin_op_expr",

						"case_of_expr",

						"char_constant_expr",

						"field_access_expr",

						"field_accessor_function_expr",

						"function_call_expr",

						"glsl_code_expr",

						"if_else_expr",

						"let_in_expr",

						"list_expr",

						"negate_expr",

						"number_constant_expr",

						"operator_as_function_expr",

						"parenthesized_expr",

						"pattern",

						"record_expr",

						"string_constant_expr",

						"tuple_expr",

						"unit_expr",

						"value_expr",

					},
					
				},
				
			},

			{
				Name: "anything_pattern",
				Pattern: "(anything_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "as_clause",
				Pattern: "(as_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"upper_case_identifier",

					},
					
				},
				
			},

			{
				Name: "bin_op_expr",
				Pattern: "(bin_op_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"anonymous_function_expr",

						"case_of_expr",

						"char_constant_expr",

						"field_access_expr",

						"field_accessor_function_expr",

						"function_call_expr",

						"glsl_code_expr",

						"if_else_expr",

						"let_in_expr",

						"list_expr",

						"negate_expr",

						"number_constant_expr",

						"operator",

						"operator_as_function_expr",

						"parenthesized_expr",

						"record_expr",

						"string_constant_expr",

						"tuple_expr",

						"unit_expr",

						"value_expr",

					},
					
				},
				
			},

			{
				Name: "block_comment",
				Pattern: "(block_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "case_of_branch",
				Pattern: "(case_of_branch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Comment",

						"Branch",

					},
					Children: []string{

						"anonymous_function_expr",

						"bin_op_expr",

						"case_of_expr",

						"char_constant_expr",

						"field_access_expr",

						"field_accessor_function_expr",

						"function_call_expr",

						"glsl_code_expr",

						"if_else_expr",

						"let_in_expr",

						"list_expr",

						"negate_expr",

						"number_constant_expr",

						"operator_as_function_expr",

						"parenthesized_expr",

						"pattern",

						"record_expr",

						"string_constant_expr",

						"tuple_expr",

						"unit_expr",

						"value_expr",

					},
					
				},
				
			},

			{
				Name: "case_of_expr",
				Pattern: "(case_of_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"anonymous_function_expr",

						"bin_op_expr",

						"case_of_branch",

						"case_of_expr",

						"char_constant_expr",

						"field_access_expr",

						"field_accessor_function_expr",

						"function_call_expr",

						"glsl_code_expr",

						"if_else_expr",

						"let_in_expr",

						"list_expr",

						"negate_expr",

						"number_constant_expr",

						"operator_as_function_expr",

						"parenthesized_expr",

						"record_expr",

						"string_constant_expr",

						"tuple_expr",

						"unit_expr",

						"value_expr",

					},
					
				},
				
			},

			{
				Name: "char_constant_expr",
				Pattern: "(char_constant_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "cons_pattern",
				Pattern: "(cons_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"anything_pattern",

						"char_constant_expr",

						"cons_pattern",

						"list_pattern",

						"lower_pattern",

						"number_constant_expr",

						"pattern",

						"record_pattern",

						"string_constant_expr",

						"tuple_pattern",

						"union_pattern",

						"unit_expr",

					},
					
				},
				
			},

			{
				Name: "dot",
				Pattern: "(dot)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "exposed_operator",
				Pattern: "(exposed_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"operator_identifier",

					},
					
				},
				
			},

			{
				Name: "exposed_type",
				Pattern: "(exposed_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "exposed_union_constructors",
				Pattern: "(exposed_union_constructors)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "exposed_value",
				Pattern: "(exposed_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "exposing_list",
				Pattern: "(exposing_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					Children: []string{

						"double_dot",

					},
					
				},
				
			},

			{
				Name: "field",
				Pattern: "(field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"anonymous_function_expr",

						"bin_op_expr",

						"case_of_expr",

						"char_constant_expr",

						"field_access_expr",

						"field_accessor_function_expr",

						"function_call_expr",

						"glsl_code_expr",

						"if_else_expr",

						"let_in_expr",

						"list_expr",

						"lower_case_identifier",

						"negate_expr",

						"number_constant_expr",

						"operator_as_function_expr",

						"parenthesized_expr",

						"record_expr",

						"string_constant_expr",

						"tuple_expr",

						"unit_expr",

						"value_expr",

					},
					
				},
				
			},

			{
				Name: "field_access_expr",
				Pattern: "(field_access_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"field_access_expr",

						"parenthesized_expr",

						"record_expr",

						"value_expr",

					},
					
				},
				
			},

			{
				Name: "field_accessor_function_expr",
				Pattern: "(field_accessor_function_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "field_type",
				Pattern: "(field_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"lower_case_identifier",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "file",
				Pattern: "(file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"module_declaration",

					},
					
				},
				
			},

			{
				Name: "function_call_expr",
				Pattern: "(function_call_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"anonymous_function_expr",

						"case_of_expr",

						"char_constant_expr",

						"field_access_expr",

						"field_accessor_function_expr",

						"glsl_code_expr",

						"if_else_expr",

						"let_in_expr",

						"list_expr",

						"negate_expr",

						"number_constant_expr",

						"operator_as_function_expr",

						"parenthesized_expr",

						"record_expr",

						"string_constant_expr",

						"tuple_expr",

						"unit_expr",

						"value_expr",

					},
					
				},
				
			},

			{
				Name: "function_declaration_left",
				Pattern: "(function_declaration_left)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"anything_pattern",

						"char_constant_expr",

						"list_pattern",

						"lower_pattern",

						"number_constant_expr",

						"pattern",

						"record_pattern",

						"string_constant_expr",

						"tuple_pattern",

						"unit_expr",

					},
					
				},
				
			},

			{
				Name: "glsl_code_expr",
				Pattern: "(glsl_code_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"glsl_content",

					},
					
				},
				
			},

			{
				Name: "if_else_expr",
				Pattern: "(if_else_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"anonymous_function_expr",

						"bin_op_expr",

						"case_of_expr",

						"char_constant_expr",

						"field_access_expr",

						"field_accessor_function_expr",

						"function_call_expr",

						"glsl_code_expr",

						"if_else_expr",

						"let_in_expr",

						"list_expr",

						"negate_expr",

						"number_constant_expr",

						"operator_as_function_expr",

						"parenthesized_expr",

						"record_expr",

						"string_constant_expr",

						"tuple_expr",

						"unit_expr",

						"value_expr",

					},
					
				},
				
			},

			{
				Name: "import_clause",
				Pattern: "(import_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					Children: []string{

						"as_clause",

						"exposing_list",

						"upper_case_qid",

					},
					
				},
				
			},

			{
				Name: "infix_declaration",
				Pattern: "(infix_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"lower_case_identifier",

						"number_literal",

						"operator_identifier",

					},
					
				},
				
			},

			{
				Name: "let_in_expr",
				Pattern: "(let_in_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"anonymous_function_expr",

						"bin_op_expr",

						"case_of_expr",

						"char_constant_expr",

						"field_access_expr",

						"field_accessor_function_expr",

						"function_call_expr",

						"glsl_code_expr",

						"if_else_expr",

						"let_in_expr",

						"list_expr",

						"negate_expr",

						"number_constant_expr",

						"operator_as_function_expr",

						"parenthesized_expr",

						"record_expr",

						"string_constant_expr",

						"tuple_expr",

						"unit_expr",

						"value_declaration",

						"value_expr",

					},
					
				},
				
			},

			{
				Name: "list_expr",
				Pattern: "(list_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"anonymous_function_expr",

						"bin_op_expr",

						"case_of_expr",

						"char_constant_expr",

						"field_access_expr",

						"field_accessor_function_expr",

						"function_call_expr",

						"glsl_code_expr",

						"if_else_expr",

						"let_in_expr",

						"list_expr",

						"negate_expr",

						"number_constant_expr",

						"operator_as_function_expr",

						"parenthesized_expr",

						"record_expr",

						"string_constant_expr",

						"tuple_expr",

						"unit_expr",

						"value_expr",

					},
					
				},
				
			},

			{
				Name: "list_pattern",
				Pattern: "(list_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					Children: []string{

						"pattern",

					},
					
				},
				
			},

			{
				Name: "lower_pattern",
				Pattern: "(lower_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "lower_type_name",
				Pattern: "(lower_type_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "module_declaration",
				Pattern: "(module_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"exposing_list",

						"upper_case_qid",

					},
					
				},
				
			},

			{
				Name: "negate_expr",
				Pattern: "(negate_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "nullary_constructor_argument_pattern",
				Pattern: "(nullary_constructor_argument_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "number_constant_expr",
				Pattern: "(number_constant_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "operator",
				Pattern: "(operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "operator_as_function_expr",
				Pattern: "(operator_as_function_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"operator_identifier",

					},
					
				},
				
			},

			{
				Name: "operator_identifier",
				Pattern: "(operator_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "parenthesized_expr",
				Pattern: "(parenthesized_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"anonymous_function_expr",

						"bin_op_expr",

						"case_of_expr",

						"char_constant_expr",

						"field_access_expr",

						"field_accessor_function_expr",

						"function_call_expr",

						"glsl_code_expr",

						"if_else_expr",

						"let_in_expr",

						"list_expr",

						"negate_expr",

						"number_constant_expr",

						"operator_as_function_expr",

						"parenthesized_expr",

						"record_expr",

						"string_constant_expr",

						"tuple_expr",

						"unit_expr",

						"value_expr",

					},
					
				},
				
			},

			{
				Name: "pattern",
				Pattern: "(pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"anything_pattern",

						"char_constant_expr",

						"cons_pattern",

						"list_pattern",

						"lower_pattern",

						"number_constant_expr",

						"pattern",

						"record_pattern",

						"string_constant_expr",

						"tuple_pattern",

						"union_pattern",

						"unit_expr",

					},
					
				},
				
			},

			{
				Name: "port_annotation",
				Pattern: "(port_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"lower_case_identifier",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "record_base_identifier",
				Pattern: "(record_base_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "record_expr",
				Pattern: "(record_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"field",

						"record_base_identifier",

					},
					
				},
				
			},

			{
				Name: "record_pattern",
				Pattern: "(record_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"lower_pattern",

					},
					
				},
				
			},

			{
				Name: "record_type",
				Pattern: "(record_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"field_type",

						"record_base_identifier",

					},
					
				},
				
			},

			{
				Name: "string_constant_expr",
				Pattern: "(string_constant_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "tuple_expr",
				Pattern: "(tuple_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					Children: []string{

						"anonymous_function_expr",

						"bin_op_expr",

						"case_of_expr",

						"char_constant_expr",

						"field_access_expr",

						"field_accessor_function_expr",

						"function_call_expr",

						"glsl_code_expr",

						"if_else_expr",

						"let_in_expr",

						"list_expr",

						"negate_expr",

						"number_constant_expr",

						"operator_as_function_expr",

						"parenthesized_expr",

						"record_expr",

						"string_constant_expr",

						"tuple_expr",

						"unit_expr",

						"value_expr",

					},
					
				},
				
			},

			{
				Name: "tuple_pattern",
				Pattern: "(tuple_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					Token: "self",
					
					Children: []string{

						"pattern",

					},
					
				},
				
			},

			{
				Name: "tuple_type",
				Pattern: "(tuple_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					Children: []string{

						"type_expression",

						"unit_expr",

					},
					
				},
				
			},

			{
				Name: "type_alias_declaration",
				Pattern: "(type_alias_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"lower_type_name",

						"type_expression",

						"upper_case_identifier",

					},
					
				},
				
			},

			{
				Name: "type_annotation",
				Pattern: "(type_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					
					Roles: []string{

						"Type",

					},
					Children: []string{

						"lower_case_identifier",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "type_declaration",
				Pattern: "(type_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					Token: "self",
					
					Children: []string{

						"lower_type_name",

						"union_variant",

						"upper_case_identifier",

					},
					
				},
				
			},

			{
				Name: "type_expression",
				Pattern: "(type_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"record_type",

						"tuple_type",

						"type_expression",

						"type_ref",

						"type_variable",

					},
					
				},
				
			},

			{
				Name: "type_ref",
				Pattern: "(type_ref)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"record_type",

						"tuple_type",

						"type_expression",

						"type_ref",

						"type_variable",

					},
					
				},
				
			},

			{
				Name: "type_variable",
				Pattern: "(type_variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "union_pattern",
				Pattern: "(union_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

						"Pattern",

					},
					Children: []string{

						"anything_pattern",

						"char_constant_expr",

						"list_pattern",

						"lower_pattern",

						"nullary_constructor_argument_pattern",

						"number_constant_expr",

						"pattern",

						"record_pattern",

						"string_constant_expr",

						"tuple_pattern",

						"unit_expr",

						"upper_case_qid",

					},
					
				},
				
			},

			{
				Name: "union_variant",
				Pattern: "(union_variant)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"record_type",

						"tuple_type",

						"type_expression",

						"type_ref",

						"type_variable",

						"upper_case_identifier",

					},
					
				},
				
			},

			{
				Name: "unit_expr",
				Pattern: "(unit_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "upper_case_qid",
				Pattern: "(upper_case_qid)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "value_declaration",
				Pattern: "(value_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"anonymous_function_expr",

						"bin_op_expr",

						"case_of_expr",

						"char_constant_expr",

						"field_access_expr",

						"field_accessor_function_expr",

						"function_call_expr",

						"function_declaration_left",

						"glsl_code_expr",

						"if_else_expr",

						"let_in_expr",

						"list_expr",

						"negate_expr",

						"number_constant_expr",

						"operator_as_function_expr",

						"parenthesized_expr",

						"pattern",

						"record_expr",

						"string_constant_expr",

						"tuple_expr",

						"unit_expr",

						"value_expr",

					},
					
				},
				
			},

			{
				Name: "value_expr",
				Pattern: "(value_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"upper_case_qid",

						"value_qid",

					},
					
				},
				
			},

			{
				Name: "value_qid",
				Pattern: "(value_qid)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "alias",
				Pattern: "(alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "arrow",
				Pattern: "(arrow)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "as",
				Pattern: "(as)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "backslash",
				Pattern: "(backslash)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "close_char",
				Pattern: "(close_char)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "close_quote",
				Pattern: "(close_quote)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "colon",
				Pattern: "(colon)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "double_dot",
				Pattern: "(double_dot)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "effect",
				Pattern: "(effect)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "eq",
				Pattern: "(eq)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "exposing",
				Pattern: "(exposing)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "glsl_content",
				Pattern: "(glsl_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "infix",
				Pattern: "(infix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "invalid_string_escape",
				Pattern: "(invalid_string_escape)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "let",
				Pattern: "(let)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "line_comment",
				Pattern: "(line_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "lower_case_identifier",
				Pattern: "(lower_case_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "module",
				Pattern: "(module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "number_literal",
				Pattern: "(number_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "of",
				Pattern: "(of)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "open_char",
				Pattern: "(open_char)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "open_quote",
				Pattern: "(open_quote)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "port",
				Pattern: "(port)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "regular_string_part",
				Pattern: "(regular_string_part)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string_escape",
				Pattern: "(string_escape)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "then",
				Pattern: "(then)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "underscore",
				Pattern: "(underscore)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "upper_case_identifier",
				Pattern: "(upper_case_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "where",
				Pattern: "(where)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

		},
	},

	{
		Language: "fish",
		Extensions: []string{

			".fish",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "begin_statement",
				Pattern: "(begin_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "brace_expansion",
				Pattern: "(brace_expansion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "case_clause",
				Pattern: "(case_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "command",
				Pattern: "(command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"brace_expansion",

						"command_substitution",

						"concatenation",

						"double_quote_string",

						"escape_sequence",

						"file_redirect",

						"float",

						"glob",

						"home_dir_expansion",

						"integer",

						"single_quote_string",

						"stream_redirect",

						"variable_expansion",

						"word",

					},
					
				},
				
			},

			{
				Name: "command_substitution",
				Pattern: "(command_substitution)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "concatenation",
				Pattern: "(concatenation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "conditional_execution",
				Pattern: "(conditional_execution)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "double_quote_string",
				Pattern: "(double_quote_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else_clause",
				Pattern: "(else_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else_if_clause",
				Pattern: "(else_if_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"begin_statement",

						"break",

						"command",

						"conditional_execution",

						"continue",

						"for_statement",

						"function_definition",

						"if_statement",

						"negated_statement",

						"pipe",

						"redirect_statement",

						"return",

						"switch_statement",

						"while_statement",

					},
					
				},
				
			},

			{
				Name: "file_redirect",
				Pattern: "(file_redirect)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"brace_expansion",

						"command_substitution",

						"concatenation",

						"direction",

						"double_quote_string",

						"escape_sequence",

						"float",

						"glob",

						"home_dir_expansion",

						"integer",

						"single_quote_string",

						"variable_expansion",

						"word",

					},
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"brace_expansion",

						"command_substitution",

						"concatenation",

						"double_quote_string",

						"escape_sequence",

						"float",

						"glob",

						"home_dir_expansion",

						"integer",

						"single_quote_string",

						"variable_expansion",

						"variable_name",

						"word",

					},
					
				},
				
			},

			{
				Name: "function_definition",
				Pattern: "(function_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"brace_expansion",

						"command_substitution",

						"concatenation",

						"double_quote_string",

						"escape_sequence",

						"float",

						"glob",

						"home_dir_expansion",

						"integer",

						"single_quote_string",

						"variable_expansion",

						"word",

					},
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"begin_statement",

						"break",

						"command",

						"conditional_execution",

						"continue",

						"for_statement",

						"function_definition",

						"if_statement",

						"negated_statement",

						"pipe",

						"redirect_statement",

						"return",

						"switch_statement",

						"while_statement",

					},
					
				},
				
			},

			{
				Name: "index",
				Pattern: "(index)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					
					Roles: []string{

						"Index",

					},
					
					
				},
				
			},

			{
				Name: "list_element_access",
				Pattern: "(list_element_access)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "negated_statement",
				Pattern: "(negated_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pipe",
				Pattern: "(pipe)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "program",
				Pattern: "(program)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "range",
				Pattern: "(range)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "File",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "redirect_statement",
				Pattern: "(redirect_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "single_quote_string",
				Pattern: "(single_quote_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "switch_statement",
				Pattern: "(switch_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					Children: []string{

						"brace_expansion",

						"command_substitution",

						"concatenation",

						"double_quote_string",

						"escape_sequence",

						"float",

						"glob",

						"home_dir_expansion",

						"integer",

						"single_quote_string",

						"variable_expansion",

						"word",

					},
					
				},
				
			},

			{
				Name: "variable_expansion",
				Pattern: "(variable_expansion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"begin_statement",

						"break",

						"command",

						"conditional_execution",

						"continue",

						"for_statement",

						"function_definition",

						"if_statement",

						"negated_statement",

						"pipe",

						"redirect_statement",

						"return",

						"switch_statement",

						"while_statement",

					},
					
				},
				
			},

			{
				Name: "word",
				Pattern: "(word)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "and",
				Pattern: "(and)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "begin",
				Pattern: "(begin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "direction",
				Pattern: "(direction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "end",
				Pattern: "(end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "float",
				Pattern: "(float)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "function",
				Pattern: "(function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "glob",
				Pattern: "(glob)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "home_dir_expansion",
				Pattern: "(home_dir_expansion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "integer",
				Pattern: "(integer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "not",
				Pattern: "(not)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "or",
				Pattern: "(or)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "stream_redirect",
				Pattern: "(stream_redirect)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "switch",
				Pattern: "(switch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "variable_name",
				Pattern: "(variable_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "fortran",
		Extensions: []string{

			".f",

			".f90",

			".f95",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "_argument_item",
				Pattern: "(_argument_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_expression",
				Pattern: "(_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_specification_parts",
				Pattern: "(_specification_parts)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "_statements",
				Pattern: "(_statements)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "abstract_specifier",
				Pattern: "(abstract_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "access_specifier",
				Pattern: "(access_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "allocate_statement",
				Pattern: "(allocate_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"coarray_allocation",

						"derived_type_member_expression",

						"identifier",

						"intrinsic_type",

						"sized_allocation",

					},
					
				},
				
			},

			{
				Name: "argument_list",
				Pattern: "(argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "arithmetic_if_statement",
				Pattern: "(arithmetic_if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "array_literal",
				Pattern: "(array_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"derived_type",

						"intrinsic_type",

					},
					
				},
				
			},

			{
				Name: "assign_statement",
				Pattern: "(assign_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "assignment",
				Pattern: "(assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					
					
				},
				
			},

			{
				Name: "assignment_statement",
				Pattern: "(assignment_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "associate_statement",
				Pattern: "(associate_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					
					
				},
				
			},

			{
				Name: "association",
				Pattern: "(association)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "assumed_shape",
				Pattern: "(assumed_shape)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "assumed_size",
				Pattern: "(assumed_size)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "base_type_specifier",
				Pattern: "(base_type_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"binary_expression",

						"call_expression",

						"identifier",

						"number_literal",

						"parenthesized_expression",

						"preproc_defined",

						"string_literal",

						"unary_expression",

					},
					
				},
				
			},

			{
				Name: "binary_op",
				Pattern: "(binary_op)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "BinaryOp",
					Token: "self",
					Roles: []string{

						"Operator",

						"Operator",

					},
					
					
				},
				
			},

			{
				Name: "bind_statement",
				Pattern: "(bind_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "binding",
				Pattern: "(binding)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "binding_name",
				Pattern: "(binding_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "block_construct",
				Pattern: "(block_construct)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "block_data",
				Pattern: "(block_data)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_data_statement",
				Pattern: "(block_data_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_label",
				Pattern: "(block_label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_label_start_expression",
				Pattern: "(block_label_start_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "boolean_literal",
				Pattern: "(boolean_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"identifier",

						"number_literal",

					},
					
				},
				
			},

			{
				Name: "call_expression",
				Pattern: "(call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Literal",

						"Call",

					},
					Children: []string{

						"argument_list",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "case_statement",
				Pattern: "(case_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "case_value_range_list",
				Pattern: "(case_value_range_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "character_length",
				Pattern: "(character_length)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "close_statement",
				Pattern: "(close_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "coarray_allocation",
				Pattern: "(coarray_allocation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "coarray_critical_statement",
				Pattern: "(coarray_critical_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "coarray_declarator",
				Pattern: "(coarray_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "coarray_expression",
				Pattern: "(coarray_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "coarray_index",
				Pattern: "(coarray_index)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					
					Roles: []string{

						"Index",

					},
					
					
				},
				
			},

			{
				Name: "coarray_size",
				Pattern: "(coarray_size)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "coarray_statement",
				Pattern: "(coarray_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "coarray_team_statement",
				Pattern: "(coarray_team_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "common_block",
				Pattern: "(common_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "common_statement",
				Pattern: "(common_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "complex_literal",
				Pattern: "(complex_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "concatenation_expression",
				Pattern: "(concatenation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "concurrent_control",
				Pattern: "(concurrent_control)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "concurrent_header",
				Pattern: "(concurrent_header)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"intrinsic_type",

					},
					
				},
				
			},

			{
				Name: "concurrent_locality",
				Pattern: "(concurrent_locality)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "concurrent_statement",
				Pattern: "(concurrent_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "conditional_expression",
				Pattern: "(conditional_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"nil_literal",

					},
					
				},
				
			},

			{
				Name: "contains_statement",
				Pattern: "(contains_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "cray_pointer_declaration",
				Pattern: "(cray_pointer_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "cray_pointer_pair",
				Pattern: "(cray_pointer_pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"coarray_declarator",

						"identifier",

						"sized_declarator",

					},
					
				},
				
			},

			{
				Name: "cuda_kernel_argument_list",
				Pattern: "(cuda_kernel_argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "data_declarator",
				Pattern: "(data_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"coarray_declarator",

						"data_value",

						"identifier",

						"sized_declarator",

					},
					
				},
				
			},

			{
				Name: "data_set",
				Pattern: "(data_set)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "data_statement",
				Pattern: "(data_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "data_value",
				Pattern: "(data_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"number_literal",

					},
					
				},
				
			},

			{
				Name: "deallocate_statement",
				Pattern: "(deallocate_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "declared_type",
				Pattern: "(declared_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"derived_type_member_expression",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "defined_io_procedure",
				Pattern: "(defined_io_procedure)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "derived_type",
				Pattern: "(derived_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"intrinsic_type",

						"kind",

						"type_name",

					},
					
				},
				
			},

			{
				Name: "derived_type_definition",
				Pattern: "(derived_type_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "derived_type_member_expression",
				Pattern: "(derived_type_member_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "derived_type_parameter_list",
				Pattern: "(derived_type_parameter_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "derived_type_procedures",
				Pattern: "(derived_type_procedures)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "derived_type_statement",
				Pattern: "(derived_type_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"access_specifier",

						"base_type_specifier",

					},
					
				},
				
			},

			{
				Name: "do_label_statement",
				Pattern: "(do_label_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "do_loop_statement",
				Pattern: "(do_loop_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "edit_descriptor",
				Pattern: "(edit_descriptor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else_clause",
				Pattern: "(else_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "elseif_clause",
				Pattern: "(elseif_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "elsewhere_clause",
				Pattern: "(elsewhere_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "end_associate_statement",
				Pattern: "(end_associate_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "end_block_construct_statement",
				Pattern: "(end_block_construct_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "end_block_data_statement",
				Pattern: "(end_block_data_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "end_coarray_critical_statement",
				Pattern: "(end_coarray_critical_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "end_coarray_team_statement",
				Pattern: "(end_coarray_team_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "end_do_label_statement",
				Pattern: "(end_do_label_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "end_do_loop_statement",
				Pattern: "(end_do_loop_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "end_enum_statement",
				Pattern: "(end_enum_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "end_enumeration_type_statement",
				Pattern: "(end_enumeration_type_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "end_forall_statement",
				Pattern: "(end_forall_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "end_function_statement",
				Pattern: "(end_function_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "end_if_statement",
				Pattern: "(end_if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "end_interface_statement",
				Pattern: "(end_interface_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "end_module_procedure_statement",
				Pattern: "(end_module_procedure_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "end_module_statement",
				Pattern: "(end_module_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "end_program_statement",
				Pattern: "(end_program_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "end_select_statement",
				Pattern: "(end_select_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "end_submodule_statement",
				Pattern: "(end_submodule_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "end_subroutine_statement",
				Pattern: "(end_subroutine_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "end_type_statement",
				Pattern: "(end_type_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "end_where_statement",
				Pattern: "(end_where_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "entry_statement",
				Pattern: "(entry_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					Children: []string{

						"name",

						"parameters",

					},
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enum_statement",
				Pattern: "(enum_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enumeration_type",
				Pattern: "(enumeration_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enumeration_type_statement",
				Pattern: "(enumeration_type_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enumerator_statement",
				Pattern: "(enumerator_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"identifier",

						"init_declarator",

					},
					
				},
				
			},

			{
				Name: "equivalence_set",
				Pattern: "(equivalence_set)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "equivalence_statement",
				Pattern: "(equivalence_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "extent_specifier",
				Pattern: "(extent_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "file_position_statement",
				Pattern: "(file_position_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "filename",
				Pattern: "(filename)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

						"number_literal",

					},
					
				},
				
			},

			{
				Name: "forall_statement",
				Pattern: "(forall_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "format_identifier",
				Pattern: "(format_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "format_statement",
				Pattern: "(format_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Reference",

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "function",
				Pattern: "(function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "function_result",
				Pattern: "(function_result)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "function_statement",
				Pattern: "(function_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"derived_type",

						"intrinsic_type",

						"name",

						"parameters",

					},
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "implicit_range",
				Pattern: "(implicit_range)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					Roles: []string{

						"Condition",

					},
					
					
				},
				
			},

			{
				Name: "implicit_statement",
				Pattern: "(implicit_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "implied_do_loop_expression",
				Pattern: "(implied_do_loop_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"intrinsic_type",

					},
					
				},
				
			},

			{
				Name: "import_statement",
				Pattern: "(import_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "include_statement",
				Pattern: "(include_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"filename",

					},
					
				},
				
			},

			{
				Name: "included_items",
				Pattern: "(included_items)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "init_declarator",
				Pattern: "(init_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_expression",

						"coarray_declarator",

						"identifier",

						"sized_declarator",

					},
					
				},
				
			},

			{
				Name: "input_item_list",
				Pattern: "(input_item_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "inquire_statement",
				Pattern: "(inquire_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "interface",
				Pattern: "(interface)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "interface_statement",
				Pattern: "(interface_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "internal_procedures",
				Pattern: "(internal_procedures)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "intrinsic_type",
				Pattern: "(intrinsic_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"kind",

					},
					
				},
				
			},

			{
				Name: "keyword_argument",
				Pattern: "(keyword_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"assumed_shape",

						"assumed_size",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "keyword_statement",
				Pattern: "(keyword_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "kind",
				Pattern: "(kind)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "label",
				Pattern: "(label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "language_binding",
				Pattern: "(language_binding)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "local_name",
				Pattern: "(local_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "logical_expression",
				Pattern: "(logical_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "loop_control_expression",
				Pattern: "(loop_control_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "math_expression",
				Pattern: "(math_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"user_defined_operator",

					},
					
				},
				
			},

			{
				Name: "method_name",
				Pattern: "(method_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "module",
				Pattern: "(module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "module_name",
				Pattern: "(module_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "module_procedure",
				Pattern: "(module_procedure)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "module_procedure_statement",
				Pattern: "(module_procedure_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"derived_type",

						"intrinsic_type",

						"name",

					},
					
				},
				
			},

			{
				Name: "module_statement",
				Pattern: "(module_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "multiple_subscript",
				Pattern: "(multiple_subscript)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "multiple_subscript_triplet",
				Pattern: "(multiple_subscript_triplet)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "name",
				Pattern: "(name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "namelist_statement",
				Pattern: "(namelist_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "nil_literal",
				Pattern: "(nil_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "null_literal",
				Pattern: "(null_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"derived_type_member_expression",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "nullify_statement",
				Pattern: "(nullify_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "number_literal",
				Pattern: "(number_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"identifier",

						"number_literal",

					},
					
				},
				
			},

			{
				Name: "open_statement",
				Pattern: "(open_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "operator",
				Pattern: "(operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "output_item_list",
				Pattern: "(output_item_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "parameter_assignment",
				Pattern: "(parameter_assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parameter_statement",
				Pattern: "(parameter_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parameters",
				Pattern: "(parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pointer_association_statement",
				Pattern: "(pointer_association_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pointer_init_declarator",
				Pattern: "(pointer_init_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_expression",

						"coarray_declarator",

						"identifier",

						"sized_declarator",

					},
					
				},
				
			},

			{
				Name: "preproc_call",
				Pattern: "(preproc_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"preproc_arg",

						"preproc_directive",

					},
					
				},
				
			},

			{
				Name: "preproc_def",
				Pattern: "(preproc_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					Children: []string{

						"identifier",

						"preproc_arg",

					},
					
				},
				
			},

			{
				Name: "preproc_defined",
				Pattern: "(preproc_defined)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "preproc_elif",
				Pattern: "(preproc_elif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"binary_expression",

						"call_expression",

						"identifier",

						"number_literal",

						"parenthesized_expression",

						"preproc_defined",

						"preproc_elif",

						"preproc_elifdef",

						"preproc_else",

						"string_literal",

						"unary_expression",

					},
					
				},
				
			},

			{
				Name: "preproc_elifdef",
				Pattern: "(preproc_elifdef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"identifier",

						"preproc_elif",

						"preproc_elifdef",

						"preproc_else",

					},
					
				},
				
			},

			{
				Name: "preproc_else",
				Pattern: "(preproc_else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "preproc_function_def",
				Pattern: "(preproc_function_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"identifier",

						"preproc_arg",

						"preproc_params",

					},
					
				},
				
			},

			{
				Name: "preproc_if",
				Pattern: "(preproc_if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"binary_expression",

						"call_expression",

						"identifier",

						"number_literal",

						"parenthesized_expression",

						"preproc_defined",

						"preproc_elif",

						"preproc_elifdef",

						"preproc_else",

						"string_literal",

						"unary_expression",

					},
					
				},
				
			},

			{
				Name: "preproc_ifdef",
				Pattern: "(preproc_ifdef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"identifier",

						"preproc_elif",

						"preproc_elifdef",

						"preproc_else",

					},
					
				},
				
			},

			{
				Name: "preproc_include",
				Pattern: "(preproc_include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"call_expression",

						"identifier",

						"string_literal",

						"system_lib_string",

					},
					
				},
				
			},

			{
				Name: "preproc_params",
				Pattern: "(preproc_params)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "print_statement",
				Pattern: "(print_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "private_statement",
				Pattern: "(private_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "procedure",
				Pattern: "(procedure)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "procedure_attribute",
				Pattern: "(procedure_attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "procedure_attributes",
				Pattern: "(procedure_attributes)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "procedure_interface",
				Pattern: "(procedure_interface)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "procedure_kind",
				Pattern: "(procedure_kind)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "procedure_qualifier",
				Pattern: "(procedure_qualifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "procedure_statement",
				Pattern: "(procedure_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"binding",

						"method_name",

					},
					
				},
				
			},

			{
				Name: "program",
				Pattern: "(program)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "program_statement",
				Pattern: "(program_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "File",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "public_statement",
				Pattern: "(public_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "rank_statement",
				Pattern: "(rank_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "read_statement",
				Pattern: "(read_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "relational_expression",
				Pattern: "(relational_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "save_statement",
				Pattern: "(save_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "select_case_statement",
				Pattern: "(select_case_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "select_rank_statement",
				Pattern: "(select_rank_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "select_type_statement",
				Pattern: "(select_type_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "selector",
				Pattern: "(selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "size",
				Pattern: "(size)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "sized_allocation",
				Pattern: "(sized_allocation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "sized_declarator",
				Pattern: "(sized_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "statement_label",
				Pattern: "(statement_label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "statement_label_reference",
				Pattern: "(statement_label_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "stop_statement",
				Pattern: "(stop_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string_literal",
				Pattern: "(string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"identifier",

						"number_literal",

					},
					
				},
				
			},

			{
				Name: "submodule",
				Pattern: "(submodule)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "submodule_statement",
				Pattern: "(submodule_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"module_name",

					},
					
				},
				
			},

			{
				Name: "subroutine",
				Pattern: "(subroutine)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "subroutine_call",
				Pattern: "(subroutine_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "subroutine_statement",
				Pattern: "(subroutine_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"derived_type",

						"intrinsic_type",

						"name",

						"parameters",

					},
					
				},
				
			},

			{
				Name: "transfer_items",
				Pattern: "(transfer_items)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "translation_unit",
				Pattern: "(translation_unit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "triplet_spec",
				Pattern: "(triplet_spec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_member",
				Pattern: "(type_member)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_name",
				Pattern: "(type_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_qualifier",
				Pattern: "(type_qualifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"kind",

						"len",

					},
					
				},
				
			},

			{
				Name: "type_statement",
				Pattern: "(type_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

						"intrinsic_type",

					},
					
				},
				
			},

			{
				Name: "unary_expression",
				Pattern: "(unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"binary_expression",

						"preproc_defined",

						"user_defined_operator",

					},
					
				},
				
			},

			{
				Name: "unit_identifier",
				Pattern: "(unit_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "UnaryOp",
					Token: "self",
					Roles: []string{

						"Operator",

					},
					
					
				},
				
			},

			{
				Name: "unlimited_polymorphic",
				Pattern: "(unlimited_polymorphic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "use_alias",
				Pattern: "(use_alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "use_statement",
				Pattern: "(use_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "user_defined_operator",
				Pattern: "(user_defined_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "variable_attributes",
				Pattern: "(variable_attributes)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "variable_declaration",
				Pattern: "(variable_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"coarray_declarator",

						"data_declarator",

						"declared_type",

						"derived_type",

						"identifier",

						"init_declarator",

						"intrinsic_type",

						"language_binding",

						"pointer_init_declarator",

						"procedure",

						"sized_declarator",

						"type_qualifier",

					},
					
				},
				
			},

			{
				Name: "variable_group",
				Pattern: "(variable_group)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "variable_modification",
				Pattern: "(variable_modification)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"coarray_declarator",

						"identifier",

						"sized_declarator",

					},
					
				},
				
			},

			{
				Name: "where_statement",
				Pattern: "(where_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "write_statement",
				Pattern: "(write_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_",
				Pattern: "(_)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "abstract",
				Pattern: "(abstract)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "all",
				Pattern: "(all)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "allocatable",
				Pattern: "(allocatable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "allocate",
				Pattern: "(allocate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "assign",
				Pattern: "(assign)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "assignment",
				Pattern: "(assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					
					
				},
				
			},

			{
				Name: "associate",
				Pattern: "(associate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "assumed_rank",
				Pattern: "(assumed_rank)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "asynchronous",
				Pattern: "(asynchronous)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "attributes",
				Pattern: "(attributes)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "automatic",
				Pattern: "(automatic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "backspace",
				Pattern: "(backspace)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "bind",
				Pattern: "(bind)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "blockdata",
				Pattern: "(blockdata)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "byte",
				Pattern: "(byte)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "call",
				Pattern: "(call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "change",
				Pattern: "(change)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "character",
				Pattern: "(character)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "classis",
				Pattern: "(classis)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "classof",
				Pattern: "(classof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "close",
				Pattern: "(close)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "codimension",
				Pattern: "(codimension)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "common",
				Pattern: "(common)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "complex",
				Pattern: "(complex)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "concurrent",
				Pattern: "(concurrent)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "constant",
				Pattern: "(constant)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "contains",
				Pattern: "(contains)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "contiguous",
				Pattern: "(contiguous)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "critical",
				Pattern: "(critical)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "cycle",
				Pattern: "(cycle)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "data",
				Pattern: "(data)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "deallocate",
				Pattern: "(deallocate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "deferred",
				Pattern: "(deferred)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "defined",
				Pattern: "(defined)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "device",
				Pattern: "(device)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "dimension",
				Pattern: "(dimension)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "double",
				Pattern: "(double)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "doublecomplex",
				Pattern: "(doublecomplex)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "doubleprecision",
				Pattern: "(doubleprecision)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "elemental",
				Pattern: "(elemental)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "elseif",
				Pattern: "(elseif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "elsewhere",
				Pattern: "(elsewhere)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "end",
				Pattern: "(end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "endassociate",
				Pattern: "(endassociate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "endblock",
				Pattern: "(endblock)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "endblockdata",
				Pattern: "(endblockdata)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "endcritical",
				Pattern: "(endcritical)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "enddo",
				Pattern: "(enddo)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "endenum",
				Pattern: "(endenum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "endfile",
				Pattern: "(endfile)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "endforall",
				Pattern: "(endforall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "endfunction",
				Pattern: "(endfunction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "endif",
				Pattern: "(endif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "endinterface",
				Pattern: "(endinterface)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "endmodule",
				Pattern: "(endmodule)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "endprocedure",
				Pattern: "(endprocedure)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "endprogram",
				Pattern: "(endprogram)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "endselect",
				Pattern: "(endselect)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "endsubmodule",
				Pattern: "(endsubmodule)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "endsubroutine",
				Pattern: "(endsubroutine)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "endteam",
				Pattern: "(endteam)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "endtype",
				Pattern: "(endtype)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "endwhere",
				Pattern: "(endwhere)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "entry",
				Pattern: "(entry)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enumeration",
				Pattern: "(enumeration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enumerator",
				Pattern: "(enumerator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "equivalence",
				Pattern: "(equivalence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "error",
				Pattern: "(error)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "event",
				Pattern: "(event)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "exit",
				Pattern: "(exit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extends",
				Pattern: "(extends)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "external",
				Pattern: "(external)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "fail",
				Pattern: "(fail)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "family",
				Pattern: "(family)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "final",
				Pattern: "(final)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "flush",
				Pattern: "(flush)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "fmt",
				Pattern: "(fmt)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "forall",
				Pattern: "(forall)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "form",
				Pattern: "(form)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "format",
				Pattern: "(format)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "formatted",
				Pattern: "(formatted)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "function",
				Pattern: "(function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "generic",
				Pattern: "(generic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "global",
				Pattern: "(global)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "go",
				Pattern: "(go)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "goto",
				Pattern: "(goto)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "grid_global",
				Pattern: "(grid_global)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "hollerith_constant",
				Pattern: "(hollerith_constant)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "host",
				Pattern: "(host)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "image",
				Pattern: "(image)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "images",
				Pattern: "(images)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "implicit",
				Pattern: "(implicit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "impure",
				Pattern: "(impure)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "include",
				Pattern: "(include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "initial",
				Pattern: "(initial)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "inout",
				Pattern: "(inout)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "inquire",
				Pattern: "(inquire)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "integer",
				Pattern: "(integer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "intent",
				Pattern: "(intent)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "interface",
				Pattern: "(interface)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "intrinsic",
				Pattern: "(intrinsic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "is",
				Pattern: "(is)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "kind",
				Pattern: "(kind)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "len",
				Pattern: "(len)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "local",
				Pattern: "(local)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "local_init",
				Pattern: "(local_init)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "lock",
				Pattern: "(lock)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "logical",
				Pattern: "(logical)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "managed",
				Pattern: "(managed)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "memory",
				Pattern: "(memory)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "module",
				Pattern: "(module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "namelist",
				Pattern: "(namelist)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "non_intrinsic",
				Pattern: "(non_intrinsic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "non_overridable",
				Pattern: "(non_overridable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "none",
				Pattern: "(none)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "none",
				Pattern: "(none)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "nopass",
				Pattern: "(nopass)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "notify",
				Pattern: "(notify)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "null",
				Pattern: "(null)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "nullify",
				Pattern: "(nullify)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "only",
				Pattern: "(only)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "open",
				Pattern: "(open)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "operator",
				Pattern: "(operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "operator_name",
				Pattern: "(operator_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "optional",
				Pattern: "(optional)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "out",
				Pattern: "(out)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "parameter",
				Pattern: "(parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "pass",
				Pattern: "(pass)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "pause",
				Pattern: "(pause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pinned",
				Pattern: "(pinned)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pointer",
				Pattern: "(pointer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "post",
				Pattern: "(post)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "precision",
				Pattern: "(precision)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "preproc_arg",
				Pattern: "(preproc_arg)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "preproc_comment",
				Pattern: "(preproc_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "preproc_directive",
				Pattern: "(preproc_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "print",
				Pattern: "(print)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "private",
				Pattern: "(private)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "procedure",
				Pattern: "(procedure)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "program",
				Pattern: "(program)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "property",
				Pattern: "(property)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "protected",
				Pattern: "(protected)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "public",
				Pattern: "(public)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pure",
				Pattern: "(pure)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "quiet",
				Pattern: "(quiet)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "rank",
				Pattern: "(rank)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "read",
				Pattern: "(read)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "real",
				Pattern: "(real)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "recursive",
				Pattern: "(recursive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "reduce",
				Pattern: "(reduce)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "result",
				Pattern: "(result)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "rewind",
				Pattern: "(rewind)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "save",
				Pattern: "(save)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "select",
				Pattern: "(select)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "selectcase",
				Pattern: "(selectcase)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "selectrank",
				Pattern: "(selectrank)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "selecttype",
				Pattern: "(selecttype)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "sequence",
				Pattern: "(sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "sequence_statement",
				Pattern: "(sequence_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "shared",
				Pattern: "(shared)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "simple",
				Pattern: "(simple)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "statement_label",
				Pattern: "(statement_label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "static",
				Pattern: "(static)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "stop",
				Pattern: "(stop)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "submodule",
				Pattern: "(submodule)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "subroutine",
				Pattern: "(subroutine)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "sync",
				Pattern: "(sync)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "system_lib_string",
				Pattern: "(system_lib_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "target",
				Pattern: "(target)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "team",
				Pattern: "(team)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "texture",
				Pattern: "(texture)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "then",
				Pattern: "(then)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "to",
				Pattern: "(to)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "typeis",
				Pattern: "(typeis)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "typeof",
				Pattern: "(typeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unformatted",
				Pattern: "(unformatted)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "unit",
				Pattern: "(unit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unlock",
				Pattern: "(unlock)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "use",
				Pattern: "(use)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "value",
				Pattern: "(value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "volatile",
				Pattern: "(volatile)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "wait",
				Pattern: "(wait)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "where",
				Pattern: "(where)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "write",
				Pattern: "(write)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

		},
	},

	{
		Language: "git_config",
		Extensions: []string{

			".gitconfig",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "config",
				Pattern: "(config)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "section",
				Pattern: "(section)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "section_header",
				Pattern: "(section_header)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "shell_command",
				Pattern: "(shell_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "subsection_name",
				Pattern: "(subsection_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "variable",
				Pattern: "(variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"false",

						"integer",

						"string",

						"true",

					},
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "integer",
				Pattern: "(integer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "name",
				Pattern: "(name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "section_name",
				Pattern: "(section_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "gitattributes",
		Extensions: []string{

			".gitattributes",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "ansi_c_escape",
				Pattern: "(ansi_c_escape)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "attribute",
				Pattern: "(attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "builtin_attr",
				Pattern: "(builtin_attr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "class_range",
				Pattern: "(class_range)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "file",
				Pattern: "(file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "ignored_value",
				Pattern: "(ignored_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "macro_def",
				Pattern: "(macro_def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"attr_name",

					},
					
				},
				
			},

			{
				Name: "pattern",
				Pattern: "(pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"dir_sep",

					},
					
				},
				
			},

			{
				Name: "quoted_pattern",
				Pattern: "(quoted_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"dir_sep",

					},
					
				},
				
			},

			{
				Name: "range_notation",
				Pattern: "(range_notation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "attr_name",
				Pattern: "(attr_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "attr_reset",
				Pattern: "(attr_reset)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "attr_set",
				Pattern: "(attr_set)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "attr_unset",
				Pattern: "(attr_unset)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "binary",
				Pattern: "(binary)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "boolean_value",
				Pattern: "(boolean_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "character_class",
				Pattern: "(character_class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "crlf",
				Pattern: "(crlf)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "delta",
				Pattern: "(delta)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "diff",
				Pattern: "(diff)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "dir_sep",
				Pattern: "(dir_sep)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "encoding",
				Pattern: "(encoding)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "eol",
				Pattern: "(eol)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "escaped_char",
				Pattern: "(escaped_char)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "filter",
				Pattern: "(filter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ident",
				Pattern: "(ident)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "macro_tag",
				Pattern: "(macro_tag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "merge",
				Pattern: "(merge)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pattern_negation",
				Pattern: "(pattern_negation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "range_negation",
				Pattern: "(range_negation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "redundant_escape",
				Pattern: "(redundant_escape)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_value",
				Pattern: "(string_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "text",
				Pattern: "(text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "trailing_slash",
				Pattern: "(trailing_slash)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "whitespace",
				Pattern: "(whitespace)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "wildcard",
				Pattern: "(wildcard)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

		},
	},

	{
		Language: "gitignore",
		Extensions: []string{

			".gitignore",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "bracket_char_class",
				Pattern: "(bracket_char_class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"alnum",

						"alpha",

						"blank",

						"cntrl",

						"digit",

						"graph",

						"lower",

						"print",

						"punct",

						"space",

						"upper",

						"xdigit",

					},
					
				},
				
			},

			{
				Name: "bracket_char_escaped",
				Pattern: "(bracket_char_escaped)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "bracket_expr",
				Pattern: "(bracket_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bracket_range",
				Pattern: "(bracket_range)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "document",
				Pattern: "(document)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pattern",
				Pattern: "(pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"directory_separator",

						"directory_separator_escaped",

					},
					
				},
				
			},

			{
				Name: "pattern_char_escaped",
				Pattern: "(pattern_char_escaped)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "alnum",
				Pattern: "(alnum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "alpha",
				Pattern: "(alpha)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "blank",
				Pattern: "(blank)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "bracket_char",
				Pattern: "(bracket_char)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bracket_negation",
				Pattern: "(bracket_negation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "cntrl",
				Pattern: "(cntrl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "digit",
				Pattern: "(digit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "directory_separator",
				Pattern: "(directory_separator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "directory_separator_escaped",
				Pattern: "(directory_separator_escaped)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "graph",
				Pattern: "(graph)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "lower",
				Pattern: "(lower)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "negation",
				Pattern: "(negation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pattern_char",
				Pattern: "(pattern_char)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "print",
				Pattern: "(print)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "punct",
				Pattern: "(punct)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "space",
				Pattern: "(space)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "upper",
				Pattern: "(upper)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "wildcard_char_single",
				Pattern: "(wildcard_char_single)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "wildcard_chars",
				Pattern: "(wildcard_chars)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "wildcard_chars_allow_slash",
				Pattern: "(wildcard_chars_allow_slash)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "xdigit",
				Pattern: "(xdigit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

		},
	},

	{
		Language: "go",
		Extensions: []string{

			".go",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "_expression",
				Pattern: "(_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_simple_statement",
				Pattern: "(_simple_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_simple_type",
				Pattern: "(_simple_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_statement",
				Pattern: "(_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_type",
				Pattern: "(_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "argument_list",
				Pattern: "(argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "array_type",
				Pattern: "(array_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"_type",

					},
					
				},
				
			},

			{
				Name: "assignment_statement",
				Pattern: "(assignment_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"expression_list",

					},
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "BinaryOp",
					
					Roles: []string{

						"Operator",

					},
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "break_statement",
				Pattern: "(break_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "call_expression",
				Pattern: "(call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					Children: []string{

						"_expression",

						"argument_list",

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "channel_type",
				Pattern: "(channel_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_type",

					},
					
				},
				
			},

			{
				Name: "communication_case",
				Pattern: "(communication_case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"receive_statement",

						"send_statement",

					},
					
				},
				
			},

			{
				Name: "composite_literal",
				Pattern: "(composite_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"array_type",

						"generic_type",

						"implicit_length_array_type",

						"literal_value",

						"map_type",

						"qualified_type",

						"slice_type",

						"struct_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "const_declaration",
				Pattern: "(const_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Declaration",

						"Constant",

					},
					Children: []string{

						"const_spec",

					},
					
				},
				
			},

			{
				Name: "const_spec",
				Pattern: "(const_spec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_type",

						"expression_list",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "continue_statement",
				Pattern: "(continue_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "dec_statement",
				Pattern: "(dec_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "default_case",
				Pattern: "(default_case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "defer_statement",
				Pattern: "(defer_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "dot",
				Pattern: "(dot)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "empty_statement",
				Pattern: "(empty_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expression_case",
				Pattern: "(expression_case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"expression_list",

					},
					
				},
				
			},

			{
				Name: "expression_list",
				Pattern: "(expression_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "expression_statement",
				Pattern: "(expression_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "expression_switch_statement",
				Pattern: "(expression_switch_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					Children: []string{

						"_expression",

						"_simple_statement",

					},
					
				},
				
			},

			{
				Name: "fallthrough_statement",
				Pattern: "(fallthrough_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field_declaration",
				Pattern: "(field_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"_type",

						"field_identifier",

						"generic_type",

						"interpreted_string_literal",

						"qualified_type",

						"raw_string_literal",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "field_declaration_list",
				Pattern: "(field_declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"field_declaration",

					},
					
				},
				
			},

			{
				Name: "for_clause",
				Pattern: "(for_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"_expression",

						"_simple_statement",

					},
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "func_literal",
				Pattern: "(func_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					
					Roles: []string{

						"Lambda",

					},
					Children: []string{

						"_simple_type",

						"block",

						"parameter_list",

					},
					
				},
				
			},

			{
				Name: "function_declaration",
				Pattern: "(function_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"_simple_type",

						"block",

						"identifier",

						"parameter_list",

						"type_parameter_list",

					},
					
				},
				
			},

			{
				Name: "function_type",
				Pattern: "(function_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"_simple_type",

						"parameter_list",

					},
					
				},
				
			},

			{
				Name: "generic_type",
				Pattern: "(generic_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"negated_type",

						"qualified_type",

						"type_arguments",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "go_statement",
				Pattern: "(go_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "goto_statement",
				Pattern: "(goto_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"_expression",

						"_simple_statement",

						"block",

						"if_statement",

					},
					
				},
				
			},

			{
				Name: "implicit_length_array_type",
				Pattern: "(implicit_length_array_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_type",

					},
					
				},
				
			},

			{
				Name: "import_declaration",
				Pattern: "(import_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_spec",
				Pattern: "(import_spec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"blank_identifier",

						"dot",

						"interpreted_string_literal",

						"package_identifier",

						"raw_string_literal",

					},
					
				},
				
			},

			{
				Name: "import_spec_list",
				Pattern: "(import_spec_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "inc_statement",
				Pattern: "(inc_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "index_expression",
				Pattern: "(index_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					
					Roles: []string{

						"Index",

					},
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "interface_type",
				Pattern: "(interface_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "interpreted_string_literal",
				Pattern: "(interpreted_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "keyed_element",
				Pattern: "(keyed_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "KeyValue",
					Token: "self",
					Roles: []string{

						"Key",

					},
					Children: []string{

						"literal_element",

					},
					
				},
				
			},

			{
				Name: "labeled_statement",
				Pattern: "(labeled_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"label_name",

					},
					
				},
				
			},

			{
				Name: "literal_element",
				Pattern: "(literal_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "literal_value",
				Pattern: "(literal_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "map_type",
				Pattern: "(map_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_type",

					},
					
				},
				
			},

			{
				Name: "method_declaration",
				Pattern: "(method_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"_simple_type",

						"block",

						"field_identifier",

						"parameter_list",

					},
					
				},
				
			},

			{
				Name: "method_elem",
				Pattern: "(method_elem)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "child:identifier",
					Roles: []string{

						"Function",

						"Declaration",

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"_simple_type",

						"field_identifier",

						"parameter_list",

					},
					
				},
				
			},

			{
				Name: "negated_type",
				Pattern: "(negated_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "package_clause",
				Pattern: "(package_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Package",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "parameter_declaration",
				Pattern: "(parameter_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_type",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "parameter_list",
				Pattern: "(parameter_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "parenthesized_type",
				Pattern: "(parenthesized_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pointer_type",
				Pattern: "(pointer_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "qualified_type",
				Pattern: "(qualified_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"package_identifier",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "range_clause",
				Pattern: "(range_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"expression_list",

					},
					
				},
				
			},

			{
				Name: "raw_string_literal",
				Pattern: "(raw_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "receive_statement",
				Pattern: "(receive_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"expression_list",

					},
					
				},
				
			},

			{
				Name: "return_statement",
				Pattern: "(return_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "select_statement",
				Pattern: "(select_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "selector_expression",
				Pattern: "(selector_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_expression",

						"field_identifier",

					},
					
				},
				
			},

			{
				Name: "send_statement",
				Pattern: "(send_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "short_var_declaration",
				Pattern: "(short_var_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"expression_list",

					},
					
				},
				
			},

			{
				Name: "slice_expression",
				Pattern: "(slice_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Slice",
					
					
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "slice_type",
				Pattern: "(slice_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Slice",
					Token: "self",
					
					Children: []string{

						"_type",

					},
					
				},
				
			},

			{
				Name: "source_file",
				Pattern: "(source_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "struct_type",
				Pattern: "(struct_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "type_alias",
				Pattern: "(type_alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "type_arguments",
				Pattern: "(type_arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_assertion_expression",
				Pattern: "(type_assertion_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"_type",

					},
					
				},
				
			},

			{
				Name: "type_case",
				Pattern: "(type_case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"_type",

					},
					
				},
				
			},

			{
				Name: "type_constraint",
				Pattern: "(type_constraint)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_conversion_expression",
				Pattern: "(type_conversion_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_expression",

						"_type",

					},
					
				},
				
			},

			{
				Name: "type_declaration",
				Pattern: "(type_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_elem",
				Pattern: "(type_elem)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "child:identifier",
					
					
					
				},
				
			},

			{
				Name: "type_instantiation_expression",
				Pattern: "(type_instantiation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_type",

					},
					
				},
				
			},

			{
				Name: "type_parameter_declaration",
				Pattern: "(type_parameter_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"identifier",

						"type_constraint",

					},
					
				},
				
			},

			{
				Name: "type_parameter_list",
				Pattern: "(type_parameter_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_spec",
				Pattern: "(type_spec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"_type",

						"type_identifier",

						"type_parameter_list",

					},
					
				},
				
			},

			{
				Name: "type_switch_statement",
				Pattern: "(type_switch_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					Children: []string{

						"_expression",

						"_simple_statement",

						"expression_list",

					},
					
				},
				
			},

			{
				Name: "unary_expression",
				Pattern: "(unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "var_declaration",
				Pattern: "(var_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "var_spec",
				Pattern: "(var_spec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"_type",

						"expression_list",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "var_spec_list",
				Pattern: "(var_spec_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "variadic_argument",
				Pattern: "(variadic_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "variadic_parameter_declaration",
				Pattern: "(variadic_parameter_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_type",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "blank_identifier",
				Pattern: "(blank_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "chan",
				Pattern: "(chan)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "const",
				Pattern: "(const)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "defer",
				Pattern: "(defer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "fallthrough",
				Pattern: "(fallthrough)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field_identifier",
				Pattern: "(field_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					
					
					
				},
				
			},

			{
				Name: "float_literal",
				Pattern: "(float_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Reference",

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "func",
				Pattern: "(func)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "go",
				Pattern: "(go)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "goto",
				Pattern: "(goto)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "imaginary_literal",
				Pattern: "(imaginary_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "int_literal",
				Pattern: "(int_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "interface",
				Pattern: "(interface)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Literal",

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "interpreted_string_literal_content",
				Pattern: "(interpreted_string_literal_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "iota",
				Pattern: "(iota)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "label_name",
				Pattern: "(label_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "map",
				Pattern: "(map)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "nil",
				Pattern: "(nil)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "package",
				Pattern: "(package)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Package",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "package_identifier",
				Pattern: "(package_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					
					
					
				},
				
			},

			{
				Name: "range",
				Pattern: "(range)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "raw_string_literal_content",
				Pattern: "(raw_string_literal_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "rune_literal",
				Pattern: "(rune_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "select",
				Pattern: "(select)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "struct",
				Pattern: "(struct)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "switch",
				Pattern: "(switch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_identifier",
				Pattern: "(type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					
					
					
				},
				
			},

			{
				Name: "var",
				Pattern: "(var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "gosum",
		Extensions: []string{

		},
		Rules: []mapping.MappingRule{

			{
				Name: "checksum",
				Pattern: "(checksum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "checksum_database",
				Pattern: "(checksum_database)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "checksum_value",
				Pattern: "(checksum_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "version",
				Pattern: "(version)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"alpha",

						"beta",

						"dev",

						"hex_number",

						"module_version",

						"number",

						"number_with_decimal",

						"pre",

						"rc",

					},
					
				},
				
			},

			{
				Name: "alpha",
				Pattern: "(alpha)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "beta",
				Pattern: "(beta)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "dev",
				Pattern: "(dev)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "hash",
				Pattern: "(hash)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "hash_version",
				Pattern: "(hash_version)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "hex_number",
				Pattern: "(hex_number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "module_path",
				Pattern: "(module_path)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "module_version",
				Pattern: "(module_version)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "number",
				Pattern: "(number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "number_with_decimal",
				Pattern: "(number_with_decimal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pre",
				Pattern: "(pre)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "rc",
				Pattern: "(rc)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "gotmpl",
		Extensions: []string{

			".gotmpl",

			".go.tmpl",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "argument_list",
				Pattern: "(argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "assignment",
				Pattern: "(assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"assignment",

						"chained_pipeline",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"true",

						"variable",

						"variable_definition",

					},
					
				},
				
			},

			{
				Name: "block_action",
				Pattern: "(block_action)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					Children: []string{

						"assignment",

						"block_action",

						"chained_pipeline",

						"comment",

						"define_action",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"if_action",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"range_action",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"template_action",

						"text",

						"true",

						"variable",

						"variable_definition",

						"with_action",

						"yaml_no_injection_text",

					},
					
				},
				
			},

			{
				Name: "chained_pipeline",
				Pattern: "(chained_pipeline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "define_action",
				Pattern: "(define_action)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"assignment",

						"block_action",

						"chained_pipeline",

						"comment",

						"define_action",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"if_action",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"range_action",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"template_action",

						"text",

						"true",

						"variable",

						"variable_definition",

						"with_action",

						"yaml_no_injection_text",

					},
					
				},
				
			},

			{
				Name: "dot",
				Pattern: "(dot)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field",
				Pattern: "(field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "function_call",
				Pattern: "(function_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"argument_list",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "if_action",
				Pattern: "(if_action)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"assignment",

						"block_action",

						"chained_pipeline",

						"comment",

						"define_action",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"if_action",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"range_action",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"template_action",

						"text",

						"true",

						"variable",

						"variable_definition",

						"with_action",

						"yaml_no_injection_text",

					},
					
				},
				
			},

			{
				Name: "interpreted_string_literal",
				Pattern: "(interpreted_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "method_call",
				Pattern: "(method_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"argument_list",

						"field",

						"selector_expression",

					},
					
				},
				
			},

			{
				Name: "parenthesized_pipeline",
				Pattern: "(parenthesized_pipeline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "range_action",
				Pattern: "(range_action)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"assignment",

						"block_action",

						"chained_pipeline",

						"comment",

						"define_action",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"if_action",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"range_action",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"template_action",

						"text",

						"true",

						"variable",

						"variable_definition",

						"with_action",

						"yaml_no_injection_text",

					},
					
				},
				
			},

			{
				Name: "range_variable_definition",
				Pattern: "(range_variable_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"assignment",

						"chained_pipeline",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"true",

						"variable",

						"variable_definition",

					},
					
				},
				
			},

			{
				Name: "selector_expression",
				Pattern: "(selector_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"field",

						"field_identifier",

						"parenthesized_pipeline",

						"selector_expression",

						"variable",

					},
					
				},
				
			},

			{
				Name: "template",
				Pattern: "(template)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "template_action",
				Pattern: "(template_action)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"assignment",

						"chained_pipeline",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"true",

						"variable",

						"variable_definition",

					},
					
				},
				
			},

			{
				Name: "text",
				Pattern: "(text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "variable",
				Pattern: "(variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "variable_definition",
				Pattern: "(variable_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"assignment",

						"chained_pipeline",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"true",

						"variable",

						"variable_definition",

					},
					
				},
				
			},

			{
				Name: "with_action",
				Pattern: "(with_action)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"assignment",

						"block_action",

						"chained_pipeline",

						"comment",

						"define_action",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"if_action",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"range_action",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"template_action",

						"text",

						"true",

						"variable",

						"variable_definition",

						"with_action",

						"yaml_no_injection_text",

					},
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "define",
				Pattern: "(define)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "end",
				Pattern: "(end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field_identifier",
				Pattern: "(field_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "float_literal",
				Pattern: "(float_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Reference",

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "imaginary_literal",
				Pattern: "(imaginary_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "int_literal",
				Pattern: "(int_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "nil",
				Pattern: "(nil)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "range",
				Pattern: "(range)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "raw_string_literal",
				Pattern: "(raw_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "rune_literal",
				Pattern: "(rune_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "template",
				Pattern: "(template)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "with",
				Pattern: "(with)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "yaml_no_injection_text",
				Pattern: "(yaml_no_injection_text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "gowork",
		Extensions: []string{

		},
		Rules: []mapping.MappingRule{

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "file_path",
				Pattern: "(file_path)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "go_directive",
				Pattern: "(go_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "go_version",
				Pattern: "(go_version)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "interpreted_string_literal",
				Pattern: "(interpreted_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "module_path",
				Pattern: "(module_path)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Literal",

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "replace_directive",
				Pattern: "(replace_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "replace_spec",
				Pattern: "(replace_spec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "source_file",
				Pattern: "(source_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "use_directive",
				Pattern: "(use_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "File",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "use_spec",
				Pattern: "(use_spec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "version",
				Pattern: "(version)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "go",
				Pattern: "(go)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "raw_string_literal",
				Pattern: "(raw_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "replace",
				Pattern: "(replace)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "use",
				Pattern: "(use)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

		},
	},

	{
		Language: "hcl",
		Extensions: []string{

			".hcl",

			".tf",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "attr_splat",
				Pattern: "(attr_splat)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "attribute",
				Pattern: "(attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "binary_operation",
				Pattern: "(binary_operation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "BinaryOp",
					
					Roles: []string{

						"Operator",

					},
					
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_end",
				Pattern: "(block_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_start",
				Pattern: "(block_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "body",
				Pattern: "(body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bool_lit",
				Pattern: "(bool_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "collection_value",
				Pattern: "(collection_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "conditional",
				Pattern: "(conditional)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "config_file",
				Pattern: "(config_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expression",
				Pattern: "(expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "for_cond",
				Pattern: "(for_cond)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "for_expr",
				Pattern: "(for_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "for_intro",
				Pattern: "(for_intro)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "for_object_expr",
				Pattern: "(for_object_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "for_tuple_expr",
				Pattern: "(for_tuple_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "full_splat",
				Pattern: "(full_splat)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "function_arguments",
				Pattern: "(function_arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "function_call",
				Pattern: "(function_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "get_attr",
				Pattern: "(get_attr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "heredoc_start",
				Pattern: "(heredoc_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "heredoc_template",
				Pattern: "(heredoc_template)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "index",
				Pattern: "(index)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					Token: "self",
					Roles: []string{

						"Index",

					},
					
					
				},
				
			},

			{
				Name: "legacy_index",
				Pattern: "(legacy_index)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					
					Roles: []string{

						"Index",

					},
					
					
				},
				
			},

			{
				Name: "literal_value",
				Pattern: "(literal_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "new_index",
				Pattern: "(new_index)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					
					Roles: []string{

						"Index",

					},
					
					
				},
				
			},

			{
				Name: "numeric_lit",
				Pattern: "(numeric_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "object",
				Pattern: "(object)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "object_elem",
				Pattern: "(object_elem)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "object_end",
				Pattern: "(object_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "object_start",
				Pattern: "(object_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "operation",
				Pattern: "(operation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "quoted_template",
				Pattern: "(quoted_template)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "splat",
				Pattern: "(splat)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string_lit",
				Pattern: "(string_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "template_directive",
				Pattern: "(template_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "template_else_intro",
				Pattern: "(template_else_intro)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "template_expr",
				Pattern: "(template_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "template_for",
				Pattern: "(template_for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "template_for_end",
				Pattern: "(template_for_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "template_for_start",
				Pattern: "(template_for_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "template_if",
				Pattern: "(template_if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "template_if_end",
				Pattern: "(template_if_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					Roles: []string{

						"Condition",

					},
					
					
				},
				
			},

			{
				Name: "template_if_intro",
				Pattern: "(template_if_intro)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "template_interpolation",
				Pattern: "(template_interpolation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "template_literal",
				Pattern: "(template_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "tuple",
				Pattern: "(tuple)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "tuple_end",
				Pattern: "(tuple_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					
					
				},
				
			},

			{
				Name: "tuple_start",
				Pattern: "(tuple_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unary_operation",
				Pattern: "(unary_operation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "UnaryOp",
					
					Roles: []string{

						"Operator",

					},
					
					
				},
				
			},

			{
				Name: "variable_expr",
				Pattern: "(variable_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "ellipsis",
				Pattern: "(ellipsis)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "endfor",
				Pattern: "(endfor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "endif",
				Pattern: "(endif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "heredoc_identifier",
				Pattern: "(heredoc_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "null_lit",
				Pattern: "(null_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "quoted_template_end",
				Pattern: "(quoted_template_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "quoted_template_start",
				Pattern: "(quoted_template_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "strip_marker",
				Pattern: "(strip_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "template_directive_end",
				Pattern: "(template_directive_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "template_directive_start",
				Pattern: "(template_directive_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "template_interpolation_end",
				Pattern: "(template_interpolation_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "template_interpolation_start",
				Pattern: "(template_interpolation_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "helm",
		Extensions: []string{

			".yaml",

			".yml",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "argument_list",
				Pattern: "(argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "assignment",
				Pattern: "(assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"assignment",

						"chained_pipeline",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"true",

						"variable",

						"variable_definition",

					},
					
				},
				
			},

			{
				Name: "block_action",
				Pattern: "(block_action)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					Children: []string{

						"assignment",

						"block_action",

						"chained_pipeline",

						"comment",

						"define_action",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"if_action",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"range_action",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"template_action",

						"text",

						"true",

						"variable",

						"variable_definition",

						"with_action",

						"yaml_no_injection_text",

					},
					
				},
				
			},

			{
				Name: "chained_pipeline",
				Pattern: "(chained_pipeline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "define_action",
				Pattern: "(define_action)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"assignment",

						"block_action",

						"chained_pipeline",

						"comment",

						"define_action",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"if_action",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"range_action",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"template_action",

						"text",

						"true",

						"variable",

						"variable_definition",

						"with_action",

						"yaml_no_injection_text",

					},
					
				},
				
			},

			{
				Name: "dot",
				Pattern: "(dot)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field",
				Pattern: "(field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "function_call",
				Pattern: "(function_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"argument_list",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "if_action",
				Pattern: "(if_action)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"assignment",

						"block_action",

						"chained_pipeline",

						"comment",

						"define_action",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"if_action",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"range_action",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"template_action",

						"text",

						"true",

						"variable",

						"variable_definition",

						"with_action",

						"yaml_no_injection_text",

					},
					
				},
				
			},

			{
				Name: "interpreted_string_literal",
				Pattern: "(interpreted_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "method_call",
				Pattern: "(method_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"argument_list",

						"field",

						"selector_expression",

					},
					
				},
				
			},

			{
				Name: "parenthesized_pipeline",
				Pattern: "(parenthesized_pipeline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "range_action",
				Pattern: "(range_action)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"assignment",

						"block_action",

						"chained_pipeline",

						"comment",

						"define_action",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"if_action",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"range_action",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"template_action",

						"text",

						"true",

						"variable",

						"variable_definition",

						"with_action",

						"yaml_no_injection_text",

					},
					
				},
				
			},

			{
				Name: "range_variable_definition",
				Pattern: "(range_variable_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"assignment",

						"chained_pipeline",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"true",

						"variable",

						"variable_definition",

					},
					
				},
				
			},

			{
				Name: "selector_expression",
				Pattern: "(selector_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"field",

						"field_identifier",

						"parenthesized_pipeline",

						"selector_expression",

						"variable",

					},
					
				},
				
			},

			{
				Name: "template",
				Pattern: "(template)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "template_action",
				Pattern: "(template_action)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"assignment",

						"chained_pipeline",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"true",

						"variable",

						"variable_definition",

					},
					
				},
				
			},

			{
				Name: "text",
				Pattern: "(text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "variable",
				Pattern: "(variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "variable_definition",
				Pattern: "(variable_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"assignment",

						"chained_pipeline",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"true",

						"variable",

						"variable_definition",

					},
					
				},
				
			},

			{
				Name: "with_action",
				Pattern: "(with_action)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"assignment",

						"block_action",

						"chained_pipeline",

						"comment",

						"define_action",

						"dot",

						"false",

						"field",

						"float_literal",

						"function_call",

						"if_action",

						"imaginary_literal",

						"int_literal",

						"interpreted_string_literal",

						"method_call",

						"nil",

						"parenthesized_pipeline",

						"range_action",

						"raw_string_literal",

						"rune_literal",

						"selector_expression",

						"template_action",

						"text",

						"true",

						"variable",

						"variable_definition",

						"with_action",

						"yaml_no_injection_text",

					},
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "define",
				Pattern: "(define)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "end",
				Pattern: "(end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field_identifier",
				Pattern: "(field_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "float_literal",
				Pattern: "(float_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Reference",

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "imaginary_literal",
				Pattern: "(imaginary_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "int_literal",
				Pattern: "(int_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "nil",
				Pattern: "(nil)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "range",
				Pattern: "(range)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "raw_string_literal",
				Pattern: "(raw_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "rune_literal",
				Pattern: "(rune_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "template",
				Pattern: "(template)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "with",
				Pattern: "(with)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "yaml_no_injection_text",
				Pattern: "(yaml_no_injection_text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "html",
		Extensions: []string{

			".html",

			".htm",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "attribute",
				Pattern: "(attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "doctype",
				Pattern: "(doctype)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "document",
				Pattern: "(document)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "element",
				Pattern: "(element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "end_tag",
				Pattern: "(end_tag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "erroneous_end_tag",
				Pattern: "(erroneous_end_tag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "quoted_attribute_value",
				Pattern: "(quoted_attribute_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "script_element",
				Pattern: "(script_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "self_closing_tag",
				Pattern: "(self_closing_tag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "start_tag",
				Pattern: "(start_tag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "style_element",
				Pattern: "(style_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "attribute_name",
				Pattern: "(attribute_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "attribute_value",
				Pattern: "(attribute_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "doctype",
				Pattern: "(doctype)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "entity",
				Pattern: "(entity)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "erroneous_end_tag_name",
				Pattern: "(erroneous_end_tag_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "raw_text",
				Pattern: "(raw_text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "tag_name",
				Pattern: "(tag_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "text",
				Pattern: "(text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "ini",
		Extensions: []string{

			".ini",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "document",
				Pattern: "(document)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "section",
				Pattern: "(section)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "section_name",
				Pattern: "(section_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "setting",
				Pattern: "(setting)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "setting_name",
				Pattern: "(setting_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "setting_value",
				Pattern: "(setting_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "text",
				Pattern: "(text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "java",
		Extensions: []string{

			".java",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "_literal",
				Pattern: "(_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "_simple_type",
				Pattern: "(_simple_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_type",
				Pattern: "(_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_unannotated_type",
				Pattern: "(_unannotated_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "declaration",
				Pattern: "(declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expression",
				Pattern: "(expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "module_directive",
				Pattern: "(module_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "primary_expression",
				Pattern: "(primary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "statement",
				Pattern: "(statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "annotated_type",
				Pattern: "(annotated_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "annotation",
				Pattern: "(annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"annotation_argument_list",

						"identifier",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "annotation_argument_list",
				Pattern: "(annotation_argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "annotation_type_body",
				Pattern: "(annotation_type_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "annotation_type_declaration",
				Pattern: "(annotation_type_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"annotation_type_body",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "annotation_type_element_declaration",
				Pattern: "(annotation_type_element_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_unannotated_type",

						"annotation",

						"dimensions",

						"element_value_array_initializer",

						"expression",

						"identifier",

						"marker_annotation",

					},
					
				},
				
			},

			{
				Name: "argument_list",
				Pattern: "(argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "array_access",
				Pattern: "(array_access)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"primary_expression",

					},
					
				},
				
			},

			{
				Name: "array_creation_expression",
				Pattern: "(array_creation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_simple_type",

						"array_initializer",

						"dimensions",

						"dimensions_expr",

					},
					
				},
				
			},

			{
				Name: "array_initializer",
				Pattern: "(array_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "array_type",
				Pattern: "(array_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_unannotated_type",

						"dimensions",

					},
					
				},
				
			},

			{
				Name: "assert_statement",
				Pattern: "(assert_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "assignment_expression",
				Pattern: "(assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"array_access",

						"expression",

						"field_access",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "asterisk",
				Pattern: "(asterisk)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "break_statement",
				Pattern: "(break_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Body",

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "cast_expression",
				Pattern: "(cast_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					
					
					Children: []string{

						"_type",

						"expression",

					},
					
				},
				
			},

			{
				Name: "catch_clause",
				Pattern: "(catch_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					Token: "self",
					Roles: []string{

						"Catch",

					},
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "catch_formal_parameter",
				Pattern: "(catch_formal_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"dimensions",

						"identifier",

						"underscore_pattern",

					},
					
				},
				
			},

			{
				Name: "catch_type",
				Pattern: "(catch_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "class_body",
				Pattern: "(class_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "class_declaration",
				Pattern: "(class_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Body",

						"Class",

						"Declaration",

					},
					Children: []string{

						"class_body",

						"identifier",

						"permits",

						"super_interfaces",

						"superclass",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "class_literal",
				Pattern: "(class_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "compact_constructor_declaration",
				Pattern: "(compact_constructor_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Literal",

						"Struct",

						"Declaration",

					},
					Children: []string{

						"block",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "constant_declaration",
				Pattern: "(constant_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_unannotated_type",

						"variable_declarator",

					},
					
				},
				
			},

			{
				Name: "constructor_body",
				Pattern: "(constructor_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "constructor_declaration",
				Pattern: "(constructor_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"constructor_body",

						"formal_parameters",

						"identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "continue_statement",
				Pattern: "(continue_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "dimensions",
				Pattern: "(dimensions)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "dimensions_expr",
				Pattern: "(dimensions_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "do_statement",
				Pattern: "(do_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "element_value_array_initializer",
				Pattern: "(element_value_array_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "element_value_pair",
				Pattern: "(element_value_pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"annotation",

						"element_value_array_initializer",

						"expression",

						"identifier",

						"marker_annotation",

					},
					
				},
				
			},

			{
				Name: "enhanced_for_statement",
				Pattern: "(enhanced_for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

						"For",

					},
					Children: []string{

						"_unannotated_type",

						"dimensions",

						"expression",

						"identifier",

						"statement",

						"underscore_pattern",

					},
					
				},
				
			},

			{
				Name: "enum_body",
				Pattern: "(enum_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enum_body_declarations",
				Pattern: "(enum_body_declarations)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Body",

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enum_constant",
				Pattern: "(enum_constant)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"argument_list",

						"class_body",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "enum_declaration",
				Pattern: "(enum_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"enum_body",

						"identifier",

						"super_interfaces",

					},
					
				},
				
			},

			{
				Name: "explicit_constructor_invocation",
				Pattern: "(explicit_constructor_invocation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"argument_list",

						"primary_expression",

						"super",

						"this",

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "exports_module_directive",
				Pattern: "(exports_module_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"identifier",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "expression_statement",
				Pattern: "(expression_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extends_interfaces",
				Pattern: "(extends_interfaces)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "field_access",
				Pattern: "(field_access)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"identifier",

						"primary_expression",

						"super",

						"this",

					},
					
				},
				
			},

			{
				Name: "field_declaration",
				Pattern: "(field_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"_unannotated_type",

						"variable_declarator",

					},
					
				},
				
			},

			{
				Name: "finally_clause",
				Pattern: "(finally_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "floating_point_type",
				Pattern: "(floating_point_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"expression",

						"local_variable_declaration",

						"statement",

					},
					
				},
				
			},

			{
				Name: "formal_parameter",
				Pattern: "(formal_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_unannotated_type",

						"dimensions",

						"identifier",

						"underscore_pattern",

					},
					
				},
				
			},

			{
				Name: "formal_parameters",
				Pattern: "(formal_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "generic_type",
				Pattern: "(generic_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "guard",
				Pattern: "(guard)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					Roles: []string{

						"Condition",

					},
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "import_declaration",
				Pattern: "(import_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "inferred_parameters",
				Pattern: "(inferred_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Import",

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "instanceof_expression",
				Pattern: "(instanceof_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_type",

						"expression",

						"identifier",

						"record_pattern",

					},
					
				},
				
			},

			{
				Name: "integral_type",
				Pattern: "(integral_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "interface_body",
				Pattern: "(interface_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "interface_declaration",
				Pattern: "(interface_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Body",

						"Interface",

						"Declaration",

					},
					Children: []string{

						"identifier",

						"interface_body",

						"permits",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "labeled_statement",
				Pattern: "(labeled_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "lambda_expression",
				Pattern: "(lambda_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					Token: "self",
					Roles: []string{

						"Lambda",

					},
					Children: []string{

						"block",

						"expression",

						"formal_parameters",

						"identifier",

						"inferred_parameters",

					},
					
				},
				
			},

			{
				Name: "local_variable_declaration",
				Pattern: "(local_variable_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"_unannotated_type",

						"variable_declarator",

					},
					
				},
				
			},

			{
				Name: "marker_annotation",
				Pattern: "(marker_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "child:identifier",
					
					Children: []string{

						"identifier",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "method_declaration",
				Pattern: "(method_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"_unannotated_type",

						"block",

						"dimensions",

						"formal_parameters",

						"identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "method_invocation",
				Pattern: "(method_invocation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "child:identifier",
					Roles: []string{

						"Call",

					},
					Children: []string{

						"argument_list",

						"identifier",

						"primary_expression",

						"super",

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "method_reference",
				Pattern: "(method_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "modifiers",
				Pattern: "(modifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "module_body",
				Pattern: "(module_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "module_declaration",
				Pattern: "(module_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Body",

						"Module",

					},
					Children: []string{

						"identifier",

						"module_body",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "multiline_string_fragment",
				Pattern: "(multiline_string_fragment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "object_creation_expression",
				Pattern: "(object_creation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_simple_type",

						"argument_list",

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "opens_module_directive",
				Pattern: "(opens_module_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					Children: []string{

						"identifier",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "package_declaration",
				Pattern: "(package_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Package",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pattern",
				Pattern: "(pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "permits",
				Pattern: "(permits)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "program",
				Pattern: "(program)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "provides_module_directive",
				Pattern: "(provides_module_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					Children: []string{

						"identifier",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "receiver_parameter",
				Pattern: "(receiver_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "record_declaration",
				Pattern: "(record_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"class_body",

						"formal_parameters",

						"identifier",

						"super_interfaces",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "record_pattern",
				Pattern: "(record_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "record_pattern_body",
				Pattern: "(record_pattern_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "record_pattern_component",
				Pattern: "(record_pattern_component)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Body",

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "requires_modifier",
				Pattern: "(requires_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "requires_module_directive",
				Pattern: "(requires_module_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"identifier",

						"requires_modifier",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "resource",
				Pattern: "(resource)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_unannotated_type",

						"dimensions",

						"expression",

						"identifier",

						"underscore_pattern",

					},
					
				},
				
			},

			{
				Name: "resource_specification",
				Pattern: "(resource_specification)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "return_statement",
				Pattern: "(return_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "scoped_identifier",
				Pattern: "(scoped_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					Children: []string{

						"identifier",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "scoped_type_identifier",
				Pattern: "(scoped_type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "spread_parameter",
				Pattern: "(spread_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Reference",

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "static_initializer",
				Pattern: "(static_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string_interpolation",
				Pattern: "(string_interpolation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_literal",
				Pattern: "(string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "super_interfaces",
				Pattern: "(super_interfaces)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Literal",

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "superclass",
				Pattern: "(superclass)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "switch_block",
				Pattern: "(switch_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "switch_block_statement_group",
				Pattern: "(switch_block_statement_group)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "switch_expression",
				Pattern: "(switch_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					Children: []string{

						"parenthesized_expression",

						"switch_block",

					},
					
				},
				
			},

			{
				Name: "switch_label",
				Pattern: "(switch_label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					
					
				},
				
			},

			{
				Name: "switch_rule",
				Pattern: "(switch_rule)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "synchronized_statement",
				Pattern: "(synchronized_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "template_expression",
				Pattern: "(template_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"primary_expression",

						"string_literal",

					},
					
				},
				
			},

			{
				Name: "ternary_expression",
				Pattern: "(ternary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "throw_statement",
				Pattern: "(throw_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					Token: "self",
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "throws",
				Pattern: "(throws)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "try_statement",
				Pattern: "(try_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "try_with_resources_statement",
				Pattern: "(try_with_resources_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					Children: []string{

						"block",

						"resource_specification",

					},
					
				},
				
			},

			{
				Name: "type_arguments",
				Pattern: "(type_arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_bound",
				Pattern: "(type_bound)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_list",
				Pattern: "(type_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_parameter",
				Pattern: "(type_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_parameters",
				Pattern: "(type_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_pattern",
				Pattern: "(type_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "unary_expression",
				Pattern: "(unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "update_expression",
				Pattern: "(update_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "uses_module_directive",
				Pattern: "(uses_module_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"identifier",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "variable_declarator",
				Pattern: "(variable_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"array_initializer",

						"dimensions",

						"expression",

						"identifier",

						"underscore_pattern",

					},
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "wildcard",
				Pattern: "(wildcard)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "yield_statement",
				Pattern: "(yield_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "abstract",
				Pattern: "(abstract)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "assert",
				Pattern: "(assert)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "binary_integer_literal",
				Pattern: "(binary_integer_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "block_comment",
				Pattern: "(block_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Literal",

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "boolean_type",
				Pattern: "(boolean_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "byte",
				Pattern: "(byte)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "catch",
				Pattern: "(catch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "char",
				Pattern: "(char)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "character_literal",
				Pattern: "(character_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Literal",

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "decimal_floating_point_literal",
				Pattern: "(decimal_floating_point_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "decimal_integer_literal",
				Pattern: "(decimal_integer_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "double",
				Pattern: "(double)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "exports",
				Pattern: "(exports)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "extends",
				Pattern: "(extends)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "final",
				Pattern: "(final)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "finally",
				Pattern: "(finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "float",
				Pattern: "(float)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "hex_floating_point_literal",
				Pattern: "(hex_floating_point_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "hex_integer_literal",
				Pattern: "(hex_integer_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "implements",
				Pattern: "(implements)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "instanceof",
				Pattern: "(instanceof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "int",
				Pattern: "(int)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "interface",
				Pattern: "(interface)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "line_comment",
				Pattern: "(line_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "long",
				Pattern: "(long)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "module",
				Pattern: "(module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "native",
				Pattern: "(native)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "new",
				Pattern: "(new)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "null_literal",
				Pattern: "(null_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "octal_integer_literal",
				Pattern: "(octal_integer_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "open",
				Pattern: "(open)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "opens",
				Pattern: "(opens)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "package",
				Pattern: "(package)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Package",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "permits",
				Pattern: "(permits)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "private",
				Pattern: "(private)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "protected",
				Pattern: "(protected)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "provides",
				Pattern: "(provides)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "public",
				Pattern: "(public)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "record",
				Pattern: "(record)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "requires",
				Pattern: "(requires)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "sealed",
				Pattern: "(sealed)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "short",
				Pattern: "(short)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "static",
				Pattern: "(static)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "strictfp",
				Pattern: "(strictfp)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string_fragment",
				Pattern: "(string_fragment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "super",
				Pattern: "(super)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "switch",
				Pattern: "(switch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "synchronized",
				Pattern: "(synchronized)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "this",
				Pattern: "(this)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "throw",
				Pattern: "(throw)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "throws",
				Pattern: "(throws)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					Token: "self",
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "to",
				Pattern: "(to)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "transient",
				Pattern: "(transient)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "transitive",
				Pattern: "(transitive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "type_identifier",
				Pattern: "(type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "underscore_pattern",
				Pattern: "(underscore_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "uses",
				Pattern: "(uses)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "void_type",
				Pattern: "(void_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "volatile",
				Pattern: "(volatile)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "when",
				Pattern: "(when)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "with",
				Pattern: "(with)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "javascript",
		Extensions: []string{

			".js",

			".jsx",

			".mjs",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "declaration",
				Pattern: "(declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expression",
				Pattern: "(expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pattern",
				Pattern: "(pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "primary_expression",
				Pattern: "(primary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "statement",
				Pattern: "(statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "arguments",
				Pattern: "(arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "array",
				Pattern: "(array)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "array_pattern",
				Pattern: "(array_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "arrow_function",
				Pattern: "(arrow_function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					
					Roles: []string{

						"Lambda",

					},
					Children: []string{

						"expression",

						"formal_parameters",

						"identifier",

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "assignment_expression",
				Pattern: "(assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"array_pattern",

						"expression",

						"identifier",

						"member_expression",

						"object_pattern",

						"parenthesized_expression",

						"subscript_expression",

						"undefined",

					},
					
				},
				
			},

			{
				Name: "assignment_pattern",
				Pattern: "(assignment_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"expression",

						"pattern",

					},
					
				},
				
			},

			{
				Name: "augmented_assignment_expression",
				Pattern: "(augmented_assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"expression",

						"identifier",

						"member_expression",

						"parenthesized_expression",

						"subscript_expression",

					},
					
				},
				
			},

			{
				Name: "await_expression",
				Pattern: "(await_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "BinaryOp",
					Token: "self",
					Roles: []string{

						"Operator",

					},
					Children: []string{

						"expression",

						"in",

						"instanceof",

						"private_property_identifier",

					},
					
				},
				
			},

			{
				Name: "break_statement",
				Pattern: "(break_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					
					Roles: []string{

						"Break",

					},
					Children: []string{

						"statement_identifier",

					},
					
				},
				
			},

			{
				Name: "call_expression",
				Pattern: "(call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					Children: []string{

						"arguments",

						"expression",

						"import",

						"optional_chain",

						"template_string",

					},
					
				},
				
			},

			{
				Name: "catch_clause",
				Pattern: "(catch_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					Children: []string{

						"array_pattern",

						"identifier",

						"object_pattern",

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "class_body",
				Pattern: "(class_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"class_static_block",

						"field_definition",

						"method_definition",

					},
					
				},
				
			},

			{
				Name: "class_declaration",
				Pattern: "(class_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Body",

						"Class",

						"Declaration",

					},
					Children: []string{

						"class_body",

						"decorator",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "class_heritage",
				Pattern: "(class_heritage)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "class_static_block",
				Pattern: "(class_static_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "computed_property_name",
				Pattern: "(computed_property_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "continue_statement",
				Pattern: "(continue_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					Children: []string{

						"statement_identifier",

					},
					
				},
				
			},

			{
				Name: "debugger_statement",
				Pattern: "(debugger_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "decorator",
				Pattern: "(decorator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Decorator",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "do_statement",
				Pattern: "(do_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "else_clause",
				Pattern: "(else_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "empty_statement",
				Pattern: "(empty_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "export_clause",
				Pattern: "(export_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "export_specifier",
				Pattern: "(export_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "export_statement",
				Pattern: "(export_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"declaration",

						"decorator",

						"expression",

						"string",

					},
					
				},
				
			},

			{
				Name: "expression_statement",
				Pattern: "(expression_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "field_definition",
				Pattern: "(field_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"computed_property_name",

						"decorator",

						"expression",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "finally_clause",
				Pattern: "(finally_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					
					Roles: []string{

						"Finally",

					},
					Children: []string{

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "for_in_statement",
				Pattern: "(for_in_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"array_pattern",

						"const",

						"expression",

						"identifier",

						"in",

						"let",

						"member_expression",

						"object_pattern",

						"of",

						"parenthesized_expression",

						"sequence_expression",

						"statement",

						"subscript_expression",

						"undefined",

						"var",

					},
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"empty_statement",

						"expression",

						"lexical_declaration",

						"sequence_expression",

						"statement",

						"variable_declaration",

					},
					
				},
				
			},

			{
				Name: "formal_parameters",
				Pattern: "(formal_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Loop",

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "function_declaration",
				Pattern: "(function_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"formal_parameters",

						"identifier",

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "function_expression",
				Pattern: "(function_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "child:identifier",
					Roles: []string{

						"Function",

						"Declaration",

						"Function",

						"Declaration",

					},
					Children: []string{

						"formal_parameters",

						"identifier",

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "generator_function",
				Pattern: "(generator_function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"formal_parameters",

						"identifier",

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "generator_function_declaration",
				Pattern: "(generator_function_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"formal_parameters",

						"identifier",

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"else_clause",

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Condition",

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_attribute",
				Pattern: "(import_attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_clause",
				Pattern: "(import_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_specifier",
				Pattern: "(import_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "import_statement",
				Pattern: "(import_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"string",

					},
					
				},
				
			},

			{
				Name: "jsx_attribute",
				Pattern: "(jsx_attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "jsx_closing_element",
				Pattern: "(jsx_closing_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					
					Children: []string{

						"identifier",

						"jsx_namespace_name",

						"member_expression",

					},
					
				},
				
			},

			{
				Name: "jsx_element",
				Pattern: "(jsx_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"jsx_closing_element",

						"jsx_opening_element",

					},
					
				},
				
			},

			{
				Name: "jsx_expression",
				Pattern: "(jsx_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "jsx_namespace_name",
				Pattern: "(jsx_namespace_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "jsx_opening_element",
				Pattern: "(jsx_opening_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

						"jsx_attribute",

						"jsx_expression",

						"jsx_namespace_name",

						"member_expression",

					},
					
				},
				
			},

			{
				Name: "jsx_self_closing_element",
				Pattern: "(jsx_self_closing_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

						"jsx_attribute",

						"jsx_expression",

						"jsx_namespace_name",

						"member_expression",

					},
					
				},
				
			},

			{
				Name: "labeled_statement",
				Pattern: "(labeled_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"statement",

						"statement_identifier",

					},
					
				},
				
			},

			{
				Name: "lexical_declaration",
				Pattern: "(lexical_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"const",

						"let",

					},
					
				},
				
			},

			{
				Name: "member_expression",
				Pattern: "(member_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

						"import",

						"optional_chain",

						"private_property_identifier",

						"property_identifier",

					},
					
				},
				
			},

			{
				Name: "meta_property",
				Pattern: "(meta_property)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "method_definition",
				Pattern: "(method_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"computed_property_name",

						"decorator",

						"formal_parameters",

						"number",

						"private_property_identifier",

						"property_identifier",

						"statement_block",

						"string",

					},
					
				},
				
			},

			{
				Name: "named_imports",
				Pattern: "(named_imports)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "namespace_export",
				Pattern: "(namespace_export)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "namespace_import",
				Pattern: "(namespace_import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "new_expression",
				Pattern: "(new_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"arguments",

						"new_expression",

						"primary_expression",

					},
					
				},
				
			},

			{
				Name: "object",
				Pattern: "(object)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "object_assignment_pattern",
				Pattern: "(object_assignment_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"array_pattern",

						"expression",

						"object_pattern",

						"shorthand_property_identifier_pattern",

					},
					
				},
				
			},

			{
				Name: "object_pattern",
				Pattern: "(object_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "pair",
				Pattern: "(pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					Children: []string{

						"computed_property_name",

						"expression",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "pair_pattern",
				Pattern: "(pair_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"assignment_pattern",

						"computed_property_name",

						"number",

						"pattern",

						"private_property_identifier",

						"property_identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "program",
				Pattern: "(program)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "regex",
				Pattern: "(regex)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "File",
					Token: "self",
					
					Children: []string{

						"regex_flags",

						"regex_pattern",

					},
					
				},
				
			},

			{
				Name: "rest_pattern",
				Pattern: "(rest_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "return_statement",
				Pattern: "(return_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "sequence_expression",
				Pattern: "(sequence_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "spread_element",
				Pattern: "(spread_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Spread",
					Token: "self",
					Roles: []string{

						"Spread",

					},
					
					
				},
				
			},

			{
				Name: "statement_block",
				Pattern: "(statement_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "subscript_expression",
				Pattern: "(subscript_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"optional_chain",

						"sequence_expression",

					},
					
				},
				
			},

			{
				Name: "switch_body",
				Pattern: "(switch_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "switch_case",
				Pattern: "(switch_case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					Children: []string{

						"expression",

						"sequence_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "switch_default",
				Pattern: "(switch_default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"statement",

					},
					
				},
				
			},

			{
				Name: "switch_statement",
				Pattern: "(switch_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					Children: []string{

						"parenthesized_expression",

						"switch_body",

					},
					
				},
				
			},

			{
				Name: "template_string",
				Pattern: "(template_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "template_substitution",
				Pattern: "(template_substitution)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ternary_expression",
				Pattern: "(ternary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "throw_statement",
				Pattern: "(throw_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "try_statement",
				Pattern: "(try_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					Children: []string{

						"catch_clause",

						"finally_clause",

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "unary_expression",
				Pattern: "(unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"delete",

						"expression",

						"typeof",

						"void",

					},
					
				},
				
			},

			{
				Name: "update_expression",
				Pattern: "(update_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "UnaryOp",
					Token: "self",
					Roles: []string{

						"Operator",

					},
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "variable_declaration",
				Pattern: "(variable_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "variable_declarator",
				Pattern: "(variable_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "child:identifier",
					Roles: []string{

						"Variable",

						"Declaration",

						"Variable",

						"Declaration",

					},
					Children: []string{

						"array_pattern",

						"expression",

						"identifier",

						"object_pattern",

					},
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "with_statement",
				Pattern: "(with_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "yield_expression",
				Pattern: "(yield_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "as",
				Pattern: "(as)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "async",
				Pattern: "(async)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "await",
				Pattern: "(await)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "catch",
				Pattern: "(catch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "const",
				Pattern: "(const)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "debugger",
				Pattern: "(debugger)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "delete",
				Pattern: "(delete)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "export",
				Pattern: "(export)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "extends",
				Pattern: "(extends)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "finally",
				Pattern: "(finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "from",
				Pattern: "(from)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "function",
				Pattern: "(function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "get",
				Pattern: "(get)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "hash_bang_line",
				Pattern: "(hash_bang_line)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "html_character_reference",
				Pattern: "(html_character_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "html_comment",
				Pattern: "(html_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "instanceof",
				Pattern: "(instanceof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "jsx_text",
				Pattern: "(jsx_text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "let",
				Pattern: "(let)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "meta",
				Pattern: "(meta)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "new",
				Pattern: "(new)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "null",
				Pattern: "(null)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "number",
				Pattern: "(number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "of",
				Pattern: "(of)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "optional_chain",
				Pattern: "(optional_chain)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "private_property_identifier",
				Pattern: "(private_property_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "property_identifier",
				Pattern: "(property_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "regex_flags",
				Pattern: "(regex_flags)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "regex_pattern",
				Pattern: "(regex_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "set",
				Pattern: "(set)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "shorthand_property_identifier",
				Pattern: "(shorthand_property_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "shorthand_property_identifier_pattern",
				Pattern: "(shorthand_property_identifier_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "statement_identifier",
				Pattern: "(statement_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "static",
				Pattern: "(static)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string_fragment",
				Pattern: "(string_fragment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "super",
				Pattern: "(super)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "switch",
				Pattern: "(switch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "target",
				Pattern: "(target)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "this",
				Pattern: "(this)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "throw",
				Pattern: "(throw)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "typeof",
				Pattern: "(typeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "undefined",
				Pattern: "(undefined)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "var",
				Pattern: "(var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "void",
				Pattern: "(void)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "with",
				Pattern: "(with)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "json",
		Extensions: []string{

			".json",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "_value",
				Pattern: "(_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "array",
				Pattern: "(array)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "document",
				Pattern: "(document)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "object",
				Pattern: "(object)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pair",
				Pattern: "(pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_value",

						"string",

					},
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "null",
				Pattern: "(null)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "number",
				Pattern: "(number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string_content",
				Pattern: "(string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

		},
	},

	{
		Language: "kotlin",
		Extensions: []string{

			".kt",

			".kts",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "additive_expression",
				Pattern: "(additive_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "annotated_lambda",
				Pattern: "(annotated_lambda)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					Token: "self",
					Roles: []string{

						"Lambda",

					},
					
					
				},
				
			},

			{
				Name: "annotation",
				Pattern: "(annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "anonymous_function",
				Pattern: "(anonymous_function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "anonymous_initializer",
				Pattern: "(anonymous_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "as_expression",
				Pattern: "(as_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "assignment",
				Pattern: "(assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					
					
				},
				
			},

			{
				Name: "binding_pattern_kind",
				Pattern: "(binding_pattern_kind)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "boolean_literal",
				Pattern: "(boolean_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "call_expression",
				Pattern: "(call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Literal",

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "call_suffix",
				Pattern: "(call_suffix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "callable_reference",
				Pattern: "(callable_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "catch_block",
				Pattern: "(catch_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "character_escape_seq",
				Pattern: "(character_escape_seq)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "character_literal",
				Pattern: "(character_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "check_expression",
				Pattern: "(check_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "class_body",
				Pattern: "(class_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "class_declaration",
				Pattern: "(class_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Body",

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "class_modifier",
				Pattern: "(class_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "class_parameter",
				Pattern: "(class_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "collection_literal",
				Pattern: "(collection_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "companion_object",
				Pattern: "(companion_object)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "comparison_expression",
				Pattern: "(comparison_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "conjunction_expression",
				Pattern: "(conjunction_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "constructor_delegation_call",
				Pattern: "(constructor_delegation_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "constructor_invocation",
				Pattern: "(constructor_invocation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Call",

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "control_structure_body",
				Pattern: "(control_structure_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "delegation_specifier",
				Pattern: "(delegation_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "directly_assignable_expression",
				Pattern: "(directly_assignable_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "disjunction_expression",
				Pattern: "(disjunction_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "do_while_statement",
				Pattern: "(do_while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "elvis_expression",
				Pattern: "(elvis_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum_class_body",
				Pattern: "(enum_class_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enum_entry",
				Pattern: "(enum_entry)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Body",

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "equality_expression",
				Pattern: "(equality_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "explicit_delegation",
				Pattern: "(explicit_delegation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "file_annotation",
				Pattern: "(file_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "finally_block",
				Pattern: "(finally_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "function_body",
				Pattern: "(function_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "function_declaration",
				Pattern: "(function_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"receiver_type",

					},
					
				},
				
			},

			{
				Name: "function_modifier",
				Pattern: "(function_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "child:identifier",
					Roles: []string{

						"Function",

						"Declaration",

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "function_type",
				Pattern: "(function_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"receiver_type",

					},
					
				},
				
			},

			{
				Name: "function_type_parameters",
				Pattern: "(function_type_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "function_value_parameters",
				Pattern: "(function_value_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "getter",
				Pattern: "(getter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Getter",
					Token: "self",
					Roles: []string{

						"Getter",

					},
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "if_expression",
				Pattern: "(if_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					Roles: []string{

						"Condition",

					},
					Children: []string{

						"additive_expression",

						"anonymous_function",

						"as_expression",

						"bin_literal",

						"boolean_literal",

						"call_expression",

						"callable_reference",

						"character_literal",

						"check_expression",

						"collection_literal",

						"comparison_expression",

						"conjunction_expression",

						"control_structure_body",

						"disjunction_expression",

						"elvis_expression",

						"equality_expression",

						"hex_literal",

						"if_expression",

						"indexing_expression",

						"infix_expression",

						"integer_literal",

						"jump_expression",

						"lambda_literal",

						"long_literal",

						"multiplicative_expression",

						"navigation_expression",

						"null_literal",

						"object_literal",

						"parenthesized_expression",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"real_literal",

						"simple_identifier",

						"spread_expression",

						"string_literal",

						"super_expression",

						"this_expression",

						"try_expression",

						"unsigned_literal",

						"when_expression",

					},
					
				},
				
			},

			{
				Name: "import_alias",
				Pattern: "(import_alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_header",
				Pattern: "(import_header)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_list",
				Pattern: "(import_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "indexing_expression",
				Pattern: "(indexing_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					Token: "self",
					Roles: []string{

						"Index",

					},
					
					
				},
				
			},

			{
				Name: "indexing_suffix",
				Pattern: "(indexing_suffix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					
					Roles: []string{

						"Index",

					},
					
					
				},
				
			},

			{
				Name: "infix_expression",
				Pattern: "(infix_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "inheritance_modifier",
				Pattern: "(inheritance_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "interpolated_expression",
				Pattern: "(interpolated_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "interpolated_identifier",
				Pattern: "(interpolated_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "jump_expression",
				Pattern: "(jump_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "label",
				Pattern: "(label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "lambda_literal",
				Pattern: "(lambda_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "lambda_parameters",
				Pattern: "(lambda_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "long_literal",
				Pattern: "(long_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "member_modifier",
				Pattern: "(member_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "modifiers",
				Pattern: "(modifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "multi_variable_declaration",
				Pattern: "(multi_variable_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "multiplicative_expression",
				Pattern: "(multiplicative_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "child:identifier",
					
					
					
				},
				
			},

			{
				Name: "navigation_expression",
				Pattern: "(navigation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "navigation_suffix",
				Pattern: "(navigation_suffix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "not_nullable_type",
				Pattern: "(not_nullable_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "nullable_type",
				Pattern: "(nullable_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "object_declaration",
				Pattern: "(object_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "object_literal",
				Pattern: "(object_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "package_header",
				Pattern: "(package_header)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Package",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "parameter",
				Pattern: "(parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parameter_modifier",
				Pattern: "(parameter_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parameter_modifiers",
				Pattern: "(parameter_modifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parameter_with_optional_type",
				Pattern: "(parameter_with_optional_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "parenthesized_type",
				Pattern: "(parenthesized_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "parenthesized_user_type",
				Pattern: "(parenthesized_user_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "platform_modifier",
				Pattern: "(platform_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "postfix_expression",
				Pattern: "(postfix_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "prefix_expression",
				Pattern: "(prefix_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "primary_constructor",
				Pattern: "(primary_constructor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "property_declaration",
				Pattern: "(property_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"receiver_type",

					},
					
				},
				
			},

			{
				Name: "property_delegate",
				Pattern: "(property_delegate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					Token: "self",
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "range_expression",
				Pattern: "(range_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "range_test",
				Pattern: "(range_test)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "receiver_type",
				Pattern: "(receiver_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "secondary_constructor",
				Pattern: "(secondary_constructor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "setter",
				Pattern: "(setter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Setter",
					
					Roles: []string{

						"Setter",

					},
					
					
				},
				
			},

			{
				Name: "shebang_line",
				Pattern: "(shebang_line)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Setter",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "simple_identifier",
				Pattern: "(simple_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "source_file",
				Pattern: "(source_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "spread_expression",
				Pattern: "(spread_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Spread",
					
					Roles: []string{

						"Spread",

					},
					
					
				},
				
			},

			{
				Name: "statements",
				Pattern: "(statements)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_literal",
				Pattern: "(string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "super_expression",
				Pattern: "(super_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "this_expression",
				Pattern: "(this_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "try_expression",
				Pattern: "(try_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "type_alias",
				Pattern: "(type_alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_arguments",
				Pattern: "(type_arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_constraint",
				Pattern: "(type_constraint)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_constraints",
				Pattern: "(type_constraints)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_identifier",
				Pattern: "(type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "type_modifiers",
				Pattern: "(type_modifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "type_parameter",
				Pattern: "(type_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_parameter_modifiers",
				Pattern: "(type_parameter_modifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_parameters",
				Pattern: "(type_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_projection",
				Pattern: "(type_projection)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_projection_modifiers",
				Pattern: "(type_projection_modifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "type_test",
				Pattern: "(type_test)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unsigned_literal",
				Pattern: "(unsigned_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "use_site_target",
				Pattern: "(use_site_target)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "user_type",
				Pattern: "(user_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "value_argument",
				Pattern: "(value_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "value_arguments",
				Pattern: "(value_arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "variable_declaration",
				Pattern: "(variable_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "variance_modifier",
				Pattern: "(variance_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "visibility_modifier",
				Pattern: "(visibility_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "when_condition",
				Pattern: "(when_condition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "when_entry",
				Pattern: "(when_entry)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "when_expression",
				Pattern: "(when_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "when_subject",
				Pattern: "(when_subject)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "L",
				Pattern: "(L)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "abstract",
				Pattern: "(abstract)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "actual",
				Pattern: "(actual)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "annotation",
				Pattern: "(annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "as",
				Pattern: "(as)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "bin_literal",
				Pattern: "(bin_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Literal",

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "by",
				Pattern: "(by)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "catch",
				Pattern: "(catch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					Token: "self",
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "companion",
				Pattern: "(companion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "constructor",
				Pattern: "(constructor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "crossinline",
				Pattern: "(crossinline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "data",
				Pattern: "(data)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "delegate",
				Pattern: "(delegate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "dynamic",
				Pattern: "(dynamic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "expect",
				Pattern: "(expect)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "external",
				Pattern: "(external)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field",
				Pattern: "(field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "file",
				Pattern: "(file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "final",
				Pattern: "(final)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "finally",
				Pattern: "(finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "fun",
				Pattern: "(fun)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "get",
				Pattern: "(get)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "hex_literal",
				Pattern: "(hex_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "infix",
				Pattern: "(infix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "init",
				Pattern: "(init)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "inline",
				Pattern: "(inline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "inner",
				Pattern: "(inner)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "integer_literal",
				Pattern: "(integer_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "interface",
				Pattern: "(interface)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "internal",
				Pattern: "(internal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "is",
				Pattern: "(is)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "lateinit",
				Pattern: "(lateinit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "line_comment",
				Pattern: "(line_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "multiline_comment",
				Pattern: "(multiline_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "noinline",
				Pattern: "(noinline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "null_literal",
				Pattern: "(null_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "object",
				Pattern: "(object)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "open",
				Pattern: "(open)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "operator",
				Pattern: "(operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "out",
				Pattern: "(out)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "override",
				Pattern: "(override)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "package",
				Pattern: "(package)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Package",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "param",
				Pattern: "(param)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "private",
				Pattern: "(private)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "property",
				Pattern: "(property)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "property_modifier",
				Pattern: "(property_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "protected",
				Pattern: "(protected)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "public",
				Pattern: "(public)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "real_literal",
				Pattern: "(real_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "receiver",
				Pattern: "(receiver)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "reification_modifier",
				Pattern: "(reification_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "sealed",
				Pattern: "(sealed)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "set",
				Pattern: "(set)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "setparam",
				Pattern: "(setparam)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "string_content",
				Pattern: "(string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "super",
				Pattern: "(super)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "suspend",
				Pattern: "(suspend)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "tailrec",
				Pattern: "(tailrec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "this",
				Pattern: "(this)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "throw",
				Pattern: "(throw)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "typealias",
				Pattern: "(typealias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "val",
				Pattern: "(val)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "value",
				Pattern: "(value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "var",
				Pattern: "(var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "vararg",
				Pattern: "(vararg)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "when",
				Pattern: "(when)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "where",
				Pattern: "(where)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "wildcard_import",
				Pattern: "(wildcard_import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "latex",
		Extensions: []string{

			".tex",

			".ltx",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "acronym_definition",
				Pattern: "(acronym_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"brack_group_key_value",

						"curly_group",

						"curly_group_text",

					},
					
				},
				
			},

			{
				Name: "acronym_reference",
				Pattern: "(acronym_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"brack_group_key_value",

						"curly_group_text",

					},
					
				},
				
			},

			{
				Name: "asy_environment",
				Pattern: "(asy_environment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"begin",

						"end",

						"source_code",

					},
					
				},
				
			},

			{
				Name: "asydef_environment",
				Pattern: "(asydef_environment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"begin",

						"end",

						"source_code",

					},
					
				},
				
			},

			{
				Name: "author",
				Pattern: "(author)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "author_declaration",
				Pattern: "(author_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"brack_group",

						"curly_group_author_list",

					},
					
				},
				
			},

			{
				Name: "begin",
				Pattern: "(begin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"brack_group",

						"brack_group_key_value",

						"curly_group_text",

					},
					
				},
				
			},

			{
				Name: "biblatex_include",
				Pattern: "(biblatex_include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"brack_group_key_value",

						"curly_group_glob_pattern",

					},
					
				},
				
			},

			{
				Name: "bibstyle_include",
				Pattern: "(bibstyle_include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"curly_group_path",

					},
					
				},
				
			},

			{
				Name: "bibtex_include",
				Pattern: "(bibtex_include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"curly_group_path_list",

					},
					
				},
				
			},

			{
				Name: "block_comment",
				Pattern: "(block_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					Children: []string{

						"comment",

					},
					
				},
				
			},

			{
				Name: "brack_group",
				Pattern: "(brack_group)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "brack_group_argc",
				Pattern: "(brack_group_argc)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"argc",

					},
					
				},
				
			},

			{
				Name: "brack_group_key_value",
				Pattern: "(brack_group_key_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "KeyValue",
					Token: "self",
					Roles: []string{

						"Key",

						"Value",

					},
					Children: []string{

						"key_value_pair",

					},
					
				},
				
			},

			{
				Name: "brack_group_text",
				Pattern: "(brack_group_text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"text",

					},
					
				},
				
			},

			{
				Name: "caption",
				Pattern: "(caption)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"brack_group",

						"curly_group",

					},
					
				},
				
			},

			{
				Name: "changes_replaced",
				Pattern: "(changes_replaced)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"curly_group",

					},
					
				},
				
			},

			{
				Name: "chapter",
				Pattern: "(chapter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"brack_group",

						"curly_group",

					},
					
				},
				
			},

			{
				Name: "citation",
				Pattern: "(citation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"brack_group",

						"curly_group_text_list",

					},
					
				},
				
			},

			{
				Name: "class_include",
				Pattern: "(class_include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"brack_group_key_value",

						"curly_group_path",

					},
					
				},
				
			},

			{
				Name: "color_definition",
				Pattern: "(color_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"curly_group",

						"curly_group_text",

					},
					
				},
				
			},

			{
				Name: "color_reference",
				Pattern: "(color_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"brack_group_text",

						"curly_group",

						"curly_group_text",

					},
					
				},
				
			},

			{
				Name: "color_set_definition",
				Pattern: "(color_set_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					Children: []string{

						"brack_group_text",

						"curly_group",

						"curly_group_text_list",

					},
					
				},
				
			},

			{
				Name: "comment_environment",
				Pattern: "(comment_environment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					Children: []string{

						"begin",

						"comment",

						"end",

					},
					
				},
				
			},

			{
				Name: "curly_group",
				Pattern: "(curly_group)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "curly_group_author_list",
				Pattern: "(curly_group_author_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "curly_group_command_name",
				Pattern: "(curly_group_command_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"command_name",

					},
					
				},
				
			},

			{
				Name: "curly_group_glob_pattern",
				Pattern: "(curly_group_glob_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"glob_pattern",

					},
					
				},
				
			},

			{
				Name: "curly_group_impl",
				Pattern: "(curly_group_impl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "curly_group_key_value",
				Pattern: "(curly_group_key_value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "KeyValue",
					Token: "self",
					Roles: []string{

						"Key",

						"Value",

					},
					Children: []string{

						"key_value_pair",

					},
					
				},
				
			},

			{
				Name: "curly_group_label",
				Pattern: "(curly_group_label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"label",

					},
					
				},
				
			},

			{
				Name: "curly_group_label_list",
				Pattern: "(curly_group_label_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"label",

					},
					
				},
				
			},

			{
				Name: "curly_group_path",
				Pattern: "(curly_group_path)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"path",

					},
					
				},
				
			},

			{
				Name: "curly_group_path_list",
				Pattern: "(curly_group_path_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"path",

					},
					
				},
				
			},

			{
				Name: "curly_group_spec",
				Pattern: "(curly_group_spec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "curly_group_text",
				Pattern: "(curly_group_text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"text",

					},
					
				},
				
			},

			{
				Name: "curly_group_text_list",
				Pattern: "(curly_group_text_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					Children: []string{

						"text",

					},
					
				},
				
			},

			{
				Name: "curly_group_uri",
				Pattern: "(curly_group_uri)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"uri",

					},
					
				},
				
			},

			{
				Name: "displayed_equation",
				Pattern: "(displayed_equation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "end",
				Pattern: "(end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"curly_group_text",

					},
					
				},
				
			},

			{
				Name: "enum_item",
				Pattern: "(enum_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"brack_group_text",

					},
					
				},
				
			},

			{
				Name: "environment_definition",
				Pattern: "(environment_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"brack_group_argc",

						"curly_group_impl",

						"curly_group_spec",

						"curly_group_text",

					},
					
				},
				
			},

			{
				Name: "generic_command",
				Pattern: "(generic_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"command_name",

						"curly_group",

					},
					
				},
				
			},

			{
				Name: "generic_environment",
				Pattern: "(generic_environment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"begin",

						"end",

					},
					
				},
				
			},

			{
				Name: "glob_pattern",
				Pattern: "(glob_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "glossary_entry_definition",
				Pattern: "(glossary_entry_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					Children: []string{

						"curly_group_key_value",

						"curly_group_text",

					},
					
				},
				
			},

			{
				Name: "glossary_entry_reference",
				Pattern: "(glossary_entry_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					Children: []string{

						"brack_group_key_value",

						"curly_group_text",

					},
					
				},
				
			},

			{
				Name: "graphics_include",
				Pattern: "(graphics_include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"brack_group_key_value",

						"curly_group_path",

					},
					
				},
				
			},

			{
				Name: "hyperlink",
				Pattern: "(hyperlink)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"curly_group",

						"curly_group_uri",

					},
					
				},
				
			},

			{
				Name: "import_include",
				Pattern: "(import_include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"curly_group_path",

					},
					
				},
				
			},

			{
				Name: "inkscape_include",
				Pattern: "(inkscape_include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"brack_group_key_value",

						"curly_group_path",

					},
					
				},
				
			},

			{
				Name: "inline_formula",
				Pattern: "(inline_formula)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "key_value_pair",
				Pattern: "(key_value_pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "KeyValue",
					
					Roles: []string{

						"Key",

						"Value",

					},
					Children: []string{

						"text",

						"value",

					},
					
				},
				
			},

			{
				Name: "label_definition",
				Pattern: "(label_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "KeyValue",
					Token: "self",
					
					Children: []string{

						"curly_group_label",

					},
					
				},
				
			},

			{
				Name: "label_number",
				Pattern: "(label_number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"curly_group",

						"curly_group_text",

					},
					
				},
				
			},

			{
				Name: "label_reference",
				Pattern: "(label_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"curly_group_label_list",

					},
					
				},
				
			},

			{
				Name: "label_reference_range",
				Pattern: "(label_reference_range)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"curly_group_text",

					},
					
				},
				
			},

			{
				Name: "latex_include",
				Pattern: "(latex_include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"curly_group_path",

					},
					
				},
				
			},

			{
				Name: "let_command_definition",
				Pattern: "(let_command_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"command_name",

					},
					
				},
				
			},

			{
				Name: "listing_environment",
				Pattern: "(listing_environment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"begin",

						"end",

						"source_code",

					},
					
				},
				
			},

			{
				Name: "luacode_environment",
				Pattern: "(luacode_environment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"begin",

						"end",

						"source_code",

					},
					
				},
				
			},

			{
				Name: "math_delimiter",
				Pattern: "(math_delimiter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"command_name",

						"word",

					},
					
				},
				
			},

			{
				Name: "math_environment",
				Pattern: "(math_environment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"begin",

						"end",

					},
					
				},
				
			},

			{
				Name: "minted_environment",
				Pattern: "(minted_environment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"begin",

						"end",

						"source_code",

					},
					
				},
				
			},

			{
				Name: "new_command_definition",
				Pattern: "(new_command_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"brack_group",

						"brack_group_argc",

						"command_name",

						"curly_group",

						"curly_group_command_name",

						"curly_group_spec",

					},
					
				},
				
			},

			{
				Name: "old_command_definition",
				Pattern: "(old_command_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"command_name",

					},
					
				},
				
			},

			{
				Name: "operator",
				Pattern: "(operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "package_include",
				Pattern: "(package_include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Package",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"brack_group_key_value",

						"curly_group_path_list",

					},
					
				},
				
			},

			{
				Name: "paired_delimiter_definition",
				Pattern: "(paired_delimiter_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"brack_group_argc",

						"command_name",

						"curly_group",

						"curly_group_command_name",

						"curly_group_impl",

					},
					
				},
				
			},

			{
				Name: "paragraph",
				Pattern: "(paragraph)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"brack_group",

						"curly_group",

					},
					
				},
				
			},

			{
				Name: "part",
				Pattern: "(part)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"brack_group",

						"curly_group",

					},
					
				},
				
			},

			{
				Name: "pycode_environment",
				Pattern: "(pycode_environment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"begin",

						"end",

						"source_code",

					},
					
				},
				
			},

			{
				Name: "sageblock_environment",
				Pattern: "(sageblock_environment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					Children: []string{

						"begin",

						"end",

						"source_code",

					},
					
				},
				
			},

			{
				Name: "sagesilent_environment",
				Pattern: "(sagesilent_environment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"begin",

						"end",

						"source_code",

					},
					
				},
				
			},

			{
				Name: "section",
				Pattern: "(section)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"brack_group",

						"curly_group",

					},
					
				},
				
			},

			{
				Name: "source_file",
				Pattern: "(source_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "subparagraph",
				Pattern: "(subparagraph)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"brack_group",

						"curly_group",

					},
					
				},
				
			},

			{
				Name: "subscript",
				Pattern: "(subscript)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"command_name",

						"curly_group",

						"letter",

					},
					
				},
				
			},

			{
				Name: "subsection",
				Pattern: "(subsection)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"brack_group",

						"curly_group",

					},
					
				},
				
			},

			{
				Name: "subsubsection",
				Pattern: "(subsubsection)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"brack_group",

						"curly_group",

					},
					
				},
				
			},

			{
				Name: "superscript",
				Pattern: "(superscript)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"command_name",

						"curly_group",

						"letter",

					},
					
				},
				
			},

			{
				Name: "svg_include",
				Pattern: "(svg_include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"brack_group_key_value",

						"curly_group_path",

					},
					
				},
				
			},

			{
				Name: "text",
				Pattern: "(text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"acronym_definition",

						"acronym_reference",

						"author_declaration",

						"biblatex_include",

						"bibstyle_include",

						"bibtex_include",

						"block_comment",

						"caption",

						"changes_replaced",

						"citation",

						"class_include",

						"color_definition",

						"color_reference",

						"color_set_definition",

						"delimiter",

						"environment_definition",

						"generic_command",

						"glossary_entry_definition",

						"glossary_entry_reference",

						"graphics_include",

						"hyperlink",

						"import_include",

						"inkscape_include",

						"label_definition",

						"label_number",

						"label_reference",

						"label_reference_range",

						"latex_include",

						"let_command_definition",

						"new_command_definition",

						"old_command_definition",

						"operator",

						"package_include",

						"paired_delimiter_definition",

						"placeholder",

						"subscript",

						"superscript",

						"svg_include",

						"theorem_definition",

						"tikz_library_import",

						"title_declaration",

						"todo",

						"verbatim_include",

						"word",

					},
					
				},
				
			},

			{
				Name: "text_mode",
				Pattern: "(text_mode)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"curly_group",

					},
					
				},
				
			},

			{
				Name: "theorem_definition",
				Pattern: "(theorem_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"brack_group_key_value",

						"brack_group_text",

						"curly_group",

						"curly_group_text_list",

					},
					
				},
				
			},

			{
				Name: "tikz_library_import",
				Pattern: "(tikz_library_import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"curly_group_path_list",

					},
					
				},
				
			},

			{
				Name: "title_declaration",
				Pattern: "(title_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"brack_group",

						"curly_group",

					},
					
				},
				
			},

			{
				Name: "todo",
				Pattern: "(todo)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"brack_group",

						"curly_group",

						"todo_command_name",

					},
					
				},
				
			},

			{
				Name: "value",
				Pattern: "(value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "verbatim_environment",
				Pattern: "(verbatim_environment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"begin",

						"comment",

						"end",

					},
					
				},
				
			},

			{
				Name: "verbatim_include",
				Pattern: "(verbatim_include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"curly_group_path",

					},
					
				},
				
			},

			{
				Name: "_",
				Pattern: "(_)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "argc",
				Pattern: "(argc)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "command_name",
				Pattern: "(command_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "delimiter",
				Pattern: "(delimiter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "label",
				Pattern: "(label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "letter",
				Pattern: "(letter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "line_comment",
				Pattern: "(line_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "path",
				Pattern: "(path)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "placeholder",
				Pattern: "(placeholder)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "source_code",
				Pattern: "(source_code)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "todo_command_name",
				Pattern: "(todo_command_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "uri",
				Pattern: "(uri)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "word",
				Pattern: "(word)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

		},
	},

	{
		Language: "lua",
		Extensions: []string{

			".lua",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "declaration",
				Pattern: "(declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expression",
				Pattern: "(expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "statement",
				Pattern: "(statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "variable",
				Pattern: "(variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "arguments",
				Pattern: "(arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "assignment_statement",
				Pattern: "(assignment_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					
					
				},
				
			},

			{
				Name: "attribute",
				Pattern: "(attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "bracket_index_expression",
				Pattern: "(bracket_index_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					Token: "self",
					Roles: []string{

						"Body",

						"Index",

					},
					Children: []string{

						"expression",

						"function_call",

						"parenthesized_expression",

						"variable",

					},
					
				},
				
			},

			{
				Name: "chunk",
				Pattern: "(chunk)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					Children: []string{

						"comment_content",

					},
					
				},
				
			},

			{
				Name: "do_statement",
				Pattern: "(do_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "dot_index_expression",
				Pattern: "(dot_index_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					Token: "self",
					Roles: []string{

						"Index",

					},
					Children: []string{

						"function_call",

						"identifier",

						"parenthesized_expression",

						"variable",

					},
					
				},
				
			},

			{
				Name: "else_statement",
				Pattern: "(else_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "elseif_statement",
				Pattern: "(elseif_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"block",

						"expression",

					},
					
				},
				
			},

			{
				Name: "empty_statement",
				Pattern: "(empty_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expression_list",
				Pattern: "(expression_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "field",
				Pattern: "(field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"expression",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "for_generic_clause",
				Pattern: "(for_generic_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "for_numeric_clause",
				Pattern: "(for_numeric_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"expression",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"block",

						"for_generic_clause",

						"for_numeric_clause",

					},
					
				},
				
			},

			{
				Name: "function_call",
				Pattern: "(function_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"arguments",

						"function_call",

						"method_index_expression",

						"parenthesized_expression",

						"variable",

					},
					
				},
				
			},

			{
				Name: "function_declaration",
				Pattern: "(function_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Call",

						"Function",

						"Declaration",

					},
					Children: []string{

						"block",

						"dot_index_expression",

						"identifier",

						"method_index_expression",

						"parameters",

					},
					
				},
				
			},

			{
				Name: "function_definition",
				Pattern: "(function_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"block",

						"parameters",

					},
					
				},
				
			},

			{
				Name: "goto_statement",
				Pattern: "(goto_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"block",

						"else_statement",

						"elseif_statement",

						"expression",

					},
					
				},
				
			},

			{
				Name: "label_statement",
				Pattern: "(label_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					Roles: []string{

						"Condition",

					},
					
					
				},
				
			},

			{
				Name: "method_index_expression",
				Pattern: "(method_index_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"function_call",

						"identifier",

						"parenthesized_expression",

						"variable",

					},
					
				},
				
			},

			{
				Name: "parameters",
				Pattern: "(parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "repeat_statement",
				Pattern: "(repeat_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"block",

						"expression",

					},
					
				},
				
			},

			{
				Name: "return_statement",
				Pattern: "(return_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					Children: []string{

						"string_content",

					},
					
				},
				
			},

			{
				Name: "string_content",
				Pattern: "(string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "table_constructor",
				Pattern: "(table_constructor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "unary_expression",
				Pattern: "(unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "variable_declaration",
				Pattern: "(variable_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Operator",

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "variable_list",
				Pattern: "(variable_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"attribute",

						"variable",

					},
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"block",

						"expression",

					},
					
				},
				
			},

			{
				Name: "and",
				Pattern: "(and)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "break_statement",
				Pattern: "(break_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "comment_content",
				Pattern: "(comment_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "elseif",
				Pattern: "(elseif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "end",
				Pattern: "(end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "function",
				Pattern: "(function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "goto",
				Pattern: "(goto)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "hash_bang_line",
				Pattern: "(hash_bang_line)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "local",
				Pattern: "(local)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "nil",
				Pattern: "(nil)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "not",
				Pattern: "(not)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "number",
				Pattern: "(number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "or",
				Pattern: "(or)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "repeat",
				Pattern: "(repeat)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "then",
				Pattern: "(then)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "until",
				Pattern: "(until)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "vararg_expression",
				Pattern: "(vararg_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "make",
		Extensions: []string{

			".makefile",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "RECIPEPREFIX_assignment",
				Pattern: "(RECIPEPREFIX_assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"text",

					},
					
				},
				
			},

			{
				Name: "VPATH_assignment",
				Pattern: "(VPATH_assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"VPATH",

						"paths",

					},
					
				},
				
			},

			{
				Name: "archive",
				Pattern: "(archive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"list",

						"word",

					},
					
				},
				
			},

			{
				Name: "arguments",
				Pattern: "(arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"text",

					},
					
				},
				
			},

			{
				Name: "automatic_variable",
				Pattern: "(automatic_variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "concatenation",
				Pattern: "(concatenation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "conditional",
				Pattern: "(conditional)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"RECIPEPREFIX_assignment",

						"VPATH_assignment",

						"conditional",

						"define_directive",

						"export_directive",

						"function_call",

						"ifdef_directive",

						"ifeq_directive",

						"ifndef_directive",

						"ifneq_directive",

						"include_directive",

						"override_directive",

						"private_directive",

						"recipe_line",

						"rule",

						"shell_assignment",

						"shell_function",

						"undefine_directive",

						"unexport_directive",

						"variable_assignment",

						"vpath_directive",

					},
					
				},
				
			},

			{
				Name: "define_directive",
				Pattern: "(define_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"raw_text",

						"word",

					},
					
				},
				
			},

			{
				Name: "else_directive",
				Pattern: "(else_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"RECIPEPREFIX_assignment",

						"VPATH_assignment",

						"conditional",

						"define_directive",

						"export_directive",

						"function_call",

						"include_directive",

						"override_directive",

						"private_directive",

						"recipe_line",

						"rule",

						"shell_assignment",

						"shell_function",

						"undefine_directive",

						"unexport_directive",

						"variable_assignment",

						"vpath_directive",

					},
					
				},
				
			},

			{
				Name: "elsif_directive",
				Pattern: "(elsif_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"RECIPEPREFIX_assignment",

						"VPATH_assignment",

						"conditional",

						"define_directive",

						"export_directive",

						"function_call",

						"ifdef_directive",

						"ifeq_directive",

						"ifndef_directive",

						"ifneq_directive",

						"include_directive",

						"override_directive",

						"private_directive",

						"recipe_line",

						"rule",

						"shell_assignment",

						"shell_function",

						"undefine_directive",

						"unexport_directive",

						"variable_assignment",

						"vpath_directive",

					},
					
				},
				
			},

			{
				Name: "export_directive",
				Pattern: "(export_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"list",

					},
					
				},
				
			},

			{
				Name: "function_call",
				Pattern: "(function_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"abspath",

						"addprefix",

						"addsuffix",

						"and",

						"basename",

						"call",

						"dir",

						"error",

						"eval",

						"file",

						"filter",

						"findstring",

						"firstword",

						"flavor",

						"foreach",

						"if",

						"info",

						"join",

						"lastword",

						"notdir",

						"or",

						"origin",

						"patsubst",

						"realpath",

						"sort",

						"strip",

						"subst",

						"suffix",

						"value",

						"warning",

						"wildcard",

						"word",

						"wordlist",

						"words",

					},
					
				},
				
			},

			{
				Name: "ifdef_directive",
				Pattern: "(ifdef_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"archive",

						"automatic_variable",

						"concatenation",

						"function_call",

						"shell_function",

						"string",

						"substitution_reference",

						"variable_reference",

						"word",

					},
					
				},
				
			},

			{
				Name: "ifeq_directive",
				Pattern: "(ifeq_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"archive",

						"automatic_variable",

						"concatenation",

						"function_call",

						"shell_function",

						"string",

						"substitution_reference",

						"variable_reference",

						"word",

					},
					
				},
				
			},

			{
				Name: "ifndef_directive",
				Pattern: "(ifndef_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"archive",

						"automatic_variable",

						"concatenation",

						"function_call",

						"shell_function",

						"string",

						"substitution_reference",

						"variable_reference",

						"word",

					},
					
				},
				
			},

			{
				Name: "ifneq_directive",
				Pattern: "(ifneq_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"archive",

						"automatic_variable",

						"concatenation",

						"function_call",

						"shell_function",

						"string",

						"substitution_reference",

						"variable_reference",

						"word",

					},
					
				},
				
			},

			{
				Name: "include_directive",
				Pattern: "(include_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"list",

					},
					
				},
				
			},

			{
				Name: "list",
				Pattern: "(list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "makefile",
				Pattern: "(makefile)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "override_directive",
				Pattern: "(override_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "paths",
				Pattern: "(paths)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pattern_list",
				Pattern: "(pattern_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "prerequisites",
				Pattern: "(prerequisites)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "private_directive",
				Pattern: "(private_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "raw_text",
				Pattern: "(raw_text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "recipe",
				Pattern: "(recipe)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "recipe_line",
				Pattern: "(recipe_line)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "rule",
				Pattern: "(rule)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"pattern_list",

						"prerequisites",

					},
					
				},
				
			},

			{
				Name: "shell_assignment",
				Pattern: "(shell_assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"shell_command",

						"word",

					},
					
				},
				
			},

			{
				Name: "shell_command",
				Pattern: "(shell_command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "shell_function",
				Pattern: "(shell_function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"shell",

					},
					
				},
				
			},

			{
				Name: "shell_text",
				Pattern: "(shell_text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"automatic_variable",

						"function_call",

						"shell_function",

						"substitution_reference",

						"variable_reference",

					},
					
				},
				
			},

			{
				Name: "substitution_reference",
				Pattern: "(substitution_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"archive",

						"automatic_variable",

						"concatenation",

						"function_call",

						"shell_function",

						"string",

						"substitution_reference",

						"variable_reference",

						"word",

					},
					
				},
				
			},

			{
				Name: "targets",
				Pattern: "(targets)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "text",
				Pattern: "(text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "undefine_directive",
				Pattern: "(undefine_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"word",

					},
					
				},
				
			},

			{
				Name: "unexport_directive",
				Pattern: "(unexport_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"list",

					},
					
				},
				
			},

			{
				Name: "variable_assignment",
				Pattern: "(variable_assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"list",

						"text",

						"word",

					},
					
				},
				
			},

			{
				Name: "variable_reference",
				Pattern: "(variable_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "vpath_directive",
				Pattern: "(vpath_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"paths",

						"word",

					},
					
				},
				
			},

			{
				Name: "D",
				Pattern: "(D)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "F",
				Pattern: "(F)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "VPATH",
				Pattern: "(VPATH)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "abspath",
				Pattern: "(abspath)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "addprefix",
				Pattern: "(addprefix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "addsuffix",
				Pattern: "(addsuffix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "and",
				Pattern: "(and)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "basename",
				Pattern: "(basename)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "call",
				Pattern: "(call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "define",
				Pattern: "(define)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "dir",
				Pattern: "(dir)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "endef",
				Pattern: "(endef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "endif",
				Pattern: "(endif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "error",
				Pattern: "(error)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "escape",
				Pattern: "(escape)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "eval",
				Pattern: "(eval)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "export",
				Pattern: "(export)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "file",
				Pattern: "(file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "filter",
				Pattern: "(filter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "File",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "findstring",
				Pattern: "(findstring)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "firstword",
				Pattern: "(firstword)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "flavor",
				Pattern: "(flavor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "foreach",
				Pattern: "(foreach)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "ifdef",
				Pattern: "(ifdef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ifeq",
				Pattern: "(ifeq)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "ifndef",
				Pattern: "(ifndef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ifneq",
				Pattern: "(ifneq)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "include",
				Pattern: "(include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "info",
				Pattern: "(info)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "join",
				Pattern: "(join)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "lastword",
				Pattern: "(lastword)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "notdir",
				Pattern: "(notdir)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "or",
				Pattern: "(or)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "origin",
				Pattern: "(origin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "override",
				Pattern: "(override)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "patsubst",
				Pattern: "(patsubst)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "private",
				Pattern: "(private)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "realpath",
				Pattern: "(realpath)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "shell",
				Pattern: "(shell)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "sinclude",
				Pattern: "(sinclude)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "sort",
				Pattern: "(sort)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "strip",
				Pattern: "(strip)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "subst",
				Pattern: "(subst)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "suffix",
				Pattern: "(suffix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "undefine",
				Pattern: "(undefine)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unexport",
				Pattern: "(unexport)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "value",
				Pattern: "(value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "vpath",
				Pattern: "(vpath)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "warning",
				Pattern: "(warning)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "wildcard",
				Pattern: "(wildcard)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "word",
				Pattern: "(word)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "word",
				Pattern: "(word)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "wordlist",
				Pattern: "(wordlist)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "words",
				Pattern: "(words)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "markdown",
		Extensions: []string{

			".md",

			".markdown",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "atx_heading",
				Pattern: "(atx_heading)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"inline",

					},
					
				},
				
			},

			{
				Name: "backslash_escape",
				Pattern: "(backslash_escape)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "block_quote",
				Pattern: "(block_quote)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "code_fence_content",
				Pattern: "(code_fence_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "document",
				Pattern: "(document)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "fenced_code_block",
				Pattern: "(fenced_code_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "html_block",
				Pattern: "(html_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "indented_code_block",
				Pattern: "(indented_code_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "info_string",
				Pattern: "(info_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "inline",
				Pattern: "(inline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "language",
				Pattern: "(language)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "link_destination",
				Pattern: "(link_destination)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "link_label",
				Pattern: "(link_label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "link_reference_definition",
				Pattern: "(link_reference_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "link_title",
				Pattern: "(link_title)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "list",
				Pattern: "(list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "list_item",
				Pattern: "(list_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "list_marker_dot",
				Pattern: "(list_marker_dot)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "list_marker_minus",
				Pattern: "(list_marker_minus)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "list_marker_parenthesis",
				Pattern: "(list_marker_parenthesis)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "list_marker_plus",
				Pattern: "(list_marker_plus)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "list_marker_star",
				Pattern: "(list_marker_star)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "paragraph",
				Pattern: "(paragraph)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pipe_table",
				Pattern: "(pipe_table)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pipe_table_cell",
				Pattern: "(pipe_table_cell)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pipe_table_delimiter_cell",
				Pattern: "(pipe_table_delimiter_cell)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pipe_table_delimiter_row",
				Pattern: "(pipe_table_delimiter_row)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pipe_table_header",
				Pattern: "(pipe_table_header)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pipe_table_row",
				Pattern: "(pipe_table_row)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "section",
				Pattern: "(section)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "setext_heading",
				Pattern: "(setext_heading)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					Children: []string{

						"paragraph",

					},
					
				},
				
			},

			{
				Name: "task_list_marker_checked",
				Pattern: "(task_list_marker_checked)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "task_list_marker_unchecked",
				Pattern: "(task_list_marker_unchecked)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "thematic_break",
				Pattern: "(thematic_break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "_",
				Pattern: "(_)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "atx_h1_marker",
				Pattern: "(atx_h1_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "atx_h2_marker",
				Pattern: "(atx_h2_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "atx_h3_marker",
				Pattern: "(atx_h3_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "atx_h4_marker",
				Pattern: "(atx_h4_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "atx_h5_marker",
				Pattern: "(atx_h5_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "atx_h6_marker",
				Pattern: "(atx_h6_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "block_continuation",
				Pattern: "(block_continuation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_quote_marker",
				Pattern: "(block_quote_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "entity_reference",
				Pattern: "(entity_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "fenced_code_block_delimiter",
				Pattern: "(fenced_code_block_delimiter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "minus_metadata",
				Pattern: "(minus_metadata)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "numeric_character_reference",
				Pattern: "(numeric_character_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pipe_table_align_left",
				Pattern: "(pipe_table_align_left)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pipe_table_align_right",
				Pattern: "(pipe_table_align_right)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "plus_metadata",
				Pattern: "(plus_metadata)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "setext_h1_underline",
				Pattern: "(setext_h1_underline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "setext_h2_underline",
				Pattern: "(setext_h2_underline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "markdown_inline",
		Extensions: []string{

			".md",

			".markdown",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "atx_heading",
				Pattern: "(atx_heading)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"inline",

					},
					
				},
				
			},

			{
				Name: "backslash_escape",
				Pattern: "(backslash_escape)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "block_quote",
				Pattern: "(block_quote)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "code_fence_content",
				Pattern: "(code_fence_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "document",
				Pattern: "(document)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "fenced_code_block",
				Pattern: "(fenced_code_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "html_block",
				Pattern: "(html_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "indented_code_block",
				Pattern: "(indented_code_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "info_string",
				Pattern: "(info_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "inline",
				Pattern: "(inline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "language",
				Pattern: "(language)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "link_destination",
				Pattern: "(link_destination)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "link_label",
				Pattern: "(link_label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "link_reference_definition",
				Pattern: "(link_reference_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "link_title",
				Pattern: "(link_title)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "list",
				Pattern: "(list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "list_item",
				Pattern: "(list_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "list_marker_dot",
				Pattern: "(list_marker_dot)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "list_marker_minus",
				Pattern: "(list_marker_minus)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "list_marker_parenthesis",
				Pattern: "(list_marker_parenthesis)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "list_marker_plus",
				Pattern: "(list_marker_plus)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "list_marker_star",
				Pattern: "(list_marker_star)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "paragraph",
				Pattern: "(paragraph)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pipe_table",
				Pattern: "(pipe_table)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pipe_table_cell",
				Pattern: "(pipe_table_cell)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pipe_table_delimiter_cell",
				Pattern: "(pipe_table_delimiter_cell)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pipe_table_delimiter_row",
				Pattern: "(pipe_table_delimiter_row)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pipe_table_header",
				Pattern: "(pipe_table_header)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pipe_table_row",
				Pattern: "(pipe_table_row)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "section",
				Pattern: "(section)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "setext_heading",
				Pattern: "(setext_heading)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					Children: []string{

						"paragraph",

					},
					
				},
				
			},

			{
				Name: "task_list_marker_checked",
				Pattern: "(task_list_marker_checked)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "task_list_marker_unchecked",
				Pattern: "(task_list_marker_unchecked)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "thematic_break",
				Pattern: "(thematic_break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "_",
				Pattern: "(_)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "atx_h1_marker",
				Pattern: "(atx_h1_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "atx_h2_marker",
				Pattern: "(atx_h2_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "atx_h3_marker",
				Pattern: "(atx_h3_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "atx_h4_marker",
				Pattern: "(atx_h4_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "atx_h5_marker",
				Pattern: "(atx_h5_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "atx_h6_marker",
				Pattern: "(atx_h6_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "block_continuation",
				Pattern: "(block_continuation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_quote_marker",
				Pattern: "(block_quote_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "entity_reference",
				Pattern: "(entity_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "fenced_code_block_delimiter",
				Pattern: "(fenced_code_block_delimiter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "minus_metadata",
				Pattern: "(minus_metadata)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "numeric_character_reference",
				Pattern: "(numeric_character_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pipe_table_align_left",
				Pattern: "(pipe_table_align_left)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pipe_table_align_right",
				Pattern: "(pipe_table_align_right)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "plus_metadata",
				Pattern: "(plus_metadata)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "setext_h1_underline",
				Pattern: "(setext_h1_underline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "setext_h2_underline",
				Pattern: "(setext_h2_underline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "nim",
		Extensions: []string{

			".nim",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "accent_quoted",
				Pattern: "(accent_quoted)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "argument_list",
				Pattern: "(argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "array_construction",
				Pattern: "(array_construction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "assembly_statement",
				Pattern: "(assembly_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"pragma_list",

					},
					
				},
				
			},

			{
				Name: "assignment",
				Pattern: "(assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"try",

						"tuple_construction",

						"tuple_type",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "bind_statement",
				Pattern: "(bind_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					Children: []string{

						"accent_quoted",

						"blank_identifier",

						"identifier",

						"statement_list",

					},
					
				},
				
			},

			{
				Name: "block_comment",
				Pattern: "(block_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_documentation_comment",
				Pattern: "(block_documentation_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "bracket_expression",
				Pattern: "(bracket_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					Children: []string{

						"accent_quoted",

						"argument_list",

						"array_construction",

						"blank_identifier",

						"bracket_expression",

						"call",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"generalized_string",

						"identifier",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"tuple_construction",

						"tuple_type",

						"var_type",

					},
					
				},
				
			},

			{
				Name: "break_statement",
				Pattern: "(break_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "call",
				Pattern: "(call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Break",

						"Call",

					},
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"bracket_expression",

						"call",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"generalized_string",

						"generic_argument_list",

						"identifier",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"tuple_construction",

						"tuple_type",

						"var_type",

					},
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"elif_branch",

						"else_branch",

						"enum_type",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"of_branch",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"try",

						"tuple_construction",

						"tuple_type",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "cast",
				Pattern: "(cast)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					Token: "self",
					
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"colon_expression",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"try",

						"tuple_construction",

						"tuple_type",

						"type_expression",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "char_literal",
				Pattern: "(char_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "colon_expression",
				Pattern: "(colon_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"try",

						"tuple_construction",

						"tuple_type",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "concept_declaration",
				Pattern: "(concept_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					Children: []string{

						"parameter_list",

						"refinement_list",

						"statement_list",

					},
					
				},
				
			},

			{
				Name: "conditional_declaration",
				Pattern: "(conditional_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"elif_branch",

						"else_branch",

						"enum_type",

						"field_declaration_list",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"try",

						"tuple_construction",

						"tuple_type",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "const_section",
				Pattern: "(const_section)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "continue_statement",
				Pattern: "(continue_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "converter_declaration",
				Pattern: "(converter_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					Children: []string{

						"accent_quoted",

						"blank_identifier",

						"exported_symbol",

						"generic_parameter_list",

						"identifier",

						"parameter_declaration_list",

						"pragma_list",

						"statement_list",

						"term_rewriting_pattern",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "curly_construction",
				Pattern: "(curly_construction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "curly_expression",
				Pattern: "(curly_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"accent_quoted",

						"argument_list",

						"array_construction",

						"blank_identifier",

						"bracket_expression",

						"call",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"generalized_string",

						"identifier",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"tuple_construction",

						"tuple_type",

						"var_type",

					},
					
				},
				
			},

			{
				Name: "defer",
				Pattern: "(defer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"statement_list",

					},
					
				},
				
			},

			{
				Name: "discard_statement",
				Pattern: "(discard_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "distinct_type",
				Pattern: "(distinct_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "do_block",
				Pattern: "(do_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"parameter_declaration_list",

						"pragma_list",

						"statement_list",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "documentation_comment",
				Pattern: "(documentation_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "dot_expression",
				Pattern: "(dot_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "DocString",
					Token: "self",
					Roles: []string{

						"Doc",

					},
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"bracket_expression",

						"call",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"generalized_string",

						"identifier",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"tuple_construction",

						"tuple_type",

						"var_type",

					},
					
				},
				
			},

			{
				Name: "dot_generic_call",
				Pattern: "(dot_generic_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"bracket_expression",

						"call",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"generalized_string",

						"generic_argument_list",

						"identifier",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"tuple_construction",

						"tuple_type",

						"var_type",

					},
					
				},
				
			},

			{
				Name: "elif_branch",
				Pattern: "(elif_branch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"field_declaration_list",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"statement_list",

						"try",

						"tuple_construction",

						"tuple_type",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "else_branch",
				Pattern: "(else_branch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"field_declaration_list",

						"statement_list",

					},
					
				},
				
			},

			{
				Name: "enum_declaration",
				Pattern: "(enum_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enum_field_declaration",
				Pattern: "(enum_field_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"try",

						"tuple_construction",

						"tuple_type",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "enum_type",
				Pattern: "(enum_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "equal_expression",
				Pattern: "(equal_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"try",

						"tuple_construction",

						"tuple_type",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "except_branch",
				Pattern: "(except_branch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression_list",

						"statement_list",

					},
					
				},
				
			},

			{
				Name: "except_clause",
				Pattern: "(except_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "export_statement",
				Pattern: "(export_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "exported_symbol",
				Pattern: "(exported_symbol)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "expression_list",
				Pattern: "(expression_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "field_declaration",
				Pattern: "(field_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"try",

						"tuple_construction",

						"tuple_type",

						"type_expression",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "field_declaration_list",
				Pattern: "(field_declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "finally_branch",
				Pattern: "(finally_branch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					Children: []string{

						"statement_list",

					},
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"statement_list",

						"symbol_declaration_list",

						"try",

						"tuple_construction",

						"tuple_type",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "func_declaration",
				Pattern: "(func_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"accent_quoted",

						"blank_identifier",

						"exported_symbol",

						"generic_parameter_list",

						"identifier",

						"parameter_declaration_list",

						"pragma_list",

						"statement_list",

						"term_rewriting_pattern",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "func_expression",
				Pattern: "(func_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"parameter_declaration_list",

						"pragma_list",

						"statement_list",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "generalized_string",
				Pattern: "(generalized_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"dot_expression",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "generic_argument_list",
				Pattern: "(generic_argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "generic_parameter_list",
				Pattern: "(generic_parameter_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"elif_branch",

						"else_branch",

						"enum_type",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"statement_list",

						"try",

						"tuple_construction",

						"tuple_type",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "import_from_statement",
				Pattern: "(import_from_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"try",

						"tuple_construction",

						"tuple_type",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "import_statement",
				Pattern: "(import_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "include_statement",
				Pattern: "(include_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "infix_expression",
				Pattern: "(infix_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"accent_quoted",

						"and",

						"array_construction",

						"as",

						"blank_identifier",

						"bracket_expression",

						"call",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"div",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"from",

						"generalized_string",

						"identifier",

						"in",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"is",

						"isnot",

						"iterator_type",

						"long_string_literal",

						"mod",

						"nil_literal",

						"notin",

						"object_type",

						"of",

						"operator",

						"or",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"shl",

						"shr",

						"tuple_construction",

						"tuple_type",

						"typeof",

						"var_type",

						"xor",

					},
					
				},
				
			},

			{
				Name: "interpreted_string_literal",
				Pattern: "(interpreted_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "iterator_declaration",
				Pattern: "(iterator_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"accent_quoted",

						"blank_identifier",

						"exported_symbol",

						"generic_parameter_list",

						"identifier",

						"parameter_declaration_list",

						"pragma_list",

						"statement_list",

						"term_rewriting_pattern",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "iterator_expression",
				Pattern: "(iterator_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"parameter_declaration_list",

						"pragma_list",

						"statement_list",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "iterator_type",
				Pattern: "(iterator_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"parameter_declaration_list",

						"pragma_list",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "let_section",
				Pattern: "(let_section)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "long_string_literal",
				Pattern: "(long_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "macro_declaration",
				Pattern: "(macro_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"accent_quoted",

						"blank_identifier",

						"exported_symbol",

						"generic_parameter_list",

						"identifier",

						"parameter_declaration_list",

						"pragma_list",

						"statement_list",

						"term_rewriting_pattern",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "method_declaration",
				Pattern: "(method_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"accent_quoted",

						"blank_identifier",

						"exported_symbol",

						"generic_parameter_list",

						"identifier",

						"parameter_declaration_list",

						"pragma_list",

						"statement_list",

						"term_rewriting_pattern",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "mixin_statement",
				Pattern: "(mixin_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "child:identifier",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "nil_literal",
				Pattern: "(nil_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "object_declaration",
				Pattern: "(object_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"pragma_list",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "object_type",
				Pattern: "(object_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "of_branch",
				Pattern: "(of_branch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression_list",

						"field_declaration_list",

						"statement_list",

					},
					
				},
				
			},

			{
				Name: "out_type",
				Pattern: "(out_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "parameter_declaration",
				Pattern: "(parameter_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"try",

						"tuple_construction",

						"tuple_type",

						"type_expression",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "parameter_declaration_list",
				Pattern: "(parameter_declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parameter_list",
				Pattern: "(parameter_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parenthesized",
				Pattern: "(parenthesized)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pointer_parameter",
				Pattern: "(pointer_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "pointer_type",
				Pattern: "(pointer_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pragma_expression",
				Pattern: "(pragma_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"bracket_expression",

						"call",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"generalized_string",

						"identifier",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"pragma_list",

						"prefix_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"tuple_construction",

						"tuple_type",

						"var_type",

					},
					
				},
				
			},

			{
				Name: "pragma_list",
				Pattern: "(pragma_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "pragma_statement",
				Pattern: "(pragma_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"statement_list",

					},
					
				},
				
			},

			{
				Name: "prefix_expression",
				Pattern: "(prefix_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"and",

						"as",

						"div",

						"from",

						"in",

						"is",

						"isnot",

						"mod",

						"not",

						"notin",

						"of",

						"operator",

						"or",

						"shl",

						"shr",

						"xor",

					},
					
				},
				
			},

			{
				Name: "proc_declaration",
				Pattern: "(proc_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"accent_quoted",

						"blank_identifier",

						"exported_symbol",

						"generic_parameter_list",

						"identifier",

						"parameter_declaration_list",

						"pragma_list",

						"statement_list",

						"term_rewriting_pattern",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "proc_expression",
				Pattern: "(proc_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"parameter_declaration_list",

						"pragma_list",

						"statement_list",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "proc_type",
				Pattern: "(proc_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"parameter_declaration_list",

						"pragma_list",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "raise_statement",
				Pattern: "(raise_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "raw_string_literal",
				Pattern: "(raw_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "ref_parameter",
				Pattern: "(ref_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "ref_type",
				Pattern: "(ref_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "refinement_list",
				Pattern: "(refinement_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "return_statement",
				Pattern: "(return_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "source_file",
				Pattern: "(source_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "statement_list",
				Pattern: "(statement_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "static_parameter",
				Pattern: "(static_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "static_statement",
				Pattern: "(static_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"statement_list",

					},
					
				},
				
			},

			{
				Name: "string_content",
				Pattern: "(string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "symbol_declaration",
				Pattern: "(symbol_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"accent_quoted",

						"blank_identifier",

						"exported_symbol",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "symbol_declaration_list",
				Pattern: "(symbol_declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "template_declaration",
				Pattern: "(template_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"accent_quoted",

						"blank_identifier",

						"exported_symbol",

						"generic_parameter_list",

						"identifier",

						"parameter_declaration_list",

						"pragma_list",

						"statement_list",

						"term_rewriting_pattern",

						"type_expression",

					},
					
				},
				
			},

			{
				Name: "term_rewriting_pattern",
				Pattern: "(term_rewriting_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					Children: []string{

						"statement_list",

					},
					
				},
				
			},

			{
				Name: "tuple_construction",
				Pattern: "(tuple_construction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "tuple_deconstruct_declaration",
				Pattern: "(tuple_deconstruct_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "tuple_type",
				Pattern: "(tuple_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					
					
				},
				
			},

			{
				Name: "type_declaration",
				Pattern: "(type_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_expression",
				Pattern: "(type_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_parameter",
				Pattern: "(type_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_section",
				Pattern: "(type_section)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_symbol_declaration",
				Pattern: "(type_symbol_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"accent_quoted",

						"blank_identifier",

						"exported_symbol",

						"identifier",

						"pragma_list",

					},
					
				},
				
			},

			{
				Name: "typeof",
				Pattern: "(typeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "using_section",
				Pattern: "(using_section)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "var_parameter",
				Pattern: "(var_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "var_section",
				Pattern: "(var_section)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "var_type",
				Pattern: "(var_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "variable_declaration",
				Pattern: "(variable_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"try",

						"tuple_construction",

						"tuple_type",

						"type_expression",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "variant_declaration",
				Pattern: "(variant_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"else_branch",

						"of_branch",

					},
					
				},
				
			},

			{
				Name: "variant_discriminator_declaration",
				Pattern: "(variant_discriminator_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"try",

						"tuple_construction",

						"tuple_type",

						"type_expression",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "when",
				Pattern: "(when)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"block",

						"bracket_expression",

						"call",

						"case",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"elif_branch",

						"else_branch",

						"enum_type",

						"float_literal",

						"for",

						"func_expression",

						"generalized_string",

						"identifier",

						"if",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_expression",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"statement_list",

						"try",

						"tuple_construction",

						"tuple_type",

						"var_type",

						"when",

					},
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"accent_quoted",

						"array_construction",

						"blank_identifier",

						"bracket_expression",

						"call",

						"cast",

						"char_literal",

						"curly_construction",

						"curly_expression",

						"custom_numeric_literal",

						"distinct_type",

						"dot_expression",

						"dot_generic_call",

						"enum_type",

						"float_literal",

						"generalized_string",

						"identifier",

						"infix_expression",

						"integer_literal",

						"interpreted_string_literal",

						"iterator_type",

						"long_string_literal",

						"nil_literal",

						"object_type",

						"out_type",

						"parenthesized",

						"pointer_type",

						"pragma_expression",

						"prefix_expression",

						"proc_type",

						"raw_string_literal",

						"ref_type",

						"statement_list",

						"tuple_construction",

						"tuple_type",

						"var_type",

					},
					
				},
				
			},

			{
				Name: "yield_statement",
				Pattern: "(yield_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "and",
				Pattern: "(and)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "as",
				Pattern: "(as)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "asm",
				Pattern: "(asm)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "bind",
				Pattern: "(bind)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "blank_identifier",
				Pattern: "(blank_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Body",

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "cast",
				Pattern: "(cast)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "comment_content",
				Pattern: "(comment_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "concept",
				Pattern: "(concept)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "const",
				Pattern: "(const)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "converter",
				Pattern: "(converter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "custom_numeric_literal",
				Pattern: "(custom_numeric_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "defer",
				Pattern: "(defer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "discard",
				Pattern: "(discard)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "distinct",
				Pattern: "(distinct)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "div",
				Pattern: "(div)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "elif",
				Pattern: "(elif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "except",
				Pattern: "(except)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "export",
				Pattern: "(export)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "finally",
				Pattern: "(finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "float_literal",
				Pattern: "(float_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "from",
				Pattern: "(from)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "func",
				Pattern: "(func)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "include",
				Pattern: "(include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "integer_literal",
				Pattern: "(integer_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "is",
				Pattern: "(is)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "isnot",
				Pattern: "(isnot)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "iterator",
				Pattern: "(iterator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "let",
				Pattern: "(let)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "macro",
				Pattern: "(macro)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "method",
				Pattern: "(method)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "mixin",
				Pattern: "(mixin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "mod",
				Pattern: "(mod)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "nil",
				Pattern: "(nil)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "not",
				Pattern: "(not)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "notin",
				Pattern: "(notin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "object",
				Pattern: "(object)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "of",
				Pattern: "(of)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "operator",
				Pattern: "(operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "or",
				Pattern: "(or)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "out",
				Pattern: "(out)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "proc",
				Pattern: "(proc)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ptr",
				Pattern: "(ptr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "raise",
				Pattern: "(raise)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ref",
				Pattern: "(ref)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "shl",
				Pattern: "(shl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "shr",
				Pattern: "(shr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "static",
				Pattern: "(static)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "template",
				Pattern: "(template)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "tuple",
				Pattern: "(tuple)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "using",
				Pattern: "(using)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "var",
				Pattern: "(var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "when",
				Pattern: "(when)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "xor",
				Pattern: "(xor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "nim_format_string",
		Extensions: []string{

			".nim",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "double_curlies",
				Pattern: "(double_curlies)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "escaped_curly",
				Pattern: "(escaped_curly)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "format_specifiers",
				Pattern: "(format_specifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"colon",

						"fill_align",

						"hash",

						"min_width",

						"precision",

						"sign",

						"type",

						"zero",

					},
					
				},
				
			},

			{
				Name: "matching_curlies",
				Pattern: "(matching_curlies)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					Token: "self",
					Roles: []string{

						"Match",

					},
					Children: []string{

						"closing_curly",

						"equals",

						"format_specifiers",

						"nim_expression",

						"opening_curly",

					},
					
				},
				
			},

			{
				Name: "nim_expression",
				Pattern: "(nim_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"escaped_curly",

					},
					
				},
				
			},

			{
				Name: "source_file",
				Pattern: "(source_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_literal",
				Pattern: "(string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "closing_curly",
				Pattern: "(closing_curly)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "colon",
				Pattern: "(colon)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "equals",
				Pattern: "(equals)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "fill_align",
				Pattern: "(fill_align)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "hash",
				Pattern: "(hash)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "min_width",
				Pattern: "(min_width)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "opening_curly",
				Pattern: "(opening_curly)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "precision",
				Pattern: "(precision)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "sign",
				Pattern: "(sign)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "zero",
				Pattern: "(zero)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "php",
		Extensions: []string{

			".php",

			".phtml",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "expression",
				Pattern: "(expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "literal",
				Pattern: "(literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "primary_expression",
				Pattern: "(primary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "statement",
				Pattern: "(statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "abstract_modifier",
				Pattern: "(abstract_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "anonymous_class",
				Pattern: "(anonymous_class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"attribute_list",

						"declaration_list",

					},
					
				},
				
			},

			{
				Name: "anonymous_function",
				Pattern: "(anonymous_function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Declaration",

						"Function",

						"Declaration",

					},
					Children: []string{

						"attribute_list",

						"bottom_type",

						"compound_statement",

						"formal_parameters",

						"reference_modifier",

						"static_modifier",

						"type",

					},
					
				},
				
			},

			{
				Name: "anonymous_function_use_clause",
				Pattern: "(anonymous_function_use_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "argument",
				Pattern: "(argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"name",

						"reference_modifier",

					},
					
				},
				
			},

			{
				Name: "arguments",
				Pattern: "(arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "array_creation_expression",
				Pattern: "(array_creation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "array_element_initializer",
				Pattern: "(array_element_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "arrow_function",
				Pattern: "(arrow_function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"attribute_list",

						"bottom_type",

						"expression",

						"formal_parameters",

						"reference_modifier",

						"static_modifier",

						"type",

					},
					
				},
				
			},

			{
				Name: "assignment_expression",
				Pattern: "(assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"cast_expression",

						"dynamic_variable_name",

						"expression",

						"function_call_expression",

						"list_literal",

						"member_access_expression",

						"member_call_expression",

						"nullsafe_member_access_expression",

						"nullsafe_member_call_expression",

						"scoped_call_expression",

						"scoped_property_access_expression",

						"subscript_expression",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "attribute",
				Pattern: "(attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Assignment",

						"Attribute",

					},
					Children: []string{

						"arguments",

					},
					
				},
				
			},

			{
				Name: "attribute_group",
				Pattern: "(attribute_group)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "attribute_list",
				Pattern: "(attribute_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "augmented_assignment_expression",
				Pattern: "(augmented_assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"cast_expression",

						"dynamic_variable_name",

						"expression",

						"function_call_expression",

						"member_access_expression",

						"member_call_expression",

						"nullsafe_member_access_expression",

						"nullsafe_member_call_expression",

						"scoped_call_expression",

						"scoped_property_access_expression",

						"subscript_expression",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "base_clause",
				Pattern: "(base_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"and",

						"dynamic_variable_name",

						"expression",

						"instanceof",

						"member_access_expression",

						"name",

						"nullsafe_member_access_expression",

						"or",

						"parenthesized_expression",

						"qualified_name",

						"relative_name",

						"scoped_property_access_expression",

						"subscript_expression",

						"variable_name",

						"xor",

					},
					
				},
				
			},

			{
				Name: "boolean",
				Pattern: "(boolean)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "BinaryOp",
					Token: "self",
					Roles: []string{

						"Operator",

					},
					
					
				},
				
			},

			{
				Name: "break_statement",
				Pattern: "(break_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "by_ref",
				Pattern: "(by_ref)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "case_statement",
				Pattern: "(case_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "cast_expression",
				Pattern: "(cast_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"cast_type",

						"clone_expression",

						"error_suppression_expression",

						"include_expression",

						"include_once_expression",

						"primary_expression",

						"unary_op_expression",

					},
					
				},
				
			},

			{
				Name: "cast_type",
				Pattern: "(cast_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					
					
					
					
				},
				
			},

			{
				Name: "catch_clause",
				Pattern: "(catch_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					Token: "self",
					Roles: []string{

						"Catch",

					},
					Children: []string{

						"compound_statement",

						"type_list",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "class_constant_access_expression",
				Pattern: "(class_constant_access_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "class_declaration",
				Pattern: "(class_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"attribute_list",

						"declaration_list",

						"name",

					},
					
				},
				
			},

			{
				Name: "class_interface_clause",
				Pattern: "(class_interface_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "clone_expression",
				Pattern: "(clone_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "colon_block",
				Pattern: "(colon_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "compound_statement",
				Pattern: "(compound_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "conditional_expression",
				Pattern: "(conditional_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "const_declaration",
				Pattern: "(const_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"attribute_list",

						"type",

					},
					
				},
				
			},

			{
				Name: "const_element",
				Pattern: "(const_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "continue_statement",
				Pattern: "(continue_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "declaration_list",
				Pattern: "(declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "declare_directive",
				Pattern: "(declare_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "declare_statement",
				Pattern: "(declare_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "default_statement",
				Pattern: "(default_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "disjunctive_normal_form_type",
				Pattern: "(disjunctive_normal_form_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "do_statement",
				Pattern: "(do_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "dynamic_variable_name",
				Pattern: "(dynamic_variable_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "echo_statement",
				Pattern: "(echo_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else_clause",
				Pattern: "(else_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"colon_block",

						"statement",

					},
					
				},
				
			},

			{
				Name: "else_if_clause",
				Pattern: "(else_if_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"colon_block",

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "empty_statement",
				Pattern: "(empty_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "encapsed_string",
				Pattern: "(encapsed_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum_case",
				Pattern: "(enum_case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"attribute_list",

						"expression",

						"name",

					},
					
				},
				
			},

			{
				Name: "enum_declaration",
				Pattern: "(enum_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Branch",

						"Enum",

						"Declaration",

					},
					Children: []string{

						"attribute_list",

						"enum_declaration_list",

						"name",

					},
					
				},
				
			},

			{
				Name: "enum_declaration_list",
				Pattern: "(enum_declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "error_suppression_expression",
				Pattern: "(error_suppression_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "child:identifier",
					
					
					
				},
				
			},

			{
				Name: "exit_statement",
				Pattern: "(exit_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expression_statement",
				Pattern: "(expression_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "final_modifier",
				Pattern: "(final_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "finally_clause",
				Pattern: "(finally_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					Children: []string{

						"compound_statement",

					},
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"expression",

						"sequence_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "foreach_statement",
				Pattern: "(foreach_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

						"Loop",

					},
					Children: []string{

						"colon_block",

						"statement",

					},
					
				},
				
			},

			{
				Name: "formal_parameters",
				Pattern: "(formal_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "function_call_expression",
				Pattern: "(function_call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"arguments",

						"array_creation_expression",

						"dynamic_variable_name",

						"encapsed_string",

						"function_call_expression",

						"heredoc",

						"member_call_expression",

						"name",

						"nowdoc",

						"nullsafe_member_call_expression",

						"object_creation_expression",

						"parenthesized_expression",

						"qualified_name",

						"relative_name",

						"scoped_call_expression",

						"string",

						"subscript_expression",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "function_definition",
				Pattern: "(function_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"attribute_list",

						"bottom_type",

						"compound_statement",

						"formal_parameters",

						"name",

						"type",

					},
					
				},
				
			},

			{
				Name: "function_static_declaration",
				Pattern: "(function_static_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "global_declaration",
				Pattern: "(global_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "goto_statement",
				Pattern: "(goto_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "heredoc",
				Pattern: "(heredoc)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"heredoc_body",

						"heredoc_end",

						"heredoc_start",

					},
					
				},
				
			},

			{
				Name: "heredoc_body",
				Pattern: "(heredoc_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"colon_block",

						"else_clause",

						"else_if_clause",

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "include_expression",
				Pattern: "(include_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					Roles: []string{

						"Condition",

					},
					
					
				},
				
			},

			{
				Name: "include_once_expression",
				Pattern: "(include_once_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "interface_declaration",
				Pattern: "(interface_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					Children: []string{

						"attribute_list",

						"declaration_list",

						"name",

					},
					
				},
				
			},

			{
				Name: "intersection_type",
				Pattern: "(intersection_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "list_literal",
				Pattern: "(list_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "match_block",
				Pattern: "(match_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "match_condition_list",
				Pattern: "(match_condition_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "match_conditional_expression",
				Pattern: "(match_conditional_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					
					Roles: []string{

						"Match",

					},
					Children: []string{

						"expression",

						"match_condition_list",

					},
					
				},
				
			},

			{
				Name: "match_default_expression",
				Pattern: "(match_default_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					Token: "self",
					Roles: []string{

						"Match",

					},
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "match_expression",
				Pattern: "(match_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					
					Roles: []string{

						"Match",

					},
					Children: []string{

						"match_block",

						"parenthesized_expression",

					},
					
				},
				
			},

			{
				Name: "member_access_expression",
				Pattern: "(member_access_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"array_creation_expression",

						"cast_expression",

						"class_constant_access_expression",

						"dynamic_variable_name",

						"encapsed_string",

						"expression",

						"function_call_expression",

						"heredoc",

						"member_access_expression",

						"member_call_expression",

						"name",

						"nowdoc",

						"nullsafe_member_access_expression",

						"nullsafe_member_call_expression",

						"object_creation_expression",

						"parenthesized_expression",

						"qualified_name",

						"relative_name",

						"scoped_call_expression",

						"scoped_property_access_expression",

						"string",

						"subscript_expression",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "member_call_expression",
				Pattern: "(member_call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"arguments",

						"array_creation_expression",

						"cast_expression",

						"class_constant_access_expression",

						"dynamic_variable_name",

						"encapsed_string",

						"expression",

						"function_call_expression",

						"heredoc",

						"member_access_expression",

						"member_call_expression",

						"name",

						"nowdoc",

						"nullsafe_member_access_expression",

						"nullsafe_member_call_expression",

						"object_creation_expression",

						"parenthesized_expression",

						"qualified_name",

						"relative_name",

						"scoped_call_expression",

						"scoped_property_access_expression",

						"string",

						"subscript_expression",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "method_declaration",
				Pattern: "(method_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"attribute_list",

						"bottom_type",

						"compound_statement",

						"formal_parameters",

						"name",

						"type",

					},
					
				},
				
			},

			{
				Name: "name",
				Pattern: "(name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "named_label_statement",
				Pattern: "(named_label_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "named_type",
				Pattern: "(named_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "namespace_definition",
				Pattern: "(namespace_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"compound_statement",

						"namespace_name",

					},
					
				},
				
			},

			{
				Name: "namespace_name",
				Pattern: "(namespace_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "namespace_use_clause",
				Pattern: "(namespace_use_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"const",

						"function",

						"name",

					},
					
				},
				
			},

			{
				Name: "namespace_use_declaration",
				Pattern: "(namespace_use_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					
					Roles: []string{

						"Module",

					},
					Children: []string{

						"const",

						"function",

						"namespace_use_group",

					},
					
				},
				
			},

			{
				Name: "namespace_use_group",
				Pattern: "(namespace_use_group)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "nowdoc",
				Pattern: "(nowdoc)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"heredoc_end",

						"heredoc_start",

						"nowdoc_body",

					},
					
				},
				
			},

			{
				Name: "nowdoc_body",
				Pattern: "(nowdoc_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "null",
				Pattern: "(null)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "nullsafe_member_access_expression",
				Pattern: "(nullsafe_member_access_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"array_creation_expression",

						"cast_expression",

						"class_constant_access_expression",

						"dynamic_variable_name",

						"encapsed_string",

						"expression",

						"function_call_expression",

						"heredoc",

						"member_access_expression",

						"member_call_expression",

						"name",

						"nowdoc",

						"nullsafe_member_access_expression",

						"nullsafe_member_call_expression",

						"object_creation_expression",

						"parenthesized_expression",

						"qualified_name",

						"relative_name",

						"scoped_call_expression",

						"scoped_property_access_expression",

						"string",

						"subscript_expression",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "nullsafe_member_call_expression",
				Pattern: "(nullsafe_member_call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"arguments",

						"array_creation_expression",

						"cast_expression",

						"class_constant_access_expression",

						"dynamic_variable_name",

						"encapsed_string",

						"expression",

						"function_call_expression",

						"heredoc",

						"member_access_expression",

						"member_call_expression",

						"name",

						"nowdoc",

						"nullsafe_member_access_expression",

						"nullsafe_member_call_expression",

						"object_creation_expression",

						"parenthesized_expression",

						"qualified_name",

						"relative_name",

						"scoped_call_expression",

						"scoped_property_access_expression",

						"string",

						"subscript_expression",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "object_creation_expression",
				Pattern: "(object_creation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "optional_type",
				Pattern: "(optional_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pair",
				Pattern: "(pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "primitive_type",
				Pattern: "(primitive_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "print_intrinsic",
				Pattern: "(print_intrinsic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "program",
				Pattern: "(program)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "property_declaration",
				Pattern: "(property_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"attribute_list",

						"type",

					},
					
				},
				
			},

			{
				Name: "property_element",
				Pattern: "(property_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"expression",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "property_hook",
				Pattern: "(property_hook)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"attribute_list",

						"compound_statement",

						"expression",

						"final_modifier",

						"formal_parameters",

						"reference_modifier",

					},
					
				},
				
			},

			{
				Name: "property_hook_list",
				Pattern: "(property_hook_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					Token: "self",
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "property_promotion_parameter",
				Pattern: "(property_promotion_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"attribute_list",

						"by_ref",

						"expression",

						"readonly_modifier",

						"type",

						"variable_name",

						"visibility_modifier",

					},
					
				},
				
			},

			{
				Name: "qualified_name",
				Pattern: "(qualified_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"namespace_name",

					},
					
				},
				
			},

			{
				Name: "readonly_modifier",
				Pattern: "(readonly_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "reference_assignment_expression",
				Pattern: "(reference_assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"cast_expression",

						"dynamic_variable_name",

						"expression",

						"function_call_expression",

						"list_literal",

						"member_access_expression",

						"member_call_expression",

						"nullsafe_member_access_expression",

						"nullsafe_member_call_expression",

						"scoped_call_expression",

						"scoped_property_access_expression",

						"subscript_expression",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "reference_modifier",
				Pattern: "(reference_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "relative_name",
				Pattern: "(relative_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"namespace",

						"namespace_name",

					},
					
				},
				
			},

			{
				Name: "relative_scope",
				Pattern: "(relative_scope)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "require_expression",
				Pattern: "(require_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "require_once_expression",
				Pattern: "(require_once_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return_statement",
				Pattern: "(return_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "scoped_call_expression",
				Pattern: "(scoped_call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"arguments",

						"array_creation_expression",

						"cast_expression",

						"class_constant_access_expression",

						"dynamic_variable_name",

						"encapsed_string",

						"expression",

						"function_call_expression",

						"heredoc",

						"member_access_expression",

						"member_call_expression",

						"name",

						"nowdoc",

						"nullsafe_member_access_expression",

						"nullsafe_member_call_expression",

						"object_creation_expression",

						"parenthesized_expression",

						"qualified_name",

						"relative_name",

						"relative_scope",

						"scoped_call_expression",

						"scoped_property_access_expression",

						"string",

						"subscript_expression",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "scoped_property_access_expression",
				Pattern: "(scoped_property_access_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"array_creation_expression",

						"cast_expression",

						"class_constant_access_expression",

						"dynamic_variable_name",

						"encapsed_string",

						"function_call_expression",

						"heredoc",

						"member_access_expression",

						"member_call_expression",

						"name",

						"nowdoc",

						"nullsafe_member_access_expression",

						"nullsafe_member_call_expression",

						"object_creation_expression",

						"parenthesized_expression",

						"qualified_name",

						"relative_name",

						"relative_scope",

						"scoped_call_expression",

						"scoped_property_access_expression",

						"string",

						"subscript_expression",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "sequence_expression",
				Pattern: "(sequence_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "shell_command_expression",
				Pattern: "(shell_command_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "simple_parameter",
				Pattern: "(simple_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"attribute_list",

						"expression",

						"reference_modifier",

						"type",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "static_modifier",
				Pattern: "(static_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "static_variable_declaration",
				Pattern: "(static_variable_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"expression",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "child:identifier",
					
					
					
				},
				
			},

			{
				Name: "string_content",
				Pattern: "(string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "subscript_expression",
				Pattern: "(subscript_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "switch_block",
				Pattern: "(switch_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "switch_statement",
				Pattern: "(switch_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"parenthesized_expression",

						"switch_block",

					},
					
				},
				
			},

			{
				Name: "throw_expression",
				Pattern: "(throw_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "trait_declaration",
				Pattern: "(trait_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"attribute_list",

						"declaration_list",

						"name",

					},
					
				},
				
			},

			{
				Name: "try_statement",
				Pattern: "(try_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					Children: []string{

						"compound_statement",

					},
					
				},
				
			},

			{
				Name: "type_list",
				Pattern: "(type_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unary_op_expression",
				Pattern: "(unary_op_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "UnaryOp",
					
					Roles: []string{

						"Operator",

					},
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "union_type",
				Pattern: "(union_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unset_statement",
				Pattern: "(unset_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "update_expression",
				Pattern: "(update_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"cast_expression",

						"dynamic_variable_name",

						"function_call_expression",

						"member_access_expression",

						"member_call_expression",

						"nullsafe_member_access_expression",

						"nullsafe_member_call_expression",

						"scoped_call_expression",

						"scoped_property_access_expression",

						"subscript_expression",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "use_as_clause",
				Pattern: "(use_as_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "use_declaration",
				Pattern: "(use_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "use_instead_of_clause",
				Pattern: "(use_instead_of_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "use_list",
				Pattern: "(use_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "variable_name",
				Pattern: "(variable_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "variadic_parameter",
				Pattern: "(variadic_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"attribute_list",

						"reference_modifier",

						"type",

						"variable_name",

					},
					
				},
				
			},

			{
				Name: "variadic_placeholder",
				Pattern: "(variadic_placeholder)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "variadic_unpacking",
				Pattern: "(variadic_unpacking)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "visibility_modifier",
				Pattern: "(visibility_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"colon_block",

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "yield_expression",
				Pattern: "(yield_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "abstract",
				Pattern: "(abstract)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "and",
				Pattern: "(and)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "array",
				Pattern: "(array)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "as",
				Pattern: "(as)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bool",
				Pattern: "(bool)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "bottom_type",
				Pattern: "(bottom_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "callable",
				Pattern: "(callable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "catch",
				Pattern: "(catch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "clone",
				Pattern: "(clone)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "const",
				Pattern: "(const)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "declare",
				Pattern: "(declare)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "echo",
				Pattern: "(echo)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "elseif",
				Pattern: "(elseif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "encoding",
				Pattern: "(encoding)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "enddeclare",
				Pattern: "(enddeclare)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "endfor",
				Pattern: "(endfor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "endforeach",
				Pattern: "(endforeach)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "endif",
				Pattern: "(endif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "endswitch",
				Pattern: "(endswitch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "endwhile",
				Pattern: "(endwhile)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "exit",
				Pattern: "(exit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "extends",
				Pattern: "(extends)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "final",
				Pattern: "(final)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "finally",
				Pattern: "(finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "float",
				Pattern: "(float)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "float",
				Pattern: "(float)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "fn",
				Pattern: "(fn)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "foreach",
				Pattern: "(foreach)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "from",
				Pattern: "(from)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "function",
				Pattern: "(function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "global",
				Pattern: "(global)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "goto",
				Pattern: "(goto)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "heredoc_end",
				Pattern: "(heredoc_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "heredoc_start",
				Pattern: "(heredoc_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "implements",
				Pattern: "(implements)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "include",
				Pattern: "(include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "include_once",
				Pattern: "(include_once)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "instanceof",
				Pattern: "(instanceof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "insteadof",
				Pattern: "(insteadof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "int",
				Pattern: "(int)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "integer",
				Pattern: "(integer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "interface",
				Pattern: "(interface)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "iterable",
				Pattern: "(iterable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "list",
				Pattern: "(list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "match",
				Pattern: "(match)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					
					Roles: []string{

						"Match",

					},
					
					
				},
				
			},

			{
				Name: "mixed",
				Pattern: "(mixed)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "namespace",
				Pattern: "(namespace)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "new",
				Pattern: "(new)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "nowdoc_string",
				Pattern: "(nowdoc_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "null",
				Pattern: "(null)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "operation",
				Pattern: "(operation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "or",
				Pattern: "(or)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "parent",
				Pattern: "(parent)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "php_tag",
				Pattern: "(php_tag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "print",
				Pattern: "(print)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "private",
				Pattern: "(private)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "protected",
				Pattern: "(protected)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "public",
				Pattern: "(public)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "readonly",
				Pattern: "(readonly)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "require",
				Pattern: "(require)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "require_once",
				Pattern: "(require_once)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "self",
				Pattern: "(self)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "static",
				Pattern: "(static)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "strict_types",
				Pattern: "(strict_types)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "switch",
				Pattern: "(switch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					Roles: []string{

						"Switch",

					},
					
					
				},
				
			},

			{
				Name: "throw",
				Pattern: "(throw)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					Token: "self",
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "ticks",
				Pattern: "(ticks)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "trait",
				Pattern: "(trait)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "unset",
				Pattern: "(unset)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "use",
				Pattern: "(use)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "var_modifier",
				Pattern: "(var_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "void",
				Pattern: "(void)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "xor",
				Pattern: "(xor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "properties",
		Extensions: []string{

			".properties",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "escape",
				Pattern: "(escape)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "file",
				Pattern: "(file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "index",
				Pattern: "(index)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					
					Roles: []string{

						"Index",

					},
					
					
				},
				
			},

			{
				Name: "key",
				Pattern: "(key)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "property",
				Pattern: "(property)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "secret",
				Pattern: "(secret)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "substitution",
				Pattern: "(substitution)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"escape",

						"substitution",

					},
					
				},
				
			},

			{
				Name: "value",
				Pattern: "(value)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "proto",
		Extensions: []string{

			".proto",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "block_lit",
				Pattern: "(block_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "bool",
				Pattern: "(bool)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "constant",
				Pattern: "(constant)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "edition",
				Pattern: "(edition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"string",

					},
					
				},
				
			},

			{
				Name: "empty_statement",
				Pattern: "(empty_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enum_body",
				Pattern: "(enum_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enum_field",
				Pattern: "(enum_field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Body",

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enum_name",
				Pattern: "(enum_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enum_value_option",
				Pattern: "(enum_value_option)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "extend",
				Pattern: "(extend)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extensions",
				Pattern: "(extensions)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field",
				Pattern: "(field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "field_number",
				Pattern: "(field_number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "field_option",
				Pattern: "(field_option)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "field_options",
				Pattern: "(field_options)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "full_ident",
				Pattern: "(full_ident)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"string",

					},
					
				},
				
			},

			{
				Name: "int_lit",
				Pattern: "(int_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "key_type",
				Pattern: "(key_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "map_field",
				Pattern: "(map_field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "message",
				Pattern: "(message)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "message_body",
				Pattern: "(message_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "message_name",
				Pattern: "(message_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "message_or_enum_type",
				Pattern: "(message_or_enum_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "oneof",
				Pattern: "(oneof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "oneof_field",
				Pattern: "(oneof_field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "option",
				Pattern: "(option)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "package",
				Pattern: "(package)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Package",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "range",
				Pattern: "(range)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ranges",
				Pattern: "(ranges)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "reserved",
				Pattern: "(reserved)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "reserved_field_names",
				Pattern: "(reserved_field_names)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "rpc",
				Pattern: "(rpc)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "rpc_name",
				Pattern: "(rpc_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "service",
				Pattern: "(service)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "service_name",
				Pattern: "(service_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "source_file",
				Pattern: "(source_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "syntax",
				Pattern: "(syntax)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bool",
				Pattern: "(bool)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "bytes",
				Pattern: "(bytes)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "decimal_lit",
				Pattern: "(decimal_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "double",
				Pattern: "(double)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "edition",
				Pattern: "(edition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extend",
				Pattern: "(extend)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "extensions",
				Pattern: "(extensions)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "fixed32",
				Pattern: "(fixed32)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "fixed64",
				Pattern: "(fixed64)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "float",
				Pattern: "(float)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "float_lit",
				Pattern: "(float_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "hex_lit",
				Pattern: "(hex_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "int32",
				Pattern: "(int32)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "int64",
				Pattern: "(int64)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "map",
				Pattern: "(map)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "max",
				Pattern: "(max)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "message",
				Pattern: "(message)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "octal_lit",
				Pattern: "(octal_lit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "oneof",
				Pattern: "(oneof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "option",
				Pattern: "(option)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "optional",
				Pattern: "(optional)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "package",
				Pattern: "(package)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Package",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "public",
				Pattern: "(public)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "repeated",
				Pattern: "(repeated)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "required",
				Pattern: "(required)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "reserved",
				Pattern: "(reserved)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "reserved_identifier",
				Pattern: "(reserved_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "returns",
				Pattern: "(returns)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "rpc",
				Pattern: "(rpc)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "service",
				Pattern: "(service)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "sfixed32",
				Pattern: "(sfixed32)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "sfixed64",
				Pattern: "(sfixed64)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "sint32",
				Pattern: "(sint32)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "sint64",
				Pattern: "(sint64)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "stream",
				Pattern: "(stream)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "syntax",
				Pattern: "(syntax)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "to",
				Pattern: "(to)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "uint32",
				Pattern: "(uint32)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "uint64",
				Pattern: "(uint64)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "weak",
				Pattern: "(weak)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

		},
	},

	{
		Language: "proxima",
		Extensions: []string{

			".proxima",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "arg_name",
				Pattern: "(arg_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "argument",
				Pattern: "(argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "document",
				Pattern: "(document)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "tag",
				Pattern: "(tag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "escaped_char",
				Pattern: "(escaped_char)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "tag_at",
				Pattern: "(tag_at)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "text",
				Pattern: "(text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

		},
	},

	{
		Language: "prql",
		Extensions: []string{

			".prql",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "aggregate",
				Pattern: "(aggregate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "aggregate_operation",
				Pattern: "(aggregate_operation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "append",
				Pattern: "(append)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "assignment",
				Pattern: "(assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"binary_expression",

						"case",

						"date",

						"f_string",

						"field",

						"function_call",

						"keyword_average",

						"keyword_avg",

						"keyword_count_distinct",

						"keyword_max",

						"keyword_min",

						"keyword_stddev",

						"keyword_sum",

						"literal",

						"s_string",

						"time",

						"timestamp",

					},
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"binary_expression",

						"date",

						"f_string",

						"field",

						"literal",

						"s_string",

						"time",

						"timestamp",

					},
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Operator",

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "case_condition",
				Pattern: "(case_condition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"literal",

					},
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "conditions",
				Pattern: "(conditions)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "date",
				Pattern: "(date)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "decimal_number",
				Pattern: "(decimal_number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "derives",
				Pattern: "(derives)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "direction",
				Pattern: "(direction)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "f_string",
				Pattern: "(f_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field",
				Pattern: "(field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "filter",
				Pattern: "(filter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"binary_expression",

						"date",

						"f_string",

						"field",

						"literal",

						"s_string",

						"time",

						"timestamp",

					},
					
				},
				
			},

			{
				Name: "from",
				Pattern: "(from)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "from_text",
				Pattern: "(from_text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "function_call",
				Pattern: "(function_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "function_definition",
				Pattern: "(function_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Call",

						"Function",

						"Declaration",

					},
					Children: []string{

						"binary_expression",

						"identifier",

						"s_string",

					},
					
				},
				
			},

			{
				Name: "group",
				Pattern: "(group)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "integer",
				Pattern: "(integer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "joins",
				Pattern: "(joins)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"term",

					},
					
				},
				
			},

			{
				Name: "literal",
				Pattern: "(literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "literal_string",
				Pattern: "(literal_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "loop",
				Pattern: "(loop)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "module_call",
				Pattern: "(module_call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "parameter",
				Pattern: "(parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"identifier",

						"literal",

					},
					
				},
				
			},

			{
				Name: "pipeline",
				Pattern: "(pipeline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "program",
				Pattern: "(program)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "prql",
				Pattern: "(prql)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "File",
					Token: "self",
					
					Children: []string{

						"literal",

						"target",

					},
					
				},
				
			},

			{
				Name: "range",
				Pattern: "(range)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"date",

						"integer",

					},
					
				},
				
			},

			{
				Name: "s_string",
				Pattern: "(s_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "select",
				Pattern: "(select)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "sorts",
				Pattern: "(sorts)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "takes",
				Pattern: "(takes)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "target",
				Pattern: "(target)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "term",
				Pattern: "(term)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"assignment",

						"binary_expression",

						"date",

						"f_string",

						"field",

						"identifier",

						"literal",

						"s_string",

						"time",

						"timestamp",

					},
					
				},
				
			},

			{
				Name: "time",
				Pattern: "(time)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "timestamp",
				Pattern: "(timestamp)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "timezone",
				Pattern: "(timezone)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "transforms",
				Pattern: "(transforms)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "variable",
				Pattern: "(variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "window",
				Pattern: "(window)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "window_definitions",
				Pattern: "(window_definitions)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "T",
				Pattern: "(T)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "Z",
				Pattern: "(Z)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_",
				Pattern: "(_)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bang",
				Pattern: "(bang)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_aggregate",
				Pattern: "(keyword_aggregate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_append",
				Pattern: "(keyword_append)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_average",
				Pattern: "(keyword_average)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_avg",
				Pattern: "(keyword_avg)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_case",
				Pattern: "(keyword_case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "keyword_count",
				Pattern: "(keyword_count)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "keyword_count_distinct",
				Pattern: "(keyword_count_distinct)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_csv",
				Pattern: "(keyword_csv)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_derive",
				Pattern: "(keyword_derive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_expanding",
				Pattern: "(keyword_expanding)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_false",
				Pattern: "(keyword_false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_filter",
				Pattern: "(keyword_filter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_format",
				Pattern: "(keyword_format)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "keyword_from",
				Pattern: "(keyword_from)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_from_text",
				Pattern: "(keyword_from_text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_full",
				Pattern: "(keyword_full)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_group",
				Pattern: "(keyword_group)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_inner",
				Pattern: "(keyword_inner)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_intersect",
				Pattern: "(keyword_intersect)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_join",
				Pattern: "(keyword_join)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_json",
				Pattern: "(keyword_json)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_left",
				Pattern: "(keyword_left)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_let",
				Pattern: "(keyword_let)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_loop",
				Pattern: "(keyword_loop)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "keyword_max",
				Pattern: "(keyword_max)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_min",
				Pattern: "(keyword_min)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_null",
				Pattern: "(keyword_null)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_prql",
				Pattern: "(keyword_prql)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_rank",
				Pattern: "(keyword_rank)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_remove",
				Pattern: "(keyword_remove)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_right",
				Pattern: "(keyword_right)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_rolling",
				Pattern: "(keyword_rolling)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_rows",
				Pattern: "(keyword_rows)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_select",
				Pattern: "(keyword_select)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_side",
				Pattern: "(keyword_side)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_sort",
				Pattern: "(keyword_sort)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_stddev",
				Pattern: "(keyword_stddev)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_sum",
				Pattern: "(keyword_sum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_take",
				Pattern: "(keyword_take)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_target",
				Pattern: "(keyword_target)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_true",
				Pattern: "(keyword_true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyword_version",
				Pattern: "(keyword_version)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_window",
				Pattern: "(keyword_window)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pipe",
				Pattern: "(pipe)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "psv",
		Extensions: []string{

			".psv",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "boolean",
				Pattern: "(boolean)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "document",
				Pattern: "(document)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field",
				Pattern: "(field)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "float",
				Pattern: "(float)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "number",
				Pattern: "(number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "row",
				Pattern: "(row)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "text",
				Pattern: "(text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

		},
	},

	{
		Language: "python",
		Extensions: []string{

			".py",

			".pyw",

			".pyi",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "_compound_statement",
				Pattern: "(_compound_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_simple_statement",
				Pattern: "(_simple_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "expression",
				Pattern: "(expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "parameter",
				Pattern: "(parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "pattern",
				Pattern: "(pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "primary_expression",
				Pattern: "(primary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "aliased_import",
				Pattern: "(aliased_import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					Children: []string{

						"dotted_name",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "argument_list",
				Pattern: "(argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "as_pattern",
				Pattern: "(as_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"as_pattern_target",

					},
					
				},
				
			},

			{
				Name: "assert_statement",
				Pattern: "(assert_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "assignment",
				Pattern: "(assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"assignment",

						"augmented_assignment",

						"expression",

						"expression_list",

						"pattern",

						"pattern_list",

						"type",

						"yield",

					},
					
				},
				
			},

			{
				Name: "attribute",
				Pattern: "(attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					Children: []string{

						"identifier",

						"primary_expression",

					},
					
				},
				
			},

			{
				Name: "augmented_assignment",
				Pattern: "(augmented_assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"assignment",

						"augmented_assignment",

						"expression",

						"expression_list",

						"pattern",

						"pattern_list",

						"yield",

					},
					
				},
				
			},

			{
				Name: "await",
				Pattern: "(await)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "binary_operator",
				Pattern: "(binary_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "BinaryOp",
					
					Roles: []string{

						"Operator",

					},
					Children: []string{

						"primary_expression",

					},
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"case_clause",

					},
					
				},
				
			},

			{
				Name: "boolean_operator",
				Pattern: "(boolean_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"and",

						"expression",

						"or",

					},
					
				},
				
			},

			{
				Name: "break_statement",
				Pattern: "(break_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "call",
				Pattern: "(call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"argument_list",

						"generator_expression",

						"primary_expression",

					},
					
				},
				
			},

			{
				Name: "case_clause",
				Pattern: "(case_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"block",

						"if_clause",

					},
					
				},
				
			},

			{
				Name: "case_pattern",
				Pattern: "(case_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "chevron",
				Pattern: "(chevron)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "class_definition",
				Pattern: "(class_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"argument_list",

						"block",

						"identifier",

						"type_parameter",

					},
					
				},
				
			},

			{
				Name: "class_pattern",
				Pattern: "(class_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Declaration",

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "comparison_operator",
				Pattern: "(comparison_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"in",

						"is",

					},
					
				},
				
			},

			{
				Name: "complex_pattern",
				Pattern: "(complex_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "concatenated_string",
				Pattern: "(concatenated_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "conditional_expression",
				Pattern: "(conditional_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "constrained_type",
				Pattern: "(constrained_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "continue_statement",
				Pattern: "(continue_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "decorated_definition",
				Pattern: "(decorated_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"class_definition",

						"function_definition",

					},
					
				},
				
			},

			{
				Name: "decorator",
				Pattern: "(decorator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Decorator",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "default_parameter",
				Pattern: "(default_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"expression",

						"identifier",

						"tuple_pattern",

					},
					
				},
				
			},

			{
				Name: "delete_statement",
				Pattern: "(delete_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "dict_pattern",
				Pattern: "(dict_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Dict",
					
					
					Children: []string{

						"_",

						"case_pattern",

						"class_pattern",

						"complex_pattern",

						"concatenated_string",

						"dict_pattern",

						"dotted_name",

						"false",

						"float",

						"integer",

						"list_pattern",

						"none",

						"splat_pattern",

						"string",

						"true",

						"tuple_pattern",

						"union_pattern",

					},
					
				},
				
			},

			{
				Name: "dictionary",
				Pattern: "(dictionary)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Dict",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "dictionary_comprehension",
				Pattern: "(dictionary_comprehension)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Dict",
					
					
					Children: []string{

						"pair",

					},
					
				},
				
			},

			{
				Name: "dictionary_splat",
				Pattern: "(dictionary_splat)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Dict",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "dictionary_splat_pattern",
				Pattern: "(dictionary_splat_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Dict",
					
					
					
					
				},
				
			},

			{
				Name: "dotted_name",
				Pattern: "(dotted_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "elif_clause",
				Pattern: "(elif_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"block",

						"expression",

					},
					
				},
				
			},

			{
				Name: "else_clause",
				Pattern: "(else_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "except_clause",
				Pattern: "(except_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "except_group_clause",
				Pattern: "(except_group_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "exec_statement",
				Pattern: "(exec_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "expression_list",
				Pattern: "(expression_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "expression_statement",
				Pattern: "(expression_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "finally_clause",
				Pattern: "(finally_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "for_in_clause",
				Pattern: "(for_in_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"expression",

						"pattern",

						"pattern_list",

					},
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"block",

						"else_clause",

						"expression",

						"expression_list",

						"pattern",

						"pattern_list",

					},
					
				},
				
			},

			{
				Name: "format_expression",
				Pattern: "(format_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"expression_list",

						"format_specifier",

						"pattern_list",

						"type_conversion",

						"yield",

					},
					
				},
				
			},

			{
				Name: "format_specifier",
				Pattern: "(format_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "function_definition",
				Pattern: "(function_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"block",

						"identifier",

						"parameters",

						"type",

						"type_parameter",

					},
					
				},
				
			},

			{
				Name: "future_import_statement",
				Pattern: "(future_import_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Import",

					},
					Children: []string{

						"aliased_import",

						"dotted_name",

					},
					
				},
				
			},

			{
				Name: "generator_expression",
				Pattern: "(generator_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Generator",
					
					Roles: []string{

						"Generator",

					},
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "generic_type",
				Pattern: "(generic_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "global_statement",
				Pattern: "(global_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "if_clause",
				Pattern: "(if_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					Roles: []string{

						"Condition",

					},
					Children: []string{

						"block",

						"elif_clause",

						"else_clause",

						"expression",

					},
					
				},
				
			},

			{
				Name: "import_from_statement",
				Pattern: "(import_from_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"aliased_import",

						"dotted_name",

						"relative_import",

					},
					
				},
				
			},

			{
				Name: "import_prefix",
				Pattern: "(import_prefix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "import_statement",
				Pattern: "(import_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"aliased_import",

						"dotted_name",

					},
					
				},
				
			},

			{
				Name: "interpolation",
				Pattern: "(interpolation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"expression_list",

						"format_specifier",

						"pattern_list",

						"type_conversion",

						"yield",

					},
					
				},
				
			},

			{
				Name: "keyword_argument",
				Pattern: "(keyword_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "keyword_pattern",
				Pattern: "(keyword_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "keyword_separator",
				Pattern: "(keyword_separator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "lambda",
				Pattern: "(lambda)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					
					Roles: []string{

						"Lambda",

					},
					Children: []string{

						"expression",

						"lambda_parameters",

					},
					
				},
				
			},

			{
				Name: "lambda_parameters",
				Pattern: "(lambda_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "list",
				Pattern: "(list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "list_comprehension",
				Pattern: "(list_comprehension)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "list_pattern",
				Pattern: "(list_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "list_splat",
				Pattern: "(list_splat)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "list_splat_pattern",
				Pattern: "(list_splat_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "match_statement",
				Pattern: "(match_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					Token: "self",
					Roles: []string{

						"Match",

					},
					Children: []string{

						"block",

						"expression",

					},
					
				},
				
			},

			{
				Name: "member_type",
				Pattern: "(member_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "module",
				Pattern: "(module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "named_expression",
				Pattern: "(named_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "nonlocal_statement",
				Pattern: "(nonlocal_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "not_operator",
				Pattern: "(not_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "pair",
				Pattern: "(pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "parameters",
				Pattern: "(parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "parenthesized_list_splat",
				Pattern: "(parenthesized_list_splat)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "pass_statement",
				Pattern: "(pass_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pattern_list",
				Pattern: "(pattern_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "positional_separator",
				Pattern: "(positional_separator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "print_statement",
				Pattern: "(print_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "raise_statement",
				Pattern: "(raise_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "relative_import",
				Pattern: "(relative_import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return_statement",
				Pattern: "(return_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Import",

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "set",
				Pattern: "(set)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "set_comprehension",
				Pattern: "(set_comprehension)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "slice",
				Pattern: "(slice)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Slice",
					
					
					
					
				},
				
			},

			{
				Name: "splat_pattern",
				Pattern: "(splat_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "splat_type",
				Pattern: "(splat_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_content",
				Pattern: "(string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "subscript",
				Pattern: "(subscript)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

						"primary_expression",

						"slice",

					},
					
				},
				
			},

			{
				Name: "try_statement",
				Pattern: "(try_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "tuple",
				Pattern: "(tuple)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "tuple_pattern",
				Pattern: "(tuple_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_alias_statement",
				Pattern: "(type_alias_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"type",

					},
					
				},
				
			},

			{
				Name: "type_parameter",
				Pattern: "(type_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "typed_default_parameter",
				Pattern: "(typed_default_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"expression",

						"identifier",

						"type",

					},
					
				},
				
			},

			{
				Name: "typed_parameter",
				Pattern: "(typed_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Parameter",

					},
					Children: []string{

						"type",

					},
					
				},
				
			},

			{
				Name: "unary_operator",
				Pattern: "(unary_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "UnaryOp",
					
					Roles: []string{

						"Operator",

					},
					Children: []string{

						"primary_expression",

					},
					
				},
				
			},

			{
				Name: "union_pattern",
				Pattern: "(union_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "union_type",
				Pattern: "(union_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"block",

						"else_clause",

						"expression",

					},
					
				},
				
			},

			{
				Name: "wildcard_import",
				Pattern: "(wildcard_import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "with_clause",
				Pattern: "(with_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "with_item",
				Pattern: "(with_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "with_statement",
				Pattern: "(with_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "_",
				Pattern: "(_)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "__future__",
				Pattern: "(__future__)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "and",
				Pattern: "(and)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "as",
				Pattern: "(as)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "assert",
				Pattern: "(assert)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "async",
				Pattern: "(async)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "await",
				Pattern: "(await)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "def",
				Pattern: "(def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "del",
				Pattern: "(del)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "elif",
				Pattern: "(elif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ellipsis",
				Pattern: "(ellipsis)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "escape_interpolation",
				Pattern: "(escape_interpolation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "except",
				Pattern: "(except)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "exec",
				Pattern: "(exec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "finally",
				Pattern: "(finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "float",
				Pattern: "(float)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "from",
				Pattern: "(from)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "global",
				Pattern: "(global)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "integer",
				Pattern: "(integer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "is",
				Pattern: "(is)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "lambda",
				Pattern: "(lambda)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					
					Roles: []string{

						"Lambda",

					},
					
					
				},
				
			},

			{
				Name: "line_continuation",
				Pattern: "(line_continuation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "match",
				Pattern: "(match)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					
					Roles: []string{

						"Match",

					},
					
					
				},
				
			},

			{
				Name: "none",
				Pattern: "(none)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "nonlocal",
				Pattern: "(nonlocal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "not",
				Pattern: "(not)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "or",
				Pattern: "(or)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pass",
				Pattern: "(pass)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "print",
				Pattern: "(print)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "raise",
				Pattern: "(raise)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "string_end",
				Pattern: "(string_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_start",
				Pattern: "(string_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_conversion",
				Pattern: "(type_conversion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "with",
				Pattern: "(with)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "ruby",
		Extensions: []string{

			".rb",

			".rbw",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "_arg",
				Pattern: "(_arg)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_call_operator",
				Pattern: "(_call_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "_expression",
				Pattern: "(_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_lhs",
				Pattern: "(_lhs)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_method_name",
				Pattern: "(_method_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "_nonlocal_variable",
				Pattern: "(_nonlocal_variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "_pattern_constant",
				Pattern: "(_pattern_constant)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "_pattern_expr",
				Pattern: "(_pattern_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "_pattern_expr_basic",
				Pattern: "(_pattern_expr_basic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "_pattern_primitive",
				Pattern: "(_pattern_primitive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "_pattern_top_expr_body",
				Pattern: "(_pattern_top_expr_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "_primary",
				Pattern: "(_primary)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "_simple_numeric",
				Pattern: "(_simple_numeric)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_statement",
				Pattern: "(_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_variable",
				Pattern: "(_variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "alias",
				Pattern: "(alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"_method_name",

					},
					
				},
				
			},

			{
				Name: "alternative_pattern",
				Pattern: "(alternative_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"_pattern_expr_basic",

					},
					
				},
				
			},

			{
				Name: "argument_list",
				Pattern: "(argument_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "array",
				Pattern: "(array)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "array_pattern",
				Pattern: "(array_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"_pattern_constant",

					},
					
				},
				
			},

			{
				Name: "as_pattern",
				Pattern: "(as_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"_pattern_expr",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "assignment",
				Pattern: "(assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"_expression",

						"_lhs",

						"left_assignment_list",

						"rescue_modifier",

						"right_assignment_list",

						"splat_argument",

					},
					
				},
				
			},

			{
				Name: "bare_string",
				Pattern: "(bare_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bare_symbol",
				Pattern: "(bare_symbol)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "begin",
				Pattern: "(begin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "begin_block",
				Pattern: "(begin_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "binary",
				Pattern: "(binary)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"_simple_numeric",

						"and",

						"or",

					},
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"block_body",

						"block_parameters",

					},
					
				},
				
			},

			{
				Name: "block_argument",
				Pattern: "(block_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_body",
				Pattern: "(block_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_parameter",
				Pattern: "(block_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "block_parameters",
				Pattern: "(block_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Parameter",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "body_statement",
				Pattern: "(body_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "call",
				Pattern: "(call)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"_call_operator",

						"_primary",

						"_variable",

						"argument_list",

						"block",

						"do_block",

						"operator",

					},
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"_statement",

					},
					
				},
				
			},

			{
				Name: "case_match",
				Pattern: "(case_match)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"_statement",

						"else",

						"in_clause",

					},
					
				},
				
			},

			{
				Name: "chained_string",
				Pattern: "(chained_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"body_statement",

						"constant",

						"scope_resolution",

						"superclass",

					},
					
				},
				
			},

			{
				Name: "complex",
				Pattern: "(complex)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "conditional",
				Pattern: "(conditional)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_arg",

					},
					
				},
				
			},

			{
				Name: "constant",
				Pattern: "(constant)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "delimited_symbol",
				Pattern: "(delimited_symbol)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "destructured_left_assignment",
				Pattern: "(destructured_left_assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "destructured_parameter",
				Pattern: "(destructured_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "do_block",
				Pattern: "(do_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					Children: []string{

						"block_parameters",

						"body_statement",

					},
					
				},
				
			},

			{
				Name: "element_reference",
				Pattern: "(element_reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"_primary",

						"block",

						"do_block",

					},
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "elsif",
				Pattern: "(elsif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_statement",

						"else",

						"elsif",

						"then",

					},
					
				},
				
			},

			{
				Name: "empty_statement",
				Pattern: "(empty_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "end_block",
				Pattern: "(end_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "ensure",
				Pattern: "(ensure)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "exception_variable",
				Pattern: "(exception_variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "exceptions",
				Pattern: "(exceptions)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expression_reference_pattern",
				Pattern: "(expression_reference_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "find_pattern",
				Pattern: "(find_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"_pattern_constant",

					},
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"_lhs",

						"do",

						"in",

						"left_assignment_list",

					},
					
				},
				
			},

			{
				Name: "forward_argument",
				Pattern: "(forward_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "forward_parameter",
				Pattern: "(forward_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "hash",
				Pattern: "(hash)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "hash_key_symbol",
				Pattern: "(hash_key_symbol)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "hash_pattern",
				Pattern: "(hash_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"_pattern_constant",

					},
					
				},
				
			},

			{
				Name: "hash_splat_argument",
				Pattern: "(hash_splat_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "hash_splat_nil",
				Pattern: "(hash_splat_nil)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "hash_splat_parameter",
				Pattern: "(hash_splat_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "heredoc_body",
				Pattern: "(heredoc_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"_statement",

						"else",

						"elsif",

						"then",

					},
					
				},
				
			},

			{
				Name: "if_guard",
				Pattern: "(if_guard)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "if_modifier",
				Pattern: "(if_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"_expression",

						"_statement",

					},
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "in_clause",
				Pattern: "(in_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_pattern_top_expr_body",

						"if_guard",

						"then",

						"unless_guard",

					},
					
				},
				
			},

			{
				Name: "interpolation",
				Pattern: "(interpolation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyword_parameter",
				Pattern: "(keyword_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_arg",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "keyword_pattern",
				Pattern: "(keyword_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Pattern",

					},
					Children: []string{

						"_pattern_expr",

						"hash_key_symbol",

						"string",

					},
					
				},
				
			},

			{
				Name: "lambda",
				Pattern: "(lambda)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					
					Roles: []string{

						"Lambda",

					},
					Children: []string{

						"block",

						"do_block",

						"lambda_parameters",

					},
					
				},
				
			},

			{
				Name: "lambda_parameters",
				Pattern: "(lambda_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "left_assignment_list",
				Pattern: "(left_assignment_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					
					
				},
				
			},

			{
				Name: "match_pattern",
				Pattern: "(match_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"_arg",

						"_pattern_top_expr_body",

					},
					
				},
				
			},

			{
				Name: "method",
				Pattern: "(method)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"_arg",

						"_method_name",

						"body_statement",

						"method_parameters",

						"rescue_modifier",

					},
					
				},
				
			},

			{
				Name: "method_parameters",
				Pattern: "(method_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "module",
				Pattern: "(module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					Children: []string{

						"body_statement",

						"constant",

						"scope_resolution",

					},
					
				},
				
			},

			{
				Name: "next",
				Pattern: "(next)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "nil",
				Pattern: "(nil)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "operator",
				Pattern: "(operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "operator_assignment",
				Pattern: "(operator_assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"_expression",

						"_lhs",

						"rescue_modifier",

					},
					
				},
				
			},

			{
				Name: "optional_parameter",
				Pattern: "(optional_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_arg",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "pair",
				Pattern: "(pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_arg",

						"hash_key_symbol",

						"string",

					},
					
				},
				
			},

			{
				Name: "parenthesized_pattern",
				Pattern: "(parenthesized_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "parenthesized_statements",
				Pattern: "(parenthesized_statements)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pattern",
				Pattern: "(pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "program",
				Pattern: "(program)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "range",
				Pattern: "(range)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "File",
					Token: "self",
					
					Children: []string{

						"_arg",

						"_pattern_primitive",

					},
					
				},
				
			},

			{
				Name: "rational",
				Pattern: "(rational)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "redo",
				Pattern: "(redo)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "regex",
				Pattern: "(regex)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "rescue",
				Pattern: "(rescue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"exception_variable",

						"exceptions",

						"then",

					},
					
				},
				
			},

			{
				Name: "rescue_modifier",
				Pattern: "(rescue_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"_arg",

						"_expression",

						"_statement",

					},
					
				},
				
			},

			{
				Name: "rest_assignment",
				Pattern: "(rest_assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					
					
				},
				
			},

			{
				Name: "retry",
				Pattern: "(retry)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "right_assignment_list",
				Pattern: "(right_assignment_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					
					
				},
				
			},

			{
				Name: "scope_resolution",
				Pattern: "(scope_resolution)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"_pattern_constant",

						"_primary",

						"constant",

					},
					
				},
				
			},

			{
				Name: "setter",
				Pattern: "(setter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Setter",
					
					Roles: []string{

						"Setter",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "singleton_class",
				Pattern: "(singleton_class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"_arg",

						"body_statement",

					},
					
				},
				
			},

			{
				Name: "singleton_method",
				Pattern: "(singleton_method)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"_arg",

						"_method_name",

						"_variable",

						"body_statement",

						"method_parameters",

						"rescue_modifier",

					},
					
				},
				
			},

			{
				Name: "splat_argument",
				Pattern: "(splat_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "splat_parameter",
				Pattern: "(splat_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "string_array",
				Pattern: "(string_array)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "subshell",
				Pattern: "(subshell)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "superclass",
				Pattern: "(superclass)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "symbol_array",
				Pattern: "(symbol_array)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "test_pattern",
				Pattern: "(test_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"_arg",

						"_pattern_top_expr_body",

					},
					
				},
				
			},

			{
				Name: "then",
				Pattern: "(then)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unary",
				Pattern: "(unary)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"_simple_numeric",

						"not",

						"parenthesized_statements",

					},
					
				},
				
			},

			{
				Name: "undef",
				Pattern: "(undef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unless",
				Pattern: "(unless)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_statement",

						"else",

						"elsif",

						"then",

					},
					
				},
				
			},

			{
				Name: "unless_guard",
				Pattern: "(unless_guard)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "unless_modifier",
				Pattern: "(unless_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"_expression",

						"_statement",

					},
					
				},
				
			},

			{
				Name: "until",
				Pattern: "(until)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_statement",

						"do",

					},
					
				},
				
			},

			{
				Name: "until_modifier",
				Pattern: "(until_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"_expression",

						"_statement",

					},
					
				},
				
			},

			{
				Name: "variable_reference_pattern",
				Pattern: "(variable_reference_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"_nonlocal_variable",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "when",
				Pattern: "(when)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"pattern",

						"then",

					},
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"_statement",

						"do",

					},
					
				},
				
			},

			{
				Name: "while_modifier",
				Pattern: "(while_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"_expression",

						"_statement",

					},
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "BEGIN",
				Pattern: "(BEGIN)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "END",
				Pattern: "(END)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "alias",
				Pattern: "(alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "and",
				Pattern: "(and)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "begin",
				Pattern: "(begin)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "character",
				Pattern: "(character)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "class_variable",
				Pattern: "(class_variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "def",
				Pattern: "(def)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "elsif",
				Pattern: "(elsif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "encoding",
				Pattern: "(encoding)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "end",
				Pattern: "(end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ensure",
				Pattern: "(ensure)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "file",
				Pattern: "(file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "float",
				Pattern: "(float)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "File",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "global_variable",
				Pattern: "(global_variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "heredoc_beginning",
				Pattern: "(heredoc_beginning)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "heredoc_content",
				Pattern: "(heredoc_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "heredoc_end",
				Pattern: "(heredoc_end)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "i",
				Pattern: "(i)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "instance_variable",
				Pattern: "(instance_variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "integer",
				Pattern: "(integer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "line",
				Pattern: "(line)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "module",
				Pattern: "(module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "next",
				Pattern: "(next)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "nil",
				Pattern: "(nil)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "not",
				Pattern: "(not)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "or",
				Pattern: "(or)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "r",
				Pattern: "(r)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "redo",
				Pattern: "(redo)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "rescue",
				Pattern: "(rescue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "retry",
				Pattern: "(retry)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "ri",
				Pattern: "(ri)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "self",
				Pattern: "(self)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "simple_symbol",
				Pattern: "(simple_symbol)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_content",
				Pattern: "(string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "super",
				Pattern: "(super)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "then",
				Pattern: "(then)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "undef",
				Pattern: "(undef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "uninterpreted",
				Pattern: "(uninterpreted)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unless",
				Pattern: "(unless)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "until",
				Pattern: "(until)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "when",
				Pattern: "(when)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "rust",
		Extensions: []string{

			".rs",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "_declaration_statement",
				Pattern: "(_declaration_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_expression",
				Pattern: "(_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_literal",
				Pattern: "(_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "_literal_pattern",
				Pattern: "(_literal_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "_pattern",
				Pattern: "(_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "_type",
				Pattern: "(_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "abstract_type",
				Pattern: "(abstract_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"bounded_type",

						"function_type",

						"generic_type",

						"removed_trait_bound",

						"scoped_type_identifier",

						"tuple_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "arguments",
				Pattern: "(arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "array_expression",
				Pattern: "(array_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "array_type",
				Pattern: "(array_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_expression",

						"_type",

					},
					
				},
				
			},

			{
				Name: "assignment_expression",
				Pattern: "(assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "associated_type",
				Pattern: "(associated_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"trait_bounds",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "async_block",
				Pattern: "(async_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "attribute",
				Pattern: "(attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					Children: []string{

						"_expression",

						"token_tree",

					},
					
				},
				
			},

			{
				Name: "attribute_item",
				Pattern: "(attribute_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "await_expression",
				Pattern: "(await_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "base_field_initializer",
				Pattern: "(base_field_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "BinaryOp",
					Token: "self",
					Roles: []string{

						"Operator",

					},
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_comment",
				Pattern: "(block_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

						"Body",

					},
					Children: []string{

						"doc_comment",

						"inner_doc_comment_marker",

						"outer_doc_comment_marker",

					},
					
				},
				
			},

			{
				Name: "boolean_literal",
				Pattern: "(boolean_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "bounded_type",
				Pattern: "(bounded_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "bracketed_type",
				Pattern: "(bracketed_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "break_expression",
				Pattern: "(break_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "call_expression",
				Pattern: "(call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"_literal",

						"arguments",

						"array_expression",

						"assignment_expression",

						"async_block",

						"await_expression",

						"binary_expression",

						"block",

						"break_expression",

						"call_expression",

						"closure_expression",

						"compound_assignment_expr",

						"const_block",

						"continue_expression",

						"field_expression",

						"for_expression",

						"gen_block",

						"generic_function",

						"identifier",

						"if_expression",

						"index_expression",

						"loop_expression",

						"macro_invocation",

						"match_expression",

						"metavariable",

						"parenthesized_expression",

						"reference_expression",

						"return_expression",

						"scoped_identifier",

						"self",

						"struct_expression",

						"try_block",

						"try_expression",

						"tuple_expression",

						"type_cast_expression",

						"unary_expression",

						"unit_expression",

						"unsafe_block",

						"while_expression",

						"yield_expression",

					},
					
				},
				
			},

			{
				Name: "captured_pattern",
				Pattern: "(captured_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Call",

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "closure_expression",
				Pattern: "(closure_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_",

						"_expression",

						"_type",

						"closure_parameters",

					},
					
				},
				
			},

			{
				Name: "closure_parameters",
				Pattern: "(closure_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "compound_assignment_expr",
				Pattern: "(compound_assignment_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "const_block",
				Pattern: "(const_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "const_item",
				Pattern: "(const_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"_type",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "const_parameter",
				Pattern: "(const_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_literal",

						"_type",

						"block",

						"identifier",

						"negative_literal",

					},
					
				},
				
			},

			{
				Name: "continue_expression",
				Pattern: "(continue_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "declaration_list",
				Pattern: "(declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "dynamic_type",
				Pattern: "(dynamic_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"function_type",

						"generic_type",

						"higher_ranked_trait_bound",

						"scoped_type_identifier",

						"tuple_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "else_clause",
				Pattern: "(else_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "empty_statement",
				Pattern: "(empty_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "enum_item",
				Pattern: "(enum_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"enum_variant_list",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "enum_variant",
				Pattern: "(enum_variant)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"_expression",

						"field_declaration_list",

						"identifier",

						"ordered_field_declaration_list",

					},
					
				},
				
			},

			{
				Name: "enum_variant_list",
				Pattern: "(enum_variant_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "expression_statement",
				Pattern: "(expression_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extern_crate_declaration",
				Pattern: "(extern_crate_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "extern_modifier",
				Pattern: "(extern_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "field_declaration",
				Pattern: "(field_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"_type",

						"field_identifier",

					},
					
				},
				
			},

			{
				Name: "field_declaration_list",
				Pattern: "(field_declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "field_expression",
				Pattern: "(field_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"_expression",

						"field_identifier",

						"integer_literal",

					},
					
				},
				
			},

			{
				Name: "field_initializer",
				Pattern: "(field_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"_expression",

						"field_identifier",

						"integer_literal",

					},
					
				},
				
			},

			{
				Name: "field_initializer_list",
				Pattern: "(field_initializer_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "field_pattern",
				Pattern: "(field_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"_pattern",

						"field_identifier",

						"shorthand_field_identifier",

					},
					
				},
				
			},

			{
				Name: "for_expression",
				Pattern: "(for_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"_expression",

						"_pattern",

						"block",

					},
					
				},
				
			},

			{
				Name: "for_lifetimes",
				Pattern: "(for_lifetimes)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "foreign_mod_item",
				Pattern: "(foreign_mod_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"declaration_list",

					},
					
				},
				
			},

			{
				Name: "fragment_specifier",
				Pattern: "(fragment_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "function_item",
				Pattern: "(function_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"_type",

						"block",

						"identifier",

						"metavariable",

						"parameters",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "function_modifiers",
				Pattern: "(function_modifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "function_signature_item",
				Pattern: "(function_signature_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"_type",

						"identifier",

						"metavariable",

						"parameters",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "function_type",
				Pattern: "(function_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"_type",

						"parameters",

						"scoped_type_identifier",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "gen_block",
				Pattern: "(gen_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "generic_function",
				Pattern: "(generic_function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"field_expression",

						"identifier",

						"scoped_identifier",

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "generic_pattern",
				Pattern: "(generic_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Pattern",

					},
					Children: []string{

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "generic_type",
				Pattern: "(generic_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

						"scoped_identifier",

						"scoped_type_identifier",

						"type_arguments",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "generic_type_with_turbofish",
				Pattern: "(generic_type_with_turbofish)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"scoped_identifier",

						"type_arguments",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "higher_ranked_trait_bound",
				Pattern: "(higher_ranked_trait_bound)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_type",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "if_expression",
				Pattern: "(if_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					Roles: []string{

						"Condition",

					},
					Children: []string{

						"_expression",

						"block",

						"else_clause",

						"let_chain",

						"let_condition",

					},
					
				},
				
			},

			{
				Name: "impl_item",
				Pattern: "(impl_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_type",

						"declaration_list",

						"generic_type",

						"scoped_type_identifier",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "index_expression",
				Pattern: "(index_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					Token: "self",
					Roles: []string{

						"Index",

					},
					
					
				},
				
			},

			{
				Name: "inner_attribute_item",
				Pattern: "(inner_attribute_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "inner_doc_comment_marker",
				Pattern: "(inner_doc_comment_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "label",
				Pattern: "(label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "let_chain",
				Pattern: "(let_chain)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "let_condition",
				Pattern: "(let_condition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"_pattern",

					},
					
				},
				
			},

			{
				Name: "let_declaration",
				Pattern: "(let_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_expression",

						"_pattern",

						"_type",

						"block",

					},
					
				},
				
			},

			{
				Name: "lifetime",
				Pattern: "(lifetime)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "lifetime_parameter",
				Pattern: "(lifetime_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"lifetime",

						"trait_bounds",

					},
					
				},
				
			},

			{
				Name: "line_comment",
				Pattern: "(line_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					Children: []string{

						"doc_comment",

						"inner_doc_comment_marker",

						"outer_doc_comment_marker",

					},
					
				},
				
			},

			{
				Name: "loop_expression",
				Pattern: "(loop_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Comment",

						"Loop",

					},
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "macro_definition",
				Pattern: "(macro_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "macro_invocation",
				Pattern: "(macro_invocation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "macro_rule",
				Pattern: "(macro_rule)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"token_tree",

						"token_tree_pattern",

					},
					
				},
				
			},

			{
				Name: "match_arm",
				Pattern: "(match_arm)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					Token: "self",
					Roles: []string{

						"Match",

					},
					Children: []string{

						"_expression",

						"match_pattern",

					},
					
				},
				
			},

			{
				Name: "match_block",
				Pattern: "(match_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "match_expression",
				Pattern: "(match_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					Token: "self",
					Roles: []string{

						"Body",

						"Match",

					},
					Children: []string{

						"_expression",

						"match_block",

					},
					
				},
				
			},

			{
				Name: "match_pattern",
				Pattern: "(match_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"_expression",

						"let_chain",

						"let_condition",

					},
					
				},
				
			},

			{
				Name: "mod_item",
				Pattern: "(mod_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					Children: []string{

						"declaration_list",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "mut_pattern",
				Pattern: "(mut_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "negative_literal",
				Pattern: "(negative_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "never_type",
				Pattern: "(never_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "or_pattern",
				Pattern: "(or_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "ordered_field_declaration_list",
				Pattern: "(ordered_field_declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"_type",

					},
					
				},
				
			},

			{
				Name: "outer_doc_comment_marker",
				Pattern: "(outer_doc_comment_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "parameter",
				Pattern: "(parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_pattern",

						"_type",

						"self",

					},
					
				},
				
			},

			{
				Name: "parameters",
				Pattern: "(parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pointer_type",
				Pattern: "(pointer_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_type",

					},
					
				},
				
			},

			{
				Name: "qualified_type",
				Pattern: "(qualified_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_type",

					},
					
				},
				
			},

			{
				Name: "range_expression",
				Pattern: "(range_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "range_pattern",
				Pattern: "(range_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"_literal_pattern",

						"crate",

						"identifier",

						"metavariable",

						"scoped_identifier",

						"self",

						"super",

					},
					
				},
				
			},

			{
				Name: "raw_string_literal",
				Pattern: "(raw_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "ref_pattern",
				Pattern: "(ref_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "reference_expression",
				Pattern: "(reference_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "reference_pattern",
				Pattern: "(reference_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "reference_type",
				Pattern: "(reference_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					Children: []string{

						"_type",

					},
					
				},
				
			},

			{
				Name: "remaining_field_pattern",
				Pattern: "(remaining_field_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "removed_trait_bound",
				Pattern: "(removed_trait_bound)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "return_expression",
				Pattern: "(return_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "scoped_identifier",
				Pattern: "(scoped_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"bracketed_type",

						"crate",

						"generic_type",

						"identifier",

						"metavariable",

						"scoped_identifier",

						"self",

						"super",

					},
					
				},
				
			},

			{
				Name: "scoped_type_identifier",
				Pattern: "(scoped_type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"bracketed_type",

						"crate",

						"generic_type",

						"identifier",

						"metavariable",

						"scoped_identifier",

						"self",

						"super",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "scoped_use_list",
				Pattern: "(scoped_use_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					Children: []string{

						"crate",

						"identifier",

						"metavariable",

						"scoped_identifier",

						"self",

						"super",

						"use_list",

					},
					
				},
				
			},

			{
				Name: "self_parameter",
				Pattern: "(self_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "shorthand_field_initializer",
				Pattern: "(shorthand_field_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "slice_pattern",
				Pattern: "(slice_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Slice",
					
					
					
					
				},
				
			},

			{
				Name: "source_file",
				Pattern: "(source_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "static_item",
				Pattern: "(static_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"_type",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "string_literal",
				Pattern: "(string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "struct_expression",
				Pattern: "(struct_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"field_initializer_list",

						"generic_type_with_turbofish",

						"scoped_type_identifier",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "struct_item",
				Pattern: "(struct_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"field_declaration_list",

						"ordered_field_declaration_list",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "struct_pattern",
				Pattern: "(struct_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"scoped_type_identifier",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "token_binding_pattern",
				Pattern: "(token_binding_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"fragment_specifier",

						"metavariable",

					},
					
				},
				
			},

			{
				Name: "token_repetition",
				Pattern: "(token_repetition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "token_repetition_pattern",
				Pattern: "(token_repetition_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "token_tree",
				Pattern: "(token_tree)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "token_tree_pattern",
				Pattern: "(token_tree_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "trait_bounds",
				Pattern: "(trait_bounds)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "trait_item",
				Pattern: "(trait_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"declaration_list",

						"trait_bounds",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "try_block",
				Pattern: "(try_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "try_expression",
				Pattern: "(try_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Body",

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "tuple_expression",
				Pattern: "(tuple_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					
					
				},
				
			},

			{
				Name: "tuple_pattern",
				Pattern: "(tuple_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "tuple_struct_pattern",
				Pattern: "(tuple_struct_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"generic_type",

						"identifier",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "tuple_type",
				Pattern: "(tuple_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_arguments",
				Pattern: "(type_arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_binding",
				Pattern: "(type_binding)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_type",

						"type_arguments",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "type_cast_expression",
				Pattern: "(type_cast_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					
					
					Children: []string{

						"_expression",

						"_type",

					},
					
				},
				
			},

			{
				Name: "type_item",
				Pattern: "(type_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_type",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "type_parameter",
				Pattern: "(type_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_type",

						"trait_bounds",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "type_parameters",
				Pattern: "(type_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "unary_expression",
				Pattern: "(unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "union_item",
				Pattern: "(union_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "UnaryOp",
					Token: "self",
					Roles: []string{

						"Operator",

					},
					Children: []string{

						"field_declaration_list",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "unit_expression",
				Pattern: "(unit_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unit_type",
				Pattern: "(unit_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unsafe_block",
				Pattern: "(unsafe_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "use_as_clause",
				Pattern: "(use_as_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"crate",

						"identifier",

						"metavariable",

						"scoped_identifier",

						"self",

						"super",

					},
					
				},
				
			},

			{
				Name: "use_bounds",
				Pattern: "(use_bounds)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "use_declaration",
				Pattern: "(use_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"crate",

						"identifier",

						"metavariable",

						"scoped_identifier",

						"scoped_use_list",

						"self",

						"super",

						"use_as_clause",

						"use_list",

						"use_wildcard",

					},
					
				},
				
			},

			{
				Name: "use_list",
				Pattern: "(use_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "use_wildcard",
				Pattern: "(use_wildcard)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "variadic_parameter",
				Pattern: "(variadic_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_pattern",

					},
					
				},
				
			},

			{
				Name: "visibility_modifier",
				Pattern: "(visibility_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "where_clause",
				Pattern: "(where_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "where_predicate",
				Pattern: "(where_predicate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"array_type",

						"generic_type",

						"higher_ranked_trait_bound",

						"lifetime",

						"pointer_type",

						"primitive_type",

						"reference_type",

						"scoped_type_identifier",

						"trait_bounds",

						"tuple_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "while_expression",
				Pattern: "(while_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"_expression",

						"block",

						"let_chain",

						"let_condition",

					},
					
				},
				
			},

			{
				Name: "yield_expression",
				Pattern: "(yield_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "_",
				Pattern: "(_)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "as",
				Pattern: "(as)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "async",
				Pattern: "(async)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "await",
				Pattern: "(await)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Body",

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "char_literal",
				Pattern: "(char_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "const",
				Pattern: "(const)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "crate",
				Pattern: "(crate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "doc_comment",
				Pattern: "(doc_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "dyn",
				Pattern: "(dyn)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "expr",
				Pattern: "(expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expr_2021",
				Pattern: "(expr_2021)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "extern",
				Pattern: "(extern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "field_identifier",
				Pattern: "(field_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "float_literal",
				Pattern: "(float_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Reference",

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "fn",
				Pattern: "(fn)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "gen",
				Pattern: "(gen)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ident",
				Pattern: "(ident)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					Roles: []string{

						"Condition",

					},
					
					
				},
				
			},

			{
				Name: "impl",
				Pattern: "(impl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "integer_literal",
				Pattern: "(integer_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "item",
				Pattern: "(item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "let",
				Pattern: "(let)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "lifetime",
				Pattern: "(lifetime)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "literal",
				Pattern: "(literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "loop",
				Pattern: "(loop)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "match",
				Pattern: "(match)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					
					Roles: []string{

						"Match",

					},
					
					
				},
				
			},

			{
				Name: "meta",
				Pattern: "(meta)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "metavariable",
				Pattern: "(metavariable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "mod",
				Pattern: "(mod)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "move",
				Pattern: "(move)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "mutable_specifier",
				Pattern: "(mutable_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pat",
				Pattern: "(pat)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "pat_param",
				Pattern: "(pat_param)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "path",
				Pattern: "(path)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "primitive_type",
				Pattern: "(primitive_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pub",
				Pattern: "(pub)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "raw",
				Pattern: "(raw)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ref",
				Pattern: "(ref)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "self",
				Pattern: "(self)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "shebang",
				Pattern: "(shebang)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "shorthand_field_identifier",
				Pattern: "(shorthand_field_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "static",
				Pattern: "(static)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "stmt",
				Pattern: "(stmt)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string_content",
				Pattern: "(string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "struct",
				Pattern: "(struct)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "super",
				Pattern: "(super)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "trait",
				Pattern: "(trait)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "tt",
				Pattern: "(tt)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ty",
				Pattern: "(ty)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_identifier",
				Pattern: "(type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "union",
				Pattern: "(union)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unsafe",
				Pattern: "(unsafe)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "use",
				Pattern: "(use)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "vis",
				Pattern: "(vis)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "where",
				Pattern: "(where)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "rust_with_rstml",
		Extensions: []string{

			".rs",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "_declaration_statement",
				Pattern: "(_declaration_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_expression",
				Pattern: "(_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_literal",
				Pattern: "(_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "_literal_pattern",
				Pattern: "(_literal_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "_pattern",
				Pattern: "(_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "_type",
				Pattern: "(_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "abstract_type",
				Pattern: "(abstract_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"function_type",

						"generic_type",

						"removed_trait_bound",

						"scoped_type_identifier",

						"tuple_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "arguments",
				Pattern: "(arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "array_expression",
				Pattern: "(array_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "array_type",
				Pattern: "(array_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_expression",

						"_type",

					},
					
				},
				
			},

			{
				Name: "assignment_expression",
				Pattern: "(assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "associated_type",
				Pattern: "(associated_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"trait_bounds",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "async_block",
				Pattern: "(async_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "attribute",
				Pattern: "(attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Body",

						"Attribute",

					},
					Children: []string{

						"_expression",

						"token_tree",

					},
					
				},
				
			},

			{
				Name: "attribute_item",
				Pattern: "(attribute_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "await_expression",
				Pattern: "(await_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "base_field_initializer",
				Pattern: "(base_field_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_comment",
				Pattern: "(block_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

						"Body",

					},
					Children: []string{

						"doc_comment",

						"inner_doc_comment_marker",

						"outer_doc_comment_marker",

					},
					
				},
				
			},

			{
				Name: "boolean_literal",
				Pattern: "(boolean_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "bounded_type",
				Pattern: "(bounded_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "bracketed_type",
				Pattern: "(bracketed_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "break_expression",
				Pattern: "(break_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "call_expression",
				Pattern: "(call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"_literal",

						"arguments",

						"array_expression",

						"assignment_expression",

						"async_block",

						"await_expression",

						"binary_expression",

						"block",

						"break_expression",

						"call_expression",

						"closure_expression",

						"compound_assignment_expr",

						"const_block",

						"continue_expression",

						"field_expression",

						"for_expression",

						"generic_function",

						"identifier",

						"if_expression",

						"index_expression",

						"loop_expression",

						"macro_invocation",

						"match_expression",

						"metavariable",

						"parenthesized_expression",

						"reference_expression",

						"return_expression",

						"scoped_identifier",

						"self",

						"struct_expression",

						"try_block",

						"try_expression",

						"tuple_expression",

						"type_cast_expression",

						"unary_expression",

						"unit_expression",

						"unsafe_block",

						"while_expression",

						"yield_expression",

					},
					
				},
				
			},

			{
				Name: "captured_pattern",
				Pattern: "(captured_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Call",

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "close_tag",
				Pattern: "(close_tag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"node_identifier",

					},
					
				},
				
			},

			{
				Name: "closure_expression",
				Pattern: "(closure_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_",

						"_expression",

						"_type",

						"closure_parameters",

					},
					
				},
				
			},

			{
				Name: "closure_parameters",
				Pattern: "(closure_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "comment_node",
				Pattern: "(comment_node)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "compound_assignment_expr",
				Pattern: "(compound_assignment_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "const_block",
				Pattern: "(const_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "const_item",
				Pattern: "(const_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"_type",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "const_parameter",
				Pattern: "(const_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_type",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "constrained_type_parameter",
				Pattern: "(constrained_type_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"lifetime",

						"trait_bounds",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "continue_expression",
				Pattern: "(continue_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "declaration_list",
				Pattern: "(declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "delim_nodes",
				Pattern: "(delim_nodes)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "doctype_node",
				Pattern: "(doctype_node)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "dynamic_type",
				Pattern: "(dynamic_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"function_type",

						"generic_type",

						"higher_ranked_trait_bound",

						"scoped_type_identifier",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "element_node",
				Pattern: "(element_node)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"close_tag",

						"open_tag",

					},
					
				},
				
			},

			{
				Name: "else_clause",
				Pattern: "(else_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "empty_statement",
				Pattern: "(empty_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "enum_item",
				Pattern: "(enum_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"enum_variant_list",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "enum_variant",
				Pattern: "(enum_variant)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"_expression",

						"field_declaration_list",

						"identifier",

						"ordered_field_declaration_list",

					},
					
				},
				
			},

			{
				Name: "enum_variant_list",
				Pattern: "(enum_variant_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "expression_statement",
				Pattern: "(expression_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extern_crate_declaration",
				Pattern: "(extern_crate_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "extern_modifier",
				Pattern: "(extern_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "field_declaration",
				Pattern: "(field_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"_type",

						"field_identifier",

					},
					
				},
				
			},

			{
				Name: "field_declaration_list",
				Pattern: "(field_declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "field_expression",
				Pattern: "(field_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"_expression",

						"field_identifier",

						"integer_literal",

					},
					
				},
				
			},

			{
				Name: "field_initializer",
				Pattern: "(field_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"_expression",

						"field_identifier",

						"integer_literal",

					},
					
				},
				
			},

			{
				Name: "field_initializer_list",
				Pattern: "(field_initializer_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "field_pattern",
				Pattern: "(field_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"_pattern",

						"field_identifier",

						"shorthand_field_identifier",

					},
					
				},
				
			},

			{
				Name: "for_expression",
				Pattern: "(for_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"_expression",

						"_pattern",

						"block",

					},
					
				},
				
			},

			{
				Name: "for_lifetimes",
				Pattern: "(for_lifetimes)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "foreign_mod_item",
				Pattern: "(foreign_mod_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"declaration_list",

					},
					
				},
				
			},

			{
				Name: "fragment_specifier",
				Pattern: "(fragment_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "function_item",
				Pattern: "(function_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"_type",

						"block",

						"identifier",

						"metavariable",

						"parameters",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "function_modifiers",
				Pattern: "(function_modifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "function_signature_item",
				Pattern: "(function_signature_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"_type",

						"identifier",

						"metavariable",

						"parameters",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "function_type",
				Pattern: "(function_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"_type",

						"parameters",

						"scoped_type_identifier",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "generic_function",
				Pattern: "(generic_function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Function",

						"Declaration",

					},
					Children: []string{

						"field_expression",

						"identifier",

						"scoped_identifier",

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "generic_identifier",
				Pattern: "(generic_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					
					
					
				},
				
			},

			{
				Name: "generic_type",
				Pattern: "(generic_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					Children: []string{

						"identifier",

						"scoped_identifier",

						"scoped_type_identifier",

						"type_arguments",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "generic_type_with_turbofish",
				Pattern: "(generic_type_with_turbofish)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"scoped_identifier",

						"type_arguments",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "higher_ranked_trait_bound",
				Pattern: "(higher_ranked_trait_bound)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_type",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "if_expression",
				Pattern: "(if_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					Children: []string{

						"_expression",

						"block",

						"else_clause",

						"let_chain",

						"let_condition",

					},
					
				},
				
			},

			{
				Name: "impl_item",
				Pattern: "(impl_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_type",

						"declaration_list",

						"generic_type",

						"scoped_type_identifier",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "index_expression",
				Pattern: "(index_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					Token: "self",
					Roles: []string{

						"Index",

					},
					
					
				},
				
			},

			{
				Name: "inner_attribute_item",
				Pattern: "(inner_attribute_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "label",
				Pattern: "(label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "let_chain",
				Pattern: "(let_chain)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "let_condition",
				Pattern: "(let_condition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_expression",

						"_pattern",

					},
					
				},
				
			},

			{
				Name: "let_declaration",
				Pattern: "(let_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"_pattern",

						"_type",

						"block",

					},
					
				},
				
			},

			{
				Name: "lifetime",
				Pattern: "(lifetime)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "line_comment",
				Pattern: "(line_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					Children: []string{

						"doc_comment",

						"inner_doc_comment_marker",

						"outer_doc_comment_marker",

					},
					
				},
				
			},

			{
				Name: "loop_expression",
				Pattern: "(loop_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Comment",

						"Loop",

					},
					Children: []string{

						"block",

					},
					
				},
				
			},

			{
				Name: "macro_definition",
				Pattern: "(macro_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

					},
					
				},
				
			},

			{
				Name: "macro_invocation",
				Pattern: "(macro_invocation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "macro_rule",
				Pattern: "(macro_rule)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"token_tree",

						"token_tree_pattern",

					},
					
				},
				
			},

			{
				Name: "match_arm",
				Pattern: "(match_arm)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					Token: "self",
					Roles: []string{

						"Match",

					},
					Children: []string{

						"_expression",

						"match_pattern",

					},
					
				},
				
			},

			{
				Name: "match_block",
				Pattern: "(match_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "match_expression",
				Pattern: "(match_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					Token: "self",
					Roles: []string{

						"Body",

						"Match",

					},
					Children: []string{

						"_expression",

						"match_block",

					},
					
				},
				
			},

			{
				Name: "match_pattern",
				Pattern: "(match_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"_expression",

						"let_chain",

						"let_condition",

					},
					
				},
				
			},

			{
				Name: "mod_item",
				Pattern: "(mod_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					Children: []string{

						"declaration_list",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "mut_pattern",
				Pattern: "(mut_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "negative_literal",
				Pattern: "(negative_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "never_type",
				Pattern: "(never_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "node_attribute",
				Pattern: "(node_attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					Children: []string{

						"node_identifier",

						"rust_expression",

					},
					
				},
				
			},

			{
				Name: "node_identifier",
				Pattern: "(node_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "open_tag",
				Pattern: "(open_tag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					Children: []string{

						"block",

						"node_attribute",

						"node_identifier",

					},
					
				},
				
			},

			{
				Name: "optional_type_parameter",
				Pattern: "(optional_type_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_type",

						"constrained_type_parameter",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "or_pattern",
				Pattern: "(or_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "ordered_field_declaration_list",
				Pattern: "(ordered_field_declaration_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"_type",

					},
					
				},
				
			},

			{
				Name: "parameter",
				Pattern: "(parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_pattern",

						"_type",

						"self",

					},
					
				},
				
			},

			{
				Name: "parameters",
				Pattern: "(parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pointer_type",
				Pattern: "(pointer_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_type",

					},
					
				},
				
			},

			{
				Name: "qualified_type",
				Pattern: "(qualified_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_type",

					},
					
				},
				
			},

			{
				Name: "range_expression",
				Pattern: "(range_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "range_pattern",
				Pattern: "(range_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "raw_string_literal",
				Pattern: "(raw_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "ref_pattern",
				Pattern: "(ref_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Literal",

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "reference_expression",
				Pattern: "(reference_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

					},
					
				},
				
			},

			{
				Name: "reference_pattern",
				Pattern: "(reference_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "reference_type",
				Pattern: "(reference_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_type",

					},
					
				},
				
			},

			{
				Name: "remaining_field_pattern",
				Pattern: "(remaining_field_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "removed_trait_bound",
				Pattern: "(removed_trait_bound)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return_expression",
				Pattern: "(return_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "scoped_identifier",
				Pattern: "(scoped_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"bracketed_type",

						"crate",

						"generic_type",

						"identifier",

						"metavariable",

						"scoped_identifier",

						"self",

						"super",

					},
					
				},
				
			},

			{
				Name: "scoped_type_identifier",
				Pattern: "(scoped_type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					Children: []string{

						"bracketed_type",

						"crate",

						"generic_type",

						"identifier",

						"metavariable",

						"scoped_identifier",

						"self",

						"super",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "scoped_use_list",
				Pattern: "(scoped_use_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					Children: []string{

						"crate",

						"identifier",

						"metavariable",

						"scoped_identifier",

						"self",

						"super",

						"use_list",

					},
					
				},
				
			},

			{
				Name: "self_closing_element_node",
				Pattern: "(self_closing_element_node)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"block",

						"generic_identifier",

						"node_attribute",

						"node_identifier",

					},
					
				},
				
			},

			{
				Name: "self_parameter",
				Pattern: "(self_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "shorthand_field_initializer",
				Pattern: "(shorthand_field_initializer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "slice_pattern",
				Pattern: "(slice_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Slice",
					
					
					
					
				},
				
			},

			{
				Name: "source_file",
				Pattern: "(source_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "static_item",
				Pattern: "(static_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"_type",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "string_literal",
				Pattern: "(string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "struct_expression",
				Pattern: "(struct_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"field_initializer_list",

						"generic_type_with_turbofish",

						"scoped_type_identifier",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "struct_item",
				Pattern: "(struct_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"field_declaration_list",

						"ordered_field_declaration_list",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "struct_pattern",
				Pattern: "(struct_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"scoped_type_identifier",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "token_binding_pattern",
				Pattern: "(token_binding_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"fragment_specifier",

						"metavariable",

					},
					
				},
				
			},

			{
				Name: "token_repetition",
				Pattern: "(token_repetition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "token_repetition_pattern",
				Pattern: "(token_repetition_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "token_tree",
				Pattern: "(token_tree)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "token_tree_pattern",
				Pattern: "(token_tree_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "trait_bounds",
				Pattern: "(trait_bounds)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "trait_item",
				Pattern: "(trait_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"declaration_list",

						"trait_bounds",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "try_block",
				Pattern: "(try_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "try_expression",
				Pattern: "(try_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Body",

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "tuple_expression",
				Pattern: "(tuple_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					
					
				},
				
			},

			{
				Name: "tuple_pattern",
				Pattern: "(tuple_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "tuple_struct_pattern",
				Pattern: "(tuple_struct_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"generic_type",

						"identifier",

						"scoped_identifier",

					},
					
				},
				
			},

			{
				Name: "tuple_type",
				Pattern: "(tuple_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_arguments",
				Pattern: "(type_arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_binding",
				Pattern: "(type_binding)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_type",

						"type_arguments",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "type_cast_expression",
				Pattern: "(type_cast_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					
					
					Children: []string{

						"_expression",

						"_type",

					},
					
				},
				
			},

			{
				Name: "type_item",
				Pattern: "(type_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"_type",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "type_parameters",
				Pattern: "(type_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "unary_expression",
				Pattern: "(unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "union_item",
				Pattern: "(union_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"field_declaration_list",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "unit_expression",
				Pattern: "(unit_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unit_type",
				Pattern: "(unit_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unsafe_block",
				Pattern: "(unsafe_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "use_as_clause",
				Pattern: "(use_as_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"crate",

						"identifier",

						"metavariable",

						"scoped_identifier",

						"self",

						"super",

					},
					
				},
				
			},

			{
				Name: "use_declaration",
				Pattern: "(use_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"crate",

						"identifier",

						"metavariable",

						"scoped_identifier",

						"scoped_use_list",

						"self",

						"super",

						"use_as_clause",

						"use_list",

						"use_wildcard",

					},
					
				},
				
			},

			{
				Name: "use_list",
				Pattern: "(use_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "use_wildcard",
				Pattern: "(use_wildcard)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "variadic_parameter",
				Pattern: "(variadic_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"_pattern",

					},
					
				},
				
			},

			{
				Name: "visibility_modifier",
				Pattern: "(visibility_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "where_clause",
				Pattern: "(where_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "where_predicate",
				Pattern: "(where_predicate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"array_type",

						"generic_type",

						"higher_ranked_trait_bound",

						"lifetime",

						"pointer_type",

						"primitive_type",

						"reference_type",

						"scoped_type_identifier",

						"trait_bounds",

						"tuple_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "while_expression",
				Pattern: "(while_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"_expression",

						"block",

						"let_chain",

						"let_condition",

					},
					
				},
				
			},

			{
				Name: "yield_expression",
				Pattern: "(yield_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "_",
				Pattern: "(_)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "as",
				Pattern: "(as)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "async",
				Pattern: "(async)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "await",
				Pattern: "(await)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "block",
				Pattern: "(block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Body",

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "char_literal",
				Pattern: "(char_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "const",
				Pattern: "(const)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "crate",
				Pattern: "(crate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "doc_comment",
				Pattern: "(doc_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "dyn",
				Pattern: "(dyn)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "expr",
				Pattern: "(expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extern",
				Pattern: "(extern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "field_identifier",
				Pattern: "(field_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "float_literal",
				Pattern: "(float_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "fn",
				Pattern: "(fn)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "ident",
				Pattern: "(ident)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					Roles: []string{

						"Condition",

					},
					
					
				},
				
			},

			{
				Name: "impl",
				Pattern: "(impl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "inner_doc_comment_marker",
				Pattern: "(inner_doc_comment_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "integer_literal",
				Pattern: "(integer_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "item",
				Pattern: "(item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "let",
				Pattern: "(let)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "lifetime",
				Pattern: "(lifetime)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "literal",
				Pattern: "(literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "loop",
				Pattern: "(loop)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "match",
				Pattern: "(match)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					
					Roles: []string{

						"Match",

					},
					
					
				},
				
			},

			{
				Name: "meta",
				Pattern: "(meta)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "metavariable",
				Pattern: "(metavariable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "mod",
				Pattern: "(mod)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "move",
				Pattern: "(move)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "mutable_specifier",
				Pattern: "(mutable_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "outer_doc_comment_marker",
				Pattern: "(outer_doc_comment_marker)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "pat",
				Pattern: "(pat)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "path",
				Pattern: "(path)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "primitive_type",
				Pattern: "(primitive_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pub",
				Pattern: "(pub)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ref",
				Pattern: "(ref)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "self",
				Pattern: "(self)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "shebang",
				Pattern: "(shebang)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "shorthand_field_identifier",
				Pattern: "(shorthand_field_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "static",
				Pattern: "(static)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "stmt",
				Pattern: "(stmt)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_content",
				Pattern: "(string_content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "struct",
				Pattern: "(struct)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "super",
				Pattern: "(super)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "text_node",
				Pattern: "(text_node)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "trait",
				Pattern: "(trait)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "tt",
				Pattern: "(tt)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ty",
				Pattern: "(ty)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_identifier",
				Pattern: "(type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "union",
				Pattern: "(union)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "unsafe",
				Pattern: "(unsafe)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "use",
				Pattern: "(use)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "view",
				Pattern: "(view)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "vis",
				Pattern: "(vis)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "where",
				Pattern: "(where)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "ssh_config",
		Extensions: []string{

		},
		Rules: []mapping.MappingRule{

			{
				Name: "bytes",
				Pattern: "(bytes)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "condition",
				Pattern: "(condition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"canonical",

						"exec",

						"final",

						"host",

						"localnetwork",

						"localuser",

						"originalhost",

						"pattern",

						"string",

						"tagged",

						"user",

					},
					
				},
				
			},

			{
				Name: "config",
				Pattern: "(config)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "host_declaration",
				Pattern: "(host_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"Host",

						"pattern",

					},
					
				},
				
			},

			{
				Name: "match_declaration",
				Pattern: "(match_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					
					Roles: []string{

						"Match",

					},
					Children: []string{

						"Match",

					},
					
				},
				
			},

			{
				Name: "number",
				Pattern: "(number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "parameter",
				Pattern: "(parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"AddKeysToAgent",

						"AddressFamily",

						"BatchMode",

						"BindAddress",

						"BindInterface",

						"CASignatureAlgorithms",

						"CanonicalDomains",

						"CanonicalizeFallbackLocal",

						"CanonicalizeHostname",

						"CanonicalizeMaxDots",

						"CanonicalizePermittedCNAMEs",

						"CertificateFile",

						"ChallengeResponseAuthentication",

						"CheckHostIP",

						"Ciphers",

						"ClearAllForwardings",

						"Compression",

						"ConnectTimeout",

						"ConnectionAttempts",

						"ControlMaster",

						"ControlPath",

						"ControlPersist",

						"DynamicForward",

						"EnableEscapeCommandline",

						"EnableSSHKeysign",

						"EscapeChar",

						"ExitOnForwardFailure",

						"FingerprintHash",

						"ForkAfterAuthentication",

						"ForwardAgent",

						"ForwardX11",

						"ForwardX11Timeout",

						"ForwardX11Trusted",

						"GSSAPIAuthentication",

						"GSSAPIDelegateCredentials",

						"GlobalKnownHostsFile",

						"HashKnownHosts",

						"HostKeyAlgorithms",

						"HostKeyAlias",

						"HostbasedAcceptedAlgorithms",

						"HostbasedAuthentication",

						"HostbasedKeyTypes",

						"Hostname",

						"IPQoS",

						"IdentitiesOnly",

						"IdentityAgent",

						"IdentityFile",

						"IgnoreUnknown",

						"Include",

						"KbdInteractiveAuthentication",

						"KexAlgorithms",

						"KnownHostsCommand",

						"LocalCommand",

						"LocalForward",

						"LogLevel",

						"LogVerbose",

						"MACs",

						"NoHostAuthenticationForLocalhost",

						"NumberOfPasswordPrompts",

						"PKCS11Provider",

						"PasswordAuthentication",

						"PermitLocalCommand",

						"PermitRemoteOpen",

						"Port",

						"PreferredAuthentications",

						"ProxyCommand",

						"ProxyJump",

						"ProxyUseFdpass",

						"PubkeyAcceptedAlgorithms",

						"PubkeyAcceptedKeyTypes",

						"PubkeyAuthentication",

						"RekeyLimit",

						"RemoteCommand",

						"RemoteForward",

						"RequestTTY",

						"RequiredRSASize",

						"RevokedHostKeys",

						"SSH_AUTH_SOCK",

						"SecurityKeyProvider",

						"SendEnv",

						"ServerAliveCountMax",

						"ServerAliveInterval",

						"SessionType",

						"SetEnv",

						"StdinNull",

						"StreamLocalBindMask",

						"StreamLocalBindUnlink",

						"StrictHostKeyChecking",

						"SyslogFacility",

						"TCPKeepAlive",

						"Tag",

						"Tunnel",

						"TunnelDevice",

						"UpdateHostKeys",

						"UseKeychain",

						"User",

						"UserKnownHostsFile",

						"VerifyHostKeyDNS",

						"VisualHostKey",

						"XAuthLocation",

						"always",

						"any",

						"ask",

						"authentication",

						"auto",

						"autoask",

						"bytes",

						"cipher",

						"confirm",

						"default",

						"ethernet",

						"facility",

						"force",

						"inet",

						"inet6",

						"ipqos",

						"kex",

						"key_sig",

						"mac",

						"md5",

						"no",

						"none",

						"number",

						"off",

						"pattern",

						"sha256",

						"sig",

						"string",

						"subsystem",

						"time",

						"unbound",

						"uri",

						"variable",

						"verbosity",

						"yes",

					},
					
				},
				
			},

			{
				Name: "pattern",
				Pattern: "(pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "time",
				Pattern: "(time)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "variable",
				Pattern: "(variable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "AddKeysToAgent",
				Pattern: "(AddKeysToAgent)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "AddressFamily",
				Pattern: "(AddressFamily)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "BatchMode",
				Pattern: "(BatchMode)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "BindAddress",
				Pattern: "(BindAddress)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "BindInterface",
				Pattern: "(BindInterface)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "CASignatureAlgorithms",
				Pattern: "(CASignatureAlgorithms)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "CanonicalDomains",
				Pattern: "(CanonicalDomains)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "CanonicalizeFallbackLocal",
				Pattern: "(CanonicalizeFallbackLocal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "CanonicalizeHostname",
				Pattern: "(CanonicalizeHostname)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "CanonicalizeMaxDots",
				Pattern: "(CanonicalizeMaxDots)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "CanonicalizePermittedCNAMEs",
				Pattern: "(CanonicalizePermittedCNAMEs)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "CertificateFile",
				Pattern: "(CertificateFile)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ChallengeResponseAuthentication",
				Pattern: "(ChallengeResponseAuthentication)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "CheckHostIP",
				Pattern: "(CheckHostIP)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "Ciphers",
				Pattern: "(Ciphers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ClearAllForwardings",
				Pattern: "(ClearAllForwardings)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "Compression",
				Pattern: "(Compression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ConnectTimeout",
				Pattern: "(ConnectTimeout)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ConnectionAttempts",
				Pattern: "(ConnectionAttempts)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ControlMaster",
				Pattern: "(ControlMaster)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ControlPath",
				Pattern: "(ControlPath)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ControlPersist",
				Pattern: "(ControlPersist)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "DynamicForward",
				Pattern: "(DynamicForward)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "EnableEscapeCommandline",
				Pattern: "(EnableEscapeCommandline)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "EnableSSHKeysign",
				Pattern: "(EnableSSHKeysign)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "EscapeChar",
				Pattern: "(EscapeChar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ExitOnForwardFailure",
				Pattern: "(ExitOnForwardFailure)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "FingerprintHash",
				Pattern: "(FingerprintHash)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ForkAfterAuthentication",
				Pattern: "(ForkAfterAuthentication)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "ForwardAgent",
				Pattern: "(ForwardAgent)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "ForwardX11",
				Pattern: "(ForwardX11)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "ForwardX11Timeout",
				Pattern: "(ForwardX11Timeout)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "ForwardX11Trusted",
				Pattern: "(ForwardX11Trusted)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "GSSAPIAuthentication",
				Pattern: "(GSSAPIAuthentication)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "GSSAPIDelegateCredentials",
				Pattern: "(GSSAPIDelegateCredentials)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "GlobalKnownHostsFile",
				Pattern: "(GlobalKnownHostsFile)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "HashKnownHosts",
				Pattern: "(HashKnownHosts)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "Host",
				Pattern: "(Host)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "HostKeyAlgorithms",
				Pattern: "(HostKeyAlgorithms)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "HostKeyAlias",
				Pattern: "(HostKeyAlias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "HostbasedAcceptedAlgorithms",
				Pattern: "(HostbasedAcceptedAlgorithms)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "HostbasedAuthentication",
				Pattern: "(HostbasedAuthentication)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "HostbasedKeyTypes",
				Pattern: "(HostbasedKeyTypes)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "Hostname",
				Pattern: "(Hostname)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "IPQoS",
				Pattern: "(IPQoS)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "IdentitiesOnly",
				Pattern: "(IdentitiesOnly)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "IdentityAgent",
				Pattern: "(IdentityAgent)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "IdentityFile",
				Pattern: "(IdentityFile)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "IgnoreUnknown",
				Pattern: "(IgnoreUnknown)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "Include",
				Pattern: "(Include)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "KbdInteractiveAuthentication",
				Pattern: "(KbdInteractiveAuthentication)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "KexAlgorithms",
				Pattern: "(KexAlgorithms)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "KnownHostsCommand",
				Pattern: "(KnownHostsCommand)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "LocalCommand",
				Pattern: "(LocalCommand)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "LocalForward",
				Pattern: "(LocalForward)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "LogLevel",
				Pattern: "(LogLevel)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "LogVerbose",
				Pattern: "(LogVerbose)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "MACs",
				Pattern: "(MACs)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "Match",
				Pattern: "(Match)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Match",
					Token: "self",
					Roles: []string{

						"Match",

					},
					
					
				},
				
			},

			{
				Name: "NoHostAuthenticationForLocalhost",
				Pattern: "(NoHostAuthenticationForLocalhost)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "NumberOfPasswordPrompts",
				Pattern: "(NumberOfPasswordPrompts)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "PKCS11Provider",
				Pattern: "(PKCS11Provider)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "PasswordAuthentication",
				Pattern: "(PasswordAuthentication)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "PermitLocalCommand",
				Pattern: "(PermitLocalCommand)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "PermitRemoteOpen",
				Pattern: "(PermitRemoteOpen)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "Port",
				Pattern: "(Port)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "PreferredAuthentications",
				Pattern: "(PreferredAuthentications)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ProxyCommand",
				Pattern: "(ProxyCommand)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ProxyJump",
				Pattern: "(ProxyJump)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ProxyUseFdpass",
				Pattern: "(ProxyUseFdpass)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "PubkeyAcceptedAlgorithms",
				Pattern: "(PubkeyAcceptedAlgorithms)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "PubkeyAcceptedKeyTypes",
				Pattern: "(PubkeyAcceptedKeyTypes)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "PubkeyAuthentication",
				Pattern: "(PubkeyAuthentication)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "RekeyLimit",
				Pattern: "(RekeyLimit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "RemoteCommand",
				Pattern: "(RemoteCommand)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "RemoteForward",
				Pattern: "(RemoteForward)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "RequestTTY",
				Pattern: "(RequestTTY)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "RequiredRSASize",
				Pattern: "(RequiredRSASize)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "RevokedHostKeys",
				Pattern: "(RevokedHostKeys)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "SSH_AUTH_SOCK",
				Pattern: "(SSH_AUTH_SOCK)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "SecurityKeyProvider",
				Pattern: "(SecurityKeyProvider)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "SendEnv",
				Pattern: "(SendEnv)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ServerAliveCountMax",
				Pattern: "(ServerAliveCountMax)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ServerAliveInterval",
				Pattern: "(ServerAliveInterval)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "SessionType",
				Pattern: "(SessionType)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "SetEnv",
				Pattern: "(SetEnv)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "StdinNull",
				Pattern: "(StdinNull)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "StreamLocalBindMask",
				Pattern: "(StreamLocalBindMask)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "StreamLocalBindUnlink",
				Pattern: "(StreamLocalBindUnlink)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "StrictHostKeyChecking",
				Pattern: "(StrictHostKeyChecking)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "SyslogFacility",
				Pattern: "(SyslogFacility)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "TCPKeepAlive",
				Pattern: "(TCPKeepAlive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "Tag",
				Pattern: "(Tag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "Tunnel",
				Pattern: "(Tunnel)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "TunnelDevice",
				Pattern: "(TunnelDevice)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "UpdateHostKeys",
				Pattern: "(UpdateHostKeys)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "UseKeychain",
				Pattern: "(UseKeychain)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "User",
				Pattern: "(User)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "UserKnownHostsFile",
				Pattern: "(UserKnownHostsFile)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "VerifyHostKeyDNS",
				Pattern: "(VerifyHostKeyDNS)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "VisualHostKey",
				Pattern: "(VisualHostKey)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "XAuthLocation",
				Pattern: "(XAuthLocation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "all",
				Pattern: "(all)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "always",
				Pattern: "(always)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "any",
				Pattern: "(any)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ask",
				Pattern: "(ask)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "authentication",
				Pattern: "(authentication)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "auto",
				Pattern: "(auto)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "autoask",
				Pattern: "(autoask)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "canonical",
				Pattern: "(canonical)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "cipher",
				Pattern: "(cipher)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "confirm",
				Pattern: "(confirm)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ethernet",
				Pattern: "(ethernet)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "exec",
				Pattern: "(exec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "facility",
				Pattern: "(facility)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "final",
				Pattern: "(final)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "force",
				Pattern: "(force)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "host",
				Pattern: "(host)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "inet",
				Pattern: "(inet)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "inet6",
				Pattern: "(inet6)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ipqos",
				Pattern: "(ipqos)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "kex",
				Pattern: "(kex)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "key_sig",
				Pattern: "(key_sig)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "localnetwork",
				Pattern: "(localnetwork)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "localuser",
				Pattern: "(localuser)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "mac",
				Pattern: "(mac)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "md5",
				Pattern: "(md5)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "no",
				Pattern: "(no)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "none",
				Pattern: "(none)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "off",
				Pattern: "(off)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "originalhost",
				Pattern: "(originalhost)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "sha256",
				Pattern: "(sha256)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "sig",
				Pattern: "(sig)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "subsystem",
				Pattern: "(subsystem)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "tagged",
				Pattern: "(tagged)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "token",
				Pattern: "(token)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unbound",
				Pattern: "(unbound)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "uri",
				Pattern: "(uri)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "user",
				Pattern: "(user)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "verbosity",
				Pattern: "(verbosity)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "yes",
				Pattern: "(yes)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "swift",
		Extensions: []string{

			".swift",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "additive_expression",
				Pattern: "(additive_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "array_literal",
				Pattern: "(array_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "array_type",
				Pattern: "(array_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"suppressed_constraint",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "as_expression",
				Pattern: "(as_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"array_type",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"dictionary_type",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"existential_type",

						"fully_open_range",

						"function_type",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"metatype",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"opaque_type",

						"open_end_range_expression",

						"open_start_range_expression",

						"optional_type",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"protocol_composition_type",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"suppressed_constraint",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "as_operator",
				Pattern: "(as_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "assignment",
				Pattern: "(assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"directly_assignable_expression",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "associatedtype_declaration",
				Pattern: "(associatedtype_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"suppressed_constraint",

						"tuple_type",

						"type_identifier",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "attribute",
				Pattern: "(attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "child:identifier",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "availability_condition",
				Pattern: "(availability_condition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "await_expression",
				Pattern: "(await_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "bang",
				Pattern: "(bang)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bitwise_operation",
				Pattern: "(bitwise_operation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "boolean_literal",
				Pattern: "(boolean_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "call_expression",
				Pattern: "(call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Literal",

						"Call",

					},
					
					
				},
				
			},

			{
				Name: "call_suffix",
				Pattern: "(call_suffix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"simple_identifier",

					},
					
				},
				
			},

			{
				Name: "capture_list",
				Pattern: "(capture_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "capture_list_item",
				Pattern: "(capture_list_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "catch_block",
				Pattern: "(catch_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"pattern",

					},
					
				},
				
			},

			{
				Name: "check_expression",
				Pattern: "(check_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"array_type",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"dictionary_type",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"existential_type",

						"fully_open_range",

						"function_type",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"is",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"metatype",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"opaque_type",

						"open_end_range_expression",

						"open_start_range_expression",

						"optional_type",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"protocol_composition_type",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"suppressed_constraint",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "class_body",
				Pattern: "(class_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "class_declaration",
				Pattern: "(class_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"actor",

						"array_type",

						"class",

						"class_body",

						"dictionary_type",

						"enum",

						"enum_class_body",

						"existential_type",

						"extension",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"struct",

						"suppressed_constraint",

						"tuple_type",

						"type_identifier",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "comparison_expression",
				Pattern: "(comparison_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "child:identifier",
					Roles: []string{

						"Declaration",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "computed_getter",
				Pattern: "(computed_getter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Getter",
					
					Roles: []string{

						"Getter",

					},
					
					
				},
				
			},

			{
				Name: "computed_modify",
				Pattern: "(computed_modify)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "computed_property",
				Pattern: "(computed_property)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "computed_setter",
				Pattern: "(computed_setter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Setter",
					Token: "self",
					Roles: []string{

						"Setter",

					},
					
					
				},
				
			},

			{
				Name: "conjunction_expression",
				Pattern: "(conjunction_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "constructor_expression",
				Pattern: "(constructor_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"array_type",

						"dictionary_type",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "constructor_suffix",
				Pattern: "(constructor_suffix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"simple_identifier",

					},
					
				},
				
			},

			{
				Name: "control_transfer_statement",
				Pattern: "(control_transfer_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "custom_operator",
				Pattern: "(custom_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "deinit_declaration",
				Pattern: "(deinit_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"function_body",

					},
					
				},
				
			},

			{
				Name: "deprecated_operator_declaration_body",
				Pattern: "(deprecated_operator_declaration_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "diagnostic",
				Pattern: "(diagnostic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "dictionary_literal",
				Pattern: "(dictionary_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "dictionary_type",
				Pattern: "(dictionary_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Dict",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"suppressed_constraint",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "didset_clause",
				Pattern: "(didset_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "directive",
				Pattern: "(directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "directly_assignable_expression",
				Pattern: "(directly_assignable_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "disjunction_expression",
				Pattern: "(disjunction_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "do_statement",
				Pattern: "(do_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "enum_class_body",
				Pattern: "(enum_class_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "enum_entry",
				Pattern: "(enum_entry)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"enum_type_parameters",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "enum_type_parameters",
				Pattern: "(enum_type_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"suppressed_constraint",

						"tuple_type",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "equality_constraint",
				Pattern: "(equality_constraint)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"identifier",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"simple_identifier",

						"suppressed_constraint",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "equality_expression",
				Pattern: "(equality_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "existential_type",
				Pattern: "(existential_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "external_macro_definition",
				Pattern: "(external_macro_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"pattern",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "fully_open_range",
				Pattern: "(fully_open_range)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "function_body",
				Pattern: "(function_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "function_declaration",
				Pattern: "(function_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Body",

						"Function",

						"Declaration",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"array_type",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"dictionary_type",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"existential_type",

						"fully_open_range",

						"function_body",

						"function_type",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"metatype",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"opaque_type",

						"open_end_range_expression",

						"open_start_range_expression",

						"optional_type",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"protocol_composition_type",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"suppressed_constraint",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "function_modifier",
				Pattern: "(function_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "function_type",
				Pattern: "(function_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"suppressed_constraint",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "getter_specifier",
				Pattern: "(getter_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "guard_statement",
				Pattern: "(guard_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"array_type",

						"as",

						"as_expression",

						"assignment",

						"async",

						"availability_condition",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"case",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"dictionary_type",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"existential_type",

						"fully_open_range",

						"function_type",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"is",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"metatype",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"opaque_type",

						"open_end_range_expression",

						"open_start_range_expression",

						"optional_type",

						"pattern",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"protocol_composition_type",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"suppressed_constraint",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"tuple_type",

						"type_annotation",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

						"value_binding_pattern",

						"value_pack_expansion",

						"value_parameter_pack",

						"where_clause",

						"wildcard_pattern",

					},
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					Roles: []string{

						"Condition",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"array_type",

						"as",

						"as_expression",

						"assignment",

						"async",

						"availability_condition",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"case",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"dictionary_type",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"existential_type",

						"fully_open_range",

						"function_type",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"is",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"metatype",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"opaque_type",

						"open_end_range_expression",

						"open_start_range_expression",

						"optional_type",

						"pattern",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"protocol_composition_type",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"suppressed_constraint",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"tuple_type",

						"type_annotation",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

						"value_binding_pattern",

						"value_pack_expansion",

						"value_parameter_pack",

						"where_clause",

						"wildcard_pattern",

					},
					
				},
				
			},

			{
				Name: "import_declaration",
				Pattern: "(import_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "infix_expression",
				Pattern: "(infix_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "inheritance_constraint",
				Pattern: "(inheritance_constraint)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"identifier",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"simple_identifier",

						"suppressed_constraint",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "inheritance_modifier",
				Pattern: "(inheritance_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "inheritance_specifier",
				Pattern: "(inheritance_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"function_type",

						"suppressed_constraint",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "init_declaration",
				Pattern: "(init_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"function_body",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"init",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "interpolated_expression",
				Pattern: "(interpolated_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_argument_label",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "key_path_expression",
				Pattern: "(key_path_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "key_path_string_expression",
				Pattern: "(key_path_string_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "lambda_function_type",
				Pattern: "(lambda_function_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"suppressed_constraint",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "lambda_function_type_parameters",
				Pattern: "(lambda_function_type_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "lambda_literal",
				Pattern: "(lambda_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"capture_list",

						"lambda_function_type",

					},
					
				},
				
			},

			{
				Name: "lambda_parameter",
				Pattern: "(lambda_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"simple_identifier",

						"suppressed_constraint",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "line_str_text",
				Pattern: "(line_str_text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "line_string_literal",
				Pattern: "(line_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"interpolated_expression",

						"line_str_text",

						"str_escaped_char",

					},
					
				},
				
			},

			{
				Name: "macro_declaration",
				Pattern: "(macro_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_definition",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "macro_definition",
				Pattern: "(macro_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"external_macro_definition",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "macro_invocation",
				Pattern: "(macro_invocation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "member_modifier",
				Pattern: "(member_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "metatype",
				Pattern: "(metatype)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "modifiers",
				Pattern: "(modifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "modify_specifier",
				Pattern: "(modify_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "multi_line_str_text",
				Pattern: "(multi_line_str_text)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "multi_line_string_literal",
				Pattern: "(multi_line_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"interpolated_expression",

						"multi_line_str_text",

						"str_escaped_char",

					},
					
				},
				
			},

			{
				Name: "multiplicative_expression",
				Pattern: "(multiplicative_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "mutation_modifier",
				Pattern: "(mutation_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "navigation_expression",
				Pattern: "(navigation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"array_type",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"dictionary_type",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"existential_type",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"navigation_suffix",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"opaque_type",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"user_type",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "navigation_suffix",
				Pattern: "(navigation_suffix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"integer_literal",

						"simple_identifier",

					},
					
				},
				
			},

			{
				Name: "nil_coalescing_expression",
				Pattern: "(nil_coalescing_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "opaque_type",
				Pattern: "(opaque_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "open_end_range_expression",
				Pattern: "(open_end_range_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "open_start_range_expression",
				Pattern: "(open_start_range_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "operator_declaration",
				Pattern: "(operator_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "optional_type",
				Pattern: "(optional_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"array_type",

						"dictionary_type",

						"tuple_type",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "ownership_modifier",
				Pattern: "(ownership_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "parameter",
				Pattern: "(parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"simple_identifier",

						"suppressed_constraint",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "parameter_modifier",
				Pattern: "(parameter_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "parameter_modifiers",
				Pattern: "(parameter_modifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "pattern",
				Pattern: "(pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"simple_identifier",

						"suppressed_constraint",

						"tuple_type",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "playground_literal",
				Pattern: "(playground_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "postfix_expression",
				Pattern: "(postfix_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "precedence_group_attribute",
				Pattern: "(precedence_group_attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "precedence_group_attributes",
				Pattern: "(precedence_group_attributes)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "precedence_group_declaration",
				Pattern: "(precedence_group_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "prefix_expression",
				Pattern: "(prefix_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_expression",

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "property_behavior_modifier",
				Pattern: "(property_behavior_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "property_declaration",
				Pattern: "(property_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"computed_property",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"pattern",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "property_modifier",
				Pattern: "(property_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "protocol_body",
				Pattern: "(protocol_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"protocol_function_declaration",

					},
					
				},
				
			},

			{
				Name: "protocol_composition_type",
				Pattern: "(protocol_composition_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "protocol_declaration",
				Pattern: "(protocol_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"protocol",

						"protocol_body",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "protocol_function_declaration",
				Pattern: "(protocol_function_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"array_type",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"dictionary_type",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"existential_type",

						"fully_open_range",

						"function_type",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"metatype",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"opaque_type",

						"open_end_range_expression",

						"open_start_range_expression",

						"optional_type",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"protocol_composition_type",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"suppressed_constraint",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "protocol_property_declaration",
				Pattern: "(protocol_property_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"pattern",

					},
					
				},
				
			},

			{
				Name: "protocol_property_requirements",
				Pattern: "(protocol_property_requirements)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					Token: "self",
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "range_expression",
				Pattern: "(range_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "raw_str_interpolation",
				Pattern: "(raw_str_interpolation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"interpolated_expression",

					},
					
				},
				
			},

			{
				Name: "raw_string_literal",
				Pattern: "(raw_string_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					Children: []string{

						"raw_str_end_part",

						"raw_str_interpolation",

						"raw_str_part",

					},
					
				},
				
			},

			{
				Name: "regex_literal",
				Pattern: "(regex_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "repeat_while_statement",
				Pattern: "(repeat_while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"array_type",

						"as",

						"as_expression",

						"assignment",

						"async",

						"availability_condition",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"case",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"dictionary_type",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"existential_type",

						"fully_open_range",

						"function_type",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"is",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"metatype",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"opaque_type",

						"open_end_range_expression",

						"open_start_range_expression",

						"optional_type",

						"pattern",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"protocol_composition_type",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"suppressed_constraint",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"tuple_type",

						"type_annotation",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

						"value_binding_pattern",

						"value_pack_expansion",

						"value_parameter_pack",

						"where_clause",

						"wildcard_pattern",

					},
					
				},
				
			},

			{
				Name: "selector_expression",
				Pattern: "(selector_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "self_expression",
				Pattern: "(self_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "setter_specifier",
				Pattern: "(setter_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "shebang_line",
				Pattern: "(shebang_line)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "simple_identifier",
				Pattern: "(simple_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "source_file",
				Pattern: "(source_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "special_literal",
				Pattern: "(special_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "statements",
				Pattern: "(statements)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "str_escaped_char",
				Pattern: "(str_escaped_char)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "subscript_declaration",
				Pattern: "(subscript_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"array_type",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"dictionary_type",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"existential_type",

						"fully_open_range",

						"function_type",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"metatype",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"opaque_type",

						"open_end_range_expression",

						"open_start_range_expression",

						"optional_type",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"protocol_composition_type",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"suppressed_constraint",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "super_expression",
				Pattern: "(super_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "suppressed_constraint",
				Pattern: "(suppressed_constraint)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "switch_entry",
				Pattern: "(switch_entry)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "switch_pattern",
				Pattern: "(switch_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					
					
				},
				
			},

			{
				Name: "switch_statement",
				Pattern: "(switch_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "ternary_expression",
				Pattern: "(ternary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "throws",
				Pattern: "(throws)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					Token: "self",
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "try_expression",
				Pattern: "(try_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "try_operator",
				Pattern: "(try_operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "tuple_expression",
				Pattern: "(tuple_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "tuple_type",
				Pattern: "(tuple_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					Token: "self",
					
					Children: []string{

						"tuple_type_item",

					},
					
				},
				
			},

			{
				Name: "tuple_type_item",
				Pattern: "(tuple_type_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"simple_identifier",

						"suppressed_constraint",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "type_annotation",
				Pattern: "(type_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					Token: "self",
					Roles: []string{

						"Type",

					},
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"suppressed_constraint",

						"tuple_type",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "type_arguments",
				Pattern: "(type_arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"suppressed_constraint",

						"tuple_type",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "type_constraint",
				Pattern: "(type_constraint)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_constraints",
				Pattern: "(type_constraints)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_identifier",
				Pattern: "(type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_modifiers",
				Pattern: "(type_modifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "type_pack_expansion",
				Pattern: "(type_pack_expansion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_parameter",
				Pattern: "(type_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"suppressed_constraint",

						"tuple_type",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "type_parameter_modifiers",
				Pattern: "(type_parameter_modifiers)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_parameter_pack",
				Pattern: "(type_parameter_pack)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_parameters",
				Pattern: "(type_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "typealias_declaration",
				Pattern: "(typealias_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"array_type",

						"dictionary_type",

						"existential_type",

						"function_type",

						"metatype",

						"opaque_type",

						"optional_type",

						"protocol_composition_type",

						"suppressed_constraint",

						"tuple_type",

						"type_identifier",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

					},
					
				},
				
			},

			{
				Name: "user_type",
				Pattern: "(user_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "value_argument",
				Pattern: "(value_argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"additive_expression",

						"array_literal",

						"as_expression",

						"assignment",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"fully_open_range",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"open_end_range_expression",

						"open_start_range_expression",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"value_argument_label",

						"value_pack_expansion",

						"value_parameter_pack",

					},
					
				},
				
			},

			{
				Name: "value_argument_label",
				Pattern: "(value_argument_label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "value_arguments",
				Pattern: "(value_arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "value_binding_pattern",
				Pattern: "(value_binding_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"let",

						"var",

					},
					
				},
				
			},

			{
				Name: "value_pack_expansion",
				Pattern: "(value_pack_expansion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "value_parameter_pack",
				Pattern: "(value_parameter_pack)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "visibility_modifier",
				Pattern: "(visibility_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "where_clause",
				Pattern: "(where_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"additive_expression",

						"array_literal",

						"array_type",

						"as",

						"as_expression",

						"assignment",

						"async",

						"availability_condition",

						"await_expression",

						"bang",

						"bin_literal",

						"bitwise_operation",

						"boolean_literal",

						"call_expression",

						"case",

						"check_expression",

						"comparison_expression",

						"conjunction_expression",

						"constructor_expression",

						"custom_operator",

						"diagnostic",

						"dictionary_literal",

						"dictionary_type",

						"directive",

						"disjunction_expression",

						"equality_expression",

						"existential_type",

						"fully_open_range",

						"function_type",

						"hex_literal",

						"if_statement",

						"infix_expression",

						"integer_literal",

						"is",

						"key_path_expression",

						"key_path_string_expression",

						"lambda_literal",

						"line_string_literal",

						"macro_invocation",

						"metatype",

						"multi_line_string_literal",

						"multiplicative_expression",

						"navigation_expression",

						"nil",

						"nil_coalescing_expression",

						"oct_literal",

						"opaque_type",

						"open_end_range_expression",

						"open_start_range_expression",

						"optional_type",

						"pattern",

						"playground_literal",

						"postfix_expression",

						"prefix_expression",

						"protocol_composition_type",

						"range_expression",

						"raw_string_literal",

						"real_literal",

						"regex_literal",

						"selector_expression",

						"self_expression",

						"simple_identifier",

						"special_literal",

						"super_expression",

						"suppressed_constraint",

						"switch_statement",

						"ternary_expression",

						"try_expression",

						"tuple_expression",

						"tuple_type",

						"type_annotation",

						"type_modifiers",

						"type_pack_expansion",

						"type_parameter_pack",

						"user_type",

						"value_binding_pattern",

						"value_pack_expansion",

						"value_parameter_pack",

						"where_clause",

						"wildcard_pattern",

					},
					
				},
				
			},

			{
				Name: "willset_clause",
				Pattern: "(willset_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "willset_didset_block",
				Pattern: "(willset_didset_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "Protocol",
				Pattern: "(Protocol)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "Type",
				Pattern: "(Type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_expression",
				Pattern: "(_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_modify",
				Pattern: "(_modify)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "actor",
				Pattern: "(actor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "any",
				Pattern: "(any)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "arch",
				Pattern: "(arch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "as",
				Pattern: "(as)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "associatedtype",
				Pattern: "(associatedtype)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "async",
				Pattern: "(async)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "available",
				Pattern: "(available)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "await",
				Pattern: "(await)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "bin_literal",
				Pattern: "(bin_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "borrowing",
				Pattern: "(borrowing)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "canImport",
				Pattern: "(canImport)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "catch_keyword",
				Pattern: "(catch_keyword)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "colorLiteral",
				Pattern: "(colorLiteral)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "column",
				Pattern: "(column)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "compiler",
				Pattern: "(compiler)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "consuming",
				Pattern: "(consuming)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "convenience",
				Pattern: "(convenience)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "default_keyword",
				Pattern: "(default_keyword)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "deinit",
				Pattern: "(deinit)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "didSet",
				Pattern: "(didSet)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "distributed",
				Pattern: "(distributed)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "dsohandle",
				Pattern: "(dsohandle)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "dynamic",
				Pattern: "(dynamic)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "each",
				Pattern: "(each)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "extension",
				Pattern: "(extension)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "externalMacro",
				Pattern: "(externalMacro)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "fallthrough",
				Pattern: "(fallthrough)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "file",
				Pattern: "(file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "fileID",
				Pattern: "(fileID)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "fileLiteral",
				Pattern: "(fileLiteral)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "filePath",
				Pattern: "(filePath)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "fileprivate",
				Pattern: "(fileprivate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "final",
				Pattern: "(final)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "func",
				Pattern: "(func)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "function",
				Pattern: "(function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "get",
				Pattern: "(get)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "guard",
				Pattern: "(guard)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "hex_literal",
				Pattern: "(hex_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "imageLiteral",
				Pattern: "(imageLiteral)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "indirect",
				Pattern: "(indirect)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "infix",
				Pattern: "(infix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "init",
				Pattern: "(init)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "inout",
				Pattern: "(inout)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "integer_literal",
				Pattern: "(integer_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "internal",
				Pattern: "(internal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "is",
				Pattern: "(is)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "keyPath",
				Pattern: "(keyPath)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "lazy",
				Pattern: "(lazy)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "let",
				Pattern: "(let)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "line",
				Pattern: "(line)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "macro",
				Pattern: "(macro)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "multiline_comment",
				Pattern: "(multiline_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "mutating",
				Pattern: "(mutating)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "nil",
				Pattern: "(nil)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "nonisolated",
				Pattern: "(nonisolated)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "nonmutating",
				Pattern: "(nonmutating)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "oct_literal",
				Pattern: "(oct_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "open",
				Pattern: "(open)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "operator",
				Pattern: "(operator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "optional",
				Pattern: "(optional)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "os",
				Pattern: "(os)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "override",
				Pattern: "(override)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "package",
				Pattern: "(package)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Package",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "postfix",
				Pattern: "(postfix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "precedencegroup",
				Pattern: "(precedencegroup)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "prefix",
				Pattern: "(prefix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "private",
				Pattern: "(private)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "protocol",
				Pattern: "(protocol)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "public",
				Pattern: "(public)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "raw_str_continuing_indicator",
				Pattern: "(raw_str_continuing_indicator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "raw_str_end_part",
				Pattern: "(raw_str_end_part)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "raw_str_interpolation_start",
				Pattern: "(raw_str_interpolation_start)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "raw_str_part",
				Pattern: "(raw_str_part)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "real_literal",
				Pattern: "(real_literal)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "repeat",
				Pattern: "(repeat)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "required",
				Pattern: "(required)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "selector",
				Pattern: "(selector)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "self",
				Pattern: "(self)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "set",
				Pattern: "(set)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "some",
				Pattern: "(some)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "statement_label",
				Pattern: "(statement_label)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "static",
				Pattern: "(static)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "struct",
				Pattern: "(struct)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "subscript",
				Pattern: "(subscript)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "super",
				Pattern: "(super)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "swift",
				Pattern: "(swift)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "switch",
				Pattern: "(switch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "targetEnvironment",
				Pattern: "(targetEnvironment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "throw_keyword",
				Pattern: "(throw_keyword)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					Token: "self",
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "typealias",
				Pattern: "(typealias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "u",
				Pattern: "(u)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unavailable",
				Pattern: "(unavailable)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unowned",
				Pattern: "(unowned)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "var",
				Pattern: "(var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "weak",
				Pattern: "(weak)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "where_keyword",
				Pattern: "(where_keyword)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "wildcard_pattern",
				Pattern: "(wildcard_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "willSet",
				Pattern: "(willSet)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "tcl",
		Extensions: []string{

			".tcl",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "argument",
				Pattern: "(argument)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"braced_word",

						"quoted_word",

						"simple_word",

					},
					
				},
				
			},

			{
				Name: "arguments",
				Pattern: "(arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "array_index",
				Pattern: "(array_index)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					
					Roles: []string{

						"Index",

					},
					
					
				},
				
			},

			{
				Name: "binop_expr",
				Pattern: "(binop_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "braced_word",
				Pattern: "(braced_word)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "braced_word_simple",
				Pattern: "(braced_word_simple)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "catch",
				Pattern: "(catch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "command",
				Pattern: "(command)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"array_index",

						"braced_word",

						"command_substitution",

						"escaped_character",

						"quoted_word",

						"simple_word",

						"unpack",

						"variable_substitution",

						"word_list",

					},
					
				},
				
			},

			{
				Name: "command_substitution",
				Pattern: "(command_substitution)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"array_index",

						"braced_word",

						"command_substitution",

						"escaped_character",

						"quoted_word",

						"simple_word",

						"unpack",

						"variable_substitution",

					},
					
				},
				
			},

			{
				Name: "elseif",
				Pattern: "(elseif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"array_index",

						"braced_word",

						"command_substitution",

						"escaped_character",

						"expr",

						"quoted_word",

						"simple_word",

						"unpack",

						"variable_substitution",

					},
					
				},
				
			},

			{
				Name: "expr",
				Pattern: "(expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "expr_cmd",
				Pattern: "(expr_cmd)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "finally",
				Pattern: "(finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "foreach",
				Pattern: "(foreach)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "global",
				Pattern: "(global)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "id",
				Pattern: "(id)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"array_index",

						"braced_word",

						"command_substitution",

						"else",

						"elseif",

						"escaped_character",

						"expr",

						"quoted_word",

						"simple_word",

						"unpack",

						"variable_substitution",

					},
					
				},
				
			},

			{
				Name: "namespace",
				Pattern: "(namespace)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "procedure",
				Pattern: "(procedure)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"arguments",

						"array_index",

						"braced_word",

						"command_substitution",

						"escaped_character",

						"quoted_word",

						"simple_word",

						"unpack",

						"variable_substitution",

					},
					
				},
				
			},

			{
				Name: "quoted_word",
				Pattern: "(quoted_word)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "regexp",
				Pattern: "(regexp)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "set",
				Pattern: "(set)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "source_file",
				Pattern: "(source_file)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ternary_expr",
				Pattern: "(ternary_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "unary_expr",
				Pattern: "(unary_expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "variable_substitution",
				Pattern: "(variable_substitution)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "word_list",
				Pattern: "(word_list)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "catch",
				Pattern: "(catch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "elseif",
				Pattern: "(elseif)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "eq",
				Pattern: "(eq)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "error",
				Pattern: "(error)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "escaped_character",
				Pattern: "(escaped_character)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expr",
				Pattern: "(expr)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "finally",
				Pattern: "(finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "foreach",
				Pattern: "(foreach)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "global",
				Pattern: "(global)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "namespace",
				Pattern: "(namespace)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "ne",
				Pattern: "(ne)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ni",
				Pattern: "(ni)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "number",
				Pattern: "(number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "on",
				Pattern: "(on)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "proc",
				Pattern: "(proc)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "regexp",
				Pattern: "(regexp)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "set",
				Pattern: "(set)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

			{
				Name: "simple_word",
				Pattern: "(simple_word)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "unpack",
				Pattern: "(unpack)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "toml",
		Extensions: []string{

			".toml",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "array",
				Pattern: "(array)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "document",
				Pattern: "(document)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "dotted_key",
				Pattern: "(dotted_key)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "float",
				Pattern: "(float)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "inline_table",
				Pattern: "(inline_table)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "integer",
				Pattern: "(integer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pair",
				Pattern: "(pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "quoted_key",
				Pattern: "(quoted_key)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "table",
				Pattern: "(table)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "table_array_element",
				Pattern: "(table_array_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "bare_key",
				Pattern: "(bare_key)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "boolean",
				Pattern: "(boolean)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "local_date",
				Pattern: "(local_date)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "local_date_time",
				Pattern: "(local_date_time)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "local_time",
				Pattern: "(local_time)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "offset_date_time",
				Pattern: "(offset_date_time)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					
					
					
					
				},
				
			},

		},
	},

	{
		Language: "tsx",
		Extensions: []string{

			".tsx",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "declaration",
				Pattern: "(declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expression",
				Pattern: "(expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pattern",
				Pattern: "(pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "primary_expression",
				Pattern: "(primary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "primary_type",
				Pattern: "(primary_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "statement",
				Pattern: "(statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "abstract_class_declaration",
				Pattern: "(abstract_class_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"class_body",

						"decorator",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "abstract_method_signature",
				Pattern: "(abstract_method_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"asserts_annotation",

						"computed_property_name",

						"formal_parameters",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "accessibility_modifier",
				Pattern: "(accessibility_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "adding_type_annotation",
				Pattern: "(adding_type_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					
					Roles: []string{

						"Type",

					},
					
					
				},
				
			},

			{
				Name: "ambient_declaration",
				Pattern: "(ambient_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "arguments",
				Pattern: "(arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "array",
				Pattern: "(array)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "array_pattern",
				Pattern: "(array_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "array_type",
				Pattern: "(array_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "arrow_function",
				Pattern: "(arrow_function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"asserts_annotation",

						"expression",

						"formal_parameters",

						"identifier",

						"statement_block",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "as_expression",
				Pattern: "(as_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "asserts",
				Pattern: "(asserts)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "asserts_annotation",
				Pattern: "(asserts_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "assignment_expression",
				Pattern: "(assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"array_pattern",

						"expression",

						"identifier",

						"member_expression",

						"non_null_expression",

						"object_pattern",

						"parenthesized_expression",

						"subscript_expression",

						"undefined",

					},
					
				},
				
			},

			{
				Name: "assignment_pattern",
				Pattern: "(assignment_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

						"Assignment",

					},
					Children: []string{

						"expression",

						"pattern",

					},
					
				},
				
			},

			{
				Name: "augmented_assignment_expression",
				Pattern: "(augmented_assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"expression",

						"identifier",

						"member_expression",

						"non_null_expression",

						"parenthesized_expression",

						"subscript_expression",

					},
					
				},
				
			},

			{
				Name: "await_expression",
				Pattern: "(await_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"in",

						"instanceof",

						"private_property_identifier",

					},
					
				},
				
			},

			{
				Name: "break_statement",
				Pattern: "(break_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Operator",

						"Break",

					},
					Children: []string{

						"statement_identifier",

					},
					
				},
				
			},

			{
				Name: "call_expression",
				Pattern: "(call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"arguments",

						"expression",

						"import",

						"template_string",

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "call_signature",
				Pattern: "(call_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

						"Call",

					},
					Children: []string{

						"asserts_annotation",

						"formal_parameters",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "catch_clause",
				Pattern: "(catch_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					Children: []string{

						"array_pattern",

						"identifier",

						"object_pattern",

						"statement_block",

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"class_body",

						"decorator",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "class_body",
				Pattern: "(class_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"decorator",

					},
					
				},
				
			},

			{
				Name: "class_declaration",
				Pattern: "(class_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Body",

						"Class",

						"Declaration",

					},
					Children: []string{

						"class_body",

						"decorator",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "class_heritage",
				Pattern: "(class_heritage)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "class_static_block",
				Pattern: "(class_static_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "computed_property_name",
				Pattern: "(computed_property_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "conditional_type",
				Pattern: "(conditional_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"type",

					},
					
				},
				
			},

			{
				Name: "constraint",
				Pattern: "(constraint)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "construct_signature",
				Pattern: "(construct_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"formal_parameters",

						"type_annotation",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "constructor_type",
				Pattern: "(constructor_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"formal_parameters",

						"type",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "continue_statement",
				Pattern: "(continue_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					Children: []string{

						"statement_identifier",

					},
					
				},
				
			},

			{
				Name: "debugger_statement",
				Pattern: "(debugger_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "decorator",
				Pattern: "(decorator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Decorator",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "default_type",
				Pattern: "(default_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "do_statement",
				Pattern: "(do_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "else_clause",
				Pattern: "(else_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "empty_statement",
				Pattern: "(empty_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum_assignment",
				Pattern: "(enum_assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"computed_property_name",

						"expression",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "enum_body",
				Pattern: "(enum_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"computed_property_name",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "enum_declaration",
				Pattern: "(enum_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"enum_body",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "existential_type",
				Pattern: "(existential_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "child:identifier",
					Roles: []string{

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "export_clause",
				Pattern: "(export_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "export_specifier",
				Pattern: "(export_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "export_statement",
				Pattern: "(export_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"declaration",

						"decorator",

						"expression",

						"string",

					},
					
				},
				
			},

			{
				Name: "expression_statement",
				Pattern: "(expression_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "extends_clause",
				Pattern: "(extends_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "extends_type_clause",
				Pattern: "(extends_type_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"generic_type",

						"nested_type_identifier",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "finally_clause",
				Pattern: "(finally_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					
					Roles: []string{

						"Finally",

					},
					Children: []string{

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "flow_maybe_type",
				Pattern: "(flow_maybe_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "for_in_statement",
				Pattern: "(for_in_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"array_pattern",

						"const",

						"expression",

						"identifier",

						"in",

						"let",

						"member_expression",

						"non_null_expression",

						"object_pattern",

						"of",

						"parenthesized_expression",

						"sequence_expression",

						"statement",

						"subscript_expression",

						"undefined",

						"var",

					},
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"empty_statement",

						"expression",

						"lexical_declaration",

						"sequence_expression",

						"statement",

						"variable_declaration",

					},
					
				},
				
			},

			{
				Name: "formal_parameters",
				Pattern: "(formal_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "function_declaration",
				Pattern: "(function_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"asserts_annotation",

						"formal_parameters",

						"identifier",

						"statement_block",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "function_expression",
				Pattern: "(function_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"asserts_annotation",

						"formal_parameters",

						"identifier",

						"statement_block",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "function_signature",
				Pattern: "(function_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"asserts_annotation",

						"formal_parameters",

						"identifier",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "function_type",
				Pattern: "(function_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"asserts",

						"formal_parameters",

						"type",

						"type_parameters",

						"type_predicate",

					},
					
				},
				
			},

			{
				Name: "generator_function",
				Pattern: "(generator_function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Function",

						"Declaration",

					},
					Children: []string{

						"asserts_annotation",

						"formal_parameters",

						"identifier",

						"statement_block",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "generator_function_declaration",
				Pattern: "(generator_function_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"asserts_annotation",

						"formal_parameters",

						"identifier",

						"statement_block",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "generic_type",
				Pattern: "(generic_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "child:identifier",
					
					Children: []string{

						"nested_type_identifier",

						"type_arguments",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					Roles: []string{

						"Condition",

					},
					Children: []string{

						"else_clause",

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "implements_clause",
				Pattern: "(implements_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_alias",
				Pattern: "(import_alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_attribute",
				Pattern: "(import_attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_clause",
				Pattern: "(import_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_require_clause",
				Pattern: "(import_require_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"string",

					},
					
				},
				
			},

			{
				Name: "import_specifier",
				Pattern: "(import_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "import_statement",
				Pattern: "(import_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"string",

					},
					
				},
				
			},

			{
				Name: "index_signature",
				Pattern: "(index_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					
					Roles: []string{

						"Index",

					},
					Children: []string{

						"adding_type_annotation",

						"identifier",

						"omitting_type_annotation",

						"opting_type_annotation",

						"type",

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "index_type_query",
				Pattern: "(index_type_query)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					Token: "self",
					Roles: []string{

						"Index",

					},
					
					
				},
				
			},

			{
				Name: "infer_type",
				Pattern: "(infer_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "instantiation_expression",
				Pattern: "(instantiation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

						"import",

						"member_expression",

						"subscript_expression",

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "interface_body",
				Pattern: "(interface_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "interface_declaration",
				Pattern: "(interface_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Body",

						"Interface",

						"Declaration",

					},
					Children: []string{

						"interface_body",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "internal_module",
				Pattern: "(internal_module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					Children: []string{

						"identifier",

						"nested_identifier",

						"statement_block",

						"string",

					},
					
				},
				
			},

			{
				Name: "intersection_type",
				Pattern: "(intersection_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "labeled_statement",
				Pattern: "(labeled_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"statement",

						"statement_identifier",

					},
					
				},
				
			},

			{
				Name: "lexical_declaration",
				Pattern: "(lexical_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"const",

						"let",

					},
					
				},
				
			},

			{
				Name: "literal_type",
				Pattern: "(literal_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "lookup_type",
				Pattern: "(lookup_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "mapped_type_clause",
				Pattern: "(mapped_type_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "member_expression",
				Pattern: "(member_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

						"import",

						"optional_chain",

						"private_property_identifier",

						"property_identifier",

					},
					
				},
				
			},

			{
				Name: "meta_property",
				Pattern: "(meta_property)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "method_definition",
				Pattern: "(method_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"asserts_annotation",

						"computed_property_name",

						"formal_parameters",

						"number",

						"private_property_identifier",

						"property_identifier",

						"statement_block",

						"string",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "method_signature",
				Pattern: "(method_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"asserts_annotation",

						"computed_property_name",

						"formal_parameters",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "module",
				Pattern: "(module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"identifier",

						"nested_identifier",

						"statement_block",

						"string",

					},
					
				},
				
			},

			{
				Name: "named_imports",
				Pattern: "(named_imports)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "namespace_export",
				Pattern: "(namespace_export)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "namespace_import",
				Pattern: "(namespace_import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "nested_identifier",
				Pattern: "(nested_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"identifier",

						"member_expression",

						"property_identifier",

					},
					
				},
				
			},

			{
				Name: "nested_type_identifier",
				Pattern: "(nested_type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"identifier",

						"nested_identifier",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "new_expression",
				Pattern: "(new_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					Children: []string{

						"arguments",

						"primary_expression",

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "non_null_expression",
				Pattern: "(non_null_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "object",
				Pattern: "(object)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "object_assignment_pattern",
				Pattern: "(object_assignment_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"array_pattern",

						"expression",

						"object_pattern",

						"shorthand_property_identifier_pattern",

					},
					
				},
				
			},

			{
				Name: "object_pattern",
				Pattern: "(object_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "object_type",
				Pattern: "(object_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "omitting_type_annotation",
				Pattern: "(omitting_type_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					Token: "self",
					Roles: []string{

						"Type",

					},
					
					
				},
				
			},

			{
				Name: "opting_type_annotation",
				Pattern: "(opting_type_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					
					Roles: []string{

						"Type",

					},
					
					
				},
				
			},

			{
				Name: "optional_chain",
				Pattern: "(optional_chain)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "optional_parameter",
				Pattern: "(optional_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"decorator",

						"expression",

						"identifier",

						"pattern",

						"this",

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "optional_type",
				Pattern: "(optional_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "override_modifier",
				Pattern: "(override_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "pair",
				Pattern: "(pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"computed_property_name",

						"expression",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "pair_pattern",
				Pattern: "(pair_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"assignment_pattern",

						"computed_property_name",

						"number",

						"pattern",

						"private_property_identifier",

						"property_identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					Children: []string{

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "parenthesized_type",
				Pattern: "(parenthesized_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "predefined_type",
				Pattern: "(predefined_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "program",
				Pattern: "(program)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "property_signature",
				Pattern: "(property_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"computed_property_name",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "public_field_definition",
				Pattern: "(public_field_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"computed_property_name",

						"decorator",

						"expression",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "readonly_type",
				Pattern: "(readonly_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "regex",
				Pattern: "(regex)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"regex_flags",

						"regex_pattern",

					},
					
				},
				
			},

			{
				Name: "required_parameter",
				Pattern: "(required_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"decorator",

						"expression",

						"identifier",

						"pattern",

						"rest_pattern",

						"this",

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "rest_pattern",
				Pattern: "(rest_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "rest_type",
				Pattern: "(rest_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "return_statement",
				Pattern: "(return_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "satisfies_expression",
				Pattern: "(satisfies_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "sequence_expression",
				Pattern: "(sequence_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "spread_element",
				Pattern: "(spread_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Spread",
					Token: "self",
					Roles: []string{

						"Spread",

					},
					
					
				},
				
			},

			{
				Name: "statement_block",
				Pattern: "(statement_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "subscript_expression",
				Pattern: "(subscript_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"number",

						"optional_chain",

						"predefined_type",

						"sequence_expression",

						"string",

					},
					
				},
				
			},

			{
				Name: "switch_body",
				Pattern: "(switch_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "switch_case",
				Pattern: "(switch_case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					Children: []string{

						"expression",

						"sequence_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "switch_default",
				Pattern: "(switch_default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"statement",

					},
					
				},
				
			},

			{
				Name: "switch_statement",
				Pattern: "(switch_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					Children: []string{

						"parenthesized_expression",

						"switch_body",

					},
					
				},
				
			},

			{
				Name: "template_literal_type",
				Pattern: "(template_literal_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Branch",

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "template_string",
				Pattern: "(template_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "template_substitution",
				Pattern: "(template_substitution)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "template_type",
				Pattern: "(template_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ternary_expression",
				Pattern: "(ternary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "throw_statement",
				Pattern: "(throw_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "try_statement",
				Pattern: "(try_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					Children: []string{

						"catch_clause",

						"finally_clause",

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "tuple_type",
				Pattern: "(tuple_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					
					
				},
				
			},

			{
				Name: "type_alias_declaration",
				Pattern: "(type_alias_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"type",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "type_annotation",
				Pattern: "(type_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					
					Roles: []string{

						"Type",

					},
					
					
				},
				
			},

			{
				Name: "type_arguments",
				Pattern: "(type_arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_assertion",
				Pattern: "(type_assertion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_parameter",
				Pattern: "(type_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"constraint",

						"default_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "type_parameters",
				Pattern: "(type_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_predicate",
				Pattern: "(type_predicate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

						"this",

						"type",

					},
					
				},
				
			},

			{
				Name: "type_predicate_annotation",
				Pattern: "(type_predicate_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_query",
				Pattern: "(type_query)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unary_expression",
				Pattern: "(unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"delete",

						"expression",

						"number",

						"typeof",

						"void",

					},
					
				},
				
			},

			{
				Name: "union_type",
				Pattern: "(union_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "UnaryOp",
					Token: "self",
					Roles: []string{

						"Operator",

					},
					
					
				},
				
			},

			{
				Name: "update_expression",
				Pattern: "(update_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "variable_declaration",
				Pattern: "(variable_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "variable_declarator",
				Pattern: "(variable_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"array_pattern",

						"expression",

						"identifier",

						"object_pattern",

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "with_statement",
				Pattern: "(with_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "yield_expression",
				Pattern: "(yield_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "abstract",
				Pattern: "(abstract)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "accessor",
				Pattern: "(accessor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "any",
				Pattern: "(any)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "as",
				Pattern: "(as)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "assert",
				Pattern: "(assert)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "asserts",
				Pattern: "(asserts)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "async",
				Pattern: "(async)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "await",
				Pattern: "(await)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "boolean",
				Pattern: "(boolean)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "catch",
				Pattern: "(catch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					Token: "self",
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "const",
				Pattern: "(const)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "debugger",
				Pattern: "(debugger)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "declare",
				Pattern: "(declare)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "delete",
				Pattern: "(delete)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "export",
				Pattern: "(export)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extends",
				Pattern: "(extends)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "finally",
				Pattern: "(finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "from",
				Pattern: "(from)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "function",
				Pattern: "(function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "get",
				Pattern: "(get)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "global",
				Pattern: "(global)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "hash_bang_line",
				Pattern: "(hash_bang_line)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "html_comment",
				Pattern: "(html_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "implements",
				Pattern: "(implements)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "infer",
				Pattern: "(infer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "instanceof",
				Pattern: "(instanceof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "interface",
				Pattern: "(interface)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "is",
				Pattern: "(is)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyof",
				Pattern: "(keyof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "let",
				Pattern: "(let)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "meta",
				Pattern: "(meta)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "module",
				Pattern: "(module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "namespace",
				Pattern: "(namespace)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "never",
				Pattern: "(never)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "new",
				Pattern: "(new)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "null",
				Pattern: "(null)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "number",
				Pattern: "(number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "number",
				Pattern: "(number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "object",
				Pattern: "(object)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "of",
				Pattern: "(of)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "override",
				Pattern: "(override)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "private",
				Pattern: "(private)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "private_property_identifier",
				Pattern: "(private_property_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "property_identifier",
				Pattern: "(property_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "protected",
				Pattern: "(protected)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "public",
				Pattern: "(public)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "readonly",
				Pattern: "(readonly)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "regex_flags",
				Pattern: "(regex_flags)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "regex_pattern",
				Pattern: "(regex_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "require",
				Pattern: "(require)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "satisfies",
				Pattern: "(satisfies)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "set",
				Pattern: "(set)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "shorthand_property_identifier",
				Pattern: "(shorthand_property_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "shorthand_property_identifier_pattern",
				Pattern: "(shorthand_property_identifier_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "statement_identifier",
				Pattern: "(statement_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "static",
				Pattern: "(static)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string_fragment",
				Pattern: "(string_fragment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "super",
				Pattern: "(super)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "switch",
				Pattern: "(switch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "symbol",
				Pattern: "(symbol)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "target",
				Pattern: "(target)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "this",
				Pattern: "(this)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "this_type",
				Pattern: "(this_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "throw",
				Pattern: "(throw)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_identifier",
				Pattern: "(type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "typeof",
				Pattern: "(typeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "undefined",
				Pattern: "(undefined)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unknown",
				Pattern: "(unknown)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "using",
				Pattern: "(using)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "var",
				Pattern: "(var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "void",
				Pattern: "(void)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "with",
				Pattern: "(with)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "typescript",
		Extensions: []string{

			".ts",

			".tsx",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "declaration",
				Pattern: "(declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "expression",
				Pattern: "(expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "pattern",
				Pattern: "(pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "primary_expression",
				Pattern: "(primary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "primary_type",
				Pattern: "(primary_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "statement",
				Pattern: "(statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "abstract_class_declaration",
				Pattern: "(abstract_class_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"class_body",

						"decorator",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "abstract_method_signature",
				Pattern: "(abstract_method_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"asserts_annotation",

						"computed_property_name",

						"formal_parameters",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "accessibility_modifier",
				Pattern: "(accessibility_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "adding_type_annotation",
				Pattern: "(adding_type_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					
					Roles: []string{

						"Type",

					},
					
					
				},
				
			},

			{
				Name: "ambient_declaration",
				Pattern: "(ambient_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "arguments",
				Pattern: "(arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "array",
				Pattern: "(array)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "array_pattern",
				Pattern: "(array_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "array_type",
				Pattern: "(array_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "arrow_function",
				Pattern: "(arrow_function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Lambda",
					
					Roles: []string{

						"Lambda",

					},
					Children: []string{

						"asserts_annotation",

						"expression",

						"formal_parameters",

						"identifier",

						"statement_block",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "as_expression",
				Pattern: "(as_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Cast",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "asserts",
				Pattern: "(asserts)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "asserts_annotation",
				Pattern: "(asserts_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "assignment_expression",
				Pattern: "(assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"array_pattern",

						"expression",

						"identifier",

						"member_expression",

						"non_null_expression",

						"object_pattern",

						"parenthesized_expression",

						"subscript_expression",

						"undefined",

					},
					
				},
				
			},

			{
				Name: "assignment_pattern",
				Pattern: "(assignment_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					Token: "self",
					Roles: []string{

						"Assignment",

						"Assignment",

					},
					Children: []string{

						"expression",

						"pattern",

					},
					
				},
				
			},

			{
				Name: "augmented_assignment_expression",
				Pattern: "(augmented_assignment_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"expression",

						"identifier",

						"member_expression",

						"non_null_expression",

						"parenthesized_expression",

						"subscript_expression",

					},
					
				},
				
			},

			{
				Name: "await_expression",
				Pattern: "(await_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "binary_expression",
				Pattern: "(binary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"in",

						"instanceof",

						"private_property_identifier",

					},
					
				},
				
			},

			{
				Name: "break_statement",
				Pattern: "(break_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Operator",

						"Break",

					},
					Children: []string{

						"statement_identifier",

					},
					
				},
				
			},

			{
				Name: "call_expression",
				Pattern: "(call_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					
					Roles: []string{

						"Call",

					},
					Children: []string{

						"arguments",

						"expression",

						"import",

						"template_string",

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "call_signature",
				Pattern: "(call_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Call",
					Token: "self",
					Roles: []string{

						"Call",

						"Call",

					},
					Children: []string{

						"asserts_annotation",

						"formal_parameters",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "catch_clause",
				Pattern: "(catch_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					
					Roles: []string{

						"Catch",

					},
					Children: []string{

						"array_pattern",

						"identifier",

						"object_pattern",

						"statement_block",

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"class_body",

						"decorator",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "class_body",
				Pattern: "(class_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"decorator",

					},
					
				},
				
			},

			{
				Name: "class_declaration",
				Pattern: "(class_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Body",

						"Class",

						"Declaration",

					},
					Children: []string{

						"class_body",

						"decorator",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "class_heritage",
				Pattern: "(class_heritage)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "class_static_block",
				Pattern: "(class_static_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					Token: "self",
					Roles: []string{

						"Class",

						"Declaration",

					},
					Children: []string{

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "computed_property_name",
				Pattern: "(computed_property_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "conditional_type",
				Pattern: "(conditional_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"type",

					},
					
				},
				
			},

			{
				Name: "constraint",
				Pattern: "(constraint)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "construct_signature",
				Pattern: "(construct_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					Token: "self",
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"formal_parameters",

						"type_annotation",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "constructor_type",
				Pattern: "(constructor_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Struct",
					
					Roles: []string{

						"Struct",

						"Declaration",

					},
					Children: []string{

						"formal_parameters",

						"type",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "continue_statement",
				Pattern: "(continue_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					Children: []string{

						"statement_identifier",

					},
					
				},
				
			},

			{
				Name: "debugger_statement",
				Pattern: "(debugger_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "decorator",
				Pattern: "(decorator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Decorator",
					Token: "self",
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "default_type",
				Pattern: "(default_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "do_statement",
				Pattern: "(do_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "else_clause",
				Pattern: "(else_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "empty_statement",
				Pattern: "(empty_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum_assignment",
				Pattern: "(enum_assignment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"computed_property_name",

						"expression",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "enum_body",
				Pattern: "(enum_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"computed_property_name",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "enum_declaration",
				Pattern: "(enum_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					Children: []string{

						"enum_body",

						"identifier",

					},
					
				},
				
			},

			{
				Name: "existential_type",
				Pattern: "(existential_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "child:identifier",
					Roles: []string{

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "export_clause",
				Pattern: "(export_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "export_specifier",
				Pattern: "(export_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "export_statement",
				Pattern: "(export_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"declaration",

						"decorator",

						"expression",

						"string",

					},
					
				},
				
			},

			{
				Name: "expression_statement",
				Pattern: "(expression_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "extends_clause",
				Pattern: "(extends_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "extends_type_clause",
				Pattern: "(extends_type_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"generic_type",

						"nested_type_identifier",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "finally_clause",
				Pattern: "(finally_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					
					Roles: []string{

						"Finally",

					},
					Children: []string{

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "flow_maybe_type",
				Pattern: "(flow_maybe_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "for_in_statement",
				Pattern: "(for_in_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"array_pattern",

						"const",

						"expression",

						"identifier",

						"in",

						"let",

						"member_expression",

						"non_null_expression",

						"object_pattern",

						"of",

						"parenthesized_expression",

						"sequence_expression",

						"statement",

						"subscript_expression",

						"undefined",

						"var",

					},
					
				},
				
			},

			{
				Name: "for_statement",
				Pattern: "(for_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"empty_statement",

						"expression",

						"lexical_declaration",

						"sequence_expression",

						"statement",

						"variable_declaration",

					},
					
				},
				
			},

			{
				Name: "formal_parameters",
				Pattern: "(formal_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "function_declaration",
				Pattern: "(function_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"asserts_annotation",

						"formal_parameters",

						"identifier",

						"statement_block",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "function_expression",
				Pattern: "(function_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"asserts_annotation",

						"formal_parameters",

						"identifier",

						"statement_block",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "function_signature",
				Pattern: "(function_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"asserts_annotation",

						"formal_parameters",

						"identifier",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "function_type",
				Pattern: "(function_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"asserts",

						"formal_parameters",

						"type",

						"type_parameters",

						"type_predicate",

					},
					
				},
				
			},

			{
				Name: "generator_function",
				Pattern: "(generator_function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Function",

						"Declaration",

					},
					Children: []string{

						"asserts_annotation",

						"formal_parameters",

						"identifier",

						"statement_block",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "generator_function_declaration",
				Pattern: "(generator_function_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					Children: []string{

						"asserts_annotation",

						"formal_parameters",

						"identifier",

						"statement_block",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "generic_type",
				Pattern: "(generic_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "child:identifier",
					
					Children: []string{

						"nested_type_identifier",

						"type_arguments",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "identifier",
				Pattern: "(identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "if_statement",
				Pattern: "(if_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					Token: "self",
					Roles: []string{

						"Condition",

					},
					Children: []string{

						"else_clause",

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "implements_clause",
				Pattern: "(implements_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_alias",
				Pattern: "(import_alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_attribute",
				Pattern: "(import_attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_clause",
				Pattern: "(import_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "import_require_clause",
				Pattern: "(import_require_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"string",

					},
					
				},
				
			},

			{
				Name: "import_specifier",
				Pattern: "(import_specifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "import_statement",
				Pattern: "(import_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"string",

					},
					
				},
				
			},

			{
				Name: "index_signature",
				Pattern: "(index_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					
					Roles: []string{

						"Index",

					},
					Children: []string{

						"adding_type_annotation",

						"identifier",

						"omitting_type_annotation",

						"opting_type_annotation",

						"type",

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "index_type_query",
				Pattern: "(index_type_query)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Index",
					Token: "self",
					Roles: []string{

						"Index",

					},
					
					
				},
				
			},

			{
				Name: "infer_type",
				Pattern: "(infer_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "instantiation_expression",
				Pattern: "(instantiation_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

						"import",

						"member_expression",

						"subscript_expression",

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "interface_body",
				Pattern: "(interface_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "interface_declaration",
				Pattern: "(interface_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Body",

						"Interface",

						"Declaration",

					},
					Children: []string{

						"interface_body",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "internal_module",
				Pattern: "(internal_module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					Children: []string{

						"identifier",

						"nested_identifier",

						"statement_block",

						"string",

					},
					
				},
				
			},

			{
				Name: "intersection_type",
				Pattern: "(intersection_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "labeled_statement",
				Pattern: "(labeled_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"statement",

						"statement_identifier",

					},
					
				},
				
			},

			{
				Name: "lexical_declaration",
				Pattern: "(lexical_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"const",

						"let",

					},
					
				},
				
			},

			{
				Name: "literal_type",
				Pattern: "(literal_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "lookup_type",
				Pattern: "(lookup_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "mapped_type_clause",
				Pattern: "(mapped_type_clause)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "member_expression",
				Pattern: "(member_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

						"import",

						"optional_chain",

						"private_property_identifier",

						"property_identifier",

					},
					
				},
				
			},

			{
				Name: "meta_property",
				Pattern: "(meta_property)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					
					Roles: []string{

						"Member",

					},
					
					
				},
				
			},

			{
				Name: "method_definition",
				Pattern: "(method_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					Token: "self",
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"asserts_annotation",

						"computed_property_name",

						"formal_parameters",

						"number",

						"private_property_identifier",

						"property_identifier",

						"statement_block",

						"string",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "method_signature",
				Pattern: "(method_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Method",
					
					Roles: []string{

						"Function",

						"Declaration",

						"Member",

					},
					Children: []string{

						"asserts_annotation",

						"computed_property_name",

						"formal_parameters",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

						"type_annotation",

						"type_parameters",

						"type_predicate_annotation",

					},
					
				},
				
			},

			{
				Name: "module",
				Pattern: "(module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					Token: "self",
					Roles: []string{

						"Module",

					},
					Children: []string{

						"identifier",

						"nested_identifier",

						"statement_block",

						"string",

					},
					
				},
				
			},

			{
				Name: "named_imports",
				Pattern: "(named_imports)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "namespace_export",
				Pattern: "(namespace_export)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "namespace_import",
				Pattern: "(namespace_import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "nested_identifier",
				Pattern: "(nested_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					Children: []string{

						"identifier",

						"member_expression",

						"property_identifier",

					},
					
				},
				
			},

			{
				Name: "nested_type_identifier",
				Pattern: "(nested_type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					Children: []string{

						"identifier",

						"nested_identifier",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "new_expression",
				Pattern: "(new_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					Children: []string{

						"arguments",

						"primary_expression",

						"type_arguments",

					},
					
				},
				
			},

			{
				Name: "non_null_expression",
				Pattern: "(non_null_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "object",
				Pattern: "(object)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "object_assignment_pattern",
				Pattern: "(object_assignment_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Assignment",
					
					Roles: []string{

						"Assignment",

					},
					Children: []string{

						"array_pattern",

						"expression",

						"object_pattern",

						"shorthand_property_identifier_pattern",

					},
					
				},
				
			},

			{
				Name: "object_pattern",
				Pattern: "(object_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "object_type",
				Pattern: "(object_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "omitting_type_annotation",
				Pattern: "(omitting_type_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					Token: "self",
					Roles: []string{

						"Type",

					},
					
					
				},
				
			},

			{
				Name: "opting_type_annotation",
				Pattern: "(opting_type_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					
					Roles: []string{

						"Type",

					},
					
					
				},
				
			},

			{
				Name: "optional_chain",
				Pattern: "(optional_chain)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "optional_parameter",
				Pattern: "(optional_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"decorator",

						"expression",

						"identifier",

						"pattern",

						"this",

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "optional_type",
				Pattern: "(optional_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "override_modifier",
				Pattern: "(override_modifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "pair",
				Pattern: "(pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"computed_property_name",

						"expression",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "pair_pattern",
				Pattern: "(pair_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					Children: []string{

						"assignment_pattern",

						"computed_property_name",

						"number",

						"pattern",

						"private_property_identifier",

						"property_identifier",

						"string",

					},
					
				},
				
			},

			{
				Name: "parenthesized_expression",
				Pattern: "(parenthesized_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					Children: []string{

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "parenthesized_type",
				Pattern: "(parenthesized_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "predefined_type",
				Pattern: "(predefined_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "program",
				Pattern: "(program)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "property_signature",
				Pattern: "(property_signature)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Property",
					Token: "self",
					Roles: []string{

						"Member",

					},
					Children: []string{

						"computed_property_name",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "public_field_definition",
				Pattern: "(public_field_definition)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Field",
					
					Roles: []string{

						"Member",

					},
					Children: []string{

						"computed_property_name",

						"decorator",

						"expression",

						"number",

						"private_property_identifier",

						"property_identifier",

						"string",

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "readonly_type",
				Pattern: "(readonly_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "regex",
				Pattern: "(regex)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"regex_flags",

						"regex_pattern",

					},
					
				},
				
			},

			{
				Name: "required_parameter",
				Pattern: "(required_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"decorator",

						"expression",

						"identifier",

						"pattern",

						"rest_pattern",

						"this",

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "rest_pattern",
				Pattern: "(rest_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "rest_type",
				Pattern: "(rest_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "return_statement",
				Pattern: "(return_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "satisfies_expression",
				Pattern: "(satisfies_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "sequence_expression",
				Pattern: "(sequence_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "spread_element",
				Pattern: "(spread_element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Spread",
					Token: "self",
					Roles: []string{

						"Spread",

					},
					
					
				},
				
			},

			{
				Name: "statement_block",
				Pattern: "(statement_block)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "subscript_expression",
				Pattern: "(subscript_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

						"number",

						"optional_chain",

						"predefined_type",

						"sequence_expression",

						"string",

					},
					
				},
				
			},

			{
				Name: "switch_body",
				Pattern: "(switch_body)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "switch_case",
				Pattern: "(switch_case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					Children: []string{

						"expression",

						"sequence_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "switch_default",
				Pattern: "(switch_default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					Roles: []string{

						"Branch",

					},
					Children: []string{

						"statement",

					},
					
				},
				
			},

			{
				Name: "switch_statement",
				Pattern: "(switch_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					
					
					Children: []string{

						"parenthesized_expression",

						"switch_body",

					},
					
				},
				
			},

			{
				Name: "template_literal_type",
				Pattern: "(template_literal_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Branch",

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "template_string",
				Pattern: "(template_string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "template_substitution",
				Pattern: "(template_substitution)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "template_type",
				Pattern: "(template_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ternary_expression",
				Pattern: "(ternary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "throw_statement",
				Pattern: "(throw_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "try_statement",
				Pattern: "(try_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					Token: "self",
					Roles: []string{

						"Try",

					},
					Children: []string{

						"catch_clause",

						"finally_clause",

						"statement_block",

					},
					
				},
				
			},

			{
				Name: "tuple_type",
				Pattern: "(tuple_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Tuple",
					
					
					
					
				},
				
			},

			{
				Name: "type_alias_declaration",
				Pattern: "(type_alias_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"type",

						"type_identifier",

						"type_parameters",

					},
					
				},
				
			},

			{
				Name: "type_annotation",
				Pattern: "(type_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					
					Roles: []string{

						"Type",

					},
					
					
				},
				
			},

			{
				Name: "type_arguments",
				Pattern: "(type_arguments)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_assertion",
				Pattern: "(type_assertion)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_parameter",
				Pattern: "(type_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					Children: []string{

						"constraint",

						"default_type",

						"type_identifier",

					},
					
				},
				
			},

			{
				Name: "type_parameters",
				Pattern: "(type_parameters)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "type_predicate",
				Pattern: "(type_predicate)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"identifier",

						"this",

						"type",

					},
					
				},
				
			},

			{
				Name: "type_predicate_annotation",
				Pattern: "(type_predicate_annotation)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "type_query",
				Pattern: "(type_query)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "TypeAnnotation",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "unary_expression",
				Pattern: "(unary_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"delete",

						"expression",

						"number",

						"typeof",

						"void",

					},
					
				},
				
			},

			{
				Name: "union_type",
				Pattern: "(union_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "UnaryOp",
					Token: "self",
					Roles: []string{

						"Operator",

					},
					
					
				},
				
			},

			{
				Name: "update_expression",
				Pattern: "(update_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"expression",

					},
					
				},
				
			},

			{
				Name: "variable_declaration",
				Pattern: "(variable_declaration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					Token: "self",
					Roles: []string{

						"Variable",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "variable_declarator",
				Pattern: "(variable_declarator)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Variable",
					
					Roles: []string{

						"Variable",

						"Declaration",

					},
					Children: []string{

						"array_pattern",

						"expression",

						"identifier",

						"object_pattern",

						"type_annotation",

					},
					
				},
				
			},

			{
				Name: "while_statement",
				Pattern: "(while_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "with_statement",
				Pattern: "(with_statement)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"parenthesized_expression",

						"statement",

					},
					
				},
				
			},

			{
				Name: "yield_expression",
				Pattern: "(yield_expression)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

			{
				Name: "abstract",
				Pattern: "(abstract)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "accessor",
				Pattern: "(accessor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "any",
				Pattern: "(any)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "as",
				Pattern: "(as)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "assert",
				Pattern: "(assert)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "asserts",
				Pattern: "(asserts)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "async",
				Pattern: "(async)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "await",
				Pattern: "(await)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Await",
					Token: "self",
					Roles: []string{

						"Await",

					},
					
					
				},
				
			},

			{
				Name: "boolean",
				Pattern: "(boolean)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "break",
				Pattern: "(break)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Break",
					Token: "self",
					Roles: []string{

						"Break",

					},
					
					
				},
				
			},

			{
				Name: "case",
				Pattern: "(case)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Case",
					
					Roles: []string{

						"Branch",

					},
					
					
				},
				
			},

			{
				Name: "catch",
				Pattern: "(catch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Catch",
					Token: "self",
					Roles: []string{

						"Catch",

					},
					
					
				},
				
			},

			{
				Name: "class",
				Pattern: "(class)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Class",
					
					Roles: []string{

						"Class",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "const",
				Pattern: "(const)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "continue",
				Pattern: "(continue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Continue",
					Token: "self",
					Roles: []string{

						"Continue",

					},
					
					
				},
				
			},

			{
				Name: "debugger",
				Pattern: "(debugger)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "declare",
				Pattern: "(declare)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "default",
				Pattern: "(default)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "delete",
				Pattern: "(delete)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "do",
				Pattern: "(do)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "else",
				Pattern: "(else)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "enum",
				Pattern: "(enum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "export",
				Pattern: "(export)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "extends",
				Pattern: "(extends)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "false",
				Pattern: "(false)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "finally",
				Pattern: "(finally)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Finally",
					Token: "self",
					Roles: []string{

						"Finally",

					},
					
					
				},
				
			},

			{
				Name: "for",
				Pattern: "(for)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "from",
				Pattern: "(from)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "function",
				Pattern: "(function)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Function",
					
					Roles: []string{

						"Function",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "get",
				Pattern: "(get)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "global",
				Pattern: "(global)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "hash_bang_line",
				Pattern: "(hash_bang_line)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "html_comment",
				Pattern: "(html_comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "if",
				Pattern: "(if)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "implements",
				Pattern: "(implements)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "import",
				Pattern: "(import)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Import",
					Token: "self",
					Roles: []string{

						"Import",

					},
					
					
				},
				
			},

			{
				Name: "in",
				Pattern: "(in)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "infer",
				Pattern: "(infer)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "instanceof",
				Pattern: "(instanceof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "interface",
				Pattern: "(interface)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Interface",
					Token: "self",
					Roles: []string{

						"Interface",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "is",
				Pattern: "(is)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "keyof",
				Pattern: "(keyof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "let",
				Pattern: "(let)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "meta",
				Pattern: "(meta)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "module",
				Pattern: "(module)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Module",
					
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "namespace",
				Pattern: "(namespace)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Namespace",
					Token: "self",
					Roles: []string{

						"Module",

					},
					
					
				},
				
			},

			{
				Name: "never",
				Pattern: "(never)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "new",
				Pattern: "(new)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "null",
				Pattern: "(null)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "number",
				Pattern: "(number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "number",
				Pattern: "(number)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "object",
				Pattern: "(object)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "of",
				Pattern: "(of)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "override",
				Pattern: "(override)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "private",
				Pattern: "(private)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "private_property_identifier",
				Pattern: "(private_property_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "property_identifier",
				Pattern: "(property_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "protected",
				Pattern: "(protected)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "public",
				Pattern: "(public)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "readonly",
				Pattern: "(readonly)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "regex_flags",
				Pattern: "(regex_flags)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "regex_pattern",
				Pattern: "(regex_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Pattern",
					Token: "self",
					Roles: []string{

						"Pattern",

					},
					
					
				},
				
			},

			{
				Name: "require",
				Pattern: "(require)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "return",
				Pattern: "(return)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Return",
					Token: "self",
					Roles: []string{

						"Return",

					},
					
					
				},
				
			},

			{
				Name: "satisfies",
				Pattern: "(satisfies)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "set",
				Pattern: "(set)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Set",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "shorthand_property_identifier",
				Pattern: "(shorthand_property_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "shorthand_property_identifier_pattern",
				Pattern: "(shorthand_property_identifier_pattern)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "statement_identifier",
				Pattern: "(statement_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "If",
					
					
					
					
				},
				
			},

			{
				Name: "static",
				Pattern: "(static)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					Token: "self",
					Roles: []string{

						"Reference",

					},
					
					
				},
				
			},

			{
				Name: "string",
				Pattern: "(string)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "string_fragment",
				Pattern: "(string_fragment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "super",
				Pattern: "(super)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "switch",
				Pattern: "(switch)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Switch",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "symbol",
				Pattern: "(symbol)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "target",
				Pattern: "(target)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "this",
				Pattern: "(this)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "this_type",
				Pattern: "(this_type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "throw",
				Pattern: "(throw)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Throw",
					
					Roles: []string{

						"Throw",

					},
					
					
				},
				
			},

			{
				Name: "true",
				Pattern: "(true)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "try",
				Pattern: "(try)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Try",
					
					Roles: []string{

						"Try",

					},
					
					
				},
				
			},

			{
				Name: "type",
				Pattern: "(type)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "type_identifier",
				Pattern: "(type_identifier)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Identifier",
					
					Roles: []string{

						"Name",

					},
					
					
				},
				
			},

			{
				Name: "typeof",
				Pattern: "(typeof)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "undefined",
				Pattern: "(undefined)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "unknown",
				Pattern: "(unknown)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "using",
				Pattern: "(using)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "var",
				Pattern: "(var)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "void",
				Pattern: "(void)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "while",
				Pattern: "(while)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Loop",
					Token: "self",
					Roles: []string{

						"Loop",

					},
					
					
				},
				
			},

			{
				Name: "with",
				Pattern: "(with)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "yield",
				Pattern: "(yield)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Yield",
					Token: "self",
					Roles: []string{

						"Yield",

					},
					
					
				},
				
			},

		},
	},

	{
		Language: "xml",
		Extensions: []string{

			".xml",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "_AttType",
				Pattern: "(_AttType)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "_EntityDecl",
				Pattern: "(_EntityDecl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_EnumeratedType",
				Pattern: "(_EnumeratedType)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "_Reference",
				Pattern: "(_Reference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "_markupdecl",
				Pattern: "(_markupdecl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "AttDef",
				Pattern: "(AttDef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "AttValue",
				Pattern: "(AttValue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_Reference",

					},
					
				},
				
			},

			{
				Name: "AttlistDecl",
				Pattern: "(AttlistDecl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "Attribute",
				Pattern: "(Attribute)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Attribute",
					
					Roles: []string{

						"Attribute",

					},
					
					
				},
				
			},

			{
				Name: "CDSect",
				Pattern: "(CDSect)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "CDStart",
				Pattern: "(CDStart)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "CharRef",
				Pattern: "(CharRef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "DefaultDecl",
				Pattern: "(DefaultDecl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ETag",
				Pattern: "(ETag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "EmptyElemTag",
				Pattern: "(EmptyElemTag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "EntityRef",
				Pattern: "(EntityRef)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "EntityValue",
				Pattern: "(EntityValue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"PEReference",

						"_Reference",

					},
					
				},
				
			},

			{
				Name: "Enumeration",
				Pattern: "(Enumeration)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Enum",
					Token: "self",
					Roles: []string{

						"Enum",

						"Declaration",

					},
					
					
				},
				
			},

			{
				Name: "ExternalID",
				Pattern: "(ExternalID)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "GEDecl",
				Pattern: "(GEDecl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "Mixed",
				Pattern: "(Mixed)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "NDataDecl",
				Pattern: "(NDataDecl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "NotationDecl",
				Pattern: "(NotationDecl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "NotationType",
				Pattern: "(NotationType)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "PEDecl",
				Pattern: "(PEDecl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "PEReference",
				Pattern: "(PEReference)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "PI",
				Pattern: "(PI)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "PseudoAtt",
				Pattern: "(PseudoAtt)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "PseudoAttValue",
				Pattern: "(PseudoAttValue)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"_Reference",

					},
					
				},
				
			},

			{
				Name: "PubidLiteral",
				Pattern: "(PubidLiteral)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					Token: "self",
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "PublicID",
				Pattern: "(PublicID)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "STag",
				Pattern: "(STag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "StringType",
				Pattern: "(StringType)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "StyleSheetPI",
				Pattern: "(StyleSheetPI)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "SystemLiteral",
				Pattern: "(SystemLiteral)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Literal",
					
					Roles: []string{

						"Literal",

					},
					
					
				},
				
			},

			{
				Name: "XMLDecl",
				Pattern: "(XMLDecl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "XmlModelPI",
				Pattern: "(XmlModelPI)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "children",
				Pattern: "(children)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "content",
				Pattern: "(content)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "contentspec",
				Pattern: "(contentspec)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "doctypedecl",
				Pattern: "(doctypedecl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "document",
				Pattern: "(document)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					Children: []string{

						"element",

					},
					
				},
				
			},

			{
				Name: "element",
				Pattern: "(element)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "elementdecl",
				Pattern: "(elementdecl)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "prolog",
				Pattern: "(prolog)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "ANY",
				Pattern: "(ANY)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ATTLIST",
				Pattern: "(ATTLIST)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "List",
					
					
					
					
				},
				
			},

			{
				Name: "CDATA",
				Pattern: "(CDATA)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "CData",
				Pattern: "(CData)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "CharData",
				Pattern: "(CharData)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "Comment",
				Pattern: "(Comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "DOCTYPE",
				Pattern: "(DOCTYPE)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ELEMENT",
				Pattern: "(ELEMENT)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "EMPTY",
				Pattern: "(EMPTY)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "ENTITY",
				Pattern: "(ENTITY)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "EncName",
				Pattern: "(EncName)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "NDATA",
				Pattern: "(NDATA)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "NOTATION",
				Pattern: "(NOTATION)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "Name",
				Pattern: "(Name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "Nmtoken",
				Pattern: "(Nmtoken)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "PITarget",
				Pattern: "(PITarget)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "PUBLIC",
				Pattern: "(PUBLIC)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "SYSTEM",
				Pattern: "(SYSTEM)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "TokenizedType",
				Pattern: "(TokenizedType)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "URI",
				Pattern: "(URI)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "VersionNum",
				Pattern: "(VersionNum)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "encoding",
				Pattern: "(encoding)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "no",
				Pattern: "(no)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "standalone",
				Pattern: "(standalone)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "version",
				Pattern: "(version)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "xml",
				Pattern: "(xml)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "yes",
				Pattern: "(yes)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

	{
		Language: "yaml",
		Extensions: []string{

			".yaml",

			".yml",

		},
		Rules: []mapping.MappingRule{

			{
				Name: "alias",
				Pattern: "(alias)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "anchor",
				Pattern: "(anchor)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "block_mapping",
				Pattern: "(block_mapping)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_mapping_pair",
				Pattern: "(block_mapping_pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					Children: []string{

						"block_node",

						"flow_node",

					},
					
				},
				
			},

			{
				Name: "block_node",
				Pattern: "(block_node)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_scalar",
				Pattern: "(block_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_sequence",
				Pattern: "(block_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "block_sequence_item",
				Pattern: "(block_sequence_item)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Block",
					Token: "self",
					Roles: []string{

						"Body",

					},
					
					
				},
				
			},

			{
				Name: "document",
				Pattern: "(document)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "double_quote_scalar",
				Pattern: "(double_quote_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "flow_mapping",
				Pattern: "(flow_mapping)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "flow_node",
				Pattern: "(flow_node)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "flow_pair",
				Pattern: "(flow_pair)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					Children: []string{

						"flow_node",

					},
					
				},
				
			},

			{
				Name: "flow_sequence",
				Pattern: "(flow_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "plain_scalar",
				Pattern: "(plain_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "reserved_directive",
				Pattern: "(reserved_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "single_quote_scalar",
				Pattern: "(single_quote_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "stream",
				Pattern: "(stream)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "tag_directive",
				Pattern: "(tag_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "yaml_directive",
				Pattern: "(yaml_directive)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "alias_name",
				Pattern: "(alias_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "anchor_name",
				Pattern: "(anchor_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "boolean_scalar",
				Pattern: "(boolean_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "comment",
				Pattern: "(comment)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Comment",
					Token: "self",
					Roles: []string{

						"Comment",

					},
					
					
				},
				
			},

			{
				Name: "directive_name",
				Pattern: "(directive_name)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "directive_parameter",
				Pattern: "(directive_parameter)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Parameter",
					Token: "self",
					Roles: []string{

						"Parameter",

					},
					
					
				},
				
			},

			{
				Name: "escape_sequence",
				Pattern: "(escape_sequence)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "float_scalar",
				Pattern: "(float_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "integer_scalar",
				Pattern: "(integer_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "null_scalar",
				Pattern: "(null_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "string_scalar",
				Pattern: "(string_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "tag",
				Pattern: "(tag)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "tag_handle",
				Pattern: "(tag_handle)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "tag_prefix",
				Pattern: "(tag_prefix)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

			{
				Name: "timestamp_scalar",
				Pattern: "(timestamp_scalar)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					
					
					
					
				},
				
			},

			{
				Name: "yaml_version",
				Pattern: "(yaml_version)",
				
				UASTSpec: mapping.UASTSpec{
					Type: "Synthetic",
					Token: "self",
					
					
					
				},
				
			},

		},
	},

}

// embeddedMappingsAvailable checks if embedded mappings are available
func embeddedMappingsAvailable() bool {
	return len(embeddedMappingsData) > 0
}

// loadFromEmbeddedMappingsData loads from embedded mappings data
func (l *Loader) loadFromEmbeddedMappingsData() bool {
	// Convert pre-compiled mappings to parsers
	for _, precompiledMapping := range embeddedMappingsData {
		// Create a properly initialized DSLParser
		parser := &DSLParser{
			langInfo: &mapping.LanguageInfo{
				Name:       precompiledMapping.Language,
				Extensions: precompiledMapping.Extensions,
			},
			mappingRules: precompiledMapping.Rules,
		}

		// Initialize the language field
		if err := parser.initializeLanguage(); err != nil {
			fmt.Printf("Warning: Failed to initialize language for %s: %v\n", precompiledMapping.Language, err)
			continue
		}

		l.parsers[precompiledMapping.Language] = parser
		for _, ext := range precompiledMapping.Extensions {
			l.extensions[strings.ToLower(ext)] = parser
		}
	}

	return len(embeddedMappingsData) > 0
}

// OPTIMIZATION 1: Pre-compiled pattern matchers for O(1) lookup

// ansiblePatternMatcher provides pre-compiled pattern matching for ansible
type ansiblePatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newansiblePatternMatcher() *ansiblePatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "alias",
			Pattern: "(alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "anchor",
			Pattern: "(anchor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "block_mapping",
			Pattern: "(block_mapping)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_mapping_pair",
			Pattern: "(block_mapping_pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"block_node",

					"flow_node",

				},
				
			},
			
		},

		{
			Name: "block_node",
			Pattern: "(block_node)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_scalar",
			Pattern: "(block_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_sequence",
			Pattern: "(block_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_sequence_item",
			Pattern: "(block_sequence_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "document",
			Pattern: "(document)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "double_quote_scalar",
			Pattern: "(double_quote_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "flow_mapping",
			Pattern: "(flow_mapping)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "flow_node",
			Pattern: "(flow_node)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "flow_pair",
			Pattern: "(flow_pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"flow_node",

				},
				
			},
			
		},

		{
			Name: "flow_sequence",
			Pattern: "(flow_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "plain_scalar",
			Pattern: "(plain_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "reserved_directive",
			Pattern: "(reserved_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "single_quote_scalar",
			Pattern: "(single_quote_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "stream",
			Pattern: "(stream)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "tag_directive",
			Pattern: "(tag_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "yaml_directive",
			Pattern: "(yaml_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "alias_name",
			Pattern: "(alias_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "anchor_name",
			Pattern: "(anchor_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "boolean_scalar",
			Pattern: "(boolean_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "directive_name",
			Pattern: "(directive_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "directive_parameter",
			Pattern: "(directive_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "float_scalar",
			Pattern: "(float_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "integer_scalar",
			Pattern: "(integer_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "null_scalar",
			Pattern: "(null_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_scalar",
			Pattern: "(string_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "tag",
			Pattern: "(tag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "tag_handle",
			Pattern: "(tag_handle)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "tag_prefix",
			Pattern: "(tag_prefix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "yaml_version",
			Pattern: "(yaml_version)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &ansiblePatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *ansiblePatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *ansiblePatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *ansiblePatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *ansiblePatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *ansiblePatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// bashPatternMatcher provides pre-compiled pattern matching for bash
type bashPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newbashPatternMatcher() *bashPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "_expression",
			Pattern: "(_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_primary_expression",
			Pattern: "(_primary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_statement",
			Pattern: "(_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "arithmetic_expansion",
			Pattern: "(arithmetic_expansion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "array",
			Pattern: "(array)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_expression",

					"command_substitution",

					"expansion",

					"extglob_pattern",

					"number",

					"regex",

					"simple_expansion",

					"string",

					"subscript",

					"test_operator",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "brace_expression",
			Pattern: "(brace_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "c_style_for_statement",
			Pattern: "(c_style_for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"binary_expression",

					"command_substitution",

					"compound_statement",

					"do_group",

					"expansion",

					"number",

					"parenthesized_expression",

					"postfix_expression",

					"simple_expansion",

					"string",

					"unary_expression",

					"variable_assignment",

					"word",

				},
				
			},
			
		},

		{
			Name: "case_item",
			Pattern: "(case_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"_primary_expression",

					"concatenation",

					"extglob_pattern",

				},
				
			},
			
		},

		{
			Name: "case_statement",
			Pattern: "(case_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"_primary_expression",

					"concatenation",

				},
				
			},
			
		},

		{
			Name: "command",
			Pattern: "(command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_primary_expression",

					"command_name",

					"concatenation",

					"file_redirect",

					"herestring_redirect",

					"regex",

				},
				
			},
			
		},

		{
			Name: "command_name",
			Pattern: "(command_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "command_substitution",
			Pattern: "(command_substitution)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"file_redirect",

				},
				
			},
			
		},

		{
			Name: "compound_statement",
			Pattern: "(compound_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "concatenation",
			Pattern: "(concatenation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "declaration_command",
			Pattern: "(declaration_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "do_group",
			Pattern: "(do_group)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "elif_clause",
			Pattern: "(elif_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else_clause",
			Pattern: "(else_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expansion",
			Pattern: "(expansion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"A",

					"E",

					"K",

					"L",

					"P",

					"Q",

					"U",

					"a",

					"k",

					"u",

				},
				
			},
			
		},

		{
			Name: "file_redirect",
			Pattern: "(file_redirect)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_primary_expression",

					"concatenation",

					"file_descriptor",

				},
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"_primary_expression",

					"concatenation",

					"do_group",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "function_definition",
			Pattern: "(function_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"compound_statement",

					"file_redirect",

					"herestring_redirect",

					"if_statement",

					"subshell",

					"test_command",

					"word",

				},
				
			},
			
		},

		{
			Name: "heredoc_body",
			Pattern: "(heredoc_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "heredoc_redirect",
			Pattern: "(heredoc_redirect)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_primary_expression",

					"_statement",

					"concatenation",

					"file_descriptor",

					"file_redirect",

					"herestring_redirect",

				},
				
			},
			
		},

		{
			Name: "herestring_redirect",
			Pattern: "(herestring_redirect)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"file_descriptor",

				},
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"_statement",

				},
				
			},
			
		},

		{
			Name: "list",
			Pattern: "(list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				Roles: []string{

					"Condition",

				},
				
				
			},
			
		},

		{
			Name: "negated_command",
			Pattern: "(negated_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "number",
			Pattern: "(number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pipeline",
			Pattern: "(pipeline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "postfix_expression",
			Pattern: "(postfix_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "process_substitution",
			Pattern: "(process_substitution)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "program",
			Pattern: "(program)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "redirected_statement",
			Pattern: "(redirected_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "File",
				Token: "self",
				
				Children: []string{

					"_statement",

					"file_redirect",

					"heredoc_redirect",

					"herestring_redirect",

				},
				
			},
			
		},

		{
			Name: "simple_expansion",
			Pattern: "(simple_expansion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "subscript",
			Pattern: "(subscript)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_primary_expression",

					"binary_expression",

					"concatenation",

					"parenthesized_expression",

					"unary_expression",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "subshell",
			Pattern: "(subshell)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ternary_expression",
			Pattern: "(ternary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"command_substitution",

					"expansion",

					"number",

					"simple_expansion",

					"string",

					"subscript",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "test_command",
			Pattern: "(test_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "translated_string",
			Pattern: "(translated_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unary_expression",
			Pattern: "(unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"test_operator",

				},
				
			},
			
		},

		{
			Name: "unset_command",
			Pattern: "(unset_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "variable_assignment",
			Pattern: "(variable_assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"_primary_expression",

					"array",

					"binary_expression",

					"concatenation",

					"parenthesized_expression",

					"postfix_expression",

					"subscript",

					"unary_expression",

					"variable_assignment",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "variable_assignments",
			Pattern: "(variable_assignments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"_statement",

					"do_group",

				},
				
			},
			
		},

		{
			Name: "word",
			Pattern: "(word)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "A",
			Pattern: "(A)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "E",
			Pattern: "(E)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "K",
			Pattern: "(K)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "L",
			Pattern: "(L)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "P",
			Pattern: "(P)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "Q",
			Pattern: "(Q)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "U",
			Pattern: "(U)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "a",
			Pattern: "(a)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ansi_c_string",
			Pattern: "(ansi_c_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "declare",
			Pattern: "(declare)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "done",
			Pattern: "(done)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "elif",
			Pattern: "(elif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "esac",
			Pattern: "(esac)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "export",
			Pattern: "(export)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extglob_pattern",
			Pattern: "(extglob_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "fi",
			Pattern: "(fi)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "file_descriptor",
			Pattern: "(file_descriptor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "function",
			Pattern: "(function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "heredoc_content",
			Pattern: "(heredoc_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "heredoc_end",
			Pattern: "(heredoc_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "heredoc_start",
			Pattern: "(heredoc_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "k",
			Pattern: "(k)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "local",
			Pattern: "(local)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "raw_string",
			Pattern: "(raw_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "readonly",
			Pattern: "(readonly)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "regex",
			Pattern: "(regex)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "select",
			Pattern: "(select)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "special_variable_name",
			Pattern: "(special_variable_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "string_content",
			Pattern: "(string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "test_operator",
			Pattern: "(test_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "then",
			Pattern: "(then)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "typeset",
			Pattern: "(typeset)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "u",
			Pattern: "(u)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unset",
			Pattern: "(unset)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unsetenv",
			Pattern: "(unsetenv)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "until",
			Pattern: "(until)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "variable_name",
			Pattern: "(variable_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &bashPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *bashPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *bashPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *bashPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *bashPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *bashPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// cPatternMatcher provides pre-compiled pattern matching for c
type cPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newcPatternMatcher() *cPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "_abstract_declarator",
			Pattern: "(_abstract_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_declarator",
			Pattern: "(_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_field_declarator",
			Pattern: "(_field_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "_type_declarator",
			Pattern: "(_type_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "expression",
			Pattern: "(expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "statement",
			Pattern: "(statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_specifier",
			Pattern: "(type_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "abstract_array_declarator",
			Pattern: "(abstract_array_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_abstract_declarator",

					"expression",

				},
				
			},
			
		},

		{
			Name: "abstract_function_declarator",
			Pattern: "(abstract_function_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"_abstract_declarator",

					"parameter_list",

				},
				
			},
			
		},

		{
			Name: "abstract_parenthesized_declarator",
			Pattern: "(abstract_parenthesized_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "abstract_pointer_declarator",
			Pattern: "(abstract_pointer_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_abstract_declarator",

				},
				
			},
			
		},

		{
			Name: "alignas_qualifier",
			Pattern: "(alignas_qualifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "alignof_expression",
			Pattern: "(alignof_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"type_descriptor",

				},
				
			},
			
		},

		{
			Name: "argument_list",
			Pattern: "(argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "array_declarator",
			Pattern: "(array_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_declarator",

					"_field_declarator",

					"_type_declarator",

					"expression",

				},
				
			},
			
		},

		{
			Name: "assignment_expression",
			Pattern: "(assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"call_expression",

					"expression",

					"field_expression",

					"identifier",

					"parenthesized_expression",

					"pointer_expression",

					"subscript_expression",

				},
				
			},
			
		},

		{
			Name: "attribute",
			Pattern: "(attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "attribute_declaration",
			Pattern: "(attribute_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "attribute_specifier",
			Pattern: "(attribute_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "attributed_declarator",
			Pattern: "(attributed_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "attributed_statement",
			Pattern: "(attributed_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

					"preproc_defined",

				},
				
			},
			
		},

		{
			Name: "bitfield_clause",
			Pattern: "(bitfield_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "break_statement",
			Pattern: "(break_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "call_expression",
			Pattern: "(call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"argument_list",

					"expression",

				},
				
			},
			
		},

		{
			Name: "case_statement",
			Pattern: "(case_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Call",

					"Branch",

				},
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "cast_expression",
			Pattern: "(cast_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				
				
				Children: []string{

					"expression",

					"type_descriptor",

				},
				
			},
			
		},

		{
			Name: "char_literal",
			Pattern: "(char_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "comma_expression",
			Pattern: "(comma_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"comma_expression",

					"expression",

				},
				
			},
			
		},

		{
			Name: "compound_literal_expression",
			Pattern: "(compound_literal_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"initializer_list",

					"type_descriptor",

				},
				
			},
			
		},

		{
			Name: "compound_statement",
			Pattern: "(compound_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "concatenated_string",
			Pattern: "(concatenated_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "conditional_expression",
			Pattern: "(conditional_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"comma_expression",

					"expression",

				},
				
			},
			
		},

		{
			Name: "continue_statement",
			Pattern: "(continue_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "declaration",
			Pattern: "(declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"array_declarator",

					"attributed_declarator",

					"function_declarator",

					"gnu_asm_expression",

					"identifier",

					"init_declarator",

					"ms_call_modifier",

					"parenthesized_declarator",

					"pointer_declarator",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "declaration_list",
			Pattern: "(declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "do_statement",
			Pattern: "(do_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "else_clause",
			Pattern: "(else_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum_specifier",
			Pattern: "(enum_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"enumerator_list",

					"primitive_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "enumerator",
			Pattern: "(enumerator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"expression",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "enumerator_list",
			Pattern: "(enumerator_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "expression_statement",
			Pattern: "(expression_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "extension_expression",
			Pattern: "(extension_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "field_declaration",
			Pattern: "(field_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"_field_declarator",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "field_declaration_list",
			Pattern: "(field_declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "field_designator",
			Pattern: "(field_designator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "field_expression",
			Pattern: "(field_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"expression",

					"field_identifier",

				},
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"comma_expression",

					"declaration",

					"expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "function_declarator",
			Pattern: "(function_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"_declarator",

					"_field_declarator",

					"_type_declarator",

					"parameter_list",

				},
				
			},
			
		},

		{
			Name: "function_definition",
			Pattern: "(function_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"_declarator",

					"compound_statement",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "generic_expression",
			Pattern: "(generic_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "gnu_asm_clobber_list",
			Pattern: "(gnu_asm_clobber_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"concatenated_string",

					"string_literal",

				},
				
			},
			
		},

		{
			Name: "gnu_asm_expression",
			Pattern: "(gnu_asm_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"concatenated_string",

					"gnu_asm_clobber_list",

					"gnu_asm_goto_list",

					"gnu_asm_input_operand_list",

					"gnu_asm_output_operand_list",

					"string_literal",

				},
				
			},
			
		},

		{
			Name: "gnu_asm_goto_list",
			Pattern: "(gnu_asm_goto_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "gnu_asm_input_operand",
			Pattern: "(gnu_asm_input_operand)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"identifier",

					"string_literal",

				},
				
			},
			
		},

		{
			Name: "gnu_asm_input_operand_list",
			Pattern: "(gnu_asm_input_operand_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"gnu_asm_input_operand",

				},
				
			},
			
		},

		{
			Name: "gnu_asm_output_operand",
			Pattern: "(gnu_asm_output_operand)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"identifier",

					"string_literal",

				},
				
			},
			
		},

		{
			Name: "gnu_asm_output_operand_list",
			Pattern: "(gnu_asm_output_operand_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"gnu_asm_output_operand",

				},
				
			},
			
		},

		{
			Name: "gnu_asm_qualifier",
			Pattern: "(gnu_asm_qualifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "goto_statement",
			Pattern: "(goto_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"statement_identifier",

				},
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				Roles: []string{

					"Condition",

				},
				Children: []string{

					"else_clause",

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "init_declarator",
			Pattern: "(init_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_declarator",

					"expression",

					"initializer_list",

				},
				
			},
			
		},

		{
			Name: "initializer_list",
			Pattern: "(initializer_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "initializer_pair",
			Pattern: "(initializer_pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"expression",

					"field_designator",

					"field_identifier",

					"initializer_list",

					"subscript_designator",

					"subscript_range_designator",

				},
				
			},
			
		},

		{
			Name: "labeled_statement",
			Pattern: "(labeled_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"statement_identifier",

				},
				
			},
			
		},

		{
			Name: "linkage_specification",
			Pattern: "(linkage_specification)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"declaration",

					"declaration_list",

					"function_definition",

					"string_literal",

				},
				
			},
			
		},

		{
			Name: "macro_type_specifier",
			Pattern: "(macro_type_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

					"type_descriptor",

				},
				
			},
			
		},

		{
			Name: "ms_based_modifier",
			Pattern: "(ms_based_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ms_call_modifier",
			Pattern: "(ms_call_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ms_declspec_modifier",
			Pattern: "(ms_declspec_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ms_pointer_modifier",
			Pattern: "(ms_pointer_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ms_unaligned_ptr_modifier",
			Pattern: "(ms_unaligned_ptr_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "null",
			Pattern: "(null)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "offsetof_expression",
			Pattern: "(offsetof_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				Children: []string{

					"field_identifier",

					"type_descriptor",

				},
				
			},
			
		},

		{
			Name: "parameter_declaration",
			Pattern: "(parameter_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_abstract_declarator",

					"_declarator",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "parameter_list",
			Pattern: "(parameter_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parenthesized_declarator",
			Pattern: "(parenthesized_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pointer_declarator",
			Pattern: "(pointer_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_declarator",

					"_field_declarator",

					"_type_declarator",

				},
				
			},
			
		},

		{
			Name: "pointer_expression",
			Pattern: "(pointer_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "preproc_call",
			Pattern: "(preproc_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"preproc_arg",

					"preproc_directive",

				},
				
			},
			
		},

		{
			Name: "preproc_def",
			Pattern: "(preproc_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				Children: []string{

					"identifier",

					"preproc_arg",

				},
				
			},
			
		},

		{
			Name: "preproc_defined",
			Pattern: "(preproc_defined)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "preproc_elif",
			Pattern: "(preproc_elif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"binary_expression",

					"call_expression",

					"char_literal",

					"identifier",

					"number_literal",

					"parenthesized_expression",

					"preproc_defined",

					"preproc_elif",

					"preproc_elifdef",

					"preproc_else",

					"unary_expression",

				},
				
			},
			
		},

		{
			Name: "preproc_elifdef",
			Pattern: "(preproc_elifdef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"identifier",

					"preproc_elif",

					"preproc_elifdef",

					"preproc_else",

				},
				
			},
			
		},

		{
			Name: "preproc_else",
			Pattern: "(preproc_else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "preproc_function_def",
			Pattern: "(preproc_function_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"identifier",

					"preproc_arg",

					"preproc_params",

				},
				
			},
			
		},

		{
			Name: "preproc_if",
			Pattern: "(preproc_if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"binary_expression",

					"call_expression",

					"char_literal",

					"identifier",

					"number_literal",

					"parenthesized_expression",

					"preproc_defined",

					"preproc_elif",

					"preproc_elifdef",

					"preproc_else",

					"unary_expression",

				},
				
			},
			
		},

		{
			Name: "preproc_ifdef",
			Pattern: "(preproc_ifdef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"identifier",

					"preproc_elif",

					"preproc_elifdef",

					"preproc_else",

				},
				
			},
			
		},

		{
			Name: "preproc_include",
			Pattern: "(preproc_include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"call_expression",

					"identifier",

					"string_literal",

					"system_lib_string",

				},
				
			},
			
		},

		{
			Name: "preproc_params",
			Pattern: "(preproc_params)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return_statement",
			Pattern: "(return_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "seh_except_clause",
			Pattern: "(seh_except_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"compound_statement",

					"parenthesized_expression",

				},
				
			},
			
		},

		{
			Name: "seh_finally_clause",
			Pattern: "(seh_finally_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				Children: []string{

					"compound_statement",

				},
				
			},
			
		},

		{
			Name: "seh_leave_statement",
			Pattern: "(seh_leave_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "seh_try_statement",
			Pattern: "(seh_try_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				Children: []string{

					"compound_statement",

				},
				
			},
			
		},

		{
			Name: "sized_type_specifier",
			Pattern: "(sized_type_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"primitive_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "sizeof_expression",
			Pattern: "(sizeof_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

					"type_descriptor",

				},
				
			},
			
		},

		{
			Name: "storage_class_specifier",
			Pattern: "(storage_class_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "string_literal",
			Pattern: "(string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "struct_specifier",
			Pattern: "(struct_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"field_declaration_list",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "subscript_designator",
			Pattern: "(subscript_designator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "subscript_expression",
			Pattern: "(subscript_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "subscript_range_designator",
			Pattern: "(subscript_range_designator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "switch_statement",
			Pattern: "(switch_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				Children: []string{

					"compound_statement",

					"parenthesized_expression",

				},
				
			},
			
		},

		{
			Name: "translation_unit",
			Pattern: "(translation_unit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "type_definition",
			Pattern: "(type_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_type_declarator",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "type_descriptor",
			Pattern: "(type_descriptor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_abstract_declarator",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "type_qualifier",
			Pattern: "(type_qualifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "unary_expression",
			Pattern: "(unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

					"preproc_defined",

				},
				
			},
			
		},

		{
			Name: "union_specifier",
			Pattern: "(union_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"field_declaration_list",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "update_expression",
			Pattern: "(update_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "variadic_parameter",
			Pattern: "(variadic_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Loop",

				},
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "NULL",
			Pattern: "(NULL)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_Alignas",
			Pattern: "(_Alignas)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_Alignof",
			Pattern: "(_Alignof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_Atomic",
			Pattern: "(_Atomic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_Generic",
			Pattern: "(_Generic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_Nonnull",
			Pattern: "(_Nonnull)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_Noreturn",
			Pattern: "(_Noreturn)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "__alignof",
			Pattern: "(__alignof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__alignof__",
			Pattern: "(__alignof__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__asm",
			Pattern: "(__asm)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__asm__",
			Pattern: "(__asm__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__attribute",
			Pattern: "(__attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "__attribute__",
			Pattern: "(__attribute__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "__based",
			Pattern: "(__based)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__cdecl",
			Pattern: "(__cdecl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__clrcall",
			Pattern: "(__clrcall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "__declspec",
			Pattern: "(__declspec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__except",
			Pattern: "(__except)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__extension__",
			Pattern: "(__extension__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__fastcall",
			Pattern: "(__fastcall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "__finally",
			Pattern: "(__finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "__forceinline",
			Pattern: "(__forceinline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "__inline",
			Pattern: "(__inline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__inline__",
			Pattern: "(__inline__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__leave",
			Pattern: "(__leave)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__restrict__",
			Pattern: "(__restrict__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__stdcall",
			Pattern: "(__stdcall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "__thiscall",
			Pattern: "(__thiscall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "__thread",
			Pattern: "(__thread)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__try",
			Pattern: "(__try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "__unaligned",
			Pattern: "(__unaligned)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__vectorcall",
			Pattern: "(__vectorcall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "__volatile__",
			Pattern: "(__volatile__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_alignof",
			Pattern: "(_alignof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_unaligned",
			Pattern: "(_unaligned)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "alignas",
			Pattern: "(alignas)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "alignof",
			Pattern: "(alignof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "asm",
			Pattern: "(asm)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "auto",
			Pattern: "(auto)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "character",
			Pattern: "(character)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "const",
			Pattern: "(const)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "constexpr",
			Pattern: "(constexpr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "defined",
			Pattern: "(defined)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "extern",
			Pattern: "(extern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field_identifier",
			Pattern: "(field_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Reference",

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "goto",
			Pattern: "(goto)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "inline",
			Pattern: "(inline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "long",
			Pattern: "(long)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ms_restrict_modifier",
			Pattern: "(ms_restrict_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ms_signed_ptr_modifier",
			Pattern: "(ms_signed_ptr_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "ms_unsigned_ptr_modifier",
			Pattern: "(ms_unsigned_ptr_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "noreturn",
			Pattern: "(noreturn)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "nullptr",
			Pattern: "(nullptr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "number_literal",
			Pattern: "(number_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "offsetof",
			Pattern: "(offsetof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "preproc_arg",
			Pattern: "(preproc_arg)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "preproc_directive",
			Pattern: "(preproc_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "primitive_type",
			Pattern: "(primitive_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "register",
			Pattern: "(register)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "restrict",
			Pattern: "(restrict)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "short",
			Pattern: "(short)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "signed",
			Pattern: "(signed)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "sizeof",
			Pattern: "(sizeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "statement_identifier",
			Pattern: "(statement_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "static",
			Pattern: "(static)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string_content",
			Pattern: "(string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "struct",
			Pattern: "(struct)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "switch",
			Pattern: "(switch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "system_lib_string",
			Pattern: "(system_lib_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "thread_local",
			Pattern: "(thread_local)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_identifier",
			Pattern: "(type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "typedef",
			Pattern: "(typedef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "union",
			Pattern: "(union)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unsigned",
			Pattern: "(unsigned)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "volatile",
			Pattern: "(volatile)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &cPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *cPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *cPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *cPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *cPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *cPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// c_sharpPatternMatcher provides pre-compiled pattern matching for c_sharp
type c_sharpPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newc_sharpPatternMatcher() *c_sharpPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "declaration",
			Pattern: "(declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expression",
			Pattern: "(expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "literal",
			Pattern: "(literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "lvalue_expression",
			Pattern: "(lvalue_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "non_lvalue_expression",
			Pattern: "(non_lvalue_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pattern",
			Pattern: "(pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "statement",
			Pattern: "(statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_declaration",
			Pattern: "(type_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "accessor_declaration",
			Pattern: "(accessor_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "child:identifier",
				
				Children: []string{

					"add",

					"arrow_expression_clause",

					"block",

					"get",

					"identifier",

					"init",

					"remove",

					"set",

				},
				
			},
			
		},

		{
			Name: "accessor_list",
			Pattern: "(accessor_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "alias_qualified_name",
			Pattern: "(alias_qualified_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"generic_name",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "and_pattern",
			Pattern: "(and_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"and",

					"pattern",

				},
				
			},
			
		},

		{
			Name: "anonymous_method_expression",
			Pattern: "(anonymous_method_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"parameter_list",

				},
				
			},
			
		},

		{
			Name: "anonymous_object_creation_expression",
			Pattern: "(anonymous_object_creation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "argument",
			Pattern: "(argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "argument_list",
			Pattern: "(argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "array_creation_expression",
			Pattern: "(array_creation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"array_type",

				},
				
			},
			
		},

		{
			Name: "array_rank_specifier",
			Pattern: "(array_rank_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "array_type",
			Pattern: "(array_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"alias_qualified_name",

					"array_rank_specifier",

					"array_type",

					"function_pointer_type",

					"generic_name",

					"identifier",

					"nullable_type",

					"pointer_type",

					"predefined_type",

					"qualified_name",

					"tuple_type",

				},
				
			},
			
		},

		{
			Name: "arrow_expression_clause",
			Pattern: "(arrow_expression_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "as_expression",
			Pattern: "(as_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"as",

					"expression",

					"type",

				},
				
			},
			
		},

		{
			Name: "assignment_expression",
			Pattern: "(assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"expression",

					"lvalue_expression",

				},
				
			},
			
		},

		{
			Name: "attribute",
			Pattern: "(attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				Children: []string{

					"alias_qualified_name",

					"generic_name",

					"identifier",

					"qualified_name",

				},
				
			},
			
		},

		{
			Name: "attribute_argument",
			Pattern: "(attribute_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "attribute_argument_list",
			Pattern: "(attribute_argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "attribute_list",
			Pattern: "(attribute_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "attribute_target_specifier",
			Pattern: "(attribute_target_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "await_expression",
			Pattern: "(await_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "base_list",
			Pattern: "(base_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"binary_expression",

					"boolean_literal",

					"character_literal",

					"expression",

					"identifier",

					"integer_literal",

					"parenthesized_expression",

					"unary_expression",

				},
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Operator",

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "boolean_literal",
			Pattern: "(boolean_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "bracketed_argument_list",
			Pattern: "(bracketed_argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "bracketed_parameter_list",
			Pattern: "(bracketed_parameter_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"array_type",

					"identifier",

					"nullable_type",

				},
				
			},
			
		},

		{
			Name: "break_statement",
			Pattern: "(break_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "calling_convention",
			Pattern: "(calling_convention)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "cast_expression",
			Pattern: "(cast_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				Token: "self",
				
				Children: []string{

					"expression",

					"type",

				},
				
			},
			
		},

		{
			Name: "catch_clause",
			Pattern: "(catch_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "catch_declaration",
			Pattern: "(catch_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				Token: "self",
				Roles: []string{

					"Catch",

				},
				Children: []string{

					"identifier",

					"type",

				},
				
			},
			
		},

		{
			Name: "catch_filter_clause",
			Pattern: "(catch_filter_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "character_literal",
			Pattern: "(character_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "checked_expression",
			Pattern: "(checked_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "checked_statement",
			Pattern: "(checked_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "class_declaration",
			Pattern: "(class_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"declaration_list",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "compilation_unit",
			Pattern: "(compilation_unit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "child:identifier",
				Roles: []string{

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "conditional_access_expression",
			Pattern: "(conditional_access_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "conditional_expression",
			Pattern: "(conditional_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "constant_pattern",
			Pattern: "(constant_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "constructor_constraint",
			Pattern: "(constructor_constraint)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "constructor_declaration",
			Pattern: "(constructor_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"arrow_expression_clause",

					"block",

					"identifier",

					"parameter_list",

				},
				
			},
			
		},

		{
			Name: "constructor_initializer",
			Pattern: "(constructor_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "continue_statement",
			Pattern: "(continue_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "conversion_operator_declaration",
			Pattern: "(conversion_operator_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				Children: []string{

					"arrow_expression_clause",

					"block",

					"parameter_list",

					"type",

				},
				
			},
			
		},

		{
			Name: "declaration_expression",
			Pattern: "(declaration_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

					"type",

				},
				
			},
			
		},

		{
			Name: "declaration_list",
			Pattern: "(declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "declaration_pattern",
			Pattern: "(declaration_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"identifier",

					"type",

				},
				
			},
			
		},

		{
			Name: "default_expression",
			Pattern: "(default_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				Children: []string{

					"type",

				},
				
			},
			
		},

		{
			Name: "delegate_declaration",
			Pattern: "(delegate_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

					"parameter_list",

					"type",

					"type_parameter_list",

				},
				
			},
			
		},

		{
			Name: "destructor_declaration",
			Pattern: "(destructor_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"arrow_expression_clause",

					"block",

					"identifier",

					"parameter_list",

				},
				
			},
			
		},

		{
			Name: "do_statement",
			Pattern: "(do_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "element_access_expression",
			Pattern: "(element_access_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"bracketed_argument_list",

					"expression",

				},
				
			},
			
		},

		{
			Name: "element_binding_expression",
			Pattern: "(element_binding_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "empty_statement",
			Pattern: "(empty_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum_declaration",
			Pattern: "(enum_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"enum_member_declaration_list",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "enum_member_declaration",
			Pattern: "(enum_member_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "child:identifier",
				Roles: []string{

					"Declaration",

					"Enum",

					"Declaration",

				},
				Children: []string{

					"expression",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "enum_member_declaration_list",
			Pattern: "(enum_member_declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "event_declaration",
			Pattern: "(event_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"accessor_list",

					"identifier",

					"type",

				},
				
			},
			
		},

		{
			Name: "event_field_declaration",
			Pattern: "(event_field_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "explicit_interface_specifier",
			Pattern: "(explicit_interface_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "expression_statement",
			Pattern: "(expression_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extern_alias_directive",
			Pattern: "(extern_alias_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "field_declaration",
			Pattern: "(field_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "file_scoped_namespace_declaration",
			Pattern: "(file_scoped_namespace_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"alias_qualified_name",

					"generic_name",

					"identifier",

					"qualified_name",

				},
				
			},
			
		},

		{
			Name: "finally_clause",
			Pattern: "(finally_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "fixed_statement",
			Pattern: "(fixed_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"expression",

					"statement",

					"variable_declaration",

				},
				
			},
			
		},

		{
			Name: "foreach_statement",
			Pattern: "(foreach_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

					"Loop",

				},
				Children: []string{

					"expression",

					"identifier",

					"statement",

					"tuple_pattern",

					"type",

				},
				
			},
			
		},

		{
			Name: "from_clause",
			Pattern: "(from_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

					"type",

				},
				
			},
			
		},

		{
			Name: "function_pointer_parameter",
			Pattern: "(function_pointer_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"alias_qualified_name",

					"array_type",

					"function_pointer_type",

					"generic_name",

					"identifier",

					"implicit_type",

					"nullable_type",

					"pointer_type",

					"predefined_type",

					"qualified_name",

					"tuple_type",

				},
				
			},
			
		},

		{
			Name: "function_pointer_type",
			Pattern: "(function_pointer_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"type",

				},
				
			},
			
		},

		{
			Name: "generic_name",
			Pattern: "(generic_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "global_attribute",
			Pattern: "(global_attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "global_statement",
			Pattern: "(global_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "goto_statement",
			Pattern: "(goto_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "group_clause",
			Pattern: "(group_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				Children: []string{

					"expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "implicit_array_creation_expression",
			Pattern: "(implicit_array_creation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "implicit_object_creation_expression",
			Pattern: "(implicit_object_creation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "implicit_parameter",
			Pattern: "(implicit_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "implicit_stackalloc_expression",
			Pattern: "(implicit_stackalloc_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "implicit_type",
			Pattern: "(implicit_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "indexer_declaration",
			Pattern: "(indexer_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				Token: "self",
				Roles: []string{

					"Index",

				},
				Children: []string{

					"accessor_list",

					"arrow_expression_clause",

					"bracketed_parameter_list",

					"type",

				},
				
			},
			
		},

		{
			Name: "initializer_expression",
			Pattern: "(initializer_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "interface_declaration",
			Pattern: "(interface_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				Children: []string{

					"declaration_list",

					"identifier",

					"type_parameter_list",

				},
				
			},
			
		},

		{
			Name: "interpolated_string_expression",
			Pattern: "(interpolated_string_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "interpolation",
			Pattern: "(interpolation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "interpolation_alignment_clause",
			Pattern: "(interpolation_alignment_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "interpolation_format_clause",
			Pattern: "(interpolation_format_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "invocation_expression",
			Pattern: "(invocation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"argument_list",

					"expression",

				},
				
			},
			
		},

		{
			Name: "is_expression",
			Pattern: "(is_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

					"is",

					"type",

				},
				
			},
			
		},

		{
			Name: "is_pattern_expression",
			Pattern: "(is_pattern_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"expression",

					"pattern",

				},
				
			},
			
		},

		{
			Name: "join_clause",
			Pattern: "(join_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"type",

				},
				
			},
			
		},

		{
			Name: "join_into_clause",
			Pattern: "(join_into_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "labeled_statement",
			Pattern: "(labeled_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "lambda_expression",
			Pattern: "(lambda_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				
				Roles: []string{

					"Lambda",

				},
				Children: []string{

					"block",

					"expression",

					"implicit_parameter",

					"parameter_list",

					"type",

				},
				
			},
			
		},

		{
			Name: "let_clause",
			Pattern: "(let_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "list_pattern",
			Pattern: "(list_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "local_declaration_statement",
			Pattern: "(local_declaration_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "local_function_statement",
			Pattern: "(local_function_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"arrow_expression_clause",

					"block",

					"identifier",

					"parameter_list",

					"type",

					"type_parameter_list",

				},
				
			},
			
		},

		{
			Name: "lock_statement",
			Pattern: "(lock_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "makeref_expression",
			Pattern: "(makeref_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "member_access_expression",
			Pattern: "(member_access_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"alias_qualified_name",

					"expression",

					"generic_name",

					"identifier",

					"predefined_type",

					"qualified_name",

				},
				
			},
			
		},

		{
			Name: "member_binding_expression",
			Pattern: "(member_binding_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"generic_name",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "method_declaration",
			Pattern: "(method_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"arrow_expression_clause",

					"block",

					"identifier",

					"parameter_list",

					"type",

					"type_parameter_list",

				},
				
			},
			
		},

		{
			Name: "modifier",
			Pattern: "(modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "namespace_declaration",
			Pattern: "(namespace_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"alias_qualified_name",

					"declaration_list",

					"generic_name",

					"identifier",

					"qualified_name",

				},
				
			},
			
		},

		{
			Name: "negated_pattern",
			Pattern: "(negated_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "nullable_type",
			Pattern: "(nullable_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				Children: []string{

					"alias_qualified_name",

					"array_type",

					"generic_name",

					"identifier",

					"predefined_type",

					"qualified_name",

					"tuple_type",

				},
				
			},
			
		},

		{
			Name: "object_creation_expression",
			Pattern: "(object_creation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"argument_list",

					"initializer_expression",

					"type",

				},
				
			},
			
		},

		{
			Name: "operator_declaration",
			Pattern: "(operator_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"arrow_expression_clause",

					"block",

					"false",

					"parameter_list",

					"true",

					"type",

				},
				
			},
			
		},

		{
			Name: "or_pattern",
			Pattern: "(or_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"or",

					"pattern",

				},
				
			},
			
		},

		{
			Name: "order_by_clause",
			Pattern: "(order_by_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "parameter",
			Pattern: "(parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"identifier",

					"type",

				},
				
			},
			
		},

		{
			Name: "parameter_list",
			Pattern: "(parameter_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Parameter",

				},
				Children: []string{

					"array_type",

					"identifier",

					"nullable_type",

				},
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "parenthesized_pattern",
			Pattern: "(parenthesized_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "parenthesized_variable_designation",
			Pattern: "(parenthesized_variable_designation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "pointer_type",
			Pattern: "(pointer_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"alias_qualified_name",

					"function_pointer_type",

					"generic_name",

					"identifier",

					"nullable_type",

					"pointer_type",

					"predefined_type",

					"qualified_name",

					"tuple_type",

				},
				
			},
			
		},

		{
			Name: "positional_pattern_clause",
			Pattern: "(positional_pattern_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "postfix_unary_expression",
			Pattern: "(postfix_unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "prefix_unary_expression",
			Pattern: "(prefix_unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "preproc_define",
			Pattern: "(preproc_define)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "preproc_elif",
			Pattern: "(preproc_elif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"binary_expression",

					"boolean_literal",

					"character_literal",

					"identifier",

					"integer_literal",

					"parenthesized_expression",

					"preproc_elif",

					"preproc_else",

					"unary_expression",

				},
				
			},
			
		},

		{
			Name: "preproc_else",
			Pattern: "(preproc_else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "preproc_endregion",
			Pattern: "(preproc_endregion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"preproc_arg",

				},
				
			},
			
		},

		{
			Name: "preproc_error",
			Pattern: "(preproc_error)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "preproc_if",
			Pattern: "(preproc_if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"binary_expression",

					"boolean_literal",

					"character_literal",

					"identifier",

					"integer_literal",

					"parenthesized_expression",

					"preproc_elif",

					"preproc_else",

					"unary_expression",

				},
				
			},
			
		},

		{
			Name: "preproc_if_in_attribute_list",
			Pattern: "(preproc_if_in_attribute_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				Roles: []string{

					"Condition",

				},
				Children: []string{

					"binary_expression",

					"boolean_literal",

					"character_literal",

					"identifier",

					"integer_literal",

					"parenthesized_expression",

					"preproc_elif",

					"preproc_else",

					"unary_expression",

				},
				
			},
			
		},

		{
			Name: "preproc_line",
			Pattern: "(preproc_line)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "preproc_nullable",
			Pattern: "(preproc_nullable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "preproc_pragma",
			Pattern: "(preproc_pragma)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "preproc_region",
			Pattern: "(preproc_region)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"preproc_arg",

				},
				
			},
			
		},

		{
			Name: "preproc_undef",
			Pattern: "(preproc_undef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "preproc_warning",
			Pattern: "(preproc_warning)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "primary_constructor_base_type",
			Pattern: "(primary_constructor_base_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"alias_qualified_name",

					"generic_name",

					"identifier",

					"qualified_name",

				},
				
			},
			
		},

		{
			Name: "property_declaration",
			Pattern: "(property_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"accessor_list",

					"arrow_expression_clause",

					"expression",

					"identifier",

					"type",

				},
				
			},
			
		},

		{
			Name: "property_pattern_clause",
			Pattern: "(property_pattern_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "qualified_name",
			Pattern: "(qualified_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"alias_qualified_name",

					"generic_name",

					"identifier",

					"qualified_name",

				},
				
			},
			
		},

		{
			Name: "query_expression",
			Pattern: "(query_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "range_expression",
			Pattern: "(range_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "raw_string_literal",
			Pattern: "(raw_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "record_declaration",
			Pattern: "(record_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"declaration_list",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "recursive_pattern",
			Pattern: "(recursive_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"identifier",

					"type",

				},
				
			},
			
		},

		{
			Name: "ref_expression",
			Pattern: "(ref_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ref_type",
			Pattern: "(ref_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"type",

				},
				
			},
			
		},

		{
			Name: "reftype_expression",
			Pattern: "(reftype_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "refvalue_expression",
			Pattern: "(refvalue_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"type",

				},
				
			},
			
		},

		{
			Name: "relational_pattern",
			Pattern: "(relational_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "return_statement",
			Pattern: "(return_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "scoped_type",
			Pattern: "(scoped_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				Children: []string{

					"alias_qualified_name",

					"generic_name",

					"identifier",

					"qualified_name",

					"ref_type",

				},
				
			},
			
		},

		{
			Name: "select_clause",
			Pattern: "(select_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "sizeof_expression",
			Pattern: "(sizeof_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"type",

				},
				
			},
			
		},

		{
			Name: "stackalloc_expression",
			Pattern: "(stackalloc_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"array_type",

				},
				
			},
			
		},

		{
			Name: "string_literal",
			Pattern: "(string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "string_literal_content",
			Pattern: "(string_literal_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "struct_declaration",
			Pattern: "(struct_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"declaration_list",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "subpattern",
			Pattern: "(subpattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "switch_body",
			Pattern: "(switch_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "switch_expression",
			Pattern: "(switch_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				
				
			},
			
		},

		{
			Name: "switch_expression_arm",
			Pattern: "(switch_expression_arm)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "switch_section",
			Pattern: "(switch_section)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				
				
			},
			
		},

		{
			Name: "switch_statement",
			Pattern: "(switch_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				Children: []string{

					"expression",

					"switch_body",

					"tuple_expression",

				},
				
			},
			
		},

		{
			Name: "throw_expression",
			Pattern: "(throw_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "throw_statement",
			Pattern: "(throw_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				Token: "self",
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "try_statement",
			Pattern: "(try_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "tuple_element",
			Pattern: "(tuple_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				Token: "self",
				
				Children: []string{

					"identifier",

					"type",

				},
				
			},
			
		},

		{
			Name: "tuple_expression",
			Pattern: "(tuple_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				
				
			},
			
		},

		{
			Name: "tuple_pattern",
			Pattern: "(tuple_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				Token: "self",
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "tuple_type",
			Pattern: "(tuple_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				
				
			},
			
		},

		{
			Name: "type_argument_list",
			Pattern: "(type_argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_parameter",
			Pattern: "(type_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "type_parameter_constraint",
			Pattern: "(type_parameter_constraint)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Parameter",

				},
				Children: []string{

					"type",

				},
				
			},
			
		},

		{
			Name: "type_parameter_constraints_clause",
			Pattern: "(type_parameter_constraints_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_parameter_list",
			Pattern: "(type_parameter_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_pattern",
			Pattern: "(type_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"type",

				},
				
			},
			
		},

		{
			Name: "typeof_expression",
			Pattern: "(typeof_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				Children: []string{

					"type",

				},
				
			},
			
		},

		{
			Name: "unary_expression",
			Pattern: "(unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"binary_expression",

					"boolean_literal",

					"character_literal",

					"identifier",

					"integer_literal",

					"parenthesized_expression",

					"unary_expression",

				},
				
			},
			
		},

		{
			Name: "unsafe_statement",
			Pattern: "(unsafe_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "UnaryOp",
				Token: "self",
				Roles: []string{

					"Operator",

				},
				
				
			},
			
		},

		{
			Name: "using_directive",
			Pattern: "(using_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "using_statement",
			Pattern: "(using_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"statement",

				},
				
			},
			
		},

		{
			Name: "var_pattern",
			Pattern: "(var_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "variable_declaration",
			Pattern: "(variable_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"type",

				},
				
			},
			
		},

		{
			Name: "variable_declarator",
			Pattern: "(variable_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "when_clause",
			Pattern: "(when_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "where_clause",
			Pattern: "(where_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "with_expression",
			Pattern: "(with_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "with_initializer",
			Pattern: "(with_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "yield_statement",
			Pattern: "(yield_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "Cdecl",
			Pattern: "(Cdecl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "Fastcall",
			Pattern: "(Fastcall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "Stdcall",
			Pattern: "(Stdcall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "Thiscall",
			Pattern: "(Thiscall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "__makeref",
			Pattern: "(__makeref)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__reftype",
			Pattern: "(__reftype)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__refvalue",
			Pattern: "(__refvalue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "abstract",
			Pattern: "(abstract)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "add",
			Pattern: "(add)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "alias",
			Pattern: "(alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "and",
			Pattern: "(and)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "annotations",
			Pattern: "(annotations)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "as",
			Pattern: "(as)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ascending",
			Pattern: "(ascending)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "assembly",
			Pattern: "(assembly)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "async",
			Pattern: "(async)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "await",
			Pattern: "(await)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "base",
			Pattern: "(base)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "by",
			Pattern: "(by)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "catch",
			Pattern: "(catch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "character_literal_content",
			Pattern: "(character_literal_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "checked",
			Pattern: "(checked)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "checksum",
			Pattern: "(checksum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "const",
			Pattern: "(const)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "delegate",
			Pattern: "(delegate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "descending",
			Pattern: "(descending)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "disable",
			Pattern: "(disable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "discard",
			Pattern: "(discard)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "enable",
			Pattern: "(enable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "equals",
			Pattern: "(equals)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "event",
			Pattern: "(event)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "explicit",
			Pattern: "(explicit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extern",
			Pattern: "(extern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "field",
			Pattern: "(field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "file",
			Pattern: "(file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "finally",
			Pattern: "(finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "fixed",
			Pattern: "(fixed)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "foreach",
			Pattern: "(foreach)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "from",
			Pattern: "(from)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "get",
			Pattern: "(get)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "global",
			Pattern: "(global)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "goto",
			Pattern: "(goto)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "group",
			Pattern: "(group)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "hidden",
			Pattern: "(hidden)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "implicit",
			Pattern: "(implicit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "init",
			Pattern: "(init)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "integer_literal",
			Pattern: "(integer_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "interface",
			Pattern: "(interface)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "internal",
			Pattern: "(internal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "interpolation_brace",
			Pattern: "(interpolation_brace)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "interpolation_quote",
			Pattern: "(interpolation_quote)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "interpolation_start",
			Pattern: "(interpolation_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "into",
			Pattern: "(into)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "is",
			Pattern: "(is)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "join",
			Pattern: "(join)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "let",
			Pattern: "(let)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "lock",
			Pattern: "(lock)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "managed",
			Pattern: "(managed)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "method",
			Pattern: "(method)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "module",
			Pattern: "(module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "namespace",
			Pattern: "(namespace)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "new",
			Pattern: "(new)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "not",
			Pattern: "(not)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "notnull",
			Pattern: "(notnull)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "null_literal",
			Pattern: "(null_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "on",
			Pattern: "(on)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "operator",
			Pattern: "(operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "or",
			Pattern: "(or)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "orderby",
			Pattern: "(orderby)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "out",
			Pattern: "(out)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "override",
			Pattern: "(override)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "param",
			Pattern: "(param)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "params",
			Pattern: "(params)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "partial",
			Pattern: "(partial)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "predefined_type",
			Pattern: "(predefined_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "preproc_arg",
			Pattern: "(preproc_arg)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "private",
			Pattern: "(private)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "property",
			Pattern: "(property)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "protected",
			Pattern: "(protected)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "public",
			Pattern: "(public)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "raw_string_content",
			Pattern: "(raw_string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "raw_string_end",
			Pattern: "(raw_string_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "raw_string_start",
			Pattern: "(raw_string_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "readonly",
			Pattern: "(readonly)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "real_literal",
			Pattern: "(real_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "record",
			Pattern: "(record)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ref",
			Pattern: "(ref)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "remove",
			Pattern: "(remove)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "required",
			Pattern: "(required)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "restore",
			Pattern: "(restore)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "scoped",
			Pattern: "(scoped)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "sealed",
			Pattern: "(sealed)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "select",
			Pattern: "(select)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "set",
			Pattern: "(set)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "shebang_directive",
			Pattern: "(shebang_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "sizeof",
			Pattern: "(sizeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "stackalloc",
			Pattern: "(stackalloc)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "static",
			Pattern: "(static)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_content",
			Pattern: "(string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string_literal_encoding",
			Pattern: "(string_literal_encoding)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "struct",
			Pattern: "(struct)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "switch",
			Pattern: "(switch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "this",
			Pattern: "(this)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "throw",
			Pattern: "(throw)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				Token: "self",
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "typeof",
			Pattern: "(typeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "typevar",
			Pattern: "(typevar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unchecked",
			Pattern: "(unchecked)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unmanaged",
			Pattern: "(unmanaged)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unsafe",
			Pattern: "(unsafe)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "using",
			Pattern: "(using)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "var",
			Pattern: "(var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "verbatim_string_literal",
			Pattern: "(verbatim_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "virtual",
			Pattern: "(virtual)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "volatile",
			Pattern: "(volatile)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "warning",
			Pattern: "(warning)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "warnings",
			Pattern: "(warnings)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "when",
			Pattern: "(when)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "where",
			Pattern: "(where)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "with",
			Pattern: "(with)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &c_sharpPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *c_sharpPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *c_sharpPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *c_sharpPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *c_sharpPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *c_sharpPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// clojurePatternMatcher provides pre-compiled pattern matching for clojure
type clojurePatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newclojurePatternMatcher() *clojurePatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "anon_fn_lit",
			Pattern: "(anon_fn_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "auto_res_mark",
			Pattern: "(auto_res_mark)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "derefing_lit",
			Pattern: "(derefing_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "dis_expr",
			Pattern: "(dis_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "evaling_lit",
			Pattern: "(evaling_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"list_lit",

					"meta_lit",

					"old_meta_lit",

					"read_cond_lit",

					"sym_lit",

				},
				
			},
			
		},

		{
			Name: "kwd_lit",
			Pattern: "(kwd_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Name",

				},
				Children: []string{

					"kwd_name",

					"kwd_ns",

				},
				
			},
			
		},

		{
			Name: "list_lit",
			Pattern: "(list_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "map_lit",
			Pattern: "(map_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Map",
				Token: "self",
				Roles: []string{

					"Map",

				},
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "meta_lit",
			Pattern: "(meta_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "ns_map_lit",
			Pattern: "(ns_map_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"anon_fn_lit",

					"auto_res_mark",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "old_meta_lit",
			Pattern: "(old_meta_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "quoting_lit",
			Pattern: "(quoting_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "read_cond_lit",
			Pattern: "(read_cond_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "regex_lit",
			Pattern: "(regex_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "set_lit",
			Pattern: "(set_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				Roles: []string{

					"Set",

				},
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "source",
			Pattern: "(source)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "splicing_read_cond_lit",
			Pattern: "(splicing_read_cond_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "str_lit",
			Pattern: "(str_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "sym_lit",
			Pattern: "(sym_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				Children: []string{

					"meta_lit",

					"old_meta_lit",

					"sym_name",

					"sym_ns",

				},
				
			},
			
		},

		{
			Name: "sym_val_lit",
			Pattern: "(sym_val_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "syn_quoting_lit",
			Pattern: "(syn_quoting_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "tagged_or_ctor_lit",
			Pattern: "(tagged_or_ctor_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "unquote_splicing_lit",
			Pattern: "(unquote_splicing_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "unquoting_lit",
			Pattern: "(unquoting_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "var_quoting_lit",
			Pattern: "(var_quoting_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "vec_lit",
			Pattern: "(vec_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				Roles: []string{

					"List",

				},
				Children: []string{

					"anon_fn_lit",

					"bool_lit",

					"char_lit",

					"derefing_lit",

					"evaling_lit",

					"kwd_lit",

					"list_lit",

					"map_lit",

					"meta_lit",

					"nil_lit",

					"ns_map_lit",

					"num_lit",

					"old_meta_lit",

					"quoting_lit",

					"read_cond_lit",

					"regex_lit",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"sym_val_lit",

					"syn_quoting_lit",

					"tagged_or_ctor_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "bool_lit",
			Pattern: "(bool_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "char_lit",
			Pattern: "(char_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "kwd_name",
			Pattern: "(kwd_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "kwd_ns",
			Pattern: "(kwd_ns)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "nil_lit",
			Pattern: "(nil_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

					"Null",

				},
				
				
			},
			
		},

		{
			Name: "num_lit",
			Pattern: "(num_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

					"Number",

				},
				
				
			},
			
		},

		{
			Name: "sym_name",
			Pattern: "(sym_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "sym_ns",
			Pattern: "(sym_ns)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &clojurePatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *clojurePatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *clojurePatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *clojurePatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *clojurePatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *clojurePatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// cmakePatternMatcher provides pre-compiled pattern matching for cmake
type cmakePatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newcmakePatternMatcher() *cmakePatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "argument",
			Pattern: "(argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "argument_list",
			Pattern: "(argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "block_command",
			Pattern: "(block_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_def",
			Pattern: "(block_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "body",
			Pattern: "(body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bracket_argument",
			Pattern: "(bracket_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "bracket_comment",
			Pattern: "(bracket_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "cache_var",
			Pattern: "(cache_var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "else_command",
			Pattern: "(else_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "elseif_command",
			Pattern: "(elseif_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "endblock_command",
			Pattern: "(endblock_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "endforeach_command",
			Pattern: "(endforeach_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "endfunction_command",
			Pattern: "(endfunction_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "endif_command",
			Pattern: "(endif_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "endmacro_command",
			Pattern: "(endmacro_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "endwhile_command",
			Pattern: "(endwhile_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "env_var",
			Pattern: "(env_var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "foreach_command",
			Pattern: "(foreach_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "foreach_loop",
			Pattern: "(foreach_loop)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "function_command",
			Pattern: "(function_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "function_def",
			Pattern: "(function_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "if_command",
			Pattern: "(if_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				Roles: []string{

					"Condition",

				},
				
				
			},
			
		},

		{
			Name: "if_condition",
			Pattern: "(if_condition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "macro_command",
			Pattern: "(macro_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "macro_def",
			Pattern: "(macro_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "normal_command",
			Pattern: "(normal_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "normal_var",
			Pattern: "(normal_var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "quoted_argument",
			Pattern: "(quoted_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "quoted_element",
			Pattern: "(quoted_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "source_file",
			Pattern: "(source_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unquoted_argument",
			Pattern: "(unquoted_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "File",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "variable",
			Pattern: "(variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "variable_ref",
			Pattern: "(variable_ref)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "while_command",
			Pattern: "(while_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "while_loop",
			Pattern: "(while_loop)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "CACHE",
			Pattern: "(CACHE)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ENV",
			Pattern: "(ENV)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "bracket_argument_close",
			Pattern: "(bracket_argument_close)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "bracket_argument_content",
			Pattern: "(bracket_argument_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bracket_argument_open",
			Pattern: "(bracket_argument_open)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "bracket_comment_close",
			Pattern: "(bracket_comment_close)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "bracket_comment_content",
			Pattern: "(bracket_comment_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "bracket_comment_open",
			Pattern: "(bracket_comment_open)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "elseif",
			Pattern: "(elseif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				Roles: []string{

					"Condition",

				},
				
				
			},
			
		},

		{
			Name: "endblock",
			Pattern: "(endblock)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "endforeach",
			Pattern: "(endforeach)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "endfunction",
			Pattern: "(endfunction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "endif",
			Pattern: "(endif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				Roles: []string{

					"Condition",

				},
				
				
			},
			
		},

		{
			Name: "endmacro",
			Pattern: "(endmacro)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "endwhile",
			Pattern: "(endwhile)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "foreach",
			Pattern: "(foreach)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "function",
			Pattern: "(function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "line_comment",
			Pattern: "(line_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "macro",
			Pattern: "(macro)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &cmakePatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *cmakePatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *cmakePatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *cmakePatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *cmakePatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *cmakePatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// commonlispPatternMatcher provides pre-compiled pattern matching for commonlisp
type commonlispPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newcommonlispPatternMatcher() *commonlispPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "accumulation_clause",
			Pattern: "(accumulation_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "accumulation_verb",
			Pattern: "(accumulation_verb)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "array_dimension",
			Pattern: "(array_dimension)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "char_lit",
			Pattern: "(char_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "complex_num_lit",
			Pattern: "(complex_num_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"meta_lit",

					"num_lit",

					"old_meta_lit",

				},
				
			},
			
		},

		{
			Name: "condition_clause",
			Pattern: "(condition_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "defun",
			Pattern: "(defun)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"nil_lit",

					"num_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "defun_header",
			Pattern: "(defun_header)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"char_lit",

					"comment",

					"complex_num_lit",

					"defun_keyword",

					"dis_expr",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"nil_lit",

					"num_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "defun_keyword",
			Pattern: "(defun_keyword)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "dis_expr",
			Pattern: "(dis_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"nil_lit",

					"num_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "do_clause",
			Pattern: "(do_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "for_clause",
			Pattern: "(for_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"char_lit",

					"comment",

					"complex_num_lit",

					"dis_expr",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"nil_lit",

					"num_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "for_clause_word",
			Pattern: "(for_clause_word)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "format_directive_type",
			Pattern: "(format_directive_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"char_lit",

					"num_lit",

				},
				
			},
			
		},

		{
			Name: "format_modifiers",
			Pattern: "(format_modifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "format_prefix_parameters",
			Pattern: "(format_prefix_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "format_specifier",
			Pattern: "(format_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "include_reader_macro",
			Pattern: "(include_reader_macro)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"meta_lit",

					"nil_lit",

					"num_lit",

					"old_meta_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "kwd_lit",
			Pattern: "(kwd_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "kwd_symbol",
			Pattern: "(kwd_symbol)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "list_lit",
			Pattern: "(list_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"meta_lit",

					"nil_lit",

					"num_lit",

					"old_meta_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "loop_clause",
			Pattern: "(loop_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "loop_macro",
			Pattern: "(loop_macro)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "map_lit",
			Pattern: "(map_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"meta_lit",

					"nil_lit",

					"num_lit",

					"old_meta_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "meta_lit",
			Pattern: "(meta_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"kwd_lit",

					"map_lit",

					"read_cond_lit",

					"str_lit",

					"sym_lit",

				},
				
			},
			
		},

		{
			Name: "num_lit",
			Pattern: "(num_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "old_meta_lit",
			Pattern: "(old_meta_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"kwd_lit",

					"map_lit",

					"read_cond_lit",

					"str_lit",

					"sym_lit",

				},
				
			},
			
		},

		{
			Name: "package_lit",
			Pattern: "(package_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Package",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"cl",

					"sym_lit",

				},
				
			},
			
		},

		{
			Name: "path_lit",
			Pattern: "(path_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "quoting_lit",
			Pattern: "(quoting_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"meta_lit",

					"nil_lit",

					"num_lit",

					"old_meta_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "read_cond_lit",
			Pattern: "(read_cond_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"meta_lit",

					"nil_lit",

					"num_lit",

					"old_meta_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "repeat_clause",
			Pattern: "(repeat_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "set_lit",
			Pattern: "(set_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"meta_lit",

					"nil_lit",

					"num_lit",

					"old_meta_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "source",
			Pattern: "(source)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "splicing_read_cond_lit",
			Pattern: "(splicing_read_cond_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"meta_lit",

					"nil_lit",

					"num_lit",

					"old_meta_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "str_lit",
			Pattern: "(str_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "sym_lit",
			Pattern: "(sym_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "syn_quoting_lit",
			Pattern: "(syn_quoting_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"nil_lit",

					"num_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "termination_clause",
			Pattern: "(termination_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "unquote_splicing_lit",
			Pattern: "(unquote_splicing_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"meta_lit",

					"nil_lit",

					"num_lit",

					"old_meta_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "unquoting_lit",
			Pattern: "(unquoting_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"nil_lit",

					"num_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "var_quoting_lit",
			Pattern: "(var_quoting_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"meta_lit",

					"nil_lit",

					"num_lit",

					"old_meta_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "vec_lit",
			Pattern: "(vec_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"meta_lit",

					"nil_lit",

					"num_lit",

					"old_meta_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "while_clause",
			Pattern: "(while_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "with_clause",
			Pattern: "(with_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"char_lit",

					"complex_num_lit",

					"fancy_literal",

					"include_reader_macro",

					"kwd_lit",

					"list_lit",

					"nil_lit",

					"num_lit",

					"package_lit",

					"path_lit",

					"quoting_lit",

					"read_cond_lit",

					"self_referential_reader_macro",

					"set_lit",

					"splicing_read_cond_lit",

					"str_lit",

					"sym_lit",

					"syn_quoting_lit",

					"unquote_splicing_lit",

					"unquoting_lit",

					"var_quoting_lit",

					"vec_lit",

				},
				
			},
			
		},

		{
			Name: "Newline",
			Pattern: "(Newline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "V",
			Pattern: "(V)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_",
			Pattern: "(_)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "above",
			Pattern: "(above)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "across",
			Pattern: "(across)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "always",
			Pattern: "(always)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "and",
			Pattern: "(and)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "as",
			Pattern: "(as)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "being",
			Pattern: "(being)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "below",
			Pattern: "(below)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "block_comment",
			Pattern: "(block_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "by",
			Pattern: "(by)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "cl",
			Pattern: "(cl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "defgeneric",
			Pattern: "(defgeneric)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "defmacro",
			Pattern: "(defmacro)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "defmethod",
			Pattern: "(defmethod)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "defun",
			Pattern: "(defun)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "downfrom",
			Pattern: "(downfrom)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "downto",
			Pattern: "(downto)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "fancy_literal",
			Pattern: "(fancy_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "finally",
			Pattern: "(finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "from",
			Pattern: "(from)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "initially",
			Pattern: "(initially)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "into",
			Pattern: "(into)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "loop",
			Pattern: "(loop)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "never",
			Pattern: "(never)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "nil_lit",
			Pattern: "(nil_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "on",
			Pattern: "(on)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "repeat",
			Pattern: "(repeat)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "self_referential_reader_macro",
			Pattern: "(self_referential_reader_macro)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "then",
			Pattern: "(then)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "thereis",
			Pattern: "(thereis)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "to",
			Pattern: "(to)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unless",
			Pattern: "(unless)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "until",
			Pattern: "(until)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "upfrom",
			Pattern: "(upfrom)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "upto",
			Pattern: "(upto)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "using",
			Pattern: "(using)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "v",
			Pattern: "(v)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "when",
			Pattern: "(when)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "with",
			Pattern: "(with)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &commonlispPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *commonlispPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *commonlispPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *commonlispPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *commonlispPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *commonlispPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// cppPatternMatcher provides pre-compiled pattern matching for cpp
type cppPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newcppPatternMatcher() *cppPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "_abstract_declarator",
			Pattern: "(_abstract_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_declarator",
			Pattern: "(_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_field_declarator",
			Pattern: "(_field_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "_type_declarator",
			Pattern: "(_type_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "expression",
			Pattern: "(expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "statement",
			Pattern: "(statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_specifier",
			Pattern: "(type_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "abstract_array_declarator",
			Pattern: "(abstract_array_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_abstract_declarator",

					"expression",

				},
				
			},
			
		},

		{
			Name: "abstract_function_declarator",
			Pattern: "(abstract_function_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"_abstract_declarator",

					"parameter_list",

				},
				
			},
			
		},

		{
			Name: "abstract_parenthesized_declarator",
			Pattern: "(abstract_parenthesized_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "abstract_pointer_declarator",
			Pattern: "(abstract_pointer_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_abstract_declarator",

				},
				
			},
			
		},

		{
			Name: "abstract_reference_declarator",
			Pattern: "(abstract_reference_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "access_specifier",
			Pattern: "(access_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "alias_declaration",
			Pattern: "(alias_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"type_descriptor",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "alignas_qualifier",
			Pattern: "(alignas_qualifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "alignof_expression",
			Pattern: "(alignof_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"type_descriptor",

				},
				
			},
			
		},

		{
			Name: "argument_list",
			Pattern: "(argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "array_declarator",
			Pattern: "(array_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_declarator",

					"_field_declarator",

					"_type_declarator",

					"expression",

				},
				
			},
			
		},

		{
			Name: "assignment_expression",
			Pattern: "(assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"and_eq",

					"expression",

					"initializer_list",

					"or_eq",

					"xor_eq",

				},
				
			},
			
		},

		{
			Name: "attribute",
			Pattern: "(attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "attribute_declaration",
			Pattern: "(attribute_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "attribute_specifier",
			Pattern: "(attribute_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "attributed_declarator",
			Pattern: "(attributed_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "attributed_statement",
			Pattern: "(attributed_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "base_class_clause",
			Pattern: "(base_class_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"and",

					"bitand",

					"bitor",

					"expression",

					"not_eq",

					"or",

					"preproc_defined",

					"xor",

				},
				
			},
			
		},

		{
			Name: "bitfield_clause",
			Pattern: "(bitfield_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "break_statement",
			Pattern: "(break_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "call_expression",
			Pattern: "(call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"argument_list",

					"expression",

					"primitive_type",

				},
				
			},
			
		},

		{
			Name: "case_statement",
			Pattern: "(case_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "cast_expression",
			Pattern: "(cast_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				
				
				Children: []string{

					"expression",

					"type_descriptor",

				},
				
			},
			
		},

		{
			Name: "catch_clause",
			Pattern: "(catch_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				Token: "self",
				Roles: []string{

					"Catch",

				},
				Children: []string{

					"compound_statement",

					"parameter_list",

				},
				
			},
			
		},

		{
			Name: "char_literal",
			Pattern: "(char_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "class_specifier",
			Pattern: "(class_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"field_declaration_list",

					"qualified_identifier",

					"template_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "co_await_expression",
			Pattern: "(co_await_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				
				Roles: []string{

					"Await",

				},
				Children: []string{

					"co_await",

					"expression",

				},
				
			},
			
		},

		{
			Name: "co_return_statement",
			Pattern: "(co_return_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "co_yield_statement",
			Pattern: "(co_yield_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "comma_expression",
			Pattern: "(comma_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"comma_expression",

					"expression",

				},
				
			},
			
		},

		{
			Name: "compound_literal_expression",
			Pattern: "(compound_literal_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"initializer_list",

					"primitive_type",

					"qualified_identifier",

					"template_type",

					"type_descriptor",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "compound_requirement",
			Pattern: "(compound_requirement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "compound_statement",
			Pattern: "(compound_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "concatenated_string",
			Pattern: "(concatenated_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "concept_definition",
			Pattern: "(concept_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "condition_clause",
			Pattern: "(condition_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"comma_expression",

					"declaration",

					"expression",

					"init_statement",

				},
				
			},
			
		},

		{
			Name: "conditional_expression",
			Pattern: "(conditional_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"comma_expression",

					"expression",

				},
				
			},
			
		},

		{
			Name: "constraint_conjunction",
			Pattern: "(constraint_conjunction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"and",

					"constraint_conjunction",

					"constraint_disjunction",

					"expression",

					"template_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "constraint_disjunction",
			Pattern: "(constraint_disjunction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"constraint_conjunction",

					"constraint_disjunction",

					"expression",

					"or",

					"template_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "continue_statement",
			Pattern: "(continue_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "declaration",
			Pattern: "(declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_declarator",

					"expression",

					"gnu_asm_expression",

					"init_declarator",

					"initializer_list",

					"ms_call_modifier",

					"operator_cast",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "declaration_list",
			Pattern: "(declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "decltype",
			Pattern: "(decltype)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "default_method_clause",
			Pattern: "(default_method_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "delete_expression",
			Pattern: "(delete_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "delete_method_clause",
			Pattern: "(delete_method_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "dependent_name",
			Pattern: "(dependent_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "dependent_type",
			Pattern: "(dependent_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "destructor_name",
			Pattern: "(destructor_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "do_statement",
			Pattern: "(do_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "else_clause",
			Pattern: "(else_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "enum_specifier",
			Pattern: "(enum_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"enumerator_list",

					"primitive_type",

					"qualified_identifier",

					"sized_type_specifier",

					"template_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "enumerator",
			Pattern: "(enumerator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"expression",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "enumerator_list",
			Pattern: "(enumerator_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "explicit_function_specifier",
			Pattern: "(explicit_function_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "explicit_object_parameter_declaration",
			Pattern: "(explicit_object_parameter_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "export_declaration",
			Pattern: "(export_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expression_statement",
			Pattern: "(expression_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "extension_expression",
			Pattern: "(extension_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "field_declaration",
			Pattern: "(field_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"_field_declarator",

					"expression",

					"initializer_list",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "field_declaration_list",
			Pattern: "(field_declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "field_designator",
			Pattern: "(field_designator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "field_expression",
			Pattern: "(field_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"dependent_name",

					"destructor_name",

					"expression",

					"field_identifier",

					"qualified_identifier",

					"template_method",

				},
				
			},
			
		},

		{
			Name: "field_initializer",
			Pattern: "(field_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "field_initializer_list",
			Pattern: "(field_initializer_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "fold_expression",
			Pattern: "(fold_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"and",

					"bitand",

					"bitor",

					"expression",

					"not_eq",

					"or",

					"xor",

				},
				
			},
			
		},

		{
			Name: "for_range_loop",
			Pattern: "(for_range_loop)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"_declarator",

					"expression",

					"init_statement",

					"initializer_list",

					"statement",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"comma_expression",

					"declaration",

					"expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "friend_declaration",
			Pattern: "(friend_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "function_declarator",
			Pattern: "(function_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"_declarator",

					"_field_declarator",

					"_type_declarator",

					"parameter_list",

				},
				
			},
			
		},

		{
			Name: "function_definition",
			Pattern: "(function_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"_declarator",

					"_field_declarator",

					"compound_statement",

					"operator_cast",

					"try_statement",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "generic_expression",
			Pattern: "(generic_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "global_module_fragment_declaration",
			Pattern: "(global_module_fragment_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "gnu_asm_clobber_list",
			Pattern: "(gnu_asm_clobber_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"concatenated_string",

					"raw_string_literal",

					"string_literal",

				},
				
			},
			
		},

		{
			Name: "gnu_asm_expression",
			Pattern: "(gnu_asm_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"concatenated_string",

					"gnu_asm_clobber_list",

					"gnu_asm_goto_list",

					"gnu_asm_input_operand_list",

					"gnu_asm_output_operand_list",

					"raw_string_literal",

					"string_literal",

				},
				
			},
			
		},

		{
			Name: "gnu_asm_goto_list",
			Pattern: "(gnu_asm_goto_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "gnu_asm_input_operand",
			Pattern: "(gnu_asm_input_operand)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"identifier",

					"string_literal",

				},
				
			},
			
		},

		{
			Name: "gnu_asm_input_operand_list",
			Pattern: "(gnu_asm_input_operand_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"gnu_asm_input_operand",

				},
				
			},
			
		},

		{
			Name: "gnu_asm_output_operand",
			Pattern: "(gnu_asm_output_operand)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"identifier",

					"string_literal",

				},
				
			},
			
		},

		{
			Name: "gnu_asm_output_operand_list",
			Pattern: "(gnu_asm_output_operand_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"gnu_asm_output_operand",

				},
				
			},
			
		},

		{
			Name: "gnu_asm_qualifier",
			Pattern: "(gnu_asm_qualifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "goto_statement",
			Pattern: "(goto_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"statement_identifier",

				},
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				Roles: []string{

					"Condition",

				},
				Children: []string{

					"condition_clause",

					"else_clause",

					"statement",

				},
				
			},
			
		},

		{
			Name: "import_declaration",
			Pattern: "(import_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"module_name",

					"module_partition",

					"string_literal",

					"system_lib_string",

				},
				
			},
			
		},

		{
			Name: "init_declarator",
			Pattern: "(init_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_declarator",

					"argument_list",

					"expression",

					"initializer_list",

				},
				
			},
			
		},

		{
			Name: "init_statement",
			Pattern: "(init_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "initializer_list",
			Pattern: "(initializer_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "initializer_pair",
			Pattern: "(initializer_pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"expression",

					"field_designator",

					"field_identifier",

					"initializer_list",

					"subscript_designator",

					"subscript_range_designator",

				},
				
			},
			
		},

		{
			Name: "labeled_statement",
			Pattern: "(labeled_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"statement_identifier",

				},
				
			},
			
		},

		{
			Name: "lambda_capture_initializer",
			Pattern: "(lambda_capture_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				Token: "self",
				Roles: []string{

					"Lambda",

				},
				Children: []string{

					"expression",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "lambda_capture_specifier",
			Pattern: "(lambda_capture_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "lambda_declarator",
			Pattern: "(lambda_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				Token: "self",
				Roles: []string{

					"Lambda",

				},
				Children: []string{

					"parameter_list",

				},
				
			},
			
		},

		{
			Name: "lambda_default_capture",
			Pattern: "(lambda_default_capture)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				
				Roles: []string{

					"Lambda",

				},
				
				
			},
			
		},

		{
			Name: "lambda_expression",
			Pattern: "(lambda_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				Token: "self",
				Roles: []string{

					"Lambda",

				},
				Children: []string{

					"compound_statement",

					"lambda_capture_specifier",

					"lambda_declarator",

					"requires_clause",

					"template_parameter_list",

				},
				
			},
			
		},

		{
			Name: "lambda_specifier",
			Pattern: "(lambda_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "linkage_specification",
			Pattern: "(linkage_specification)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"declaration",

					"declaration_list",

					"function_definition",

					"string_literal",

				},
				
			},
			
		},

		{
			Name: "module_declaration",
			Pattern: "(module_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				Children: []string{

					"module_name",

					"module_partition",

				},
				
			},
			
		},

		{
			Name: "module_name",
			Pattern: "(module_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "module_partition",
			Pattern: "(module_partition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "ms_based_modifier",
			Pattern: "(ms_based_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ms_call_modifier",
			Pattern: "(ms_call_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "ms_declspec_modifier",
			Pattern: "(ms_declspec_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ms_pointer_modifier",
			Pattern: "(ms_pointer_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "ms_unaligned_ptr_modifier",
			Pattern: "(ms_unaligned_ptr_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "namespace_alias_definition",
			Pattern: "(namespace_alias_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				
				Roles: []string{

					"Module",

				},
				Children: []string{

					"namespace_identifier",

				},
				
			},
			
		},

		{
			Name: "namespace_definition",
			Pattern: "(namespace_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"declaration_list",

					"namespace_identifier",

					"nested_namespace_specifier",

				},
				
			},
			
		},

		{
			Name: "nested_namespace_specifier",
			Pattern: "(nested_namespace_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "new_declarator",
			Pattern: "(new_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "new_expression",
			Pattern: "(new_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"argument_list",

					"initializer_list",

					"new_declarator",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "noexcept",
			Pattern: "(noexcept)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "null",
			Pattern: "(null)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "offsetof_expression",
			Pattern: "(offsetof_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				Children: []string{

					"field_identifier",

					"type_descriptor",

				},
				
			},
			
		},

		{
			Name: "operator_cast",
			Pattern: "(operator_cast)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				
				
				Children: []string{

					"_abstract_declarator",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "operator_name",
			Pattern: "(operator_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "optional_parameter_declaration",
			Pattern: "(optional_parameter_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_declarator",

					"abstract_reference_declarator",

					"expression",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "optional_type_parameter_declaration",
			Pattern: "(optional_type_parameter_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"type_identifier",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "parameter_declaration",
			Pattern: "(parameter_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_abstract_declarator",

					"_declarator",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "parameter_list",
			Pattern: "(parameter_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parameter_pack_expansion",
			Pattern: "(parameter_pack_expansion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"expression",

					"type_descriptor",

				},
				
			},
			
		},

		{
			Name: "parenthesized_declarator",
			Pattern: "(parenthesized_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "placeholder_type_specifier",
			Pattern: "(placeholder_type_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"qualified_identifier",

					"template_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "pointer_declarator",
			Pattern: "(pointer_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_declarator",

					"_field_declarator",

					"_type_declarator",

				},
				
			},
			
		},

		{
			Name: "pointer_expression",
			Pattern: "(pointer_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "pointer_type_declarator",
			Pattern: "(pointer_type_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_type_declarator",

				},
				
			},
			
		},

		{
			Name: "preproc_call",
			Pattern: "(preproc_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				Children: []string{

					"preproc_arg",

					"preproc_directive",

				},
				
			},
			
		},

		{
			Name: "preproc_def",
			Pattern: "(preproc_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

					"preproc_arg",

				},
				
			},
			
		},

		{
			Name: "preproc_defined",
			Pattern: "(preproc_defined)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "preproc_elif",
			Pattern: "(preproc_elif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"binary_expression",

					"call_expression",

					"char_literal",

					"identifier",

					"number_literal",

					"parenthesized_expression",

					"preproc_defined",

					"preproc_elif",

					"preproc_elifdef",

					"preproc_else",

					"unary_expression",

				},
				
			},
			
		},

		{
			Name: "preproc_elifdef",
			Pattern: "(preproc_elifdef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

					"preproc_elif",

					"preproc_elifdef",

					"preproc_else",

				},
				
			},
			
		},

		{
			Name: "preproc_else",
			Pattern: "(preproc_else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "preproc_function_def",
			Pattern: "(preproc_function_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"identifier",

					"preproc_arg",

					"preproc_params",

				},
				
			},
			
		},

		{
			Name: "preproc_if",
			Pattern: "(preproc_if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"binary_expression",

					"call_expression",

					"char_literal",

					"identifier",

					"number_literal",

					"parenthesized_expression",

					"preproc_defined",

					"preproc_elif",

					"preproc_elifdef",

					"preproc_else",

					"unary_expression",

				},
				
			},
			
		},

		{
			Name: "preproc_ifdef",
			Pattern: "(preproc_ifdef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				Roles: []string{

					"Condition",

				},
				Children: []string{

					"identifier",

					"preproc_elif",

					"preproc_elifdef",

					"preproc_else",

				},
				
			},
			
		},

		{
			Name: "preproc_include",
			Pattern: "(preproc_include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"call_expression",

					"identifier",

					"string_literal",

					"system_lib_string",

				},
				
			},
			
		},

		{
			Name: "preproc_params",
			Pattern: "(preproc_params)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "private_module_fragment_declaration",
			Pattern: "(private_module_fragment_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "pure_virtual_clause",
			Pattern: "(pure_virtual_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "qualified_identifier",
			Pattern: "(qualified_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"decltype",

					"dependent_name",

					"destructor_name",

					"field_identifier",

					"identifier",

					"namespace_identifier",

					"operator_cast",

					"operator_name",

					"pointer_type_declarator",

					"qualified_identifier",

					"template",

					"template_function",

					"template_method",

					"template_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "raw_string_literal",
			Pattern: "(raw_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Reference",

					"Literal",

				},
				Children: []string{

					"raw_string_delimiter",

				},
				
			},
			
		},

		{
			Name: "ref_qualifier",
			Pattern: "(ref_qualifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "reference_declarator",
			Pattern: "(reference_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "requirement_seq",
			Pattern: "(requirement_seq)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "requires_clause",
			Pattern: "(requires_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"constraint_conjunction",

					"constraint_disjunction",

					"expression",

					"template_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "requires_expression",
			Pattern: "(requires_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"parameter_list",

					"requirement_seq",

				},
				
			},
			
		},

		{
			Name: "return_statement",
			Pattern: "(return_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "seh_except_clause",
			Pattern: "(seh_except_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"compound_statement",

					"parenthesized_expression",

				},
				
			},
			
		},

		{
			Name: "seh_finally_clause",
			Pattern: "(seh_finally_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				Children: []string{

					"compound_statement",

				},
				
			},
			
		},

		{
			Name: "seh_leave_statement",
			Pattern: "(seh_leave_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "seh_try_statement",
			Pattern: "(seh_try_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				Children: []string{

					"compound_statement",

				},
				
			},
			
		},

		{
			Name: "simple_requirement",
			Pattern: "(simple_requirement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "sized_type_specifier",
			Pattern: "(sized_type_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"primitive_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "sizeof_expression",
			Pattern: "(sizeof_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"type_descriptor",

				},
				
			},
			
		},

		{
			Name: "static_assert_declaration",
			Pattern: "(static_assert_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"concatenated_string",

					"expression",

					"raw_string_literal",

					"string_literal",

				},
				
			},
			
		},

		{
			Name: "storage_class_specifier",
			Pattern: "(storage_class_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "string_literal",
			Pattern: "(string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "struct_specifier",
			Pattern: "(struct_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"field_declaration_list",

					"qualified_identifier",

					"template_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "structured_binding_declarator",
			Pattern: "(structured_binding_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "subscript_argument_list",
			Pattern: "(subscript_argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "subscript_designator",
			Pattern: "(subscript_designator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "subscript_expression",
			Pattern: "(subscript_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"subscript_argument_list",

				},
				
			},
			
		},

		{
			Name: "subscript_range_designator",
			Pattern: "(subscript_range_designator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "switch_statement",
			Pattern: "(switch_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				Children: []string{

					"compound_statement",

					"condition_clause",

				},
				
			},
			
		},

		{
			Name: "template_argument_list",
			Pattern: "(template_argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "template_declaration",
			Pattern: "(template_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"template_parameter_list",

				},
				
			},
			
		},

		{
			Name: "template_function",
			Pattern: "(template_function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"identifier",

					"template_argument_list",

				},
				
			},
			
		},

		{
			Name: "template_instantiation",
			Pattern: "(template_instantiation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_declarator",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "template_method",
			Pattern: "(template_method)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"field_identifier",

					"operator_name",

					"template_argument_list",

				},
				
			},
			
		},

		{
			Name: "template_parameter_list",
			Pattern: "(template_parameter_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "template_template_parameter_declaration",
			Pattern: "(template_template_parameter_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"template_parameter_list",

				},
				
			},
			
		},

		{
			Name: "template_type",
			Pattern: "(template_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"template_argument_list",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "throw_specifier",
			Pattern: "(throw_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "throw_statement",
			Pattern: "(throw_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "trailing_return_type",
			Pattern: "(trailing_return_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "translation_unit",
			Pattern: "(translation_unit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "try_statement",
			Pattern: "(try_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				Children: []string{

					"compound_statement",

				},
				
			},
			
		},

		{
			Name: "type_definition",
			Pattern: "(type_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_type_declarator",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "type_descriptor",
			Pattern: "(type_descriptor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_abstract_declarator",

					"type_specifier",

				},
				
			},
			
		},

		{
			Name: "type_parameter_declaration",
			Pattern: "(type_parameter_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_qualifier",
			Pattern: "(type_qualifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_requirement",
			Pattern: "(type_requirement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unary_expression",
			Pattern: "(unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"compl",

					"expression",

					"not",

					"preproc_defined",

				},
				
			},
			
		},

		{
			Name: "union_specifier",
			Pattern: "(union_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"field_declaration_list",

					"qualified_identifier",

					"template_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "update_expression",
			Pattern: "(update_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "user_defined_literal",
			Pattern: "(user_defined_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "using_declaration",
			Pattern: "(using_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "variadic_declarator",
			Pattern: "(variadic_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "variadic_parameter_declaration",
			Pattern: "(variadic_parameter_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"reference_declarator",

					"type_specifier",

					"variadic_declarator",

				},
				
			},
			
		},

		{
			Name: "variadic_type_parameter_declaration",
			Pattern: "(variadic_type_parameter_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "virtual_specifier",
			Pattern: "(virtual_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"condition_clause",

					"statement",

				},
				
			},
			
		},

		{
			Name: "NULL",
			Pattern: "(NULL)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "_Alignas",
			Pattern: "(_Alignas)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_Alignof",
			Pattern: "(_Alignof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_Atomic",
			Pattern: "(_Atomic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_Generic",
			Pattern: "(_Generic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_Nonnull",
			Pattern: "(_Nonnull)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_Noreturn",
			Pattern: "(_Noreturn)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "__alignof",
			Pattern: "(__alignof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__alignof__",
			Pattern: "(__alignof__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__asm",
			Pattern: "(__asm)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__asm__",
			Pattern: "(__asm__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__attribute",
			Pattern: "(__attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "__attribute__",
			Pattern: "(__attribute__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "__based",
			Pattern: "(__based)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__cdecl",
			Pattern: "(__cdecl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__clrcall",
			Pattern: "(__clrcall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "__declspec",
			Pattern: "(__declspec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__except",
			Pattern: "(__except)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__extension__",
			Pattern: "(__extension__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__fastcall",
			Pattern: "(__fastcall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "__finally",
			Pattern: "(__finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "__forceinline",
			Pattern: "(__forceinline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "__inline",
			Pattern: "(__inline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__inline__",
			Pattern: "(__inline__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__leave",
			Pattern: "(__leave)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__restrict__",
			Pattern: "(__restrict__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__stdcall",
			Pattern: "(__stdcall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "__thiscall",
			Pattern: "(__thiscall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "__thread",
			Pattern: "(__thread)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__try",
			Pattern: "(__try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "__unaligned",
			Pattern: "(__unaligned)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__vectorcall",
			Pattern: "(__vectorcall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "__volatile__",
			Pattern: "(__volatile__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_alignof",
			Pattern: "(_alignof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_unaligned",
			Pattern: "(_unaligned)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "alignas",
			Pattern: "(alignas)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "alignof",
			Pattern: "(alignof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "and",
			Pattern: "(and)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "and_eq",
			Pattern: "(and_eq)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "asm",
			Pattern: "(asm)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "auto",
			Pattern: "(auto)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "bitand",
			Pattern: "(bitand)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bitor",
			Pattern: "(bitor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "catch",
			Pattern: "(catch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "character",
			Pattern: "(character)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "co_await",
			Pattern: "(co_await)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "co_return",
			Pattern: "(co_return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "co_yield",
			Pattern: "(co_yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Return",

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "compl",
			Pattern: "(compl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "concept",
			Pattern: "(concept)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "const",
			Pattern: "(const)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "consteval",
			Pattern: "(consteval)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "constexpr",
			Pattern: "(constexpr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "constinit",
			Pattern: "(constinit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "decltype",
			Pattern: "(decltype)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "defined",
			Pattern: "(defined)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "delete",
			Pattern: "(delete)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "explicit",
			Pattern: "(explicit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "export",
			Pattern: "(export)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "extern",
			Pattern: "(extern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field_identifier",
			Pattern: "(field_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "final",
			Pattern: "(final)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "friend",
			Pattern: "(friend)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "goto",
			Pattern: "(goto)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "inline",
			Pattern: "(inline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "literal_suffix",
			Pattern: "(literal_suffix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "long",
			Pattern: "(long)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "module",
			Pattern: "(module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "ms_restrict_modifier",
			Pattern: "(ms_restrict_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "ms_signed_ptr_modifier",
			Pattern: "(ms_signed_ptr_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ms_unsigned_ptr_modifier",
			Pattern: "(ms_unsigned_ptr_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "mutable",
			Pattern: "(mutable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "namespace",
			Pattern: "(namespace)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "namespace_identifier",
			Pattern: "(namespace_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "new",
			Pattern: "(new)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "noexcept",
			Pattern: "(noexcept)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "noreturn",
			Pattern: "(noreturn)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "not",
			Pattern: "(not)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "not_eq",
			Pattern: "(not_eq)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "nullptr",
			Pattern: "(nullptr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "number_literal",
			Pattern: "(number_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "offsetof",
			Pattern: "(offsetof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "operator",
			Pattern: "(operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "or",
			Pattern: "(or)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "or_eq",
			Pattern: "(or_eq)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "override",
			Pattern: "(override)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "preproc_arg",
			Pattern: "(preproc_arg)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "preproc_directive",
			Pattern: "(preproc_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "primitive_type",
			Pattern: "(primitive_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "private",
			Pattern: "(private)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "protected",
			Pattern: "(protected)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "public",
			Pattern: "(public)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "raw_string_content",
			Pattern: "(raw_string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "raw_string_delimiter",
			Pattern: "(raw_string_delimiter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "register",
			Pattern: "(register)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "requires",
			Pattern: "(requires)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "restrict",
			Pattern: "(restrict)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "short",
			Pattern: "(short)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "signed",
			Pattern: "(signed)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "sizeof",
			Pattern: "(sizeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "statement_identifier",
			Pattern: "(statement_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "static",
			Pattern: "(static)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "static_assert",
			Pattern: "(static_assert)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_content",
			Pattern: "(string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "struct",
			Pattern: "(struct)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "switch",
			Pattern: "(switch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				
				
			},
			
		},

		{
			Name: "system_lib_string",
			Pattern: "(system_lib_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "template",
			Pattern: "(template)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "this",
			Pattern: "(this)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "thread_local",
			Pattern: "(thread_local)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "throw",
			Pattern: "(throw)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				Token: "self",
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "type_identifier",
			Pattern: "(type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "typedef",
			Pattern: "(typedef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "typename",
			Pattern: "(typename)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "union",
			Pattern: "(union)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unsigned",
			Pattern: "(unsigned)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "using",
			Pattern: "(using)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "virtual",
			Pattern: "(virtual)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "volatile",
			Pattern: "(volatile)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "xor",
			Pattern: "(xor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "xor_eq",
			Pattern: "(xor_eq)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &cppPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *cppPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *cppPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *cppPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *cppPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *cppPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// crystalPatternMatcher provides pre-compiled pattern matching for crystal
type crystalPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newcrystalPatternMatcher() *crystalPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "abstract_method_def",
			Pattern: "(abstract_method_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"class_type",

					"constant",

					"double_splat_type",

					"forall",

					"generic_instance_type",

					"identifier",

					"named_tuple_type",

					"nilable_type",

					"operator",

					"param_list",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "alias",
			Pattern: "(alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"class_type",

					"constant",

					"double_splat_type",

					"generic_instance_type",

					"named_tuple_type",

					"nilable_type",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "alignof",
			Pattern: "(alignof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "and",
			Pattern: "(and)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "annotation",
			Pattern: "(annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"argument_list",

				},
				
			},
			
		},

		{
			Name: "annotation_def",
			Pattern: "(annotation_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				
				Children: []string{

					"constant",

				},
				
			},
			
		},

		{
			Name: "argument_list",
			Pattern: "(argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "array",
			Pattern: "(array)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"class_type",

					"constant",

					"double_splat_type",

					"generic_instance_type",

					"named_tuple_type",

					"nilable_type",

					"of",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "array_like",
			Pattern: "(array_like)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"constant",

					"generic_instance_type",

					"tuple",

				},
				
			},
			
		},

		{
			Name: "asm",
			Pattern: "(asm)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"asm_clobbers",

					"asm_operands",

					"asm_options",

					"string",

				},
				
			},
			
		},

		{
			Name: "asm_clobbers",
			Pattern: "(asm_clobbers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "asm_operand",
			Pattern: "(asm_operand)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "asm_operands",
			Pattern: "(asm_operands)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "asm_options",
			Pattern: "(asm_options)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "assign",
			Pattern: "(assign)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"abstract_method_def",

					"alias",

					"alignof",

					"and",

					"annotation",

					"annotation_def",

					"array",

					"array_like",

					"asm",

					"assign",

					"assign_call",

					"begin",

					"break",

					"call",

					"case",

					"chained_string",

					"char",

					"class_def",

					"class_var",

					"command",

					"conditional",

					"const_assign",

					"constant",

					"enum_def",

					"expressions",

					"extend",

					"false",

					"float",

					"fun_def",

					"generic_instance_type",

					"global_var",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"include",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"lib_def",

					"macro_begin",

					"macro_def",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_def",

					"method_proc",

					"modifier_ensure",

					"modifier_if",

					"modifier_rescue",

					"modifier_unless",

					"module_def",

					"named_tuple",

					"next",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"require",

					"return",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"splat",

					"string",

					"struct_def",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"underscore",

					"uninitialized_var",

					"unless",

					"until",

					"visibility_modifier",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "assign_call",
			Pattern: "(assign_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "begin",
			Pattern: "(begin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"else",

					"ensure",

					"expressions",

					"rescue",

				},
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"else",

					"ensure",

					"expressions",

					"param_list",

					"rescue",

				},
				
			},
			
		},

		{
			Name: "block_argument",
			Pattern: "(block_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_param",
			Pattern: "(block_param)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"class_type",

					"class_var",

					"constant",

					"double_splat_type",

					"generic_instance_type",

					"identifier",

					"instance_var",

					"macro_var",

					"named_tuple_type",

					"nilable_type",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "c_struct_def",
			Pattern: "(c_struct_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"constant",

					"expressions",

				},
				
			},
			
		},

		{
			Name: "c_struct_fields",
			Pattern: "(c_struct_fields)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"class_type",

					"constant",

					"double_splat_type",

					"generic_instance_type",

					"identifier",

					"named_tuple_type",

					"nilable_type",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "call",
			Pattern: "(call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				Children: []string{

					"alignof",

					"and",

					"argument_list",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"block",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"operator",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "chained_string",
			Pattern: "(chained_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "char",
			Pattern: "(char)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "class_def",
			Pattern: "(class_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"constant",

					"expressions",

					"generic_instance_type",

					"generic_type",

				},
				
			},
			
		},

		{
			Name: "class_type",
			Pattern: "(class_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "command",
			Pattern: "(command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "conditional",
			Pattern: "(conditional)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "const_assign",
			Pattern: "(const_assign)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"abstract_method_def",

					"alias",

					"alignof",

					"and",

					"annotation",

					"annotation_def",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"break",

					"call",

					"case",

					"chained_string",

					"char",

					"class_def",

					"class_var",

					"command",

					"conditional",

					"const_assign",

					"constant",

					"enum_def",

					"expressions",

					"extend",

					"false",

					"float",

					"fun_def",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"include",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"lib_def",

					"macro_begin",

					"macro_def",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_def",

					"method_proc",

					"modifier_ensure",

					"modifier_if",

					"modifier_rescue",

					"modifier_unless",

					"module_def",

					"named_tuple",

					"next",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"require",

					"return",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"struct_def",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"visibility_modifier",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "constant",
			Pattern: "(constant)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "double_splat",
			Pattern: "(double_splat)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "double_splat_param",
			Pattern: "(double_splat_param)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"class_type",

					"class_var",

					"constant",

					"double_splat_type",

					"generic_instance_type",

					"identifier",

					"instance_var",

					"macro_var",

					"named_tuple_type",

					"nilable_type",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "double_splat_type",
			Pattern: "(double_splat_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expressions",

				},
				
			},
			
		},

		{
			Name: "elsif",
			Pattern: "(elsif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"else",

					"elsif",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"then",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "ensure",
			Pattern: "(ensure)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expressions",

				},
				
			},
			
		},

		{
			Name: "enum_def",
			Pattern: "(enum_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"class_type",

					"constant",

					"double_splat_type",

					"expressions",

					"generic_instance_type",

					"named_tuple_type",

					"nilable_type",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "expressions",
			Pattern: "(expressions)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extend",
			Pattern: "(extend)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "float",
			Pattern: "(float)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "forall",
			Pattern: "(forall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "fun_def",
			Pattern: "(fun_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"class_type",

					"constant",

					"double_splat_type",

					"expressions",

					"generic_instance_type",

					"identifier",

					"named_tuple_type",

					"nilable_type",

					"param_list",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"string",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "fun_param",
			Pattern: "(fun_param)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"class_type",

					"constant",

					"double_splat_type",

					"generic_instance_type",

					"identifier",

					"named_tuple_type",

					"nilable_type",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "generic_instance_type",
			Pattern: "(generic_instance_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"param_list",

				},
				
			},
			
		},

		{
			Name: "generic_type",
			Pattern: "(generic_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"param_list",

				},
				
			},
			
		},

		{
			Name: "global_var",
			Pattern: "(global_var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"class_type",

					"constant",

					"double_splat_type",

					"generic_instance_type",

					"identifier",

					"named_tuple_type",

					"nilable_type",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "hash",
			Pattern: "(hash)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"class_type",

					"constant",

					"double_splat_type",

					"generic_instance_type",

					"named_tuple_type",

					"nilable_type",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "hash_entry",
			Pattern: "(hash_entry)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "hash_like",
			Pattern: "(hash_like)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"constant",

					"generic_instance_type",

					"hash",

				},
				
			},
			
		},

		{
			Name: "heredoc_body",
			Pattern: "(heredoc_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"else",

					"elsif",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"then",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "implicit_object_call",
			Pattern: "(implicit_object_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"argument_list",

					"block",

					"identifier",

					"implicit_object_call",

					"operator",

				},
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"implicit_object_call",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "include",
			Pattern: "(include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "index_call",
			Pattern: "(index_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				Children: []string{

					"alignof",

					"and",

					"argument_list",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"operator",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "instance_alignof",
			Pattern: "(instance_alignof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "instance_sizeof",
			Pattern: "(instance_sizeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "integer",
			Pattern: "(integer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "interpolation",
			Pattern: "(interpolation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "lib_def",
			Pattern: "(lib_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"constant",

					"expressions",

					"generic_type",

				},
				
			},
			
		},

		{
			Name: "literal_content",
			Pattern: "(literal_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "macro_begin",
			Pattern: "(macro_begin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expressions",

				},
				
			},
			
		},

		{
			Name: "macro_content",
			Pattern: "(macro_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "macro_def",
			Pattern: "(macro_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expressions",

					"identifier",

					"operator",

					"param_list",

				},
				
			},
			
		},

		{
			Name: "macro_else",
			Pattern: "(macro_else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expressions",

				},
				
			},
			
		},

		{
			Name: "macro_elsif",
			Pattern: "(macro_elsif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_else",

					"macro_elsif",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "macro_expression",
			Pattern: "(macro_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "macro_for",
			Pattern: "(macro_for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"double_splat",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"splat",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"underscore",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "macro_if",
			Pattern: "(macro_if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_else",

					"macro_elsif",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "macro_statement",
			Pattern: "(macro_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "macro_unless",
			Pattern: "(macro_unless)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_else",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "macro_var",
			Pattern: "(macro_var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "macro_verbatim",
			Pattern: "(macro_verbatim)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expressions",

				},
				
			},
			
		},

		{
			Name: "method_def",
			Pattern: "(method_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"class_type",

					"constant",

					"double_splat_type",

					"else",

					"ensure",

					"expressions",

					"forall",

					"generic_instance_type",

					"identifier",

					"named_tuple_type",

					"nilable_type",

					"operator",

					"param_list",

					"pointer_type",

					"proc_type",

					"rescue",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "method_proc",
			Pattern: "(method_proc)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"class_var",

					"constant",

					"identifier",

					"instance_var",

					"operator",

					"param_list",

					"self",

				},
				
			},
			
		},

		{
			Name: "modifier_ensure",
			Pattern: "(modifier_ensure)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "modifier_if",
			Pattern: "(modifier_if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"abstract_method_def",

					"alias",

					"alignof",

					"and",

					"annotation",

					"annotation_def",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"break",

					"call",

					"case",

					"chained_string",

					"char",

					"class_def",

					"class_var",

					"command",

					"conditional",

					"const_assign",

					"constant",

					"enum_def",

					"expressions",

					"extend",

					"false",

					"float",

					"fun_def",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"include",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"lib_def",

					"macro_begin",

					"macro_def",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_def",

					"method_proc",

					"modifier_ensure",

					"modifier_if",

					"modifier_rescue",

					"modifier_unless",

					"module_def",

					"named_tuple",

					"next",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"require",

					"return",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"struct_def",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"visibility_modifier",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "modifier_rescue",
			Pattern: "(modifier_rescue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "modifier_unless",
			Pattern: "(modifier_unless)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"abstract_method_def",

					"alias",

					"alignof",

					"and",

					"annotation",

					"annotation_def",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"break",

					"call",

					"case",

					"chained_string",

					"char",

					"class_def",

					"class_var",

					"command",

					"conditional",

					"const_assign",

					"constant",

					"enum_def",

					"expressions",

					"extend",

					"false",

					"float",

					"fun_def",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"include",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"lib_def",

					"macro_begin",

					"macro_def",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_def",

					"method_proc",

					"modifier_ensure",

					"modifier_if",

					"modifier_rescue",

					"modifier_unless",

					"module_def",

					"named_tuple",

					"next",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"require",

					"return",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"struct_def",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"visibility_modifier",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "module_def",
			Pattern: "(module_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				Children: []string{

					"constant",

					"expressions",

					"generic_type",

				},
				
			},
			
		},

		{
			Name: "named_expr",
			Pattern: "(named_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "named_tuple",
			Pattern: "(named_tuple)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				
				
			},
			
		},

		{
			Name: "named_tuple_type",
			Pattern: "(named_tuple_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "named_type",
			Pattern: "(named_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "next",
			Pattern: "(next)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "nil",
			Pattern: "(nil)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "nilable_constant",
			Pattern: "(nilable_constant)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "nilable_type",
			Pattern: "(nilable_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "not",
			Pattern: "(not)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "offsetof",
			Pattern: "(offsetof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "op_assign",
			Pattern: "(op_assign)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"assign_call",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "operator",
			Pattern: "(operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "or",
			Pattern: "(or)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "out",
			Pattern: "(out)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "param",
			Pattern: "(param)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_type",

					"class_var",

					"command",

					"conditional",

					"constant",

					"double_splat_type",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"named_tuple_type",

					"nil",

					"nilable_constant",

					"nilable_type",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointer_type",

					"pointerof",

					"proc",

					"proc_type",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"splat_type",

					"static_array_type",

					"string",

					"symbol",

					"true",

					"tuple",

					"tuple_type",

					"type_declaration",

					"typeof",

					"underscore",

					"union_type",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "param_list",
			Pattern: "(param_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "pointer_type",
			Pattern: "(pointer_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pointerof",
			Pattern: "(pointerof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "proc",
			Pattern: "(proc)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"block",

					"class_type",

					"constant",

					"double_splat_type",

					"generic_instance_type",

					"named_tuple_type",

					"nilable_type",

					"param_list",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "proc_type",
			Pattern: "(proc_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"class_type",

					"constant",

					"double_splat_type",

					"generic_instance_type",

					"named_tuple_type",

					"nilable_type",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "pseudo_constant",
			Pattern: "(pseudo_constant)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "range",
			Pattern: "(range)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"operator",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "regex",
			Pattern: "(regex)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "require",
			Pattern: "(require)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "rescue",
			Pattern: "(rescue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"class_type",

					"constant",

					"double_splat_type",

					"expressions",

					"generic_instance_type",

					"identifier",

					"named_tuple_type",

					"nilable_type",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "select",
			Pattern: "(select)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "sizeof",
			Pattern: "(sizeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "splat",
			Pattern: "(splat)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "splat_param",
			Pattern: "(splat_param)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"class_type",

					"class_var",

					"constant",

					"double_splat_type",

					"generic_instance_type",

					"identifier",

					"instance_var",

					"macro_var",

					"named_tuple_type",

					"nilable_type",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "splat_type",
			Pattern: "(splat_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "static_array_type",
			Pattern: "(static_array_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "struct_def",
			Pattern: "(struct_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"constant",

					"expressions",

					"generic_instance_type",

					"generic_type",

				},
				
			},
			
		},

		{
			Name: "symbol",
			Pattern: "(symbol)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "then",
			Pattern: "(then)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "tuple",
			Pattern: "(tuple)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "tuple_type",
			Pattern: "(tuple_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				
				
			},
			
		},

		{
			Name: "type_declaration",
			Pattern: "(type_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_type",

					"class_var",

					"command",

					"conditional",

					"constant",

					"double_splat_type",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"named_tuple_type",

					"nil",

					"nilable_constant",

					"nilable_type",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointer_type",

					"pointerof",

					"proc",

					"proc_type",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"splat_type",

					"static_array_type",

					"string",

					"symbol",

					"true",

					"tuple",

					"tuple_type",

					"type_declaration",

					"typeof",

					"underscore",

					"union_type",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "type_def",
			Pattern: "(type_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"class_type",

					"constant",

					"double_splat_type",

					"generic_instance_type",

					"named_tuple_type",

					"nilable_type",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "typeof",
			Pattern: "(typeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "uninitialized_var",
			Pattern: "(uninitialized_var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "union_def",
			Pattern: "(union_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"constant",

					"expressions",

				},
				
			},
			
		},

		{
			Name: "union_fields",
			Pattern: "(union_fields)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"class_type",

					"constant",

					"double_splat_type",

					"generic_instance_type",

					"identifier",

					"named_tuple_type",

					"nilable_type",

					"pointer_type",

					"proc_type",

					"self",

					"splat_type",

					"static_array_type",

					"tuple_type",

					"typeof",

					"underscore",

					"union_type",

				},
				
			},
			
		},

		{
			Name: "union_type",
			Pattern: "(union_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unless",
			Pattern: "(unless)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"else",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"then",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "until",
			Pattern: "(until)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "visibility_modifier",
			Pattern: "(visibility_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"private",

					"protected",

				},
				
			},
			
		},

		{
			Name: "when",
			Pattern: "(when)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"implicit_object_call",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				Children: []string{

					"alignof",

					"and",

					"array",

					"array_like",

					"asm",

					"assign",

					"begin",

					"call",

					"case",

					"chained_string",

					"char",

					"class_var",

					"command",

					"conditional",

					"constant",

					"expressions",

					"false",

					"float",

					"generic_instance_type",

					"hash",

					"hash_like",

					"heredoc_start",

					"identifier",

					"if",

					"index_call",

					"instance_alignof",

					"instance_sizeof",

					"instance_var",

					"integer",

					"macro_begin",

					"macro_expression",

					"macro_for",

					"macro_if",

					"macro_statement",

					"macro_unless",

					"macro_var",

					"macro_verbatim",

					"method_proc",

					"named_tuple",

					"nil",

					"nilable_constant",

					"not",

					"offsetof",

					"op_assign",

					"or",

					"pointerof",

					"proc",

					"pseudo_constant",

					"range",

					"regex",

					"select",

					"self",

					"sizeof",

					"special_variable",

					"string",

					"symbol",

					"true",

					"tuple",

					"type_declaration",

					"typeof",

					"unless",

					"until",

					"while",

					"yield",

				},
				
			},
			
		},

		{
			Name: "__DIR__",
			Pattern: "(__DIR__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__END_LINE__",
			Pattern: "(__END_LINE__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__FILE__",
			Pattern: "(__FILE__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "__LINE__",
			Pattern: "(__LINE__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "abstract",
			Pattern: "(abstract)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "alias",
			Pattern: "(alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "alignof",
			Pattern: "(alignof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "annotation",
			Pattern: "(annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "asm",
			Pattern: "(asm)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "begin",
			Pattern: "(begin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "class_var",
			Pattern: "(class_var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "def",
			Pattern: "(def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "elsif",
			Pattern: "(elsif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "end",
			Pattern: "(end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ensure",
			Pattern: "(ensure)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extend",
			Pattern: "(extend)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "forall",
			Pattern: "(forall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "fun",
			Pattern: "(fun)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "heredoc_end",
			Pattern: "(heredoc_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "heredoc_start",
			Pattern: "(heredoc_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "include",
			Pattern: "(include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "instance_alignof",
			Pattern: "(instance_alignof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "instance_sizeof",
			Pattern: "(instance_sizeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "instance_var",
			Pattern: "(instance_var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "lib",
			Pattern: "(lib)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "loc_pragma_location",
			Pattern: "(loc_pragma_location)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "loc_pragma_pop",
			Pattern: "(loc_pragma_pop)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "loc_pragma_push",
			Pattern: "(loc_pragma_push)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "macro",
			Pattern: "(macro)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "module",
			Pattern: "(module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "next",
			Pattern: "(next)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "of",
			Pattern: "(of)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "offsetof",
			Pattern: "(offsetof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "out",
			Pattern: "(out)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pointerof",
			Pattern: "(pointerof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "private",
			Pattern: "(private)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "protected",
			Pattern: "(protected)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "regex_modifier",
			Pattern: "(regex_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				
				
				
			},
			
		},

		{
			Name: "require",
			Pattern: "(require)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "rescue",
			Pattern: "(rescue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "select",
			Pattern: "(select)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "self",
			Pattern: "(self)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "sizeof",
			Pattern: "(sizeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "special_variable",
			Pattern: "(special_variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "struct",
			Pattern: "(struct)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "then",
			Pattern: "(then)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "typeof",
			Pattern: "(typeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "underscore",
			Pattern: "(underscore)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "uninitialized",
			Pattern: "(uninitialized)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "union",
			Pattern: "(union)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unless",
			Pattern: "(unless)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "until",
			Pattern: "(until)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "verbatim",
			Pattern: "(verbatim)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "when",
			Pattern: "(when)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "with",
			Pattern: "(with)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &crystalPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *crystalPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *crystalPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *crystalPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *crystalPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *crystalPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// cssPatternMatcher provides pre-compiled pattern matching for css
type cssPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newcssPatternMatcher() *cssPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "adjacent_sibling_selector",
			Pattern: "(adjacent_sibling_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "arguments",
			Pattern: "(arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "at_rule",
			Pattern: "(at_rule)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "attribute_name",
			Pattern: "(attribute_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "attribute_selector",
			Pattern: "(attribute_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "binary_query",
			Pattern: "(binary_query)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "call_expression",
			Pattern: "(call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "charset_statement",
			Pattern: "(charset_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "child_selector",
			Pattern: "(child_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "class_name",
			Pattern: "(class_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "class_selector",
			Pattern: "(class_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "color_value",
			Pattern: "(color_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "declaration",
			Pattern: "(declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "descendant_selector",
			Pattern: "(descendant_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "feature_query",
			Pattern: "(feature_query)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "float_value",
			Pattern: "(float_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "grid_value",
			Pattern: "(grid_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "id_selector",
			Pattern: "(id_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "import_statement",
			Pattern: "(import_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "integer_value",
			Pattern: "(integer_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "keyframe_block",
			Pattern: "(keyframe_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "keyframe_block_list",
			Pattern: "(keyframe_block_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "keyframes_statement",
			Pattern: "(keyframes_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "media_statement",
			Pattern: "(media_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "namespace_selector",
			Pattern: "(namespace_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "namespace_statement",
			Pattern: "(namespace_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "parenthesized_query",
			Pattern: "(parenthesized_query)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "parenthesized_value",
			Pattern: "(parenthesized_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "postcss_statement",
			Pattern: "(postcss_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pseudo_class_selector",
			Pattern: "(pseudo_class_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "pseudo_element_selector",
			Pattern: "(pseudo_element_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "rule_set",
			Pattern: "(rule_set)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "selector_query",
			Pattern: "(selector_query)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "selectors",
			Pattern: "(selectors)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "sibling_selector",
			Pattern: "(sibling_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string_value",
			Pattern: "(string_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "stylesheet",
			Pattern: "(stylesheet)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "supports_statement",
			Pattern: "(supports_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unary_query",
			Pattern: "(unary_query)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "universal_selector",
			Pattern: "(universal_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "and",
			Pattern: "(and)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "at_keyword",
			Pattern: "(at_keyword)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "feature_name",
			Pattern: "(feature_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "from",
			Pattern: "(from)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "function_name",
			Pattern: "(function_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "id_name",
			Pattern: "(id_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "important",
			Pattern: "(important)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Reference",

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "js_comment",
			Pattern: "(js_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "keyframes_name",
			Pattern: "(keyframes_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "keyword_query",
			Pattern: "(keyword_query)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "namespace_name",
			Pattern: "(namespace_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "nesting_selector",
			Pattern: "(nesting_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "not",
			Pattern: "(not)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "of",
			Pattern: "(of)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "only",
			Pattern: "(only)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "or",
			Pattern: "(or)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "plain_value",
			Pattern: "(plain_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "property_name",
			Pattern: "(property_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "selector",
			Pattern: "(selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_content",
			Pattern: "(string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "tag_name",
			Pattern: "(tag_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "to",
			Pattern: "(to)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unit",
			Pattern: "(unit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &cssPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *cssPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *cssPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *cssPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *cssPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *cssPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// csvPatternMatcher provides pre-compiled pattern matching for csv
type csvPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newcsvPatternMatcher() *csvPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "boolean",
			Pattern: "(boolean)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "document",
			Pattern: "(document)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field",
			Pattern: "(field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "float",
			Pattern: "(float)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "number",
			Pattern: "(number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "row",
			Pattern: "(row)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "text",
			Pattern: "(text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &csvPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *csvPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *csvPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *csvPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *csvPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *csvPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// dartPatternMatcher provides pre-compiled pattern matching for dart
type dartPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newdartPatternMatcher() *dartPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "_declaration",
			Pattern: "(_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_literal",
			Pattern: "(_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "_statement",
			Pattern: "(_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "abstract",
			Pattern: "(abstract)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "additive_expression",
			Pattern: "(additive_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "additive_operator",
			Pattern: "(additive_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "annotation",
			Pattern: "(annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "argument",
			Pattern: "(argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "argument_part",
			Pattern: "(argument_part)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "arguments",
			Pattern: "(arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "as_operator",
			Pattern: "(as_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "assert_statement",
			Pattern: "(assert_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "assertion",
			Pattern: "(assertion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "assertion_arguments",
			Pattern: "(assertion_arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "assignable_expression",
			Pattern: "(assignable_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "assignment_expression",
			Pattern: "(assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"_literal",

					"additive_expression",

					"assignable_expression",

					"assignment_expression",

					"bitwise_and_expression",

					"bitwise_or_expression",

					"bitwise_xor_expression",

					"cascade_section",

					"conditional_expression",

					"const_object_expression",

					"constructor_tearoff",

					"equality_expression",

					"function_expression",

					"identifier",

					"if_null_expression",

					"logical_and_expression",

					"logical_or_expression",

					"multiplicative_expression",

					"new_expression",

					"parenthesized_expression",

					"pattern_assignment",

					"postfix_expression",

					"relational_expression",

					"rethrow_expression",

					"selector",

					"shift_expression",

					"super",

					"switch_expression",

					"this",

					"throw_expression",

					"type_cast_expression",

					"type_test_expression",

					"unary_expression",

					"unconditional_assignable_selector",

				},
				
			},
			
		},

		{
			Name: "assignment_expression_without_cascade",
			Pattern: "(assignment_expression_without_cascade)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"_literal",

					"additive_expression",

					"assignable_expression",

					"assignment_expression_without_cascade",

					"bitwise_and_expression",

					"bitwise_or_expression",

					"bitwise_xor_expression",

					"conditional_expression",

					"const_object_expression",

					"constructor_tearoff",

					"equality_expression",

					"function_expression",

					"identifier",

					"if_null_expression",

					"logical_and_expression",

					"logical_or_expression",

					"multiplicative_expression",

					"new_expression",

					"parenthesized_expression",

					"postfix_expression",

					"relational_expression",

					"selector",

					"shift_expression",

					"super",

					"switch_expression",

					"this",

					"throw_expression_without_cascade",

					"type_cast_expression",

					"type_test_expression",

					"unary_expression",

					"unconditional_assignable_selector",

				},
				
			},
			
		},

		{
			Name: "await_expression",
			Pattern: "(await_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "base",
			Pattern: "(base)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "binary_operator",
			Pattern: "(binary_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "BinaryOp",
				Token: "self",
				Roles: []string{

					"Operator",

				},
				
				
			},
			
		},

		{
			Name: "bitwise_and_expression",
			Pattern: "(bitwise_and_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bitwise_operator",
			Pattern: "(bitwise_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "bitwise_or_expression",
			Pattern: "(bitwise_or_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bitwise_xor_expression",
			Pattern: "(bitwise_xor_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "break_statement",
			Pattern: "(break_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Body",

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "cascade_section",
			Pattern: "(cascade_section)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "cascade_selector",
			Pattern: "(cascade_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "case_builtin",
			Pattern: "(case_builtin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "cast_pattern",
			Pattern: "(cast_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "catch_clause",
			Pattern: "(catch_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "catch_parameters",
			Pattern: "(catch_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "class_body",
			Pattern: "(class_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "class_definition",
			Pattern: "(class_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Body",

					"Class",

					"Declaration",

				},
				Children: []string{

					"class_body",

					"identifier",

					"interfaces",

					"superclass",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "combinator",
			Pattern: "(combinator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "conditional_assignable_selector",
			Pattern: "(conditional_assignable_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "conditional_expression",
			Pattern: "(conditional_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_literal",

					"additive_expression",

					"assignment_expression_without_cascade",

					"bitwise_and_expression",

					"bitwise_or_expression",

					"bitwise_xor_expression",

					"conditional_expression",

					"const_object_expression",

					"constructor_tearoff",

					"equality_expression",

					"function_expression",

					"identifier",

					"if_null_expression",

					"logical_and_expression",

					"logical_or_expression",

					"multiplicative_expression",

					"new_expression",

					"parenthesized_expression",

					"postfix_expression",

					"relational_expression",

					"selector",

					"shift_expression",

					"super",

					"switch_expression",

					"this",

					"throw_expression_without_cascade",

					"type_cast_expression",

					"type_test_expression",

					"unary_expression",

					"unconditional_assignable_selector",

				},
				
			},
			
		},

		{
			Name: "configurable_uri",
			Pattern: "(configurable_uri)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "configuration_uri",
			Pattern: "(configuration_uri)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "configuration_uri_condition",
			Pattern: "(configuration_uri_condition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "const_object_expression",
			Pattern: "(const_object_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "constant_constructor_signature",
			Pattern: "(constant_constructor_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "constant_pattern",
			Pattern: "(constant_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "constructor_invocation",
			Pattern: "(constructor_invocation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "constructor_param",
			Pattern: "(constructor_param)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "constructor_signature",
			Pattern: "(constructor_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"formal_parameter_list",

					"identifier",

					"new",

				},
				
			},
			
		},

		{
			Name: "constructor_tearoff",
			Pattern: "(constructor_tearoff)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "continue_statement",
			Pattern: "(continue_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "declaration",
			Pattern: "(declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "do_statement",
			Pattern: "(do_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_statement",

					"parenthesized_expression",

				},
				
			},
			
		},

		{
			Name: "documentation_comment",
			Pattern: "(documentation_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "dotted_identifier_list",
			Pattern: "(dotted_identifier_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "enum_body",
			Pattern: "(enum_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enum_constant",
			Pattern: "(enum_constant)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "enum_declaration",
			Pattern: "(enum_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"enum_body",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "equality_expression",
			Pattern: "(equality_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "explicit_constructor_invocation",
			Pattern: "(explicit_constructor_invocation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"_literal",

					"arguments",

					"const_object_expression",

					"constructor_tearoff",

					"function_expression",

					"identifier",

					"new_expression",

					"parenthesized_expression",

					"scoped_identifier",

					"super",

					"switch_expression",

					"this",

					"type_arguments",

					"unconditional_assignable_selector",

				},
				
			},
			
		},

		{
			Name: "expression_statement",
			Pattern: "(expression_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "extension_body",
			Pattern: "(extension_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extension_declaration",
			Pattern: "(extension_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"Function",

					"extension_body",

					"function_type",

					"identifier",

					"nullable_type",

					"record_type",

					"type_arguments",

					"type_identifier",

					"type_parameters",

					"void_type",

				},
				
			},
			
		},

		{
			Name: "factory_constructor_signature",
			Pattern: "(factory_constructor_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field_initializer",
			Pattern: "(field_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "final_builtin",
			Pattern: "(final_builtin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "finally_clause",
			Pattern: "(finally_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "for_element",
			Pattern: "(for_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"_literal",

					"additive_expression",

					"assignment_expression",

					"bitwise_and_expression",

					"bitwise_or_expression",

					"bitwise_xor_expression",

					"cascade_section",

					"conditional_expression",

					"const_object_expression",

					"constructor_tearoff",

					"equality_expression",

					"for_element",

					"function_expression",

					"identifier",

					"if_element",

					"if_null_expression",

					"logical_and_expression",

					"logical_or_expression",

					"multiplicative_expression",

					"new_expression",

					"pair",

					"parenthesized_expression",

					"pattern_assignment",

					"postfix_expression",

					"relational_expression",

					"rethrow_expression",

					"selector",

					"shift_expression",

					"spread_element",

					"super",

					"switch_expression",

					"this",

					"throw_expression",

					"type_cast_expression",

					"type_test_expression",

					"unary_expression",

					"unconditional_assignable_selector",

				},
				
			},
			
		},

		{
			Name: "for_loop_parts",
			Pattern: "(for_loop_parts)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"_literal",

					"additive_expression",

					"assignment_expression",

					"bitwise_and_expression",

					"bitwise_or_expression",

					"bitwise_xor_expression",

					"cascade_section",

					"conditional_expression",

					"const_object_expression",

					"constructor_tearoff",

					"equality_expression",

					"function_expression",

					"identifier",

					"if_null_expression",

					"local_variable_declaration",

					"logical_and_expression",

					"logical_or_expression",

					"multiplicative_expression",

					"new_expression",

					"parenthesized_expression",

					"pattern_assignment",

					"postfix_expression",

					"relational_expression",

					"rethrow_expression",

					"selector",

					"shift_expression",

					"super",

					"switch_expression",

					"this",

					"throw_expression",

					"type_cast_expression",

					"type_test_expression",

					"unary_expression",

					"unconditional_assignable_selector",

				},
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"_statement",

				},
				
			},
			
		},

		{
			Name: "formal_parameter",
			Pattern: "(formal_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "formal_parameter_list",
			Pattern: "(formal_parameter_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "function_body",
			Pattern: "(function_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "function_expression",
			Pattern: "(function_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Body",

					"Function",

					"Declaration",

				},
				Children: []string{

					"formal_parameter_list",

					"function_expression_body",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "function_expression_body",
			Pattern: "(function_expression_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "function_signature",
			Pattern: "(function_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Body",

					"Function",

					"Declaration",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "function_type",
			Pattern: "(function_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "getter_signature",
			Pattern: "(getter_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Getter",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Getter",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "identifier_list",
			Pattern: "(identifier_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "if_element",
			Pattern: "(if_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"_literal",

					"additive_expression",

					"assignment_expression",

					"bitwise_and_expression",

					"bitwise_or_expression",

					"bitwise_xor_expression",

					"cascade_section",

					"conditional_expression",

					"const_object_expression",

					"constructor_tearoff",

					"equality_expression",

					"for_element",

					"function_expression",

					"identifier",

					"if_element",

					"if_null_expression",

					"logical_and_expression",

					"logical_or_expression",

					"multiplicative_expression",

					"new_expression",

					"pair",

					"parenthesized_expression",

					"pattern_assignment",

					"postfix_expression",

					"relational_expression",

					"rethrow_expression",

					"selector",

					"shift_expression",

					"spread_element",

					"super",

					"switch_expression",

					"this",

					"throw_expression",

					"type_cast_expression",

					"type_test_expression",

					"unary_expression",

					"unconditional_assignable_selector",

				},
				
			},
			
		},

		{
			Name: "if_null_expression",
			Pattern: "(if_null_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_literal",

					"additive_expression",

					"bitwise_and_expression",

					"bitwise_or_expression",

					"bitwise_xor_expression",

					"conditional_expression",

					"const_object_expression",

					"constructor_tearoff",

					"equality_expression",

					"function_expression",

					"identifier",

					"if_null_expression",

					"logical_and_expression",

					"logical_or_expression",

					"multiplicative_expression",

					"new_expression",

					"parenthesized_expression",

					"postfix_expression",

					"relational_expression",

					"selector",

					"shift_expression",

					"super",

					"switch_expression",

					"this",

					"type_cast_expression",

					"type_test_expression",

					"unary_expression",

					"unconditional_assignable_selector",

				},
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				Roles: []string{

					"Condition",

				},
				Children: []string{

					"_statement",

				},
				
			},
			
		},

		{
			Name: "import_or_export",
			Pattern: "(import_or_export)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Condition",

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_specification",
			Pattern: "(import_specification)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				
				
				
			},
			
		},

		{
			Name: "index_selector",
			Pattern: "(index_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				Token: "self",
				Roles: []string{

					"Index",

				},
				
				
			},
			
		},

		{
			Name: "inferred_type",
			Pattern: "(inferred_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "initialized_identifier",
			Pattern: "(initialized_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "initialized_identifier_list",
			Pattern: "(initialized_identifier_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "initialized_variable_definition",
			Pattern: "(initialized_variable_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"_literal",

					"additive_expression",

					"assignment_expression",

					"bitwise_and_expression",

					"bitwise_or_expression",

					"bitwise_xor_expression",

					"cascade_section",

					"conditional_expression",

					"const_object_expression",

					"constructor_tearoff",

					"equality_expression",

					"function_expression",

					"identifier",

					"if_null_expression",

					"logical_and_expression",

					"logical_or_expression",

					"multiplicative_expression",

					"new_expression",

					"parenthesized_expression",

					"pattern_assignment",

					"postfix_expression",

					"relational_expression",

					"rethrow_expression",

					"selector",

					"shift_expression",

					"super",

					"switch_expression",

					"this",

					"throw_expression",

					"type_cast_expression",

					"type_test_expression",

					"unary_expression",

					"unconditional_assignable_selector",

				},
				
			},
			
		},

		{
			Name: "initializer_list_entry",
			Pattern: "(initializer_list_entry)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "initializers",
			Pattern: "(initializers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "interface",
			Pattern: "(interface)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "interfaces",
			Pattern: "(interfaces)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "is_operator",
			Pattern: "(is_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "label",
			Pattern: "(label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "lambda_expression",
			Pattern: "(lambda_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				
				Roles: []string{

					"Lambda",

				},
				Children: []string{

					"function_body",

					"function_signature",

				},
				
			},
			
		},

		{
			Name: "library_export",
			Pattern: "(library_export)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "library_import",
			Pattern: "(library_import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "library_name",
			Pattern: "(library_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "list_literal",
			Pattern: "(list_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "list_pattern",
			Pattern: "(list_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "local_function_declaration",
			Pattern: "(local_function_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "local_variable_declaration",
			Pattern: "(local_variable_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "child:identifier",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "logical_and_expression",
			Pattern: "(logical_and_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "logical_and_operator",
			Pattern: "(logical_and_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "logical_or_expression",
			Pattern: "(logical_or_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "logical_or_operator",
			Pattern: "(logical_or_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "map_pattern",
			Pattern: "(map_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "method_signature",
			Pattern: "(method_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "mixin",
			Pattern: "(mixin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "mixin_application",
			Pattern: "(mixin_application)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "mixin_application_class",
			Pattern: "(mixin_application_class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "mixin_declaration",
			Pattern: "(mixin_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "mixins",
			Pattern: "(mixins)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "multiplicative_expression",
			Pattern: "(multiplicative_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "multiplicative_operator",
			Pattern: "(multiplicative_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "named_argument",
			Pattern: "(named_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "named_parameter_types",
			Pattern: "(named_parameter_types)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "negation_operator",
			Pattern: "(negation_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "new_expression",
			Pattern: "(new_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "normal_parameter_type",
			Pattern: "(normal_parameter_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "null_assert_pattern",
			Pattern: "(null_assert_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "null_check_pattern",
			Pattern: "(null_check_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "null_literal",
			Pattern: "(null_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "nullable_selector",
			Pattern: "(nullable_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "nullable_type",
			Pattern: "(nullable_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "object_pattern",
			Pattern: "(object_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "operator_signature",
			Pattern: "(operator_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "optional_formal_parameters",
			Pattern: "(optional_formal_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "optional_parameter_types",
			Pattern: "(optional_parameter_types)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "optional_positional_parameter_types",
			Pattern: "(optional_positional_parameter_types)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "pair",
			Pattern: "(pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_literal",

					"additive_expression",

					"assignment_expression",

					"bitwise_and_expression",

					"bitwise_or_expression",

					"bitwise_xor_expression",

					"cascade_section",

					"conditional_expression",

					"const_object_expression",

					"constructor_tearoff",

					"equality_expression",

					"function_expression",

					"identifier",

					"if_null_expression",

					"logical_and_expression",

					"logical_or_expression",

					"multiplicative_expression",

					"new_expression",

					"parenthesized_expression",

					"pattern_assignment",

					"postfix_expression",

					"relational_expression",

					"rethrow_expression",

					"selector",

					"shift_expression",

					"super",

					"switch_expression",

					"this",

					"throw_expression",

					"type_cast_expression",

					"type_test_expression",

					"unary_expression",

					"unconditional_assignable_selector",

				},
				
			},
			
		},

		{
			Name: "parameter_type_list",
			Pattern: "(parameter_type_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "part_directive",
			Pattern: "(part_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "part_of_directive",
			Pattern: "(part_of_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pattern_assignment",
			Pattern: "(pattern_assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				
				
			},
			
		},

		{
			Name: "pattern_variable_declaration",
			Pattern: "(pattern_variable_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "postfix_expression",
			Pattern: "(postfix_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "child:identifier",
				
				
				
			},
			
		},

		{
			Name: "postfix_operator",
			Pattern: "(postfix_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "prefix_operator",
			Pattern: "(prefix_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "program",
			Pattern: "(program)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "qualified",
			Pattern: "(qualified)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "File",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "record_field",
			Pattern: "(record_field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "record_literal",
			Pattern: "(record_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "record_pattern",
			Pattern: "(record_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "record_type",
			Pattern: "(record_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "record_type_field",
			Pattern: "(record_type_field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "record_type_named_field",
			Pattern: "(record_type_named_field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "redirecting_factory_constructor_signature",
			Pattern: "(redirecting_factory_constructor_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "redirection",
			Pattern: "(redirection)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "relational_expression",
			Pattern: "(relational_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "relational_operator",
			Pattern: "(relational_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "rest_pattern",
			Pattern: "(rest_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "rethrow_expression",
			Pattern: "(rethrow_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				Token: "self",
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "return_statement",
			Pattern: "(return_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "scoped_identifier",
			Pattern: "(scoped_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				Children: []string{

					"identifier",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "script_tag",
			Pattern: "(script_tag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "sealed",
			Pattern: "(sealed)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "selector",
			Pattern: "(selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "set_or_map_literal",
			Pattern: "(set_or_map_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "setter_signature",
			Pattern: "(setter_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Setter",
				
				Roles: []string{

					"Setter",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "shift_expression",
			Pattern: "(shift_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "shift_operator",
			Pattern: "(shift_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				
				
				
			},
			
		},

		{
			Name: "spread_element",
			Pattern: "(spread_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Spread",
				Token: "self",
				Roles: []string{

					"Spread",

				},
				
				
			},
			
		},

		{
			Name: "static_final_declaration",
			Pattern: "(static_final_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "static_final_declaration_list",
			Pattern: "(static_final_declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_literal",
			Pattern: "(string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "super",
			Pattern: "(super)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "super_formal_parameter",
			Pattern: "(super_formal_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "superclass",
			Pattern: "(superclass)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "switch_block",
			Pattern: "(switch_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "switch_expression",
			Pattern: "(switch_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"parenthesized_expression",

					"switch_expression_case",

				},
				
			},
			
		},

		{
			Name: "switch_expression_case",
			Pattern: "(switch_expression_case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				
				
			},
			
		},

		{
			Name: "switch_statement",
			Pattern: "(switch_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"parenthesized_expression",

					"switch_block",

				},
				
			},
			
		},

		{
			Name: "switch_statement_case",
			Pattern: "(switch_statement_case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				
				
			},
			
		},

		{
			Name: "switch_statement_default",
			Pattern: "(switch_statement_default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "symbol_literal",
			Pattern: "(symbol_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "template_substitution",
			Pattern: "(template_substitution)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "this",
			Pattern: "(this)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "throw_expression",
			Pattern: "(throw_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				Token: "self",
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "throw_expression_without_cascade",
			Pattern: "(throw_expression_without_cascade)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "tilde_operator",
			Pattern: "(tilde_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "try_statement",
			Pattern: "(try_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "type_alias",
			Pattern: "(type_alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_arguments",
			Pattern: "(type_arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_bound",
			Pattern: "(type_bound)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_cast",
			Pattern: "(type_cast)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_cast_expression",
			Pattern: "(type_cast_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				
				
				
				
			},
			
		},

		{
			Name: "type_parameter",
			Pattern: "(type_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_parameters",
			Pattern: "(type_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_test",
			Pattern: "(type_test)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_test_expression",
			Pattern: "(type_test_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "typed_identifier",
			Pattern: "(typed_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unary_expression",
			Pattern: "(unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unconditional_assignable_selector",
			Pattern: "(unconditional_assignable_selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "UnaryOp",
				Token: "self",
				Roles: []string{

					"Operator",

				},
				
				
			},
			
		},

		{
			Name: "uri",
			Pattern: "(uri)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "uri_test",
			Pattern: "(uri_test)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "variable_pattern",
			Pattern: "(variable_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"_statement",

					"parenthesized_expression",

				},
				
			},
			
		},

		{
			Name: "yield_each_statement",
			Pattern: "(yield_each_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "yield_statement",
			Pattern: "(yield_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "Function",
			Pattern: "(Function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "abstract",
			Pattern: "(abstract)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "as",
			Pattern: "(as)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "assert_builtin",
			Pattern: "(assert_builtin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "async",
			Pattern: "(async)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "await",
			Pattern: "(await)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "base",
			Pattern: "(base)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bool",
			Pattern: "(bool)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "break_builtin",
			Pattern: "(break_builtin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "catch",
			Pattern: "(catch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "const_builtin",
			Pattern: "(const_builtin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "covariant",
			Pattern: "(covariant)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "decimal_floating_point_literal",
			Pattern: "(decimal_floating_point_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "decimal_integer_literal",
			Pattern: "(decimal_integer_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "deferred",
			Pattern: "(deferred)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "dynamic",
			Pattern: "(dynamic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "equality_operator",
			Pattern: "(equality_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "export",
			Pattern: "(export)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extends",
			Pattern: "(extends)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "extension",
			Pattern: "(extension)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "external",
			Pattern: "(external)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "factory",
			Pattern: "(factory)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "final",
			Pattern: "(final)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "finally",
			Pattern: "(finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "get",
			Pattern: "(get)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "hex_integer_literal",
			Pattern: "(hex_integer_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "hide",
			Pattern: "(hide)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "identifier_dollar_escaped",
			Pattern: "(identifier_dollar_escaped)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "implements",
			Pattern: "(implements)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "increment_operator",
			Pattern: "(increment_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "inline",
			Pattern: "(inline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "interface",
			Pattern: "(interface)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "is",
			Pattern: "(is)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "late",
			Pattern: "(late)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "library",
			Pattern: "(library)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "minus_operator",
			Pattern: "(minus_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "mixin",
			Pattern: "(mixin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "native",
			Pattern: "(native)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "new",
			Pattern: "(new)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "null",
			Pattern: "(null)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "on",
			Pattern: "(on)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "operator",
			Pattern: "(operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "part",
			Pattern: "(part)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "part_of_builtin",
			Pattern: "(part_of_builtin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "required",
			Pattern: "(required)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "rethrow_builtin",
			Pattern: "(rethrow_builtin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				Token: "self",
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "sealed",
			Pattern: "(sealed)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "set",
			Pattern: "(set)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "show",
			Pattern: "(show)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "static",
			Pattern: "(static)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "super",
			Pattern: "(super)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "switch",
			Pattern: "(switch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				
				
			},
			
		},

		{
			Name: "this",
			Pattern: "(this)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "throw",
			Pattern: "(throw)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "type_identifier",
			Pattern: "(type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "typedef",
			Pattern: "(typedef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "var",
			Pattern: "(var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "void_type",
			Pattern: "(void_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "when",
			Pattern: "(when)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "with",
			Pattern: "(with)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &dartPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *dartPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *dartPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *dartPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *dartPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *dartPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// dockerfilePatternMatcher provides pre-compiled pattern matching for dockerfile
type dockerfilePatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newdockerfilePatternMatcher() *dockerfilePatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "add_instruction",
			Pattern: "(add_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "arg_instruction",
			Pattern: "(arg_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"double_quoted_string",

					"single_quoted_string",

					"unquoted_string",

				},
				
			},
			
		},

		{
			Name: "cmd_instruction",
			Pattern: "(cmd_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "copy_instruction",
			Pattern: "(copy_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "cross_build_instruction",
			Pattern: "(cross_build_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "double_quoted_string",
			Pattern: "(double_quoted_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "entrypoint_instruction",
			Pattern: "(entrypoint_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "env_instruction",
			Pattern: "(env_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "env_pair",
			Pattern: "(env_pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"double_quoted_string",

					"single_quoted_string",

					"unquoted_string",

				},
				
			},
			
		},

		{
			Name: "expansion",
			Pattern: "(expansion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "expose_instruction",
			Pattern: "(expose_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "expose_port",
			Pattern: "(expose_port)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "from_instruction",
			Pattern: "(from_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"image_alias",

				},
				
			},
			
		},

		{
			Name: "healthcheck_instruction",
			Pattern: "(healthcheck_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "heredoc_block",
			Pattern: "(heredoc_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "image_alias",
			Pattern: "(image_alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "image_digest",
			Pattern: "(image_digest)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "image_name",
			Pattern: "(image_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "image_spec",
			Pattern: "(image_spec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"image_digest",

					"image_name",

					"image_tag",

				},
				
			},
			
		},

		{
			Name: "image_tag",
			Pattern: "(image_tag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "json_string",
			Pattern: "(json_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "json_string_array",
			Pattern: "(json_string_array)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "label_instruction",
			Pattern: "(label_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "label_pair",
			Pattern: "(label_pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"double_quoted_string",

					"single_quoted_string",

					"unquoted_string",

				},
				
			},
			
		},

		{
			Name: "maintainer_instruction",
			Pattern: "(maintainer_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "mount_param",
			Pattern: "(mount_param)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"mount",

					"mount_param_param",

				},
				
			},
			
		},

		{
			Name: "mount_param_param",
			Pattern: "(mount_param_param)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "onbuild_instruction",
			Pattern: "(onbuild_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "param",
			Pattern: "(param)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "path",
			Pattern: "(path)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "run_instruction",
			Pattern: "(run_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "shell_command",
			Pattern: "(shell_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "shell_fragment",
			Pattern: "(shell_fragment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "shell_instruction",
			Pattern: "(shell_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "single_quoted_string",
			Pattern: "(single_quoted_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "source_file",
			Pattern: "(source_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "stopsignal_instruction",
			Pattern: "(stopsignal_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "unquoted_string",
			Pattern: "(unquoted_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "user_instruction",
			Pattern: "(user_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"unquoted_string",

				},
				
			},
			
		},

		{
			Name: "volume_instruction",
			Pattern: "(volume_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "workdir_instruction",
			Pattern: "(workdir_instruction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "ADD",
			Pattern: "(ADD)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ARG",
			Pattern: "(ARG)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "AS",
			Pattern: "(AS)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "CMD",
			Pattern: "(CMD)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "COPY",
			Pattern: "(COPY)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "CROSS_BUILD",
			Pattern: "(CROSS_BUILD)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ENTRYPOINT",
			Pattern: "(ENTRYPOINT)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "ENV",
			Pattern: "(ENV)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "EXPOSE",
			Pattern: "(EXPOSE)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "FROM",
			Pattern: "(FROM)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "HEALTHCHECK",
			Pattern: "(HEALTHCHECK)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "LABEL",
			Pattern: "(LABEL)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "MAINTAINER",
			Pattern: "(MAINTAINER)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "NONE",
			Pattern: "(NONE)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ONBUILD",
			Pattern: "(ONBUILD)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "RUN",
			Pattern: "(RUN)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "SHELL",
			Pattern: "(SHELL)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "STOPSIGNAL",
			Pattern: "(STOPSIGNAL)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "USER",
			Pattern: "(USER)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "VOLUME",
			Pattern: "(VOLUME)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "WORKDIR",
			Pattern: "(WORKDIR)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_heredoc_nl",
			Pattern: "(_heredoc_nl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "heredoc_end",
			Pattern: "(heredoc_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "heredoc_line",
			Pattern: "(heredoc_line)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "heredoc_marker",
			Pattern: "(heredoc_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "line_continuation",
			Pattern: "(line_continuation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "mount",
			Pattern: "(mount)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "variable",
			Pattern: "(variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &dockerfilePatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *dockerfilePatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *dockerfilePatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *dockerfilePatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *dockerfilePatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *dockerfilePatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// dotenvPatternMatcher provides pre-compiled pattern matching for dotenv
type dotenvPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newdotenvPatternMatcher() *dotenvPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "bool",
			Pattern: "(bool)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "interpolated_variable",
			Pattern: "(interpolated_variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "source_file",
			Pattern: "(source_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string_interpolated",
			Pattern: "(string_interpolated)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "File",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_literal",
			Pattern: "(string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "value",
			Pattern: "(value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "variable",
			Pattern: "(variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"identifier",

					"value",

				},
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "integer",
			Pattern: "(integer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "raw_value",
			Pattern: "(raw_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "shell_command",
			Pattern: "(shell_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "url",
			Pattern: "(url)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &dotenvPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *dotenvPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *dotenvPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *dotenvPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *dotenvPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *dotenvPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// elixirPatternMatcher provides pre-compiled pattern matching for elixir
type elixirPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newelixirPatternMatcher() *elixirPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "access_call",
			Pattern: "(access_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"access_call",

					"alias",

					"anonymous_function",

					"atom",

					"binary_operator",

					"bitstring",

					"block",

					"boolean",

					"call",

					"char",

					"charlist",

					"dot",

					"float",

					"identifier",

					"integer",

					"list",

					"map",

					"nil",

					"operator_identifier",

					"quoted_atom",

					"sigil",

					"string",

					"tuple",

					"unary_operator",

				},
				
			},
			
		},

		{
			Name: "after_block",
			Pattern: "(after_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Call",

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "anonymous_function",
			Pattern: "(anonymous_function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "arguments",
			Pattern: "(arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "binary_operator",
			Pattern: "(binary_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "BinaryOp",
				
				Roles: []string{

					"Operator",

				},
				Children: []string{

					"access_call",

					"alias",

					"and",

					"anonymous_function",

					"arguments",

					"atom",

					"binary_operator",

					"bitstring",

					"block",

					"boolean",

					"call",

					"char",

					"charlist",

					"dot",

					"float",

					"identifier",

					"in",

					"integer",

					"keywords",

					"list",

					"map",

					"nil",

					"operator_identifier",

					"or",

					"quoted_atom",

					"sigil",

					"string",

					"tuple",

					"unary_operator",

					"when",

				},
				
			},
			
		},

		{
			Name: "bitstring",
			Pattern: "(bitstring)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "body",
			Pattern: "(body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "boolean",
			Pattern: "(boolean)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "call",
			Pattern: "(call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				Children: []string{

					"call",

					"dot",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "catch_block",
			Pattern: "(catch_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "charlist",
			Pattern: "(charlist)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "do_block",
			Pattern: "(do_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "dot",
			Pattern: "(dot)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"access_call",

					"alias",

					"anonymous_function",

					"atom",

					"binary_operator",

					"bitstring",

					"block",

					"boolean",

					"call",

					"char",

					"charlist",

					"dot",

					"float",

					"identifier",

					"integer",

					"list",

					"map",

					"nil",

					"operator_identifier",

					"quoted_atom",

					"sigil",

					"string",

					"tuple",

					"unary_operator",

				},
				
			},
			
		},

		{
			Name: "else_block",
			Pattern: "(else_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "interpolation",
			Pattern: "(interpolation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keywords",
			Pattern: "(keywords)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "list",
			Pattern: "(list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "map",
			Pattern: "(map)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "map_content",
			Pattern: "(map_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "nil",
			Pattern: "(nil)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "operator_identifier",
			Pattern: "(operator_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "pair",
			Pattern: "(pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				Children: []string{

					"access_call",

					"alias",

					"anonymous_function",

					"atom",

					"binary_operator",

					"bitstring",

					"block",

					"boolean",

					"call",

					"char",

					"charlist",

					"dot",

					"float",

					"identifier",

					"integer",

					"keyword",

					"list",

					"map",

					"nil",

					"operator_identifier",

					"quoted_atom",

					"quoted_keyword",

					"sigil",

					"string",

					"tuple",

					"unary_operator",

				},
				
			},
			
		},

		{
			Name: "quoted_atom",
			Pattern: "(quoted_atom)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "quoted_keyword",
			Pattern: "(quoted_keyword)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "rescue_block",
			Pattern: "(rescue_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "sigil",
			Pattern: "(sigil)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "source",
			Pattern: "(source)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "stab_clause",
			Pattern: "(stab_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"arguments",

					"binary_operator",

					"body",

				},
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "struct",
			Pattern: "(struct)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "tuple",
			Pattern: "(tuple)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				
				
			},
			
		},

		{
			Name: "unary_operator",
			Pattern: "(unary_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "UnaryOp",
				Token: "self",
				Roles: []string{

					"Operator",

				},
				Children: []string{

					"access_call",

					"alias",

					"anonymous_function",

					"atom",

					"binary_operator",

					"bitstring",

					"block",

					"boolean",

					"call",

					"char",

					"charlist",

					"dot",

					"float",

					"identifier",

					"integer",

					"list",

					"map",

					"nil",

					"not",

					"operator_identifier",

					"quoted_atom",

					"sigil",

					"string",

					"tuple",

					"unary_operator",

				},
				
			},
			
		},

		{
			Name: "after",
			Pattern: "(after)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "alias",
			Pattern: "(alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "and",
			Pattern: "(and)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "atom",
			Pattern: "(atom)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "catch",
			Pattern: "(catch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "char",
			Pattern: "(char)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "end",
			Pattern: "(end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "float",
			Pattern: "(float)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "fn",
			Pattern: "(fn)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "integer",
			Pattern: "(integer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword",
			Pattern: "(keyword)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "nil",
			Pattern: "(nil)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "not",
			Pattern: "(not)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "or",
			Pattern: "(or)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "quoted_content",
			Pattern: "(quoted_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "rescue",
			Pattern: "(rescue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "sigil_modifiers",
			Pattern: "(sigil_modifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "sigil_name",
			Pattern: "(sigil_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "when",
			Pattern: "(when)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &elixirPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *elixirPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *elixirPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *elixirPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *elixirPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *elixirPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// elmPatternMatcher provides pre-compiled pattern matching for elm
type elmPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newelmPatternMatcher() *elmPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "anonymous_function_expr",
			Pattern: "(anonymous_function_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"anonymous_function_expr",

					"bin_op_expr",

					"case_of_expr",

					"char_constant_expr",

					"field_access_expr",

					"field_accessor_function_expr",

					"function_call_expr",

					"glsl_code_expr",

					"if_else_expr",

					"let_in_expr",

					"list_expr",

					"negate_expr",

					"number_constant_expr",

					"operator_as_function_expr",

					"parenthesized_expr",

					"pattern",

					"record_expr",

					"string_constant_expr",

					"tuple_expr",

					"unit_expr",

					"value_expr",

				},
				
			},
			
		},

		{
			Name: "anything_pattern",
			Pattern: "(anything_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "as_clause",
			Pattern: "(as_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"upper_case_identifier",

				},
				
			},
			
		},

		{
			Name: "bin_op_expr",
			Pattern: "(bin_op_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"anonymous_function_expr",

					"case_of_expr",

					"char_constant_expr",

					"field_access_expr",

					"field_accessor_function_expr",

					"function_call_expr",

					"glsl_code_expr",

					"if_else_expr",

					"let_in_expr",

					"list_expr",

					"negate_expr",

					"number_constant_expr",

					"operator",

					"operator_as_function_expr",

					"parenthesized_expr",

					"record_expr",

					"string_constant_expr",

					"tuple_expr",

					"unit_expr",

					"value_expr",

				},
				
			},
			
		},

		{
			Name: "block_comment",
			Pattern: "(block_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "case_of_branch",
			Pattern: "(case_of_branch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Comment",

					"Branch",

				},
				Children: []string{

					"anonymous_function_expr",

					"bin_op_expr",

					"case_of_expr",

					"char_constant_expr",

					"field_access_expr",

					"field_accessor_function_expr",

					"function_call_expr",

					"glsl_code_expr",

					"if_else_expr",

					"let_in_expr",

					"list_expr",

					"negate_expr",

					"number_constant_expr",

					"operator_as_function_expr",

					"parenthesized_expr",

					"pattern",

					"record_expr",

					"string_constant_expr",

					"tuple_expr",

					"unit_expr",

					"value_expr",

				},
				
			},
			
		},

		{
			Name: "case_of_expr",
			Pattern: "(case_of_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"anonymous_function_expr",

					"bin_op_expr",

					"case_of_branch",

					"case_of_expr",

					"char_constant_expr",

					"field_access_expr",

					"field_accessor_function_expr",

					"function_call_expr",

					"glsl_code_expr",

					"if_else_expr",

					"let_in_expr",

					"list_expr",

					"negate_expr",

					"number_constant_expr",

					"operator_as_function_expr",

					"parenthesized_expr",

					"record_expr",

					"string_constant_expr",

					"tuple_expr",

					"unit_expr",

					"value_expr",

				},
				
			},
			
		},

		{
			Name: "char_constant_expr",
			Pattern: "(char_constant_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "cons_pattern",
			Pattern: "(cons_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"anything_pattern",

					"char_constant_expr",

					"cons_pattern",

					"list_pattern",

					"lower_pattern",

					"number_constant_expr",

					"pattern",

					"record_pattern",

					"string_constant_expr",

					"tuple_pattern",

					"union_pattern",

					"unit_expr",

				},
				
			},
			
		},

		{
			Name: "dot",
			Pattern: "(dot)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "exposed_operator",
			Pattern: "(exposed_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"operator_identifier",

				},
				
			},
			
		},

		{
			Name: "exposed_type",
			Pattern: "(exposed_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "exposed_union_constructors",
			Pattern: "(exposed_union_constructors)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "exposed_value",
			Pattern: "(exposed_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "exposing_list",
			Pattern: "(exposing_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				Children: []string{

					"double_dot",

				},
				
			},
			
		},

		{
			Name: "field",
			Pattern: "(field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"anonymous_function_expr",

					"bin_op_expr",

					"case_of_expr",

					"char_constant_expr",

					"field_access_expr",

					"field_accessor_function_expr",

					"function_call_expr",

					"glsl_code_expr",

					"if_else_expr",

					"let_in_expr",

					"list_expr",

					"lower_case_identifier",

					"negate_expr",

					"number_constant_expr",

					"operator_as_function_expr",

					"parenthesized_expr",

					"record_expr",

					"string_constant_expr",

					"tuple_expr",

					"unit_expr",

					"value_expr",

				},
				
			},
			
		},

		{
			Name: "field_access_expr",
			Pattern: "(field_access_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"field_access_expr",

					"parenthesized_expr",

					"record_expr",

					"value_expr",

				},
				
			},
			
		},

		{
			Name: "field_accessor_function_expr",
			Pattern: "(field_accessor_function_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "field_type",
			Pattern: "(field_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"lower_case_identifier",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "file",
			Pattern: "(file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"module_declaration",

				},
				
			},
			
		},

		{
			Name: "function_call_expr",
			Pattern: "(function_call_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"anonymous_function_expr",

					"case_of_expr",

					"char_constant_expr",

					"field_access_expr",

					"field_accessor_function_expr",

					"glsl_code_expr",

					"if_else_expr",

					"let_in_expr",

					"list_expr",

					"negate_expr",

					"number_constant_expr",

					"operator_as_function_expr",

					"parenthesized_expr",

					"record_expr",

					"string_constant_expr",

					"tuple_expr",

					"unit_expr",

					"value_expr",

				},
				
			},
			
		},

		{
			Name: "function_declaration_left",
			Pattern: "(function_declaration_left)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"anything_pattern",

					"char_constant_expr",

					"list_pattern",

					"lower_pattern",

					"number_constant_expr",

					"pattern",

					"record_pattern",

					"string_constant_expr",

					"tuple_pattern",

					"unit_expr",

				},
				
			},
			
		},

		{
			Name: "glsl_code_expr",
			Pattern: "(glsl_code_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"glsl_content",

				},
				
			},
			
		},

		{
			Name: "if_else_expr",
			Pattern: "(if_else_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"anonymous_function_expr",

					"bin_op_expr",

					"case_of_expr",

					"char_constant_expr",

					"field_access_expr",

					"field_accessor_function_expr",

					"function_call_expr",

					"glsl_code_expr",

					"if_else_expr",

					"let_in_expr",

					"list_expr",

					"negate_expr",

					"number_constant_expr",

					"operator_as_function_expr",

					"parenthesized_expr",

					"record_expr",

					"string_constant_expr",

					"tuple_expr",

					"unit_expr",

					"value_expr",

				},
				
			},
			
		},

		{
			Name: "import_clause",
			Pattern: "(import_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				Children: []string{

					"as_clause",

					"exposing_list",

					"upper_case_qid",

				},
				
			},
			
		},

		{
			Name: "infix_declaration",
			Pattern: "(infix_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"lower_case_identifier",

					"number_literal",

					"operator_identifier",

				},
				
			},
			
		},

		{
			Name: "let_in_expr",
			Pattern: "(let_in_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"anonymous_function_expr",

					"bin_op_expr",

					"case_of_expr",

					"char_constant_expr",

					"field_access_expr",

					"field_accessor_function_expr",

					"function_call_expr",

					"glsl_code_expr",

					"if_else_expr",

					"let_in_expr",

					"list_expr",

					"negate_expr",

					"number_constant_expr",

					"operator_as_function_expr",

					"parenthesized_expr",

					"record_expr",

					"string_constant_expr",

					"tuple_expr",

					"unit_expr",

					"value_declaration",

					"value_expr",

				},
				
			},
			
		},

		{
			Name: "list_expr",
			Pattern: "(list_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"anonymous_function_expr",

					"bin_op_expr",

					"case_of_expr",

					"char_constant_expr",

					"field_access_expr",

					"field_accessor_function_expr",

					"function_call_expr",

					"glsl_code_expr",

					"if_else_expr",

					"let_in_expr",

					"list_expr",

					"negate_expr",

					"number_constant_expr",

					"operator_as_function_expr",

					"parenthesized_expr",

					"record_expr",

					"string_constant_expr",

					"tuple_expr",

					"unit_expr",

					"value_expr",

				},
				
			},
			
		},

		{
			Name: "list_pattern",
			Pattern: "(list_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				Children: []string{

					"pattern",

				},
				
			},
			
		},

		{
			Name: "lower_pattern",
			Pattern: "(lower_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "lower_type_name",
			Pattern: "(lower_type_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "module_declaration",
			Pattern: "(module_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"exposing_list",

					"upper_case_qid",

				},
				
			},
			
		},

		{
			Name: "negate_expr",
			Pattern: "(negate_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "nullary_constructor_argument_pattern",
			Pattern: "(nullary_constructor_argument_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "number_constant_expr",
			Pattern: "(number_constant_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "operator",
			Pattern: "(operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "operator_as_function_expr",
			Pattern: "(operator_as_function_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"operator_identifier",

				},
				
			},
			
		},

		{
			Name: "operator_identifier",
			Pattern: "(operator_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "parenthesized_expr",
			Pattern: "(parenthesized_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"anonymous_function_expr",

					"bin_op_expr",

					"case_of_expr",

					"char_constant_expr",

					"field_access_expr",

					"field_accessor_function_expr",

					"function_call_expr",

					"glsl_code_expr",

					"if_else_expr",

					"let_in_expr",

					"list_expr",

					"negate_expr",

					"number_constant_expr",

					"operator_as_function_expr",

					"parenthesized_expr",

					"record_expr",

					"string_constant_expr",

					"tuple_expr",

					"unit_expr",

					"value_expr",

				},
				
			},
			
		},

		{
			Name: "pattern",
			Pattern: "(pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"anything_pattern",

					"char_constant_expr",

					"cons_pattern",

					"list_pattern",

					"lower_pattern",

					"number_constant_expr",

					"pattern",

					"record_pattern",

					"string_constant_expr",

					"tuple_pattern",

					"union_pattern",

					"unit_expr",

				},
				
			},
			
		},

		{
			Name: "port_annotation",
			Pattern: "(port_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"lower_case_identifier",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "record_base_identifier",
			Pattern: "(record_base_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "record_expr",
			Pattern: "(record_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"field",

					"record_base_identifier",

				},
				
			},
			
		},

		{
			Name: "record_pattern",
			Pattern: "(record_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"lower_pattern",

				},
				
			},
			
		},

		{
			Name: "record_type",
			Pattern: "(record_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"field_type",

					"record_base_identifier",

				},
				
			},
			
		},

		{
			Name: "string_constant_expr",
			Pattern: "(string_constant_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "tuple_expr",
			Pattern: "(tuple_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				Children: []string{

					"anonymous_function_expr",

					"bin_op_expr",

					"case_of_expr",

					"char_constant_expr",

					"field_access_expr",

					"field_accessor_function_expr",

					"function_call_expr",

					"glsl_code_expr",

					"if_else_expr",

					"let_in_expr",

					"list_expr",

					"negate_expr",

					"number_constant_expr",

					"operator_as_function_expr",

					"parenthesized_expr",

					"record_expr",

					"string_constant_expr",

					"tuple_expr",

					"unit_expr",

					"value_expr",

				},
				
			},
			
		},

		{
			Name: "tuple_pattern",
			Pattern: "(tuple_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				Token: "self",
				
				Children: []string{

					"pattern",

				},
				
			},
			
		},

		{
			Name: "tuple_type",
			Pattern: "(tuple_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				Children: []string{

					"type_expression",

					"unit_expr",

				},
				
			},
			
		},

		{
			Name: "type_alias_declaration",
			Pattern: "(type_alias_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"lower_type_name",

					"type_expression",

					"upper_case_identifier",

				},
				
			},
			
		},

		{
			Name: "type_annotation",
			Pattern: "(type_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				
				Roles: []string{

					"Type",

				},
				Children: []string{

					"lower_case_identifier",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "type_declaration",
			Pattern: "(type_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				Token: "self",
				
				Children: []string{

					"lower_type_name",

					"union_variant",

					"upper_case_identifier",

				},
				
			},
			
		},

		{
			Name: "type_expression",
			Pattern: "(type_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"record_type",

					"tuple_type",

					"type_expression",

					"type_ref",

					"type_variable",

				},
				
			},
			
		},

		{
			Name: "type_ref",
			Pattern: "(type_ref)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"record_type",

					"tuple_type",

					"type_expression",

					"type_ref",

					"type_variable",

				},
				
			},
			
		},

		{
			Name: "type_variable",
			Pattern: "(type_variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "union_pattern",
			Pattern: "(union_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

					"Pattern",

				},
				Children: []string{

					"anything_pattern",

					"char_constant_expr",

					"list_pattern",

					"lower_pattern",

					"nullary_constructor_argument_pattern",

					"number_constant_expr",

					"pattern",

					"record_pattern",

					"string_constant_expr",

					"tuple_pattern",

					"unit_expr",

					"upper_case_qid",

				},
				
			},
			
		},

		{
			Name: "union_variant",
			Pattern: "(union_variant)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"record_type",

					"tuple_type",

					"type_expression",

					"type_ref",

					"type_variable",

					"upper_case_identifier",

				},
				
			},
			
		},

		{
			Name: "unit_expr",
			Pattern: "(unit_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "upper_case_qid",
			Pattern: "(upper_case_qid)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "value_declaration",
			Pattern: "(value_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"anonymous_function_expr",

					"bin_op_expr",

					"case_of_expr",

					"char_constant_expr",

					"field_access_expr",

					"field_accessor_function_expr",

					"function_call_expr",

					"function_declaration_left",

					"glsl_code_expr",

					"if_else_expr",

					"let_in_expr",

					"list_expr",

					"negate_expr",

					"number_constant_expr",

					"operator_as_function_expr",

					"parenthesized_expr",

					"pattern",

					"record_expr",

					"string_constant_expr",

					"tuple_expr",

					"unit_expr",

					"value_expr",

				},
				
			},
			
		},

		{
			Name: "value_expr",
			Pattern: "(value_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"upper_case_qid",

					"value_qid",

				},
				
			},
			
		},

		{
			Name: "value_qid",
			Pattern: "(value_qid)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "alias",
			Pattern: "(alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "arrow",
			Pattern: "(arrow)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "as",
			Pattern: "(as)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "backslash",
			Pattern: "(backslash)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "close_char",
			Pattern: "(close_char)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "close_quote",
			Pattern: "(close_quote)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "colon",
			Pattern: "(colon)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "double_dot",
			Pattern: "(double_dot)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "effect",
			Pattern: "(effect)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "eq",
			Pattern: "(eq)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "exposing",
			Pattern: "(exposing)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "glsl_content",
			Pattern: "(glsl_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "infix",
			Pattern: "(infix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "invalid_string_escape",
			Pattern: "(invalid_string_escape)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "let",
			Pattern: "(let)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "line_comment",
			Pattern: "(line_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "lower_case_identifier",
			Pattern: "(lower_case_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "module",
			Pattern: "(module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "number_literal",
			Pattern: "(number_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "of",
			Pattern: "(of)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "open_char",
			Pattern: "(open_char)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "open_quote",
			Pattern: "(open_quote)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "port",
			Pattern: "(port)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "regular_string_part",
			Pattern: "(regular_string_part)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string_escape",
			Pattern: "(string_escape)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "then",
			Pattern: "(then)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "underscore",
			Pattern: "(underscore)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "upper_case_identifier",
			Pattern: "(upper_case_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "where",
			Pattern: "(where)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &elmPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *elmPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *elmPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *elmPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *elmPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *elmPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// fishPatternMatcher provides pre-compiled pattern matching for fish
type fishPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newfishPatternMatcher() *fishPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "begin_statement",
			Pattern: "(begin_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "brace_expansion",
			Pattern: "(brace_expansion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "case_clause",
			Pattern: "(case_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "command",
			Pattern: "(command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"brace_expansion",

					"command_substitution",

					"concatenation",

					"double_quote_string",

					"escape_sequence",

					"file_redirect",

					"float",

					"glob",

					"home_dir_expansion",

					"integer",

					"single_quote_string",

					"stream_redirect",

					"variable_expansion",

					"word",

				},
				
			},
			
		},

		{
			Name: "command_substitution",
			Pattern: "(command_substitution)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "concatenation",
			Pattern: "(concatenation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "conditional_execution",
			Pattern: "(conditional_execution)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "double_quote_string",
			Pattern: "(double_quote_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else_clause",
			Pattern: "(else_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else_if_clause",
			Pattern: "(else_if_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"begin_statement",

					"break",

					"command",

					"conditional_execution",

					"continue",

					"for_statement",

					"function_definition",

					"if_statement",

					"negated_statement",

					"pipe",

					"redirect_statement",

					"return",

					"switch_statement",

					"while_statement",

				},
				
			},
			
		},

		{
			Name: "file_redirect",
			Pattern: "(file_redirect)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"brace_expansion",

					"command_substitution",

					"concatenation",

					"direction",

					"double_quote_string",

					"escape_sequence",

					"float",

					"glob",

					"home_dir_expansion",

					"integer",

					"single_quote_string",

					"variable_expansion",

					"word",

				},
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"brace_expansion",

					"command_substitution",

					"concatenation",

					"double_quote_string",

					"escape_sequence",

					"float",

					"glob",

					"home_dir_expansion",

					"integer",

					"single_quote_string",

					"variable_expansion",

					"variable_name",

					"word",

				},
				
			},
			
		},

		{
			Name: "function_definition",
			Pattern: "(function_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"brace_expansion",

					"command_substitution",

					"concatenation",

					"double_quote_string",

					"escape_sequence",

					"float",

					"glob",

					"home_dir_expansion",

					"integer",

					"single_quote_string",

					"variable_expansion",

					"word",

				},
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"begin_statement",

					"break",

					"command",

					"conditional_execution",

					"continue",

					"for_statement",

					"function_definition",

					"if_statement",

					"negated_statement",

					"pipe",

					"redirect_statement",

					"return",

					"switch_statement",

					"while_statement",

				},
				
			},
			
		},

		{
			Name: "index",
			Pattern: "(index)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				
				Roles: []string{

					"Index",

				},
				
				
			},
			
		},

		{
			Name: "list_element_access",
			Pattern: "(list_element_access)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "negated_statement",
			Pattern: "(negated_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pipe",
			Pattern: "(pipe)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "program",
			Pattern: "(program)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "range",
			Pattern: "(range)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "File",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "redirect_statement",
			Pattern: "(redirect_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "single_quote_string",
			Pattern: "(single_quote_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "switch_statement",
			Pattern: "(switch_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				Children: []string{

					"brace_expansion",

					"command_substitution",

					"concatenation",

					"double_quote_string",

					"escape_sequence",

					"float",

					"glob",

					"home_dir_expansion",

					"integer",

					"single_quote_string",

					"variable_expansion",

					"word",

				},
				
			},
			
		},

		{
			Name: "variable_expansion",
			Pattern: "(variable_expansion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"begin_statement",

					"break",

					"command",

					"conditional_execution",

					"continue",

					"for_statement",

					"function_definition",

					"if_statement",

					"negated_statement",

					"pipe",

					"redirect_statement",

					"return",

					"switch_statement",

					"while_statement",

				},
				
			},
			
		},

		{
			Name: "word",
			Pattern: "(word)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "and",
			Pattern: "(and)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "begin",
			Pattern: "(begin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "direction",
			Pattern: "(direction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "end",
			Pattern: "(end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "float",
			Pattern: "(float)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "function",
			Pattern: "(function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "glob",
			Pattern: "(glob)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "home_dir_expansion",
			Pattern: "(home_dir_expansion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "integer",
			Pattern: "(integer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "not",
			Pattern: "(not)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "or",
			Pattern: "(or)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "stream_redirect",
			Pattern: "(stream_redirect)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "switch",
			Pattern: "(switch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "variable_name",
			Pattern: "(variable_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &fishPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *fishPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *fishPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *fishPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *fishPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *fishPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// fortranPatternMatcher provides pre-compiled pattern matching for fortran
type fortranPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newfortranPatternMatcher() *fortranPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "_argument_item",
			Pattern: "(_argument_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_expression",
			Pattern: "(_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_specification_parts",
			Pattern: "(_specification_parts)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "_statements",
			Pattern: "(_statements)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "abstract_specifier",
			Pattern: "(abstract_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "access_specifier",
			Pattern: "(access_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "allocate_statement",
			Pattern: "(allocate_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"coarray_allocation",

					"derived_type_member_expression",

					"identifier",

					"intrinsic_type",

					"sized_allocation",

				},
				
			},
			
		},

		{
			Name: "argument_list",
			Pattern: "(argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "arithmetic_if_statement",
			Pattern: "(arithmetic_if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "array_literal",
			Pattern: "(array_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"derived_type",

					"intrinsic_type",

				},
				
			},
			
		},

		{
			Name: "assign_statement",
			Pattern: "(assign_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "assignment",
			Pattern: "(assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				
				
			},
			
		},

		{
			Name: "assignment_statement",
			Pattern: "(assignment_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "associate_statement",
			Pattern: "(associate_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				
				
			},
			
		},

		{
			Name: "association",
			Pattern: "(association)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "assumed_shape",
			Pattern: "(assumed_shape)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "assumed_size",
			Pattern: "(assumed_size)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "base_type_specifier",
			Pattern: "(base_type_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"binary_expression",

					"call_expression",

					"identifier",

					"number_literal",

					"parenthesized_expression",

					"preproc_defined",

					"string_literal",

					"unary_expression",

				},
				
			},
			
		},

		{
			Name: "binary_op",
			Pattern: "(binary_op)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "BinaryOp",
				Token: "self",
				Roles: []string{

					"Operator",

					"Operator",

				},
				
				
			},
			
		},

		{
			Name: "bind_statement",
			Pattern: "(bind_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "binding",
			Pattern: "(binding)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "binding_name",
			Pattern: "(binding_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "block_construct",
			Pattern: "(block_construct)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "block_data",
			Pattern: "(block_data)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_data_statement",
			Pattern: "(block_data_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_label",
			Pattern: "(block_label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_label_start_expression",
			Pattern: "(block_label_start_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "boolean_literal",
			Pattern: "(boolean_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"identifier",

					"number_literal",

				},
				
			},
			
		},

		{
			Name: "call_expression",
			Pattern: "(call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Literal",

					"Call",

				},
				Children: []string{

					"argument_list",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "case_statement",
			Pattern: "(case_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "case_value_range_list",
			Pattern: "(case_value_range_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "character_length",
			Pattern: "(character_length)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "close_statement",
			Pattern: "(close_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "coarray_allocation",
			Pattern: "(coarray_allocation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "coarray_critical_statement",
			Pattern: "(coarray_critical_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "coarray_declarator",
			Pattern: "(coarray_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "coarray_expression",
			Pattern: "(coarray_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "coarray_index",
			Pattern: "(coarray_index)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				
				Roles: []string{

					"Index",

				},
				
				
			},
			
		},

		{
			Name: "coarray_size",
			Pattern: "(coarray_size)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "coarray_statement",
			Pattern: "(coarray_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "coarray_team_statement",
			Pattern: "(coarray_team_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "common_block",
			Pattern: "(common_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "common_statement",
			Pattern: "(common_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "complex_literal",
			Pattern: "(complex_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "concatenation_expression",
			Pattern: "(concatenation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "concurrent_control",
			Pattern: "(concurrent_control)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "concurrent_header",
			Pattern: "(concurrent_header)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"intrinsic_type",

				},
				
			},
			
		},

		{
			Name: "concurrent_locality",
			Pattern: "(concurrent_locality)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "concurrent_statement",
			Pattern: "(concurrent_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "conditional_expression",
			Pattern: "(conditional_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"nil_literal",

				},
				
			},
			
		},

		{
			Name: "contains_statement",
			Pattern: "(contains_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "cray_pointer_declaration",
			Pattern: "(cray_pointer_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "cray_pointer_pair",
			Pattern: "(cray_pointer_pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"coarray_declarator",

					"identifier",

					"sized_declarator",

				},
				
			},
			
		},

		{
			Name: "cuda_kernel_argument_list",
			Pattern: "(cuda_kernel_argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "data_declarator",
			Pattern: "(data_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"coarray_declarator",

					"data_value",

					"identifier",

					"sized_declarator",

				},
				
			},
			
		},

		{
			Name: "data_set",
			Pattern: "(data_set)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "data_statement",
			Pattern: "(data_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "data_value",
			Pattern: "(data_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"number_literal",

				},
				
			},
			
		},

		{
			Name: "deallocate_statement",
			Pattern: "(deallocate_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "declared_type",
			Pattern: "(declared_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"derived_type_member_expression",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "defined_io_procedure",
			Pattern: "(defined_io_procedure)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "derived_type",
			Pattern: "(derived_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"intrinsic_type",

					"kind",

					"type_name",

				},
				
			},
			
		},

		{
			Name: "derived_type_definition",
			Pattern: "(derived_type_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "derived_type_member_expression",
			Pattern: "(derived_type_member_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "derived_type_parameter_list",
			Pattern: "(derived_type_parameter_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "derived_type_procedures",
			Pattern: "(derived_type_procedures)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "derived_type_statement",
			Pattern: "(derived_type_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"access_specifier",

					"base_type_specifier",

				},
				
			},
			
		},

		{
			Name: "do_label_statement",
			Pattern: "(do_label_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "do_loop_statement",
			Pattern: "(do_loop_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "edit_descriptor",
			Pattern: "(edit_descriptor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else_clause",
			Pattern: "(else_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "elseif_clause",
			Pattern: "(elseif_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "elsewhere_clause",
			Pattern: "(elsewhere_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "end_associate_statement",
			Pattern: "(end_associate_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "end_block_construct_statement",
			Pattern: "(end_block_construct_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "end_block_data_statement",
			Pattern: "(end_block_data_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "end_coarray_critical_statement",
			Pattern: "(end_coarray_critical_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "end_coarray_team_statement",
			Pattern: "(end_coarray_team_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "end_do_label_statement",
			Pattern: "(end_do_label_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "end_do_loop_statement",
			Pattern: "(end_do_loop_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "end_enum_statement",
			Pattern: "(end_enum_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "end_enumeration_type_statement",
			Pattern: "(end_enumeration_type_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "end_forall_statement",
			Pattern: "(end_forall_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "end_function_statement",
			Pattern: "(end_function_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "end_if_statement",
			Pattern: "(end_if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "end_interface_statement",
			Pattern: "(end_interface_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "end_module_procedure_statement",
			Pattern: "(end_module_procedure_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "end_module_statement",
			Pattern: "(end_module_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "end_program_statement",
			Pattern: "(end_program_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "end_select_statement",
			Pattern: "(end_select_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "end_submodule_statement",
			Pattern: "(end_submodule_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "end_subroutine_statement",
			Pattern: "(end_subroutine_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "end_type_statement",
			Pattern: "(end_type_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "end_where_statement",
			Pattern: "(end_where_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "entry_statement",
			Pattern: "(entry_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				Children: []string{

					"name",

					"parameters",

				},
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enum_statement",
			Pattern: "(enum_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enumeration_type",
			Pattern: "(enumeration_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enumeration_type_statement",
			Pattern: "(enumeration_type_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enumerator_statement",
			Pattern: "(enumerator_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"identifier",

					"init_declarator",

				},
				
			},
			
		},

		{
			Name: "equivalence_set",
			Pattern: "(equivalence_set)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "equivalence_statement",
			Pattern: "(equivalence_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "extent_specifier",
			Pattern: "(extent_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "file_position_statement",
			Pattern: "(file_position_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "filename",
			Pattern: "(filename)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

					"number_literal",

				},
				
			},
			
		},

		{
			Name: "forall_statement",
			Pattern: "(forall_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "format_identifier",
			Pattern: "(format_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "format_statement",
			Pattern: "(format_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Reference",

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "function",
			Pattern: "(function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "function_result",
			Pattern: "(function_result)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "function_statement",
			Pattern: "(function_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"derived_type",

					"intrinsic_type",

					"name",

					"parameters",

				},
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "implicit_range",
			Pattern: "(implicit_range)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				Roles: []string{

					"Condition",

				},
				
				
			},
			
		},

		{
			Name: "implicit_statement",
			Pattern: "(implicit_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "implied_do_loop_expression",
			Pattern: "(implied_do_loop_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"intrinsic_type",

				},
				
			},
			
		},

		{
			Name: "import_statement",
			Pattern: "(import_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "include_statement",
			Pattern: "(include_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"filename",

				},
				
			},
			
		},

		{
			Name: "included_items",
			Pattern: "(included_items)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "init_declarator",
			Pattern: "(init_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_expression",

					"coarray_declarator",

					"identifier",

					"sized_declarator",

				},
				
			},
			
		},

		{
			Name: "input_item_list",
			Pattern: "(input_item_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "inquire_statement",
			Pattern: "(inquire_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "interface",
			Pattern: "(interface)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "interface_statement",
			Pattern: "(interface_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "internal_procedures",
			Pattern: "(internal_procedures)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "intrinsic_type",
			Pattern: "(intrinsic_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"kind",

				},
				
			},
			
		},

		{
			Name: "keyword_argument",
			Pattern: "(keyword_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"assumed_shape",

					"assumed_size",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "keyword_statement",
			Pattern: "(keyword_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "kind",
			Pattern: "(kind)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "label",
			Pattern: "(label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "language_binding",
			Pattern: "(language_binding)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "local_name",
			Pattern: "(local_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "logical_expression",
			Pattern: "(logical_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "loop_control_expression",
			Pattern: "(loop_control_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "math_expression",
			Pattern: "(math_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"user_defined_operator",

				},
				
			},
			
		},

		{
			Name: "method_name",
			Pattern: "(method_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "module",
			Pattern: "(module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "module_name",
			Pattern: "(module_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "module_procedure",
			Pattern: "(module_procedure)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "module_procedure_statement",
			Pattern: "(module_procedure_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"derived_type",

					"intrinsic_type",

					"name",

				},
				
			},
			
		},

		{
			Name: "module_statement",
			Pattern: "(module_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "multiple_subscript",
			Pattern: "(multiple_subscript)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "multiple_subscript_triplet",
			Pattern: "(multiple_subscript_triplet)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "name",
			Pattern: "(name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "namelist_statement",
			Pattern: "(namelist_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "nil_literal",
			Pattern: "(nil_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "null_literal",
			Pattern: "(null_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"derived_type_member_expression",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "nullify_statement",
			Pattern: "(nullify_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "number_literal",
			Pattern: "(number_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"identifier",

					"number_literal",

				},
				
			},
			
		},

		{
			Name: "open_statement",
			Pattern: "(open_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "operator",
			Pattern: "(operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "output_item_list",
			Pattern: "(output_item_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "parameter_assignment",
			Pattern: "(parameter_assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parameter_statement",
			Pattern: "(parameter_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parameters",
			Pattern: "(parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pointer_association_statement",
			Pattern: "(pointer_association_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pointer_init_declarator",
			Pattern: "(pointer_init_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_expression",

					"coarray_declarator",

					"identifier",

					"sized_declarator",

				},
				
			},
			
		},

		{
			Name: "preproc_call",
			Pattern: "(preproc_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"preproc_arg",

					"preproc_directive",

				},
				
			},
			
		},

		{
			Name: "preproc_def",
			Pattern: "(preproc_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				Children: []string{

					"identifier",

					"preproc_arg",

				},
				
			},
			
		},

		{
			Name: "preproc_defined",
			Pattern: "(preproc_defined)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "preproc_elif",
			Pattern: "(preproc_elif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"binary_expression",

					"call_expression",

					"identifier",

					"number_literal",

					"parenthesized_expression",

					"preproc_defined",

					"preproc_elif",

					"preproc_elifdef",

					"preproc_else",

					"string_literal",

					"unary_expression",

				},
				
			},
			
		},

		{
			Name: "preproc_elifdef",
			Pattern: "(preproc_elifdef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"identifier",

					"preproc_elif",

					"preproc_elifdef",

					"preproc_else",

				},
				
			},
			
		},

		{
			Name: "preproc_else",
			Pattern: "(preproc_else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "preproc_function_def",
			Pattern: "(preproc_function_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"identifier",

					"preproc_arg",

					"preproc_params",

				},
				
			},
			
		},

		{
			Name: "preproc_if",
			Pattern: "(preproc_if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"binary_expression",

					"call_expression",

					"identifier",

					"number_literal",

					"parenthesized_expression",

					"preproc_defined",

					"preproc_elif",

					"preproc_elifdef",

					"preproc_else",

					"string_literal",

					"unary_expression",

				},
				
			},
			
		},

		{
			Name: "preproc_ifdef",
			Pattern: "(preproc_ifdef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"identifier",

					"preproc_elif",

					"preproc_elifdef",

					"preproc_else",

				},
				
			},
			
		},

		{
			Name: "preproc_include",
			Pattern: "(preproc_include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"call_expression",

					"identifier",

					"string_literal",

					"system_lib_string",

				},
				
			},
			
		},

		{
			Name: "preproc_params",
			Pattern: "(preproc_params)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "print_statement",
			Pattern: "(print_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "private_statement",
			Pattern: "(private_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "procedure",
			Pattern: "(procedure)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "procedure_attribute",
			Pattern: "(procedure_attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "procedure_attributes",
			Pattern: "(procedure_attributes)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "procedure_interface",
			Pattern: "(procedure_interface)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "procedure_kind",
			Pattern: "(procedure_kind)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "procedure_qualifier",
			Pattern: "(procedure_qualifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "procedure_statement",
			Pattern: "(procedure_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"binding",

					"method_name",

				},
				
			},
			
		},

		{
			Name: "program",
			Pattern: "(program)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "program_statement",
			Pattern: "(program_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "File",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "public_statement",
			Pattern: "(public_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "rank_statement",
			Pattern: "(rank_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "read_statement",
			Pattern: "(read_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "relational_expression",
			Pattern: "(relational_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "save_statement",
			Pattern: "(save_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "select_case_statement",
			Pattern: "(select_case_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "select_rank_statement",
			Pattern: "(select_rank_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "select_type_statement",
			Pattern: "(select_type_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "selector",
			Pattern: "(selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "size",
			Pattern: "(size)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "sized_allocation",
			Pattern: "(sized_allocation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "sized_declarator",
			Pattern: "(sized_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "statement_label",
			Pattern: "(statement_label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "statement_label_reference",
			Pattern: "(statement_label_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "stop_statement",
			Pattern: "(stop_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string_literal",
			Pattern: "(string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"identifier",

					"number_literal",

				},
				
			},
			
		},

		{
			Name: "submodule",
			Pattern: "(submodule)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "submodule_statement",
			Pattern: "(submodule_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"module_name",

				},
				
			},
			
		},

		{
			Name: "subroutine",
			Pattern: "(subroutine)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "subroutine_call",
			Pattern: "(subroutine_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "subroutine_statement",
			Pattern: "(subroutine_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"derived_type",

					"intrinsic_type",

					"name",

					"parameters",

				},
				
			},
			
		},

		{
			Name: "transfer_items",
			Pattern: "(transfer_items)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "translation_unit",
			Pattern: "(translation_unit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "triplet_spec",
			Pattern: "(triplet_spec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_member",
			Pattern: "(type_member)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_name",
			Pattern: "(type_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_qualifier",
			Pattern: "(type_qualifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"kind",

					"len",

				},
				
			},
			
		},

		{
			Name: "type_statement",
			Pattern: "(type_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

					"intrinsic_type",

				},
				
			},
			
		},

		{
			Name: "unary_expression",
			Pattern: "(unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"binary_expression",

					"preproc_defined",

					"user_defined_operator",

				},
				
			},
			
		},

		{
			Name: "unit_identifier",
			Pattern: "(unit_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "UnaryOp",
				Token: "self",
				Roles: []string{

					"Operator",

				},
				
				
			},
			
		},

		{
			Name: "unlimited_polymorphic",
			Pattern: "(unlimited_polymorphic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "use_alias",
			Pattern: "(use_alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "use_statement",
			Pattern: "(use_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "user_defined_operator",
			Pattern: "(user_defined_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "variable_attributes",
			Pattern: "(variable_attributes)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "variable_declaration",
			Pattern: "(variable_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"coarray_declarator",

					"data_declarator",

					"declared_type",

					"derived_type",

					"identifier",

					"init_declarator",

					"intrinsic_type",

					"language_binding",

					"pointer_init_declarator",

					"procedure",

					"sized_declarator",

					"type_qualifier",

				},
				
			},
			
		},

		{
			Name: "variable_group",
			Pattern: "(variable_group)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "variable_modification",
			Pattern: "(variable_modification)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"coarray_declarator",

					"identifier",

					"sized_declarator",

				},
				
			},
			
		},

		{
			Name: "where_statement",
			Pattern: "(where_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "write_statement",
			Pattern: "(write_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_",
			Pattern: "(_)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "abstract",
			Pattern: "(abstract)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "all",
			Pattern: "(all)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "allocatable",
			Pattern: "(allocatable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "allocate",
			Pattern: "(allocate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "assign",
			Pattern: "(assign)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "assignment",
			Pattern: "(assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				
				
			},
			
		},

		{
			Name: "associate",
			Pattern: "(associate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "assumed_rank",
			Pattern: "(assumed_rank)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "asynchronous",
			Pattern: "(asynchronous)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "attributes",
			Pattern: "(attributes)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "automatic",
			Pattern: "(automatic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "backspace",
			Pattern: "(backspace)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "bind",
			Pattern: "(bind)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "blockdata",
			Pattern: "(blockdata)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "byte",
			Pattern: "(byte)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "call",
			Pattern: "(call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "change",
			Pattern: "(change)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "character",
			Pattern: "(character)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "classis",
			Pattern: "(classis)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "classof",
			Pattern: "(classof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "close",
			Pattern: "(close)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "codimension",
			Pattern: "(codimension)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "common",
			Pattern: "(common)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "complex",
			Pattern: "(complex)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "concurrent",
			Pattern: "(concurrent)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "constant",
			Pattern: "(constant)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "contains",
			Pattern: "(contains)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "contiguous",
			Pattern: "(contiguous)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "critical",
			Pattern: "(critical)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "cycle",
			Pattern: "(cycle)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "data",
			Pattern: "(data)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "deallocate",
			Pattern: "(deallocate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "deferred",
			Pattern: "(deferred)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "defined",
			Pattern: "(defined)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "device",
			Pattern: "(device)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "dimension",
			Pattern: "(dimension)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "double",
			Pattern: "(double)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "doublecomplex",
			Pattern: "(doublecomplex)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "doubleprecision",
			Pattern: "(doubleprecision)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "elemental",
			Pattern: "(elemental)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "elseif",
			Pattern: "(elseif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "elsewhere",
			Pattern: "(elsewhere)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "end",
			Pattern: "(end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "endassociate",
			Pattern: "(endassociate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "endblock",
			Pattern: "(endblock)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "endblockdata",
			Pattern: "(endblockdata)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "endcritical",
			Pattern: "(endcritical)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "enddo",
			Pattern: "(enddo)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "endenum",
			Pattern: "(endenum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "endfile",
			Pattern: "(endfile)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "endforall",
			Pattern: "(endforall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "endfunction",
			Pattern: "(endfunction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "endif",
			Pattern: "(endif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "endinterface",
			Pattern: "(endinterface)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "endmodule",
			Pattern: "(endmodule)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "endprocedure",
			Pattern: "(endprocedure)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "endprogram",
			Pattern: "(endprogram)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "endselect",
			Pattern: "(endselect)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "endsubmodule",
			Pattern: "(endsubmodule)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "endsubroutine",
			Pattern: "(endsubroutine)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "endteam",
			Pattern: "(endteam)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "endtype",
			Pattern: "(endtype)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "endwhere",
			Pattern: "(endwhere)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "entry",
			Pattern: "(entry)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enumeration",
			Pattern: "(enumeration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enumerator",
			Pattern: "(enumerator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "equivalence",
			Pattern: "(equivalence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "error",
			Pattern: "(error)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "event",
			Pattern: "(event)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "exit",
			Pattern: "(exit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extends",
			Pattern: "(extends)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "external",
			Pattern: "(external)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "fail",
			Pattern: "(fail)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "family",
			Pattern: "(family)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "final",
			Pattern: "(final)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "flush",
			Pattern: "(flush)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "fmt",
			Pattern: "(fmt)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "forall",
			Pattern: "(forall)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "form",
			Pattern: "(form)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "format",
			Pattern: "(format)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "formatted",
			Pattern: "(formatted)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "function",
			Pattern: "(function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "generic",
			Pattern: "(generic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "global",
			Pattern: "(global)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "go",
			Pattern: "(go)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "goto",
			Pattern: "(goto)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "grid_global",
			Pattern: "(grid_global)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "hollerith_constant",
			Pattern: "(hollerith_constant)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "host",
			Pattern: "(host)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "image",
			Pattern: "(image)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "images",
			Pattern: "(images)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "implicit",
			Pattern: "(implicit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "impure",
			Pattern: "(impure)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "include",
			Pattern: "(include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "initial",
			Pattern: "(initial)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "inout",
			Pattern: "(inout)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "inquire",
			Pattern: "(inquire)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "integer",
			Pattern: "(integer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "intent",
			Pattern: "(intent)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "interface",
			Pattern: "(interface)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "intrinsic",
			Pattern: "(intrinsic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "is",
			Pattern: "(is)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "kind",
			Pattern: "(kind)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "len",
			Pattern: "(len)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "local",
			Pattern: "(local)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "local_init",
			Pattern: "(local_init)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "lock",
			Pattern: "(lock)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "logical",
			Pattern: "(logical)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "managed",
			Pattern: "(managed)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "memory",
			Pattern: "(memory)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "module",
			Pattern: "(module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "namelist",
			Pattern: "(namelist)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "non_intrinsic",
			Pattern: "(non_intrinsic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "non_overridable",
			Pattern: "(non_overridable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "none",
			Pattern: "(none)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "none",
			Pattern: "(none)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "nopass",
			Pattern: "(nopass)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "notify",
			Pattern: "(notify)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "null",
			Pattern: "(null)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "nullify",
			Pattern: "(nullify)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "only",
			Pattern: "(only)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "open",
			Pattern: "(open)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "operator",
			Pattern: "(operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "operator_name",
			Pattern: "(operator_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "optional",
			Pattern: "(optional)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "out",
			Pattern: "(out)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "parameter",
			Pattern: "(parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "pass",
			Pattern: "(pass)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "pause",
			Pattern: "(pause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pinned",
			Pattern: "(pinned)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pointer",
			Pattern: "(pointer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "post",
			Pattern: "(post)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "precision",
			Pattern: "(precision)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "preproc_arg",
			Pattern: "(preproc_arg)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "preproc_comment",
			Pattern: "(preproc_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "preproc_directive",
			Pattern: "(preproc_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "print",
			Pattern: "(print)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "private",
			Pattern: "(private)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "procedure",
			Pattern: "(procedure)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "program",
			Pattern: "(program)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "property",
			Pattern: "(property)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "protected",
			Pattern: "(protected)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "public",
			Pattern: "(public)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pure",
			Pattern: "(pure)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "quiet",
			Pattern: "(quiet)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "rank",
			Pattern: "(rank)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "read",
			Pattern: "(read)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "real",
			Pattern: "(real)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "recursive",
			Pattern: "(recursive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "reduce",
			Pattern: "(reduce)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "result",
			Pattern: "(result)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "rewind",
			Pattern: "(rewind)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "save",
			Pattern: "(save)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "select",
			Pattern: "(select)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "selectcase",
			Pattern: "(selectcase)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "selectrank",
			Pattern: "(selectrank)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "selecttype",
			Pattern: "(selecttype)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "sequence",
			Pattern: "(sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "sequence_statement",
			Pattern: "(sequence_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "shared",
			Pattern: "(shared)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "simple",
			Pattern: "(simple)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "statement_label",
			Pattern: "(statement_label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "static",
			Pattern: "(static)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "stop",
			Pattern: "(stop)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "submodule",
			Pattern: "(submodule)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "subroutine",
			Pattern: "(subroutine)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "sync",
			Pattern: "(sync)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "system_lib_string",
			Pattern: "(system_lib_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "target",
			Pattern: "(target)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "team",
			Pattern: "(team)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "texture",
			Pattern: "(texture)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "then",
			Pattern: "(then)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "to",
			Pattern: "(to)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "typeis",
			Pattern: "(typeis)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "typeof",
			Pattern: "(typeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unformatted",
			Pattern: "(unformatted)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "unit",
			Pattern: "(unit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unlock",
			Pattern: "(unlock)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "use",
			Pattern: "(use)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "value",
			Pattern: "(value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "volatile",
			Pattern: "(volatile)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "wait",
			Pattern: "(wait)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "where",
			Pattern: "(where)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "write",
			Pattern: "(write)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &fortranPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *fortranPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *fortranPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *fortranPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *fortranPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *fortranPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// git_configPatternMatcher provides pre-compiled pattern matching for git_config
type git_configPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newgit_configPatternMatcher() *git_configPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "config",
			Pattern: "(config)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "section",
			Pattern: "(section)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "section_header",
			Pattern: "(section_header)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "shell_command",
			Pattern: "(shell_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "subsection_name",
			Pattern: "(subsection_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "variable",
			Pattern: "(variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"false",

					"integer",

					"string",

					"true",

				},
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "integer",
			Pattern: "(integer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "name",
			Pattern: "(name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "section_name",
			Pattern: "(section_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &git_configPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *git_configPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *git_configPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *git_configPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *git_configPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *git_configPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// gitattributesPatternMatcher provides pre-compiled pattern matching for gitattributes
type gitattributesPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newgitattributesPatternMatcher() *gitattributesPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "ansi_c_escape",
			Pattern: "(ansi_c_escape)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "attribute",
			Pattern: "(attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "builtin_attr",
			Pattern: "(builtin_attr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "class_range",
			Pattern: "(class_range)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "file",
			Pattern: "(file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "ignored_value",
			Pattern: "(ignored_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "macro_def",
			Pattern: "(macro_def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"attr_name",

				},
				
			},
			
		},

		{
			Name: "pattern",
			Pattern: "(pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"dir_sep",

				},
				
			},
			
		},

		{
			Name: "quoted_pattern",
			Pattern: "(quoted_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"dir_sep",

				},
				
			},
			
		},

		{
			Name: "range_notation",
			Pattern: "(range_notation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "attr_name",
			Pattern: "(attr_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "attr_reset",
			Pattern: "(attr_reset)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "attr_set",
			Pattern: "(attr_set)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "attr_unset",
			Pattern: "(attr_unset)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "binary",
			Pattern: "(binary)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "boolean_value",
			Pattern: "(boolean_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "character_class",
			Pattern: "(character_class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "crlf",
			Pattern: "(crlf)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "delta",
			Pattern: "(delta)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "diff",
			Pattern: "(diff)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "dir_sep",
			Pattern: "(dir_sep)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "encoding",
			Pattern: "(encoding)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "eol",
			Pattern: "(eol)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "escaped_char",
			Pattern: "(escaped_char)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "filter",
			Pattern: "(filter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ident",
			Pattern: "(ident)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "macro_tag",
			Pattern: "(macro_tag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "merge",
			Pattern: "(merge)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pattern_negation",
			Pattern: "(pattern_negation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "range_negation",
			Pattern: "(range_negation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "redundant_escape",
			Pattern: "(redundant_escape)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_value",
			Pattern: "(string_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "text",
			Pattern: "(text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "trailing_slash",
			Pattern: "(trailing_slash)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "whitespace",
			Pattern: "(whitespace)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "wildcard",
			Pattern: "(wildcard)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &gitattributesPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *gitattributesPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *gitattributesPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *gitattributesPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *gitattributesPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *gitattributesPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// gitignorePatternMatcher provides pre-compiled pattern matching for gitignore
type gitignorePatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newgitignorePatternMatcher() *gitignorePatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "bracket_char_class",
			Pattern: "(bracket_char_class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"alnum",

					"alpha",

					"blank",

					"cntrl",

					"digit",

					"graph",

					"lower",

					"print",

					"punct",

					"space",

					"upper",

					"xdigit",

				},
				
			},
			
		},

		{
			Name: "bracket_char_escaped",
			Pattern: "(bracket_char_escaped)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "bracket_expr",
			Pattern: "(bracket_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bracket_range",
			Pattern: "(bracket_range)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "document",
			Pattern: "(document)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pattern",
			Pattern: "(pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"directory_separator",

					"directory_separator_escaped",

				},
				
			},
			
		},

		{
			Name: "pattern_char_escaped",
			Pattern: "(pattern_char_escaped)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "alnum",
			Pattern: "(alnum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "alpha",
			Pattern: "(alpha)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "blank",
			Pattern: "(blank)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "bracket_char",
			Pattern: "(bracket_char)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bracket_negation",
			Pattern: "(bracket_negation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "cntrl",
			Pattern: "(cntrl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "digit",
			Pattern: "(digit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "directory_separator",
			Pattern: "(directory_separator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "directory_separator_escaped",
			Pattern: "(directory_separator_escaped)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "graph",
			Pattern: "(graph)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "lower",
			Pattern: "(lower)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "negation",
			Pattern: "(negation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pattern_char",
			Pattern: "(pattern_char)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "print",
			Pattern: "(print)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "punct",
			Pattern: "(punct)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "space",
			Pattern: "(space)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "upper",
			Pattern: "(upper)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "wildcard_char_single",
			Pattern: "(wildcard_char_single)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "wildcard_chars",
			Pattern: "(wildcard_chars)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "wildcard_chars_allow_slash",
			Pattern: "(wildcard_chars_allow_slash)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "xdigit",
			Pattern: "(xdigit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &gitignorePatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *gitignorePatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *gitignorePatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *gitignorePatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *gitignorePatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *gitignorePatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// goPatternMatcher provides pre-compiled pattern matching for go
type goPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newgoPatternMatcher() *goPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "_expression",
			Pattern: "(_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_simple_statement",
			Pattern: "(_simple_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_simple_type",
			Pattern: "(_simple_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_statement",
			Pattern: "(_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_type",
			Pattern: "(_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "argument_list",
			Pattern: "(argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "array_type",
			Pattern: "(array_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"_type",

				},
				
			},
			
		},

		{
			Name: "assignment_statement",
			Pattern: "(assignment_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"expression_list",

				},
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "BinaryOp",
				
				Roles: []string{

					"Operator",

				},
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "break_statement",
			Pattern: "(break_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "call_expression",
			Pattern: "(call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				Children: []string{

					"_expression",

					"argument_list",

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "channel_type",
			Pattern: "(channel_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_type",

				},
				
			},
			
		},

		{
			Name: "communication_case",
			Pattern: "(communication_case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"receive_statement",

					"send_statement",

				},
				
			},
			
		},

		{
			Name: "composite_literal",
			Pattern: "(composite_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"array_type",

					"generic_type",

					"implicit_length_array_type",

					"literal_value",

					"map_type",

					"qualified_type",

					"slice_type",

					"struct_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "const_declaration",
			Pattern: "(const_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Declaration",

					"Constant",

				},
				Children: []string{

					"const_spec",

				},
				
			},
			
		},

		{
			Name: "const_spec",
			Pattern: "(const_spec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_type",

					"expression_list",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "continue_statement",
			Pattern: "(continue_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "dec_statement",
			Pattern: "(dec_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "default_case",
			Pattern: "(default_case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "defer_statement",
			Pattern: "(defer_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "dot",
			Pattern: "(dot)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "empty_statement",
			Pattern: "(empty_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expression_case",
			Pattern: "(expression_case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"expression_list",

				},
				
			},
			
		},

		{
			Name: "expression_list",
			Pattern: "(expression_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "expression_statement",
			Pattern: "(expression_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "expression_switch_statement",
			Pattern: "(expression_switch_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				Children: []string{

					"_expression",

					"_simple_statement",

				},
				
			},
			
		},

		{
			Name: "fallthrough_statement",
			Pattern: "(fallthrough_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field_declaration",
			Pattern: "(field_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"_type",

					"field_identifier",

					"generic_type",

					"interpreted_string_literal",

					"qualified_type",

					"raw_string_literal",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "field_declaration_list",
			Pattern: "(field_declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"field_declaration",

				},
				
			},
			
		},

		{
			Name: "for_clause",
			Pattern: "(for_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"_expression",

					"_simple_statement",

				},
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "func_literal",
			Pattern: "(func_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				
				Roles: []string{

					"Lambda",

				},
				Children: []string{

					"_simple_type",

					"block",

					"parameter_list",

				},
				
			},
			
		},

		{
			Name: "function_declaration",
			Pattern: "(function_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"_simple_type",

					"block",

					"identifier",

					"parameter_list",

					"type_parameter_list",

				},
				
			},
			
		},

		{
			Name: "function_type",
			Pattern: "(function_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"_simple_type",

					"parameter_list",

				},
				
			},
			
		},

		{
			Name: "generic_type",
			Pattern: "(generic_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"negated_type",

					"qualified_type",

					"type_arguments",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "go_statement",
			Pattern: "(go_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "goto_statement",
			Pattern: "(goto_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"_expression",

					"_simple_statement",

					"block",

					"if_statement",

				},
				
			},
			
		},

		{
			Name: "implicit_length_array_type",
			Pattern: "(implicit_length_array_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_type",

				},
				
			},
			
		},

		{
			Name: "import_declaration",
			Pattern: "(import_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_spec",
			Pattern: "(import_spec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"blank_identifier",

					"dot",

					"interpreted_string_literal",

					"package_identifier",

					"raw_string_literal",

				},
				
			},
			
		},

		{
			Name: "import_spec_list",
			Pattern: "(import_spec_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "inc_statement",
			Pattern: "(inc_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "index_expression",
			Pattern: "(index_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				
				Roles: []string{

					"Index",

				},
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "interface_type",
			Pattern: "(interface_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "interpreted_string_literal",
			Pattern: "(interpreted_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "keyed_element",
			Pattern: "(keyed_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "KeyValue",
				Token: "self",
				Roles: []string{

					"Key",

				},
				Children: []string{

					"literal_element",

				},
				
			},
			
		},

		{
			Name: "labeled_statement",
			Pattern: "(labeled_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"label_name",

				},
				
			},
			
		},

		{
			Name: "literal_element",
			Pattern: "(literal_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "literal_value",
			Pattern: "(literal_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "map_type",
			Pattern: "(map_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_type",

				},
				
			},
			
		},

		{
			Name: "method_declaration",
			Pattern: "(method_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"_simple_type",

					"block",

					"field_identifier",

					"parameter_list",

				},
				
			},
			
		},

		{
			Name: "method_elem",
			Pattern: "(method_elem)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "child:identifier",
				Roles: []string{

					"Function",

					"Declaration",

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"_simple_type",

					"field_identifier",

					"parameter_list",

				},
				
			},
			
		},

		{
			Name: "negated_type",
			Pattern: "(negated_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "package_clause",
			Pattern: "(package_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Package",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "parameter_declaration",
			Pattern: "(parameter_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_type",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "parameter_list",
			Pattern: "(parameter_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "parenthesized_type",
			Pattern: "(parenthesized_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pointer_type",
			Pattern: "(pointer_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "qualified_type",
			Pattern: "(qualified_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"package_identifier",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "range_clause",
			Pattern: "(range_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"expression_list",

				},
				
			},
			
		},

		{
			Name: "raw_string_literal",
			Pattern: "(raw_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "receive_statement",
			Pattern: "(receive_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"expression_list",

				},
				
			},
			
		},

		{
			Name: "return_statement",
			Pattern: "(return_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "select_statement",
			Pattern: "(select_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "selector_expression",
			Pattern: "(selector_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_expression",

					"field_identifier",

				},
				
			},
			
		},

		{
			Name: "send_statement",
			Pattern: "(send_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "short_var_declaration",
			Pattern: "(short_var_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"expression_list",

				},
				
			},
			
		},

		{
			Name: "slice_expression",
			Pattern: "(slice_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Slice",
				
				
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "slice_type",
			Pattern: "(slice_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Slice",
				Token: "self",
				
				Children: []string{

					"_type",

				},
				
			},
			
		},

		{
			Name: "source_file",
			Pattern: "(source_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "struct_type",
			Pattern: "(struct_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "type_alias",
			Pattern: "(type_alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "type_arguments",
			Pattern: "(type_arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_assertion_expression",
			Pattern: "(type_assertion_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"_type",

				},
				
			},
			
		},

		{
			Name: "type_case",
			Pattern: "(type_case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"_type",

				},
				
			},
			
		},

		{
			Name: "type_constraint",
			Pattern: "(type_constraint)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_conversion_expression",
			Pattern: "(type_conversion_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_expression",

					"_type",

				},
				
			},
			
		},

		{
			Name: "type_declaration",
			Pattern: "(type_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_elem",
			Pattern: "(type_elem)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "child:identifier",
				
				
				
			},
			
		},

		{
			Name: "type_instantiation_expression",
			Pattern: "(type_instantiation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_type",

				},
				
			},
			
		},

		{
			Name: "type_parameter_declaration",
			Pattern: "(type_parameter_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"identifier",

					"type_constraint",

				},
				
			},
			
		},

		{
			Name: "type_parameter_list",
			Pattern: "(type_parameter_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_spec",
			Pattern: "(type_spec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"_type",

					"type_identifier",

					"type_parameter_list",

				},
				
			},
			
		},

		{
			Name: "type_switch_statement",
			Pattern: "(type_switch_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				Children: []string{

					"_expression",

					"_simple_statement",

					"expression_list",

				},
				
			},
			
		},

		{
			Name: "unary_expression",
			Pattern: "(unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "var_declaration",
			Pattern: "(var_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "var_spec",
			Pattern: "(var_spec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"_type",

					"expression_list",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "var_spec_list",
			Pattern: "(var_spec_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "variadic_argument",
			Pattern: "(variadic_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "variadic_parameter_declaration",
			Pattern: "(variadic_parameter_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_type",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "blank_identifier",
			Pattern: "(blank_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "chan",
			Pattern: "(chan)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "const",
			Pattern: "(const)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "defer",
			Pattern: "(defer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "fallthrough",
			Pattern: "(fallthrough)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field_identifier",
			Pattern: "(field_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				
				
				
			},
			
		},

		{
			Name: "float_literal",
			Pattern: "(float_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Reference",

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "func",
			Pattern: "(func)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "go",
			Pattern: "(go)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "goto",
			Pattern: "(goto)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "imaginary_literal",
			Pattern: "(imaginary_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "int_literal",
			Pattern: "(int_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "interface",
			Pattern: "(interface)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Literal",

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "interpreted_string_literal_content",
			Pattern: "(interpreted_string_literal_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "iota",
			Pattern: "(iota)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "label_name",
			Pattern: "(label_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "map",
			Pattern: "(map)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "nil",
			Pattern: "(nil)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "package",
			Pattern: "(package)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Package",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "package_identifier",
			Pattern: "(package_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				
				
				
			},
			
		},

		{
			Name: "range",
			Pattern: "(range)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "raw_string_literal_content",
			Pattern: "(raw_string_literal_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "rune_literal",
			Pattern: "(rune_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "select",
			Pattern: "(select)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "struct",
			Pattern: "(struct)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "switch",
			Pattern: "(switch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_identifier",
			Pattern: "(type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				
				
				
			},
			
		},

		{
			Name: "var",
			Pattern: "(var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &goPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *goPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *goPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *goPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *goPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *goPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// gosumPatternMatcher provides pre-compiled pattern matching for gosum
type gosumPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newgosumPatternMatcher() *gosumPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "checksum",
			Pattern: "(checksum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "checksum_database",
			Pattern: "(checksum_database)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "checksum_value",
			Pattern: "(checksum_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "version",
			Pattern: "(version)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"alpha",

					"beta",

					"dev",

					"hex_number",

					"module_version",

					"number",

					"number_with_decimal",

					"pre",

					"rc",

				},
				
			},
			
		},

		{
			Name: "alpha",
			Pattern: "(alpha)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "beta",
			Pattern: "(beta)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "dev",
			Pattern: "(dev)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "hash",
			Pattern: "(hash)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "hash_version",
			Pattern: "(hash_version)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "hex_number",
			Pattern: "(hex_number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "module_path",
			Pattern: "(module_path)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "module_version",
			Pattern: "(module_version)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "number",
			Pattern: "(number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "number_with_decimal",
			Pattern: "(number_with_decimal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pre",
			Pattern: "(pre)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "rc",
			Pattern: "(rc)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &gosumPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *gosumPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *gosumPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *gosumPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *gosumPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *gosumPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// gotmplPatternMatcher provides pre-compiled pattern matching for gotmpl
type gotmplPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newgotmplPatternMatcher() *gotmplPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "argument_list",
			Pattern: "(argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "assignment",
			Pattern: "(assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"assignment",

					"chained_pipeline",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"true",

					"variable",

					"variable_definition",

				},
				
			},
			
		},

		{
			Name: "block_action",
			Pattern: "(block_action)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				Children: []string{

					"assignment",

					"block_action",

					"chained_pipeline",

					"comment",

					"define_action",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"if_action",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"range_action",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"template_action",

					"text",

					"true",

					"variable",

					"variable_definition",

					"with_action",

					"yaml_no_injection_text",

				},
				
			},
			
		},

		{
			Name: "chained_pipeline",
			Pattern: "(chained_pipeline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "define_action",
			Pattern: "(define_action)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"assignment",

					"block_action",

					"chained_pipeline",

					"comment",

					"define_action",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"if_action",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"range_action",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"template_action",

					"text",

					"true",

					"variable",

					"variable_definition",

					"with_action",

					"yaml_no_injection_text",

				},
				
			},
			
		},

		{
			Name: "dot",
			Pattern: "(dot)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field",
			Pattern: "(field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "function_call",
			Pattern: "(function_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"argument_list",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "if_action",
			Pattern: "(if_action)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"assignment",

					"block_action",

					"chained_pipeline",

					"comment",

					"define_action",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"if_action",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"range_action",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"template_action",

					"text",

					"true",

					"variable",

					"variable_definition",

					"with_action",

					"yaml_no_injection_text",

				},
				
			},
			
		},

		{
			Name: "interpreted_string_literal",
			Pattern: "(interpreted_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "method_call",
			Pattern: "(method_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"argument_list",

					"field",

					"selector_expression",

				},
				
			},
			
		},

		{
			Name: "parenthesized_pipeline",
			Pattern: "(parenthesized_pipeline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "range_action",
			Pattern: "(range_action)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"assignment",

					"block_action",

					"chained_pipeline",

					"comment",

					"define_action",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"if_action",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"range_action",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"template_action",

					"text",

					"true",

					"variable",

					"variable_definition",

					"with_action",

					"yaml_no_injection_text",

				},
				
			},
			
		},

		{
			Name: "range_variable_definition",
			Pattern: "(range_variable_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"assignment",

					"chained_pipeline",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"true",

					"variable",

					"variable_definition",

				},
				
			},
			
		},

		{
			Name: "selector_expression",
			Pattern: "(selector_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"field",

					"field_identifier",

					"parenthesized_pipeline",

					"selector_expression",

					"variable",

				},
				
			},
			
		},

		{
			Name: "template",
			Pattern: "(template)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "template_action",
			Pattern: "(template_action)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"assignment",

					"chained_pipeline",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"true",

					"variable",

					"variable_definition",

				},
				
			},
			
		},

		{
			Name: "text",
			Pattern: "(text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "variable",
			Pattern: "(variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "variable_definition",
			Pattern: "(variable_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"assignment",

					"chained_pipeline",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"true",

					"variable",

					"variable_definition",

				},
				
			},
			
		},

		{
			Name: "with_action",
			Pattern: "(with_action)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"assignment",

					"block_action",

					"chained_pipeline",

					"comment",

					"define_action",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"if_action",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"range_action",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"template_action",

					"text",

					"true",

					"variable",

					"variable_definition",

					"with_action",

					"yaml_no_injection_text",

				},
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "define",
			Pattern: "(define)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "end",
			Pattern: "(end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field_identifier",
			Pattern: "(field_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "float_literal",
			Pattern: "(float_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Reference",

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "imaginary_literal",
			Pattern: "(imaginary_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "int_literal",
			Pattern: "(int_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "nil",
			Pattern: "(nil)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "range",
			Pattern: "(range)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "raw_string_literal",
			Pattern: "(raw_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "rune_literal",
			Pattern: "(rune_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "template",
			Pattern: "(template)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "with",
			Pattern: "(with)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "yaml_no_injection_text",
			Pattern: "(yaml_no_injection_text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &gotmplPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *gotmplPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *gotmplPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *gotmplPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *gotmplPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *gotmplPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// goworkPatternMatcher provides pre-compiled pattern matching for gowork
type goworkPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newgoworkPatternMatcher() *goworkPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "file_path",
			Pattern: "(file_path)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "go_directive",
			Pattern: "(go_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "go_version",
			Pattern: "(go_version)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "interpreted_string_literal",
			Pattern: "(interpreted_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "module_path",
			Pattern: "(module_path)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Literal",

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "replace_directive",
			Pattern: "(replace_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "replace_spec",
			Pattern: "(replace_spec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "source_file",
			Pattern: "(source_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "use_directive",
			Pattern: "(use_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "File",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "use_spec",
			Pattern: "(use_spec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "version",
			Pattern: "(version)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "go",
			Pattern: "(go)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "raw_string_literal",
			Pattern: "(raw_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "replace",
			Pattern: "(replace)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "use",
			Pattern: "(use)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &goworkPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *goworkPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *goworkPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *goworkPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *goworkPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *goworkPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// hclPatternMatcher provides pre-compiled pattern matching for hcl
type hclPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newhclPatternMatcher() *hclPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "attr_splat",
			Pattern: "(attr_splat)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "attribute",
			Pattern: "(attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "binary_operation",
			Pattern: "(binary_operation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "BinaryOp",
				
				Roles: []string{

					"Operator",

				},
				
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_end",
			Pattern: "(block_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_start",
			Pattern: "(block_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "body",
			Pattern: "(body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bool_lit",
			Pattern: "(bool_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "collection_value",
			Pattern: "(collection_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "conditional",
			Pattern: "(conditional)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "config_file",
			Pattern: "(config_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expression",
			Pattern: "(expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "for_cond",
			Pattern: "(for_cond)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "for_expr",
			Pattern: "(for_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "for_intro",
			Pattern: "(for_intro)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "for_object_expr",
			Pattern: "(for_object_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "for_tuple_expr",
			Pattern: "(for_tuple_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "full_splat",
			Pattern: "(full_splat)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "function_arguments",
			Pattern: "(function_arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "function_call",
			Pattern: "(function_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "get_attr",
			Pattern: "(get_attr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "heredoc_start",
			Pattern: "(heredoc_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "heredoc_template",
			Pattern: "(heredoc_template)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "index",
			Pattern: "(index)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				Token: "self",
				Roles: []string{

					"Index",

				},
				
				
			},
			
		},

		{
			Name: "legacy_index",
			Pattern: "(legacy_index)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				
				Roles: []string{

					"Index",

				},
				
				
			},
			
		},

		{
			Name: "literal_value",
			Pattern: "(literal_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "new_index",
			Pattern: "(new_index)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				
				Roles: []string{

					"Index",

				},
				
				
			},
			
		},

		{
			Name: "numeric_lit",
			Pattern: "(numeric_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "object",
			Pattern: "(object)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "object_elem",
			Pattern: "(object_elem)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "object_end",
			Pattern: "(object_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "object_start",
			Pattern: "(object_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "operation",
			Pattern: "(operation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "quoted_template",
			Pattern: "(quoted_template)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "splat",
			Pattern: "(splat)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string_lit",
			Pattern: "(string_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "template_directive",
			Pattern: "(template_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "template_else_intro",
			Pattern: "(template_else_intro)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "template_expr",
			Pattern: "(template_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "template_for",
			Pattern: "(template_for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "template_for_end",
			Pattern: "(template_for_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "template_for_start",
			Pattern: "(template_for_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "template_if",
			Pattern: "(template_if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "template_if_end",
			Pattern: "(template_if_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				Roles: []string{

					"Condition",

				},
				
				
			},
			
		},

		{
			Name: "template_if_intro",
			Pattern: "(template_if_intro)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "template_interpolation",
			Pattern: "(template_interpolation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "template_literal",
			Pattern: "(template_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "tuple",
			Pattern: "(tuple)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "tuple_end",
			Pattern: "(tuple_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				
				
			},
			
		},

		{
			Name: "tuple_start",
			Pattern: "(tuple_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unary_operation",
			Pattern: "(unary_operation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "UnaryOp",
				
				Roles: []string{

					"Operator",

				},
				
				
			},
			
		},

		{
			Name: "variable_expr",
			Pattern: "(variable_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "ellipsis",
			Pattern: "(ellipsis)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "endfor",
			Pattern: "(endfor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "endif",
			Pattern: "(endif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "heredoc_identifier",
			Pattern: "(heredoc_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "null_lit",
			Pattern: "(null_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "quoted_template_end",
			Pattern: "(quoted_template_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "quoted_template_start",
			Pattern: "(quoted_template_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "strip_marker",
			Pattern: "(strip_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "template_directive_end",
			Pattern: "(template_directive_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "template_directive_start",
			Pattern: "(template_directive_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "template_interpolation_end",
			Pattern: "(template_interpolation_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "template_interpolation_start",
			Pattern: "(template_interpolation_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &hclPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *hclPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *hclPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *hclPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *hclPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *hclPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// helmPatternMatcher provides pre-compiled pattern matching for helm
type helmPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newhelmPatternMatcher() *helmPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "argument_list",
			Pattern: "(argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "assignment",
			Pattern: "(assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"assignment",

					"chained_pipeline",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"true",

					"variable",

					"variable_definition",

				},
				
			},
			
		},

		{
			Name: "block_action",
			Pattern: "(block_action)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				Children: []string{

					"assignment",

					"block_action",

					"chained_pipeline",

					"comment",

					"define_action",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"if_action",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"range_action",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"template_action",

					"text",

					"true",

					"variable",

					"variable_definition",

					"with_action",

					"yaml_no_injection_text",

				},
				
			},
			
		},

		{
			Name: "chained_pipeline",
			Pattern: "(chained_pipeline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "define_action",
			Pattern: "(define_action)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"assignment",

					"block_action",

					"chained_pipeline",

					"comment",

					"define_action",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"if_action",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"range_action",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"template_action",

					"text",

					"true",

					"variable",

					"variable_definition",

					"with_action",

					"yaml_no_injection_text",

				},
				
			},
			
		},

		{
			Name: "dot",
			Pattern: "(dot)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field",
			Pattern: "(field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "function_call",
			Pattern: "(function_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"argument_list",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "if_action",
			Pattern: "(if_action)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"assignment",

					"block_action",

					"chained_pipeline",

					"comment",

					"define_action",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"if_action",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"range_action",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"template_action",

					"text",

					"true",

					"variable",

					"variable_definition",

					"with_action",

					"yaml_no_injection_text",

				},
				
			},
			
		},

		{
			Name: "interpreted_string_literal",
			Pattern: "(interpreted_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "method_call",
			Pattern: "(method_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"argument_list",

					"field",

					"selector_expression",

				},
				
			},
			
		},

		{
			Name: "parenthesized_pipeline",
			Pattern: "(parenthesized_pipeline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "range_action",
			Pattern: "(range_action)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"assignment",

					"block_action",

					"chained_pipeline",

					"comment",

					"define_action",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"if_action",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"range_action",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"template_action",

					"text",

					"true",

					"variable",

					"variable_definition",

					"with_action",

					"yaml_no_injection_text",

				},
				
			},
			
		},

		{
			Name: "range_variable_definition",
			Pattern: "(range_variable_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"assignment",

					"chained_pipeline",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"true",

					"variable",

					"variable_definition",

				},
				
			},
			
		},

		{
			Name: "selector_expression",
			Pattern: "(selector_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"field",

					"field_identifier",

					"parenthesized_pipeline",

					"selector_expression",

					"variable",

				},
				
			},
			
		},

		{
			Name: "template",
			Pattern: "(template)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "template_action",
			Pattern: "(template_action)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"assignment",

					"chained_pipeline",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"true",

					"variable",

					"variable_definition",

				},
				
			},
			
		},

		{
			Name: "text",
			Pattern: "(text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "variable",
			Pattern: "(variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "variable_definition",
			Pattern: "(variable_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"assignment",

					"chained_pipeline",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"true",

					"variable",

					"variable_definition",

				},
				
			},
			
		},

		{
			Name: "with_action",
			Pattern: "(with_action)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"assignment",

					"block_action",

					"chained_pipeline",

					"comment",

					"define_action",

					"dot",

					"false",

					"field",

					"float_literal",

					"function_call",

					"if_action",

					"imaginary_literal",

					"int_literal",

					"interpreted_string_literal",

					"method_call",

					"nil",

					"parenthesized_pipeline",

					"range_action",

					"raw_string_literal",

					"rune_literal",

					"selector_expression",

					"template_action",

					"text",

					"true",

					"variable",

					"variable_definition",

					"with_action",

					"yaml_no_injection_text",

				},
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "define",
			Pattern: "(define)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "end",
			Pattern: "(end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field_identifier",
			Pattern: "(field_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "float_literal",
			Pattern: "(float_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Reference",

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "imaginary_literal",
			Pattern: "(imaginary_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "int_literal",
			Pattern: "(int_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "nil",
			Pattern: "(nil)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "range",
			Pattern: "(range)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "raw_string_literal",
			Pattern: "(raw_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "rune_literal",
			Pattern: "(rune_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "template",
			Pattern: "(template)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "with",
			Pattern: "(with)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "yaml_no_injection_text",
			Pattern: "(yaml_no_injection_text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &helmPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *helmPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *helmPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *helmPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *helmPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *helmPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// htmlPatternMatcher provides pre-compiled pattern matching for html
type htmlPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newhtmlPatternMatcher() *htmlPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "attribute",
			Pattern: "(attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "doctype",
			Pattern: "(doctype)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "document",
			Pattern: "(document)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "element",
			Pattern: "(element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "end_tag",
			Pattern: "(end_tag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "erroneous_end_tag",
			Pattern: "(erroneous_end_tag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "quoted_attribute_value",
			Pattern: "(quoted_attribute_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "script_element",
			Pattern: "(script_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "self_closing_tag",
			Pattern: "(self_closing_tag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "start_tag",
			Pattern: "(start_tag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "style_element",
			Pattern: "(style_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "attribute_name",
			Pattern: "(attribute_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "attribute_value",
			Pattern: "(attribute_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "doctype",
			Pattern: "(doctype)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "entity",
			Pattern: "(entity)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "erroneous_end_tag_name",
			Pattern: "(erroneous_end_tag_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "raw_text",
			Pattern: "(raw_text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "tag_name",
			Pattern: "(tag_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "text",
			Pattern: "(text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &htmlPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *htmlPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *htmlPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *htmlPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *htmlPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *htmlPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// iniPatternMatcher provides pre-compiled pattern matching for ini
type iniPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newiniPatternMatcher() *iniPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "document",
			Pattern: "(document)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "section",
			Pattern: "(section)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "section_name",
			Pattern: "(section_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "setting",
			Pattern: "(setting)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "setting_name",
			Pattern: "(setting_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "setting_value",
			Pattern: "(setting_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "text",
			Pattern: "(text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &iniPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *iniPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *iniPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *iniPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *iniPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *iniPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// javaPatternMatcher provides pre-compiled pattern matching for java
type javaPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newjavaPatternMatcher() *javaPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "_literal",
			Pattern: "(_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "_simple_type",
			Pattern: "(_simple_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_type",
			Pattern: "(_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_unannotated_type",
			Pattern: "(_unannotated_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "declaration",
			Pattern: "(declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expression",
			Pattern: "(expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "module_directive",
			Pattern: "(module_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "primary_expression",
			Pattern: "(primary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "statement",
			Pattern: "(statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "annotated_type",
			Pattern: "(annotated_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "annotation",
			Pattern: "(annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"annotation_argument_list",

					"identifier",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "annotation_argument_list",
			Pattern: "(annotation_argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "annotation_type_body",
			Pattern: "(annotation_type_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "annotation_type_declaration",
			Pattern: "(annotation_type_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"annotation_type_body",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "annotation_type_element_declaration",
			Pattern: "(annotation_type_element_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_unannotated_type",

					"annotation",

					"dimensions",

					"element_value_array_initializer",

					"expression",

					"identifier",

					"marker_annotation",

				},
				
			},
			
		},

		{
			Name: "argument_list",
			Pattern: "(argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "array_access",
			Pattern: "(array_access)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"primary_expression",

				},
				
			},
			
		},

		{
			Name: "array_creation_expression",
			Pattern: "(array_creation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_simple_type",

					"array_initializer",

					"dimensions",

					"dimensions_expr",

				},
				
			},
			
		},

		{
			Name: "array_initializer",
			Pattern: "(array_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "array_type",
			Pattern: "(array_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_unannotated_type",

					"dimensions",

				},
				
			},
			
		},

		{
			Name: "assert_statement",
			Pattern: "(assert_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "assignment_expression",
			Pattern: "(assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"array_access",

					"expression",

					"field_access",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "asterisk",
			Pattern: "(asterisk)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "break_statement",
			Pattern: "(break_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Body",

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "cast_expression",
			Pattern: "(cast_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				
				
				Children: []string{

					"_type",

					"expression",

				},
				
			},
			
		},

		{
			Name: "catch_clause",
			Pattern: "(catch_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				Token: "self",
				Roles: []string{

					"Catch",

				},
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "catch_formal_parameter",
			Pattern: "(catch_formal_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"dimensions",

					"identifier",

					"underscore_pattern",

				},
				
			},
			
		},

		{
			Name: "catch_type",
			Pattern: "(catch_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "class_body",
			Pattern: "(class_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "class_declaration",
			Pattern: "(class_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Body",

					"Class",

					"Declaration",

				},
				Children: []string{

					"class_body",

					"identifier",

					"permits",

					"super_interfaces",

					"superclass",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "class_literal",
			Pattern: "(class_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "compact_constructor_declaration",
			Pattern: "(compact_constructor_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Literal",

					"Struct",

					"Declaration",

				},
				Children: []string{

					"block",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "constant_declaration",
			Pattern: "(constant_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_unannotated_type",

					"variable_declarator",

				},
				
			},
			
		},

		{
			Name: "constructor_body",
			Pattern: "(constructor_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "constructor_declaration",
			Pattern: "(constructor_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"constructor_body",

					"formal_parameters",

					"identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "continue_statement",
			Pattern: "(continue_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "dimensions",
			Pattern: "(dimensions)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "dimensions_expr",
			Pattern: "(dimensions_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "do_statement",
			Pattern: "(do_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "element_value_array_initializer",
			Pattern: "(element_value_array_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "element_value_pair",
			Pattern: "(element_value_pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"annotation",

					"element_value_array_initializer",

					"expression",

					"identifier",

					"marker_annotation",

				},
				
			},
			
		},

		{
			Name: "enhanced_for_statement",
			Pattern: "(enhanced_for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

					"For",

				},
				Children: []string{

					"_unannotated_type",

					"dimensions",

					"expression",

					"identifier",

					"statement",

					"underscore_pattern",

				},
				
			},
			
		},

		{
			Name: "enum_body",
			Pattern: "(enum_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enum_body_declarations",
			Pattern: "(enum_body_declarations)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Body",

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enum_constant",
			Pattern: "(enum_constant)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"argument_list",

					"class_body",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "enum_declaration",
			Pattern: "(enum_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"enum_body",

					"identifier",

					"super_interfaces",

				},
				
			},
			
		},

		{
			Name: "explicit_constructor_invocation",
			Pattern: "(explicit_constructor_invocation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"argument_list",

					"primary_expression",

					"super",

					"this",

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "exports_module_directive",
			Pattern: "(exports_module_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"identifier",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "expression_statement",
			Pattern: "(expression_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extends_interfaces",
			Pattern: "(extends_interfaces)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "field_access",
			Pattern: "(field_access)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"identifier",

					"primary_expression",

					"super",

					"this",

				},
				
			},
			
		},

		{
			Name: "field_declaration",
			Pattern: "(field_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"_unannotated_type",

					"variable_declarator",

				},
				
			},
			
		},

		{
			Name: "finally_clause",
			Pattern: "(finally_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "floating_point_type",
			Pattern: "(floating_point_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"expression",

					"local_variable_declaration",

					"statement",

				},
				
			},
			
		},

		{
			Name: "formal_parameter",
			Pattern: "(formal_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_unannotated_type",

					"dimensions",

					"identifier",

					"underscore_pattern",

				},
				
			},
			
		},

		{
			Name: "formal_parameters",
			Pattern: "(formal_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "generic_type",
			Pattern: "(generic_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "guard",
			Pattern: "(guard)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				Roles: []string{

					"Condition",

				},
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "import_declaration",
			Pattern: "(import_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "inferred_parameters",
			Pattern: "(inferred_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Import",

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "instanceof_expression",
			Pattern: "(instanceof_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_type",

					"expression",

					"identifier",

					"record_pattern",

				},
				
			},
			
		},

		{
			Name: "integral_type",
			Pattern: "(integral_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "interface_body",
			Pattern: "(interface_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "interface_declaration",
			Pattern: "(interface_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Body",

					"Interface",

					"Declaration",

				},
				Children: []string{

					"identifier",

					"interface_body",

					"permits",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "labeled_statement",
			Pattern: "(labeled_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "lambda_expression",
			Pattern: "(lambda_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				Token: "self",
				Roles: []string{

					"Lambda",

				},
				Children: []string{

					"block",

					"expression",

					"formal_parameters",

					"identifier",

					"inferred_parameters",

				},
				
			},
			
		},

		{
			Name: "local_variable_declaration",
			Pattern: "(local_variable_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"_unannotated_type",

					"variable_declarator",

				},
				
			},
			
		},

		{
			Name: "marker_annotation",
			Pattern: "(marker_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "child:identifier",
				
				Children: []string{

					"identifier",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "method_declaration",
			Pattern: "(method_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"_unannotated_type",

					"block",

					"dimensions",

					"formal_parameters",

					"identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "method_invocation",
			Pattern: "(method_invocation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "child:identifier",
				Roles: []string{

					"Call",

				},
				Children: []string{

					"argument_list",

					"identifier",

					"primary_expression",

					"super",

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "method_reference",
			Pattern: "(method_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "modifiers",
			Pattern: "(modifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "module_body",
			Pattern: "(module_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "module_declaration",
			Pattern: "(module_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Body",

					"Module",

				},
				Children: []string{

					"identifier",

					"module_body",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "multiline_string_fragment",
			Pattern: "(multiline_string_fragment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "object_creation_expression",
			Pattern: "(object_creation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_simple_type",

					"argument_list",

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "opens_module_directive",
			Pattern: "(opens_module_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				Children: []string{

					"identifier",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "package_declaration",
			Pattern: "(package_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Package",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pattern",
			Pattern: "(pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "permits",
			Pattern: "(permits)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "program",
			Pattern: "(program)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "provides_module_directive",
			Pattern: "(provides_module_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				Children: []string{

					"identifier",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "receiver_parameter",
			Pattern: "(receiver_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "record_declaration",
			Pattern: "(record_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"class_body",

					"formal_parameters",

					"identifier",

					"super_interfaces",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "record_pattern",
			Pattern: "(record_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "record_pattern_body",
			Pattern: "(record_pattern_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "record_pattern_component",
			Pattern: "(record_pattern_component)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Body",

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "requires_modifier",
			Pattern: "(requires_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "requires_module_directive",
			Pattern: "(requires_module_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"identifier",

					"requires_modifier",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "resource",
			Pattern: "(resource)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_unannotated_type",

					"dimensions",

					"expression",

					"identifier",

					"underscore_pattern",

				},
				
			},
			
		},

		{
			Name: "resource_specification",
			Pattern: "(resource_specification)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "return_statement",
			Pattern: "(return_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "scoped_identifier",
			Pattern: "(scoped_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				Children: []string{

					"identifier",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "scoped_type_identifier",
			Pattern: "(scoped_type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "spread_parameter",
			Pattern: "(spread_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Reference",

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "static_initializer",
			Pattern: "(static_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string_interpolation",
			Pattern: "(string_interpolation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_literal",
			Pattern: "(string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "super_interfaces",
			Pattern: "(super_interfaces)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Literal",

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "superclass",
			Pattern: "(superclass)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "switch_block",
			Pattern: "(switch_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "switch_block_statement_group",
			Pattern: "(switch_block_statement_group)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "switch_expression",
			Pattern: "(switch_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				Children: []string{

					"parenthesized_expression",

					"switch_block",

				},
				
			},
			
		},

		{
			Name: "switch_label",
			Pattern: "(switch_label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				
				
			},
			
		},

		{
			Name: "switch_rule",
			Pattern: "(switch_rule)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "synchronized_statement",
			Pattern: "(synchronized_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "template_expression",
			Pattern: "(template_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"primary_expression",

					"string_literal",

				},
				
			},
			
		},

		{
			Name: "ternary_expression",
			Pattern: "(ternary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "throw_statement",
			Pattern: "(throw_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				Token: "self",
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "throws",
			Pattern: "(throws)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "try_statement",
			Pattern: "(try_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "try_with_resources_statement",
			Pattern: "(try_with_resources_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				Children: []string{

					"block",

					"resource_specification",

				},
				
			},
			
		},

		{
			Name: "type_arguments",
			Pattern: "(type_arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_bound",
			Pattern: "(type_bound)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_list",
			Pattern: "(type_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_parameter",
			Pattern: "(type_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_parameters",
			Pattern: "(type_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_pattern",
			Pattern: "(type_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "unary_expression",
			Pattern: "(unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "update_expression",
			Pattern: "(update_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "uses_module_directive",
			Pattern: "(uses_module_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"identifier",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "variable_declarator",
			Pattern: "(variable_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"array_initializer",

					"dimensions",

					"expression",

					"identifier",

					"underscore_pattern",

				},
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "wildcard",
			Pattern: "(wildcard)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "yield_statement",
			Pattern: "(yield_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "abstract",
			Pattern: "(abstract)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "assert",
			Pattern: "(assert)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "binary_integer_literal",
			Pattern: "(binary_integer_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "block_comment",
			Pattern: "(block_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Literal",

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "boolean_type",
			Pattern: "(boolean_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "byte",
			Pattern: "(byte)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "catch",
			Pattern: "(catch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "char",
			Pattern: "(char)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "character_literal",
			Pattern: "(character_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Literal",

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "decimal_floating_point_literal",
			Pattern: "(decimal_floating_point_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "decimal_integer_literal",
			Pattern: "(decimal_integer_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "double",
			Pattern: "(double)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "exports",
			Pattern: "(exports)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "extends",
			Pattern: "(extends)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "final",
			Pattern: "(final)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "finally",
			Pattern: "(finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "float",
			Pattern: "(float)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "hex_floating_point_literal",
			Pattern: "(hex_floating_point_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "hex_integer_literal",
			Pattern: "(hex_integer_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "implements",
			Pattern: "(implements)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "instanceof",
			Pattern: "(instanceof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "int",
			Pattern: "(int)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "interface",
			Pattern: "(interface)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "line_comment",
			Pattern: "(line_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "long",
			Pattern: "(long)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "module",
			Pattern: "(module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "native",
			Pattern: "(native)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "new",
			Pattern: "(new)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "null_literal",
			Pattern: "(null_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "octal_integer_literal",
			Pattern: "(octal_integer_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "open",
			Pattern: "(open)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "opens",
			Pattern: "(opens)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "package",
			Pattern: "(package)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Package",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "permits",
			Pattern: "(permits)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "private",
			Pattern: "(private)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "protected",
			Pattern: "(protected)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "provides",
			Pattern: "(provides)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "public",
			Pattern: "(public)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "record",
			Pattern: "(record)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "requires",
			Pattern: "(requires)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "sealed",
			Pattern: "(sealed)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "short",
			Pattern: "(short)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "static",
			Pattern: "(static)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "strictfp",
			Pattern: "(strictfp)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string_fragment",
			Pattern: "(string_fragment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "super",
			Pattern: "(super)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "switch",
			Pattern: "(switch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "synchronized",
			Pattern: "(synchronized)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "this",
			Pattern: "(this)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "throw",
			Pattern: "(throw)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "throws",
			Pattern: "(throws)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				Token: "self",
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "to",
			Pattern: "(to)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "transient",
			Pattern: "(transient)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "transitive",
			Pattern: "(transitive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "type_identifier",
			Pattern: "(type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "underscore_pattern",
			Pattern: "(underscore_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "uses",
			Pattern: "(uses)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "void_type",
			Pattern: "(void_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "volatile",
			Pattern: "(volatile)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "when",
			Pattern: "(when)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "with",
			Pattern: "(with)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &javaPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *javaPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *javaPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *javaPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *javaPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *javaPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// javascriptPatternMatcher provides pre-compiled pattern matching for javascript
type javascriptPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newjavascriptPatternMatcher() *javascriptPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "declaration",
			Pattern: "(declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expression",
			Pattern: "(expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pattern",
			Pattern: "(pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "primary_expression",
			Pattern: "(primary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "statement",
			Pattern: "(statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "arguments",
			Pattern: "(arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "array",
			Pattern: "(array)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "array_pattern",
			Pattern: "(array_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "arrow_function",
			Pattern: "(arrow_function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				
				Roles: []string{

					"Lambda",

				},
				Children: []string{

					"expression",

					"formal_parameters",

					"identifier",

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "assignment_expression",
			Pattern: "(assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"array_pattern",

					"expression",

					"identifier",

					"member_expression",

					"object_pattern",

					"parenthesized_expression",

					"subscript_expression",

					"undefined",

				},
				
			},
			
		},

		{
			Name: "assignment_pattern",
			Pattern: "(assignment_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"expression",

					"pattern",

				},
				
			},
			
		},

		{
			Name: "augmented_assignment_expression",
			Pattern: "(augmented_assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"expression",

					"identifier",

					"member_expression",

					"parenthesized_expression",

					"subscript_expression",

				},
				
			},
			
		},

		{
			Name: "await_expression",
			Pattern: "(await_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "BinaryOp",
				Token: "self",
				Roles: []string{

					"Operator",

				},
				Children: []string{

					"expression",

					"in",

					"instanceof",

					"private_property_identifier",

				},
				
			},
			
		},

		{
			Name: "break_statement",
			Pattern: "(break_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				
				Roles: []string{

					"Break",

				},
				Children: []string{

					"statement_identifier",

				},
				
			},
			
		},

		{
			Name: "call_expression",
			Pattern: "(call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				Children: []string{

					"arguments",

					"expression",

					"import",

					"optional_chain",

					"template_string",

				},
				
			},
			
		},

		{
			Name: "catch_clause",
			Pattern: "(catch_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				Children: []string{

					"array_pattern",

					"identifier",

					"object_pattern",

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "class_body",
			Pattern: "(class_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"class_static_block",

					"field_definition",

					"method_definition",

				},
				
			},
			
		},

		{
			Name: "class_declaration",
			Pattern: "(class_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Body",

					"Class",

					"Declaration",

				},
				Children: []string{

					"class_body",

					"decorator",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "class_heritage",
			Pattern: "(class_heritage)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "class_static_block",
			Pattern: "(class_static_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "computed_property_name",
			Pattern: "(computed_property_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "continue_statement",
			Pattern: "(continue_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				Children: []string{

					"statement_identifier",

				},
				
			},
			
		},

		{
			Name: "debugger_statement",
			Pattern: "(debugger_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "decorator",
			Pattern: "(decorator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Decorator",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "do_statement",
			Pattern: "(do_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "else_clause",
			Pattern: "(else_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "empty_statement",
			Pattern: "(empty_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "export_clause",
			Pattern: "(export_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "export_specifier",
			Pattern: "(export_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "export_statement",
			Pattern: "(export_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"declaration",

					"decorator",

					"expression",

					"string",

				},
				
			},
			
		},

		{
			Name: "expression_statement",
			Pattern: "(expression_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "field_definition",
			Pattern: "(field_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"computed_property_name",

					"decorator",

					"expression",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "finally_clause",
			Pattern: "(finally_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				
				Roles: []string{

					"Finally",

				},
				Children: []string{

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "for_in_statement",
			Pattern: "(for_in_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"array_pattern",

					"const",

					"expression",

					"identifier",

					"in",

					"let",

					"member_expression",

					"object_pattern",

					"of",

					"parenthesized_expression",

					"sequence_expression",

					"statement",

					"subscript_expression",

					"undefined",

					"var",

				},
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"empty_statement",

					"expression",

					"lexical_declaration",

					"sequence_expression",

					"statement",

					"variable_declaration",

				},
				
			},
			
		},

		{
			Name: "formal_parameters",
			Pattern: "(formal_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Loop",

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "function_declaration",
			Pattern: "(function_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"formal_parameters",

					"identifier",

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "function_expression",
			Pattern: "(function_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "child:identifier",
				Roles: []string{

					"Function",

					"Declaration",

					"Function",

					"Declaration",

				},
				Children: []string{

					"formal_parameters",

					"identifier",

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "generator_function",
			Pattern: "(generator_function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"formal_parameters",

					"identifier",

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "generator_function_declaration",
			Pattern: "(generator_function_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"formal_parameters",

					"identifier",

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"else_clause",

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Condition",

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_attribute",
			Pattern: "(import_attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_clause",
			Pattern: "(import_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_specifier",
			Pattern: "(import_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "import_statement",
			Pattern: "(import_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"string",

				},
				
			},
			
		},

		{
			Name: "jsx_attribute",
			Pattern: "(jsx_attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "jsx_closing_element",
			Pattern: "(jsx_closing_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				
				Children: []string{

					"identifier",

					"jsx_namespace_name",

					"member_expression",

				},
				
			},
			
		},

		{
			Name: "jsx_element",
			Pattern: "(jsx_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"jsx_closing_element",

					"jsx_opening_element",

				},
				
			},
			
		},

		{
			Name: "jsx_expression",
			Pattern: "(jsx_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "jsx_namespace_name",
			Pattern: "(jsx_namespace_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "jsx_opening_element",
			Pattern: "(jsx_opening_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

					"jsx_attribute",

					"jsx_expression",

					"jsx_namespace_name",

					"member_expression",

				},
				
			},
			
		},

		{
			Name: "jsx_self_closing_element",
			Pattern: "(jsx_self_closing_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

					"jsx_attribute",

					"jsx_expression",

					"jsx_namespace_name",

					"member_expression",

				},
				
			},
			
		},

		{
			Name: "labeled_statement",
			Pattern: "(labeled_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"statement",

					"statement_identifier",

				},
				
			},
			
		},

		{
			Name: "lexical_declaration",
			Pattern: "(lexical_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"const",

					"let",

				},
				
			},
			
		},

		{
			Name: "member_expression",
			Pattern: "(member_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

					"import",

					"optional_chain",

					"private_property_identifier",

					"property_identifier",

				},
				
			},
			
		},

		{
			Name: "meta_property",
			Pattern: "(meta_property)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "method_definition",
			Pattern: "(method_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"computed_property_name",

					"decorator",

					"formal_parameters",

					"number",

					"private_property_identifier",

					"property_identifier",

					"statement_block",

					"string",

				},
				
			},
			
		},

		{
			Name: "named_imports",
			Pattern: "(named_imports)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "namespace_export",
			Pattern: "(namespace_export)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "namespace_import",
			Pattern: "(namespace_import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "new_expression",
			Pattern: "(new_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"arguments",

					"new_expression",

					"primary_expression",

				},
				
			},
			
		},

		{
			Name: "object",
			Pattern: "(object)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "object_assignment_pattern",
			Pattern: "(object_assignment_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"array_pattern",

					"expression",

					"object_pattern",

					"shorthand_property_identifier_pattern",

				},
				
			},
			
		},

		{
			Name: "object_pattern",
			Pattern: "(object_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "pair",
			Pattern: "(pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				Children: []string{

					"computed_property_name",

					"expression",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "pair_pattern",
			Pattern: "(pair_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"assignment_pattern",

					"computed_property_name",

					"number",

					"pattern",

					"private_property_identifier",

					"property_identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "program",
			Pattern: "(program)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "regex",
			Pattern: "(regex)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "File",
				Token: "self",
				
				Children: []string{

					"regex_flags",

					"regex_pattern",

				},
				
			},
			
		},

		{
			Name: "rest_pattern",
			Pattern: "(rest_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "return_statement",
			Pattern: "(return_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "sequence_expression",
			Pattern: "(sequence_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "spread_element",
			Pattern: "(spread_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Spread",
				Token: "self",
				Roles: []string{

					"Spread",

				},
				
				
			},
			
		},

		{
			Name: "statement_block",
			Pattern: "(statement_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "subscript_expression",
			Pattern: "(subscript_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"optional_chain",

					"sequence_expression",

				},
				
			},
			
		},

		{
			Name: "switch_body",
			Pattern: "(switch_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "switch_case",
			Pattern: "(switch_case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				Children: []string{

					"expression",

					"sequence_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "switch_default",
			Pattern: "(switch_default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"statement",

				},
				
			},
			
		},

		{
			Name: "switch_statement",
			Pattern: "(switch_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				Children: []string{

					"parenthesized_expression",

					"switch_body",

				},
				
			},
			
		},

		{
			Name: "template_string",
			Pattern: "(template_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "template_substitution",
			Pattern: "(template_substitution)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ternary_expression",
			Pattern: "(ternary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "throw_statement",
			Pattern: "(throw_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "try_statement",
			Pattern: "(try_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				Children: []string{

					"catch_clause",

					"finally_clause",

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "unary_expression",
			Pattern: "(unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"delete",

					"expression",

					"typeof",

					"void",

				},
				
			},
			
		},

		{
			Name: "update_expression",
			Pattern: "(update_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "UnaryOp",
				Token: "self",
				Roles: []string{

					"Operator",

				},
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "variable_declaration",
			Pattern: "(variable_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "variable_declarator",
			Pattern: "(variable_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "child:identifier",
				Roles: []string{

					"Variable",

					"Declaration",

					"Variable",

					"Declaration",

				},
				Children: []string{

					"array_pattern",

					"expression",

					"identifier",

					"object_pattern",

				},
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "with_statement",
			Pattern: "(with_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "yield_expression",
			Pattern: "(yield_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "as",
			Pattern: "(as)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "async",
			Pattern: "(async)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "await",
			Pattern: "(await)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "catch",
			Pattern: "(catch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "const",
			Pattern: "(const)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "debugger",
			Pattern: "(debugger)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "delete",
			Pattern: "(delete)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "export",
			Pattern: "(export)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "extends",
			Pattern: "(extends)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "finally",
			Pattern: "(finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "from",
			Pattern: "(from)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "function",
			Pattern: "(function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "get",
			Pattern: "(get)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "hash_bang_line",
			Pattern: "(hash_bang_line)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "html_character_reference",
			Pattern: "(html_character_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "html_comment",
			Pattern: "(html_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "instanceof",
			Pattern: "(instanceof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "jsx_text",
			Pattern: "(jsx_text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "let",
			Pattern: "(let)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "meta",
			Pattern: "(meta)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "new",
			Pattern: "(new)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "null",
			Pattern: "(null)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "number",
			Pattern: "(number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "of",
			Pattern: "(of)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "optional_chain",
			Pattern: "(optional_chain)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "private_property_identifier",
			Pattern: "(private_property_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "property_identifier",
			Pattern: "(property_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "regex_flags",
			Pattern: "(regex_flags)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "regex_pattern",
			Pattern: "(regex_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "set",
			Pattern: "(set)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "shorthand_property_identifier",
			Pattern: "(shorthand_property_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "shorthand_property_identifier_pattern",
			Pattern: "(shorthand_property_identifier_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "statement_identifier",
			Pattern: "(statement_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "static",
			Pattern: "(static)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string_fragment",
			Pattern: "(string_fragment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "super",
			Pattern: "(super)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "switch",
			Pattern: "(switch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "target",
			Pattern: "(target)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "this",
			Pattern: "(this)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "throw",
			Pattern: "(throw)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "typeof",
			Pattern: "(typeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "undefined",
			Pattern: "(undefined)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "var",
			Pattern: "(var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "void",
			Pattern: "(void)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "with",
			Pattern: "(with)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &javascriptPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *javascriptPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *javascriptPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *javascriptPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *javascriptPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *javascriptPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// jsonPatternMatcher provides pre-compiled pattern matching for json
type jsonPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newjsonPatternMatcher() *jsonPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "_value",
			Pattern: "(_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "array",
			Pattern: "(array)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "document",
			Pattern: "(document)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "object",
			Pattern: "(object)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pair",
			Pattern: "(pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_value",

					"string",

				},
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "null",
			Pattern: "(null)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "number",
			Pattern: "(number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string_content",
			Pattern: "(string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &jsonPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *jsonPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *jsonPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *jsonPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *jsonPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *jsonPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// kotlinPatternMatcher provides pre-compiled pattern matching for kotlin
type kotlinPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newkotlinPatternMatcher() *kotlinPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "additive_expression",
			Pattern: "(additive_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "annotated_lambda",
			Pattern: "(annotated_lambda)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				Token: "self",
				Roles: []string{

					"Lambda",

				},
				
				
			},
			
		},

		{
			Name: "annotation",
			Pattern: "(annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "anonymous_function",
			Pattern: "(anonymous_function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "anonymous_initializer",
			Pattern: "(anonymous_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "as_expression",
			Pattern: "(as_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "assignment",
			Pattern: "(assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				
				
			},
			
		},

		{
			Name: "binding_pattern_kind",
			Pattern: "(binding_pattern_kind)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "boolean_literal",
			Pattern: "(boolean_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "call_expression",
			Pattern: "(call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Literal",

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "call_suffix",
			Pattern: "(call_suffix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "callable_reference",
			Pattern: "(callable_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "catch_block",
			Pattern: "(catch_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "character_escape_seq",
			Pattern: "(character_escape_seq)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "character_literal",
			Pattern: "(character_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "check_expression",
			Pattern: "(check_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "class_body",
			Pattern: "(class_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "class_declaration",
			Pattern: "(class_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Body",

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "class_modifier",
			Pattern: "(class_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "class_parameter",
			Pattern: "(class_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "collection_literal",
			Pattern: "(collection_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "companion_object",
			Pattern: "(companion_object)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "comparison_expression",
			Pattern: "(comparison_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "conjunction_expression",
			Pattern: "(conjunction_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "constructor_delegation_call",
			Pattern: "(constructor_delegation_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "constructor_invocation",
			Pattern: "(constructor_invocation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Call",

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "control_structure_body",
			Pattern: "(control_structure_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "delegation_specifier",
			Pattern: "(delegation_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "directly_assignable_expression",
			Pattern: "(directly_assignable_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "disjunction_expression",
			Pattern: "(disjunction_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "do_while_statement",
			Pattern: "(do_while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "elvis_expression",
			Pattern: "(elvis_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum_class_body",
			Pattern: "(enum_class_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enum_entry",
			Pattern: "(enum_entry)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Body",

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "equality_expression",
			Pattern: "(equality_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "explicit_delegation",
			Pattern: "(explicit_delegation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "file_annotation",
			Pattern: "(file_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "finally_block",
			Pattern: "(finally_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "function_body",
			Pattern: "(function_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "function_declaration",
			Pattern: "(function_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"receiver_type",

				},
				
			},
			
		},

		{
			Name: "function_modifier",
			Pattern: "(function_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "child:identifier",
				Roles: []string{

					"Function",

					"Declaration",

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "function_type",
			Pattern: "(function_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"receiver_type",

				},
				
			},
			
		},

		{
			Name: "function_type_parameters",
			Pattern: "(function_type_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "function_value_parameters",
			Pattern: "(function_value_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "getter",
			Pattern: "(getter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Getter",
				Token: "self",
				Roles: []string{

					"Getter",

				},
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "if_expression",
			Pattern: "(if_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				Roles: []string{

					"Condition",

				},
				Children: []string{

					"additive_expression",

					"anonymous_function",

					"as_expression",

					"bin_literal",

					"boolean_literal",

					"call_expression",

					"callable_reference",

					"character_literal",

					"check_expression",

					"collection_literal",

					"comparison_expression",

					"conjunction_expression",

					"control_structure_body",

					"disjunction_expression",

					"elvis_expression",

					"equality_expression",

					"hex_literal",

					"if_expression",

					"indexing_expression",

					"infix_expression",

					"integer_literal",

					"jump_expression",

					"lambda_literal",

					"long_literal",

					"multiplicative_expression",

					"navigation_expression",

					"null_literal",

					"object_literal",

					"parenthesized_expression",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"real_literal",

					"simple_identifier",

					"spread_expression",

					"string_literal",

					"super_expression",

					"this_expression",

					"try_expression",

					"unsigned_literal",

					"when_expression",

				},
				
			},
			
		},

		{
			Name: "import_alias",
			Pattern: "(import_alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_header",
			Pattern: "(import_header)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_list",
			Pattern: "(import_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "indexing_expression",
			Pattern: "(indexing_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				Token: "self",
				Roles: []string{

					"Index",

				},
				
				
			},
			
		},

		{
			Name: "indexing_suffix",
			Pattern: "(indexing_suffix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				
				Roles: []string{

					"Index",

				},
				
				
			},
			
		},

		{
			Name: "infix_expression",
			Pattern: "(infix_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "inheritance_modifier",
			Pattern: "(inheritance_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "interpolated_expression",
			Pattern: "(interpolated_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "interpolated_identifier",
			Pattern: "(interpolated_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "jump_expression",
			Pattern: "(jump_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "label",
			Pattern: "(label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "lambda_literal",
			Pattern: "(lambda_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "lambda_parameters",
			Pattern: "(lambda_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "long_literal",
			Pattern: "(long_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "member_modifier",
			Pattern: "(member_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "modifiers",
			Pattern: "(modifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "multi_variable_declaration",
			Pattern: "(multi_variable_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "multiplicative_expression",
			Pattern: "(multiplicative_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "child:identifier",
				
				
				
			},
			
		},

		{
			Name: "navigation_expression",
			Pattern: "(navigation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "navigation_suffix",
			Pattern: "(navigation_suffix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "not_nullable_type",
			Pattern: "(not_nullable_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "nullable_type",
			Pattern: "(nullable_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "object_declaration",
			Pattern: "(object_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "object_literal",
			Pattern: "(object_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "package_header",
			Pattern: "(package_header)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Package",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "parameter",
			Pattern: "(parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parameter_modifier",
			Pattern: "(parameter_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parameter_modifiers",
			Pattern: "(parameter_modifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parameter_with_optional_type",
			Pattern: "(parameter_with_optional_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "parenthesized_type",
			Pattern: "(parenthesized_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "parenthesized_user_type",
			Pattern: "(parenthesized_user_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "platform_modifier",
			Pattern: "(platform_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "postfix_expression",
			Pattern: "(postfix_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "prefix_expression",
			Pattern: "(prefix_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "primary_constructor",
			Pattern: "(primary_constructor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "property_declaration",
			Pattern: "(property_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"receiver_type",

				},
				
			},
			
		},

		{
			Name: "property_delegate",
			Pattern: "(property_delegate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				Token: "self",
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "range_expression",
			Pattern: "(range_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "range_test",
			Pattern: "(range_test)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "receiver_type",
			Pattern: "(receiver_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "secondary_constructor",
			Pattern: "(secondary_constructor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "setter",
			Pattern: "(setter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Setter",
				
				Roles: []string{

					"Setter",

				},
				
				
			},
			
		},

		{
			Name: "shebang_line",
			Pattern: "(shebang_line)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Setter",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "simple_identifier",
			Pattern: "(simple_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "source_file",
			Pattern: "(source_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "spread_expression",
			Pattern: "(spread_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Spread",
				
				Roles: []string{

					"Spread",

				},
				
				
			},
			
		},

		{
			Name: "statements",
			Pattern: "(statements)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_literal",
			Pattern: "(string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "super_expression",
			Pattern: "(super_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "this_expression",
			Pattern: "(this_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "try_expression",
			Pattern: "(try_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "type_alias",
			Pattern: "(type_alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_arguments",
			Pattern: "(type_arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_constraint",
			Pattern: "(type_constraint)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_constraints",
			Pattern: "(type_constraints)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_identifier",
			Pattern: "(type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "type_modifiers",
			Pattern: "(type_modifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "type_parameter",
			Pattern: "(type_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_parameter_modifiers",
			Pattern: "(type_parameter_modifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_parameters",
			Pattern: "(type_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_projection",
			Pattern: "(type_projection)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_projection_modifiers",
			Pattern: "(type_projection_modifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "type_test",
			Pattern: "(type_test)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unsigned_literal",
			Pattern: "(unsigned_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "use_site_target",
			Pattern: "(use_site_target)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "user_type",
			Pattern: "(user_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "value_argument",
			Pattern: "(value_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "value_arguments",
			Pattern: "(value_arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "variable_declaration",
			Pattern: "(variable_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "variance_modifier",
			Pattern: "(variance_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "visibility_modifier",
			Pattern: "(visibility_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "when_condition",
			Pattern: "(when_condition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "when_entry",
			Pattern: "(when_entry)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "when_expression",
			Pattern: "(when_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "when_subject",
			Pattern: "(when_subject)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "L",
			Pattern: "(L)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "abstract",
			Pattern: "(abstract)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "actual",
			Pattern: "(actual)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "annotation",
			Pattern: "(annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "as",
			Pattern: "(as)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "bin_literal",
			Pattern: "(bin_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Literal",

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "by",
			Pattern: "(by)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "catch",
			Pattern: "(catch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				Token: "self",
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "companion",
			Pattern: "(companion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "constructor",
			Pattern: "(constructor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "crossinline",
			Pattern: "(crossinline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "data",
			Pattern: "(data)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "delegate",
			Pattern: "(delegate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "dynamic",
			Pattern: "(dynamic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "expect",
			Pattern: "(expect)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "external",
			Pattern: "(external)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field",
			Pattern: "(field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "file",
			Pattern: "(file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "final",
			Pattern: "(final)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "finally",
			Pattern: "(finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "fun",
			Pattern: "(fun)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "get",
			Pattern: "(get)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "hex_literal",
			Pattern: "(hex_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "infix",
			Pattern: "(infix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "init",
			Pattern: "(init)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "inline",
			Pattern: "(inline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "inner",
			Pattern: "(inner)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "integer_literal",
			Pattern: "(integer_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "interface",
			Pattern: "(interface)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "internal",
			Pattern: "(internal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "is",
			Pattern: "(is)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "lateinit",
			Pattern: "(lateinit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "line_comment",
			Pattern: "(line_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "multiline_comment",
			Pattern: "(multiline_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "noinline",
			Pattern: "(noinline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "null_literal",
			Pattern: "(null_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "object",
			Pattern: "(object)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "open",
			Pattern: "(open)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "operator",
			Pattern: "(operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "out",
			Pattern: "(out)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "override",
			Pattern: "(override)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "package",
			Pattern: "(package)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Package",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "param",
			Pattern: "(param)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "private",
			Pattern: "(private)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "property",
			Pattern: "(property)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "property_modifier",
			Pattern: "(property_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "protected",
			Pattern: "(protected)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "public",
			Pattern: "(public)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "real_literal",
			Pattern: "(real_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "receiver",
			Pattern: "(receiver)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "reification_modifier",
			Pattern: "(reification_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "sealed",
			Pattern: "(sealed)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "set",
			Pattern: "(set)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "setparam",
			Pattern: "(setparam)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "string_content",
			Pattern: "(string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "super",
			Pattern: "(super)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "suspend",
			Pattern: "(suspend)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "tailrec",
			Pattern: "(tailrec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "this",
			Pattern: "(this)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "throw",
			Pattern: "(throw)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "typealias",
			Pattern: "(typealias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "val",
			Pattern: "(val)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "value",
			Pattern: "(value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "var",
			Pattern: "(var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "vararg",
			Pattern: "(vararg)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "when",
			Pattern: "(when)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "where",
			Pattern: "(where)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "wildcard_import",
			Pattern: "(wildcard_import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &kotlinPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *kotlinPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *kotlinPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *kotlinPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *kotlinPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *kotlinPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// latexPatternMatcher provides pre-compiled pattern matching for latex
type latexPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newlatexPatternMatcher() *latexPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "acronym_definition",
			Pattern: "(acronym_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"brack_group_key_value",

					"curly_group",

					"curly_group_text",

				},
				
			},
			
		},

		{
			Name: "acronym_reference",
			Pattern: "(acronym_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"brack_group_key_value",

					"curly_group_text",

				},
				
			},
			
		},

		{
			Name: "asy_environment",
			Pattern: "(asy_environment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"begin",

					"end",

					"source_code",

				},
				
			},
			
		},

		{
			Name: "asydef_environment",
			Pattern: "(asydef_environment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"begin",

					"end",

					"source_code",

				},
				
			},
			
		},

		{
			Name: "author",
			Pattern: "(author)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "author_declaration",
			Pattern: "(author_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"brack_group",

					"curly_group_author_list",

				},
				
			},
			
		},

		{
			Name: "begin",
			Pattern: "(begin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"brack_group",

					"brack_group_key_value",

					"curly_group_text",

				},
				
			},
			
		},

		{
			Name: "biblatex_include",
			Pattern: "(biblatex_include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"brack_group_key_value",

					"curly_group_glob_pattern",

				},
				
			},
			
		},

		{
			Name: "bibstyle_include",
			Pattern: "(bibstyle_include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"curly_group_path",

				},
				
			},
			
		},

		{
			Name: "bibtex_include",
			Pattern: "(bibtex_include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"curly_group_path_list",

				},
				
			},
			
		},

		{
			Name: "block_comment",
			Pattern: "(block_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				Children: []string{

					"comment",

				},
				
			},
			
		},

		{
			Name: "brack_group",
			Pattern: "(brack_group)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "brack_group_argc",
			Pattern: "(brack_group_argc)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"argc",

				},
				
			},
			
		},

		{
			Name: "brack_group_key_value",
			Pattern: "(brack_group_key_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "KeyValue",
				Token: "self",
				Roles: []string{

					"Key",

					"Value",

				},
				Children: []string{

					"key_value_pair",

				},
				
			},
			
		},

		{
			Name: "brack_group_text",
			Pattern: "(brack_group_text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"text",

				},
				
			},
			
		},

		{
			Name: "caption",
			Pattern: "(caption)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"brack_group",

					"curly_group",

				},
				
			},
			
		},

		{
			Name: "changes_replaced",
			Pattern: "(changes_replaced)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"curly_group",

				},
				
			},
			
		},

		{
			Name: "chapter",
			Pattern: "(chapter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"brack_group",

					"curly_group",

				},
				
			},
			
		},

		{
			Name: "citation",
			Pattern: "(citation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"brack_group",

					"curly_group_text_list",

				},
				
			},
			
		},

		{
			Name: "class_include",
			Pattern: "(class_include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"brack_group_key_value",

					"curly_group_path",

				},
				
			},
			
		},

		{
			Name: "color_definition",
			Pattern: "(color_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"curly_group",

					"curly_group_text",

				},
				
			},
			
		},

		{
			Name: "color_reference",
			Pattern: "(color_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"brack_group_text",

					"curly_group",

					"curly_group_text",

				},
				
			},
			
		},

		{
			Name: "color_set_definition",
			Pattern: "(color_set_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				Children: []string{

					"brack_group_text",

					"curly_group",

					"curly_group_text_list",

				},
				
			},
			
		},

		{
			Name: "comment_environment",
			Pattern: "(comment_environment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				Children: []string{

					"begin",

					"comment",

					"end",

				},
				
			},
			
		},

		{
			Name: "curly_group",
			Pattern: "(curly_group)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "curly_group_author_list",
			Pattern: "(curly_group_author_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "curly_group_command_name",
			Pattern: "(curly_group_command_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"command_name",

				},
				
			},
			
		},

		{
			Name: "curly_group_glob_pattern",
			Pattern: "(curly_group_glob_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"glob_pattern",

				},
				
			},
			
		},

		{
			Name: "curly_group_impl",
			Pattern: "(curly_group_impl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "curly_group_key_value",
			Pattern: "(curly_group_key_value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "KeyValue",
				Token: "self",
				Roles: []string{

					"Key",

					"Value",

				},
				Children: []string{

					"key_value_pair",

				},
				
			},
			
		},

		{
			Name: "curly_group_label",
			Pattern: "(curly_group_label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"label",

				},
				
			},
			
		},

		{
			Name: "curly_group_label_list",
			Pattern: "(curly_group_label_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"label",

				},
				
			},
			
		},

		{
			Name: "curly_group_path",
			Pattern: "(curly_group_path)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"path",

				},
				
			},
			
		},

		{
			Name: "curly_group_path_list",
			Pattern: "(curly_group_path_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"path",

				},
				
			},
			
		},

		{
			Name: "curly_group_spec",
			Pattern: "(curly_group_spec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "curly_group_text",
			Pattern: "(curly_group_text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"text",

				},
				
			},
			
		},

		{
			Name: "curly_group_text_list",
			Pattern: "(curly_group_text_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				Children: []string{

					"text",

				},
				
			},
			
		},

		{
			Name: "curly_group_uri",
			Pattern: "(curly_group_uri)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"uri",

				},
				
			},
			
		},

		{
			Name: "displayed_equation",
			Pattern: "(displayed_equation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "end",
			Pattern: "(end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"curly_group_text",

				},
				
			},
			
		},

		{
			Name: "enum_item",
			Pattern: "(enum_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"brack_group_text",

				},
				
			},
			
		},

		{
			Name: "environment_definition",
			Pattern: "(environment_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"brack_group_argc",

					"curly_group_impl",

					"curly_group_spec",

					"curly_group_text",

				},
				
			},
			
		},

		{
			Name: "generic_command",
			Pattern: "(generic_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"command_name",

					"curly_group",

				},
				
			},
			
		},

		{
			Name: "generic_environment",
			Pattern: "(generic_environment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"begin",

					"end",

				},
				
			},
			
		},

		{
			Name: "glob_pattern",
			Pattern: "(glob_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "glossary_entry_definition",
			Pattern: "(glossary_entry_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				Children: []string{

					"curly_group_key_value",

					"curly_group_text",

				},
				
			},
			
		},

		{
			Name: "glossary_entry_reference",
			Pattern: "(glossary_entry_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				Children: []string{

					"brack_group_key_value",

					"curly_group_text",

				},
				
			},
			
		},

		{
			Name: "graphics_include",
			Pattern: "(graphics_include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"brack_group_key_value",

					"curly_group_path",

				},
				
			},
			
		},

		{
			Name: "hyperlink",
			Pattern: "(hyperlink)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"curly_group",

					"curly_group_uri",

				},
				
			},
			
		},

		{
			Name: "import_include",
			Pattern: "(import_include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"curly_group_path",

				},
				
			},
			
		},

		{
			Name: "inkscape_include",
			Pattern: "(inkscape_include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"brack_group_key_value",

					"curly_group_path",

				},
				
			},
			
		},

		{
			Name: "inline_formula",
			Pattern: "(inline_formula)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "key_value_pair",
			Pattern: "(key_value_pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "KeyValue",
				
				Roles: []string{

					"Key",

					"Value",

				},
				Children: []string{

					"text",

					"value",

				},
				
			},
			
		},

		{
			Name: "label_definition",
			Pattern: "(label_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "KeyValue",
				Token: "self",
				
				Children: []string{

					"curly_group_label",

				},
				
			},
			
		},

		{
			Name: "label_number",
			Pattern: "(label_number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"curly_group",

					"curly_group_text",

				},
				
			},
			
		},

		{
			Name: "label_reference",
			Pattern: "(label_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"curly_group_label_list",

				},
				
			},
			
		},

		{
			Name: "label_reference_range",
			Pattern: "(label_reference_range)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"curly_group_text",

				},
				
			},
			
		},

		{
			Name: "latex_include",
			Pattern: "(latex_include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"curly_group_path",

				},
				
			},
			
		},

		{
			Name: "let_command_definition",
			Pattern: "(let_command_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"command_name",

				},
				
			},
			
		},

		{
			Name: "listing_environment",
			Pattern: "(listing_environment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"begin",

					"end",

					"source_code",

				},
				
			},
			
		},

		{
			Name: "luacode_environment",
			Pattern: "(luacode_environment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"begin",

					"end",

					"source_code",

				},
				
			},
			
		},

		{
			Name: "math_delimiter",
			Pattern: "(math_delimiter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"command_name",

					"word",

				},
				
			},
			
		},

		{
			Name: "math_environment",
			Pattern: "(math_environment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"begin",

					"end",

				},
				
			},
			
		},

		{
			Name: "minted_environment",
			Pattern: "(minted_environment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"begin",

					"end",

					"source_code",

				},
				
			},
			
		},

		{
			Name: "new_command_definition",
			Pattern: "(new_command_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"brack_group",

					"brack_group_argc",

					"command_name",

					"curly_group",

					"curly_group_command_name",

					"curly_group_spec",

				},
				
			},
			
		},

		{
			Name: "old_command_definition",
			Pattern: "(old_command_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"command_name",

				},
				
			},
			
		},

		{
			Name: "operator",
			Pattern: "(operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "package_include",
			Pattern: "(package_include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Package",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"brack_group_key_value",

					"curly_group_path_list",

				},
				
			},
			
		},

		{
			Name: "paired_delimiter_definition",
			Pattern: "(paired_delimiter_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"brack_group_argc",

					"command_name",

					"curly_group",

					"curly_group_command_name",

					"curly_group_impl",

				},
				
			},
			
		},

		{
			Name: "paragraph",
			Pattern: "(paragraph)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"brack_group",

					"curly_group",

				},
				
			},
			
		},

		{
			Name: "part",
			Pattern: "(part)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"brack_group",

					"curly_group",

				},
				
			},
			
		},

		{
			Name: "pycode_environment",
			Pattern: "(pycode_environment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"begin",

					"end",

					"source_code",

				},
				
			},
			
		},

		{
			Name: "sageblock_environment",
			Pattern: "(sageblock_environment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				Children: []string{

					"begin",

					"end",

					"source_code",

				},
				
			},
			
		},

		{
			Name: "sagesilent_environment",
			Pattern: "(sagesilent_environment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"begin",

					"end",

					"source_code",

				},
				
			},
			
		},

		{
			Name: "section",
			Pattern: "(section)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"brack_group",

					"curly_group",

				},
				
			},
			
		},

		{
			Name: "source_file",
			Pattern: "(source_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "subparagraph",
			Pattern: "(subparagraph)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"brack_group",

					"curly_group",

				},
				
			},
			
		},

		{
			Name: "subscript",
			Pattern: "(subscript)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"command_name",

					"curly_group",

					"letter",

				},
				
			},
			
		},

		{
			Name: "subsection",
			Pattern: "(subsection)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"brack_group",

					"curly_group",

				},
				
			},
			
		},

		{
			Name: "subsubsection",
			Pattern: "(subsubsection)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"brack_group",

					"curly_group",

				},
				
			},
			
		},

		{
			Name: "superscript",
			Pattern: "(superscript)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"command_name",

					"curly_group",

					"letter",

				},
				
			},
			
		},

		{
			Name: "svg_include",
			Pattern: "(svg_include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"brack_group_key_value",

					"curly_group_path",

				},
				
			},
			
		},

		{
			Name: "text",
			Pattern: "(text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"acronym_definition",

					"acronym_reference",

					"author_declaration",

					"biblatex_include",

					"bibstyle_include",

					"bibtex_include",

					"block_comment",

					"caption",

					"changes_replaced",

					"citation",

					"class_include",

					"color_definition",

					"color_reference",

					"color_set_definition",

					"delimiter",

					"environment_definition",

					"generic_command",

					"glossary_entry_definition",

					"glossary_entry_reference",

					"graphics_include",

					"hyperlink",

					"import_include",

					"inkscape_include",

					"label_definition",

					"label_number",

					"label_reference",

					"label_reference_range",

					"latex_include",

					"let_command_definition",

					"new_command_definition",

					"old_command_definition",

					"operator",

					"package_include",

					"paired_delimiter_definition",

					"placeholder",

					"subscript",

					"superscript",

					"svg_include",

					"theorem_definition",

					"tikz_library_import",

					"title_declaration",

					"todo",

					"verbatim_include",

					"word",

				},
				
			},
			
		},

		{
			Name: "text_mode",
			Pattern: "(text_mode)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"curly_group",

				},
				
			},
			
		},

		{
			Name: "theorem_definition",
			Pattern: "(theorem_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"brack_group_key_value",

					"brack_group_text",

					"curly_group",

					"curly_group_text_list",

				},
				
			},
			
		},

		{
			Name: "tikz_library_import",
			Pattern: "(tikz_library_import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"curly_group_path_list",

				},
				
			},
			
		},

		{
			Name: "title_declaration",
			Pattern: "(title_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"brack_group",

					"curly_group",

				},
				
			},
			
		},

		{
			Name: "todo",
			Pattern: "(todo)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"brack_group",

					"curly_group",

					"todo_command_name",

				},
				
			},
			
		},

		{
			Name: "value",
			Pattern: "(value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "verbatim_environment",
			Pattern: "(verbatim_environment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"begin",

					"comment",

					"end",

				},
				
			},
			
		},

		{
			Name: "verbatim_include",
			Pattern: "(verbatim_include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"curly_group_path",

				},
				
			},
			
		},

		{
			Name: "_",
			Pattern: "(_)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "argc",
			Pattern: "(argc)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "command_name",
			Pattern: "(command_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "delimiter",
			Pattern: "(delimiter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "label",
			Pattern: "(label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "letter",
			Pattern: "(letter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "line_comment",
			Pattern: "(line_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "path",
			Pattern: "(path)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "placeholder",
			Pattern: "(placeholder)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "source_code",
			Pattern: "(source_code)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "todo_command_name",
			Pattern: "(todo_command_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "uri",
			Pattern: "(uri)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "word",
			Pattern: "(word)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &latexPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *latexPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *latexPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *latexPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *latexPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *latexPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// luaPatternMatcher provides pre-compiled pattern matching for lua
type luaPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newluaPatternMatcher() *luaPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "declaration",
			Pattern: "(declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expression",
			Pattern: "(expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "statement",
			Pattern: "(statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "variable",
			Pattern: "(variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "arguments",
			Pattern: "(arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "assignment_statement",
			Pattern: "(assignment_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				
				
			},
			
		},

		{
			Name: "attribute",
			Pattern: "(attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "bracket_index_expression",
			Pattern: "(bracket_index_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				Token: "self",
				Roles: []string{

					"Body",

					"Index",

				},
				Children: []string{

					"expression",

					"function_call",

					"parenthesized_expression",

					"variable",

				},
				
			},
			
		},

		{
			Name: "chunk",
			Pattern: "(chunk)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				Children: []string{

					"comment_content",

				},
				
			},
			
		},

		{
			Name: "do_statement",
			Pattern: "(do_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "dot_index_expression",
			Pattern: "(dot_index_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				Token: "self",
				Roles: []string{

					"Index",

				},
				Children: []string{

					"function_call",

					"identifier",

					"parenthesized_expression",

					"variable",

				},
				
			},
			
		},

		{
			Name: "else_statement",
			Pattern: "(else_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "elseif_statement",
			Pattern: "(elseif_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"block",

					"expression",

				},
				
			},
			
		},

		{
			Name: "empty_statement",
			Pattern: "(empty_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expression_list",
			Pattern: "(expression_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "field",
			Pattern: "(field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"expression",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "for_generic_clause",
			Pattern: "(for_generic_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "for_numeric_clause",
			Pattern: "(for_numeric_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"expression",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"block",

					"for_generic_clause",

					"for_numeric_clause",

				},
				
			},
			
		},

		{
			Name: "function_call",
			Pattern: "(function_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"arguments",

					"function_call",

					"method_index_expression",

					"parenthesized_expression",

					"variable",

				},
				
			},
			
		},

		{
			Name: "function_declaration",
			Pattern: "(function_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Call",

					"Function",

					"Declaration",

				},
				Children: []string{

					"block",

					"dot_index_expression",

					"identifier",

					"method_index_expression",

					"parameters",

				},
				
			},
			
		},

		{
			Name: "function_definition",
			Pattern: "(function_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"block",

					"parameters",

				},
				
			},
			
		},

		{
			Name: "goto_statement",
			Pattern: "(goto_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"block",

					"else_statement",

					"elseif_statement",

					"expression",

				},
				
			},
			
		},

		{
			Name: "label_statement",
			Pattern: "(label_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				Roles: []string{

					"Condition",

				},
				
				
			},
			
		},

		{
			Name: "method_index_expression",
			Pattern: "(method_index_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"function_call",

					"identifier",

					"parenthesized_expression",

					"variable",

				},
				
			},
			
		},

		{
			Name: "parameters",
			Pattern: "(parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "repeat_statement",
			Pattern: "(repeat_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"block",

					"expression",

				},
				
			},
			
		},

		{
			Name: "return_statement",
			Pattern: "(return_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				Children: []string{

					"string_content",

				},
				
			},
			
		},

		{
			Name: "string_content",
			Pattern: "(string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "table_constructor",
			Pattern: "(table_constructor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "unary_expression",
			Pattern: "(unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "variable_declaration",
			Pattern: "(variable_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Operator",

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "variable_list",
			Pattern: "(variable_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"attribute",

					"variable",

				},
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"block",

					"expression",

				},
				
			},
			
		},

		{
			Name: "and",
			Pattern: "(and)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "break_statement",
			Pattern: "(break_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "comment_content",
			Pattern: "(comment_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "elseif",
			Pattern: "(elseif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "end",
			Pattern: "(end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "function",
			Pattern: "(function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "goto",
			Pattern: "(goto)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "hash_bang_line",
			Pattern: "(hash_bang_line)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "local",
			Pattern: "(local)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "nil",
			Pattern: "(nil)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "not",
			Pattern: "(not)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "number",
			Pattern: "(number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "or",
			Pattern: "(or)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "repeat",
			Pattern: "(repeat)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "then",
			Pattern: "(then)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "until",
			Pattern: "(until)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "vararg_expression",
			Pattern: "(vararg_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &luaPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *luaPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *luaPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *luaPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *luaPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *luaPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// makePatternMatcher provides pre-compiled pattern matching for make
type makePatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newmakePatternMatcher() *makePatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "RECIPEPREFIX_assignment",
			Pattern: "(RECIPEPREFIX_assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"text",

				},
				
			},
			
		},

		{
			Name: "VPATH_assignment",
			Pattern: "(VPATH_assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"VPATH",

					"paths",

				},
				
			},
			
		},

		{
			Name: "archive",
			Pattern: "(archive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"list",

					"word",

				},
				
			},
			
		},

		{
			Name: "arguments",
			Pattern: "(arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"text",

				},
				
			},
			
		},

		{
			Name: "automatic_variable",
			Pattern: "(automatic_variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "concatenation",
			Pattern: "(concatenation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "conditional",
			Pattern: "(conditional)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"RECIPEPREFIX_assignment",

					"VPATH_assignment",

					"conditional",

					"define_directive",

					"export_directive",

					"function_call",

					"ifdef_directive",

					"ifeq_directive",

					"ifndef_directive",

					"ifneq_directive",

					"include_directive",

					"override_directive",

					"private_directive",

					"recipe_line",

					"rule",

					"shell_assignment",

					"shell_function",

					"undefine_directive",

					"unexport_directive",

					"variable_assignment",

					"vpath_directive",

				},
				
			},
			
		},

		{
			Name: "define_directive",
			Pattern: "(define_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"raw_text",

					"word",

				},
				
			},
			
		},

		{
			Name: "else_directive",
			Pattern: "(else_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"RECIPEPREFIX_assignment",

					"VPATH_assignment",

					"conditional",

					"define_directive",

					"export_directive",

					"function_call",

					"include_directive",

					"override_directive",

					"private_directive",

					"recipe_line",

					"rule",

					"shell_assignment",

					"shell_function",

					"undefine_directive",

					"unexport_directive",

					"variable_assignment",

					"vpath_directive",

				},
				
			},
			
		},

		{
			Name: "elsif_directive",
			Pattern: "(elsif_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"RECIPEPREFIX_assignment",

					"VPATH_assignment",

					"conditional",

					"define_directive",

					"export_directive",

					"function_call",

					"ifdef_directive",

					"ifeq_directive",

					"ifndef_directive",

					"ifneq_directive",

					"include_directive",

					"override_directive",

					"private_directive",

					"recipe_line",

					"rule",

					"shell_assignment",

					"shell_function",

					"undefine_directive",

					"unexport_directive",

					"variable_assignment",

					"vpath_directive",

				},
				
			},
			
		},

		{
			Name: "export_directive",
			Pattern: "(export_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"list",

				},
				
			},
			
		},

		{
			Name: "function_call",
			Pattern: "(function_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"abspath",

					"addprefix",

					"addsuffix",

					"and",

					"basename",

					"call",

					"dir",

					"error",

					"eval",

					"file",

					"filter",

					"findstring",

					"firstword",

					"flavor",

					"foreach",

					"if",

					"info",

					"join",

					"lastword",

					"notdir",

					"or",

					"origin",

					"patsubst",

					"realpath",

					"sort",

					"strip",

					"subst",

					"suffix",

					"value",

					"warning",

					"wildcard",

					"word",

					"wordlist",

					"words",

				},
				
			},
			
		},

		{
			Name: "ifdef_directive",
			Pattern: "(ifdef_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"archive",

					"automatic_variable",

					"concatenation",

					"function_call",

					"shell_function",

					"string",

					"substitution_reference",

					"variable_reference",

					"word",

				},
				
			},
			
		},

		{
			Name: "ifeq_directive",
			Pattern: "(ifeq_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"archive",

					"automatic_variable",

					"concatenation",

					"function_call",

					"shell_function",

					"string",

					"substitution_reference",

					"variable_reference",

					"word",

				},
				
			},
			
		},

		{
			Name: "ifndef_directive",
			Pattern: "(ifndef_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"archive",

					"automatic_variable",

					"concatenation",

					"function_call",

					"shell_function",

					"string",

					"substitution_reference",

					"variable_reference",

					"word",

				},
				
			},
			
		},

		{
			Name: "ifneq_directive",
			Pattern: "(ifneq_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"archive",

					"automatic_variable",

					"concatenation",

					"function_call",

					"shell_function",

					"string",

					"substitution_reference",

					"variable_reference",

					"word",

				},
				
			},
			
		},

		{
			Name: "include_directive",
			Pattern: "(include_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"list",

				},
				
			},
			
		},

		{
			Name: "list",
			Pattern: "(list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "makefile",
			Pattern: "(makefile)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "override_directive",
			Pattern: "(override_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "paths",
			Pattern: "(paths)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pattern_list",
			Pattern: "(pattern_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "prerequisites",
			Pattern: "(prerequisites)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "private_directive",
			Pattern: "(private_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "raw_text",
			Pattern: "(raw_text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "recipe",
			Pattern: "(recipe)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "recipe_line",
			Pattern: "(recipe_line)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "rule",
			Pattern: "(rule)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"pattern_list",

					"prerequisites",

				},
				
			},
			
		},

		{
			Name: "shell_assignment",
			Pattern: "(shell_assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"shell_command",

					"word",

				},
				
			},
			
		},

		{
			Name: "shell_command",
			Pattern: "(shell_command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "shell_function",
			Pattern: "(shell_function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"shell",

				},
				
			},
			
		},

		{
			Name: "shell_text",
			Pattern: "(shell_text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"automatic_variable",

					"function_call",

					"shell_function",

					"substitution_reference",

					"variable_reference",

				},
				
			},
			
		},

		{
			Name: "substitution_reference",
			Pattern: "(substitution_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"archive",

					"automatic_variable",

					"concatenation",

					"function_call",

					"shell_function",

					"string",

					"substitution_reference",

					"variable_reference",

					"word",

				},
				
			},
			
		},

		{
			Name: "targets",
			Pattern: "(targets)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "text",
			Pattern: "(text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "undefine_directive",
			Pattern: "(undefine_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"word",

				},
				
			},
			
		},

		{
			Name: "unexport_directive",
			Pattern: "(unexport_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"list",

				},
				
			},
			
		},

		{
			Name: "variable_assignment",
			Pattern: "(variable_assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"list",

					"text",

					"word",

				},
				
			},
			
		},

		{
			Name: "variable_reference",
			Pattern: "(variable_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "vpath_directive",
			Pattern: "(vpath_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"paths",

					"word",

				},
				
			},
			
		},

		{
			Name: "D",
			Pattern: "(D)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "F",
			Pattern: "(F)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "VPATH",
			Pattern: "(VPATH)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "abspath",
			Pattern: "(abspath)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "addprefix",
			Pattern: "(addprefix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "addsuffix",
			Pattern: "(addsuffix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "and",
			Pattern: "(and)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "basename",
			Pattern: "(basename)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "call",
			Pattern: "(call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "define",
			Pattern: "(define)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "dir",
			Pattern: "(dir)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "endef",
			Pattern: "(endef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "endif",
			Pattern: "(endif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "error",
			Pattern: "(error)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "escape",
			Pattern: "(escape)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "eval",
			Pattern: "(eval)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "export",
			Pattern: "(export)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "file",
			Pattern: "(file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "filter",
			Pattern: "(filter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "File",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "findstring",
			Pattern: "(findstring)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "firstword",
			Pattern: "(firstword)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "flavor",
			Pattern: "(flavor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "foreach",
			Pattern: "(foreach)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "ifdef",
			Pattern: "(ifdef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ifeq",
			Pattern: "(ifeq)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "ifndef",
			Pattern: "(ifndef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ifneq",
			Pattern: "(ifneq)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "include",
			Pattern: "(include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "info",
			Pattern: "(info)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "join",
			Pattern: "(join)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "lastword",
			Pattern: "(lastword)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "notdir",
			Pattern: "(notdir)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "or",
			Pattern: "(or)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "origin",
			Pattern: "(origin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "override",
			Pattern: "(override)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "patsubst",
			Pattern: "(patsubst)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "private",
			Pattern: "(private)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "realpath",
			Pattern: "(realpath)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "shell",
			Pattern: "(shell)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "sinclude",
			Pattern: "(sinclude)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "sort",
			Pattern: "(sort)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "strip",
			Pattern: "(strip)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "subst",
			Pattern: "(subst)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "suffix",
			Pattern: "(suffix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "undefine",
			Pattern: "(undefine)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unexport",
			Pattern: "(unexport)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "value",
			Pattern: "(value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "vpath",
			Pattern: "(vpath)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "warning",
			Pattern: "(warning)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "wildcard",
			Pattern: "(wildcard)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "word",
			Pattern: "(word)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "word",
			Pattern: "(word)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "wordlist",
			Pattern: "(wordlist)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "words",
			Pattern: "(words)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &makePatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *makePatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *makePatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *makePatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *makePatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *makePatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// markdownPatternMatcher provides pre-compiled pattern matching for markdown
type markdownPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newmarkdownPatternMatcher() *markdownPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "atx_heading",
			Pattern: "(atx_heading)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"inline",

				},
				
			},
			
		},

		{
			Name: "backslash_escape",
			Pattern: "(backslash_escape)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "block_quote",
			Pattern: "(block_quote)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "code_fence_content",
			Pattern: "(code_fence_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "document",
			Pattern: "(document)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "fenced_code_block",
			Pattern: "(fenced_code_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "html_block",
			Pattern: "(html_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "indented_code_block",
			Pattern: "(indented_code_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "info_string",
			Pattern: "(info_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "inline",
			Pattern: "(inline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "language",
			Pattern: "(language)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "link_destination",
			Pattern: "(link_destination)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "link_label",
			Pattern: "(link_label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "link_reference_definition",
			Pattern: "(link_reference_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "link_title",
			Pattern: "(link_title)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "list",
			Pattern: "(list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "list_item",
			Pattern: "(list_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "list_marker_dot",
			Pattern: "(list_marker_dot)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "list_marker_minus",
			Pattern: "(list_marker_minus)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "list_marker_parenthesis",
			Pattern: "(list_marker_parenthesis)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "list_marker_plus",
			Pattern: "(list_marker_plus)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "list_marker_star",
			Pattern: "(list_marker_star)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "paragraph",
			Pattern: "(paragraph)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pipe_table",
			Pattern: "(pipe_table)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pipe_table_cell",
			Pattern: "(pipe_table_cell)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pipe_table_delimiter_cell",
			Pattern: "(pipe_table_delimiter_cell)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pipe_table_delimiter_row",
			Pattern: "(pipe_table_delimiter_row)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pipe_table_header",
			Pattern: "(pipe_table_header)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pipe_table_row",
			Pattern: "(pipe_table_row)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "section",
			Pattern: "(section)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "setext_heading",
			Pattern: "(setext_heading)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				Children: []string{

					"paragraph",

				},
				
			},
			
		},

		{
			Name: "task_list_marker_checked",
			Pattern: "(task_list_marker_checked)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "task_list_marker_unchecked",
			Pattern: "(task_list_marker_unchecked)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "thematic_break",
			Pattern: "(thematic_break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "_",
			Pattern: "(_)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "atx_h1_marker",
			Pattern: "(atx_h1_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "atx_h2_marker",
			Pattern: "(atx_h2_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "atx_h3_marker",
			Pattern: "(atx_h3_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "atx_h4_marker",
			Pattern: "(atx_h4_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "atx_h5_marker",
			Pattern: "(atx_h5_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "atx_h6_marker",
			Pattern: "(atx_h6_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "block_continuation",
			Pattern: "(block_continuation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_quote_marker",
			Pattern: "(block_quote_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "entity_reference",
			Pattern: "(entity_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "fenced_code_block_delimiter",
			Pattern: "(fenced_code_block_delimiter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "minus_metadata",
			Pattern: "(minus_metadata)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "numeric_character_reference",
			Pattern: "(numeric_character_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pipe_table_align_left",
			Pattern: "(pipe_table_align_left)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pipe_table_align_right",
			Pattern: "(pipe_table_align_right)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "plus_metadata",
			Pattern: "(plus_metadata)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "setext_h1_underline",
			Pattern: "(setext_h1_underline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "setext_h2_underline",
			Pattern: "(setext_h2_underline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &markdownPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *markdownPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *markdownPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *markdownPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *markdownPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *markdownPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// markdown_inlinePatternMatcher provides pre-compiled pattern matching for markdown_inline
type markdown_inlinePatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newmarkdown_inlinePatternMatcher() *markdown_inlinePatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "atx_heading",
			Pattern: "(atx_heading)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"inline",

				},
				
			},
			
		},

		{
			Name: "backslash_escape",
			Pattern: "(backslash_escape)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "block_quote",
			Pattern: "(block_quote)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "code_fence_content",
			Pattern: "(code_fence_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "document",
			Pattern: "(document)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "fenced_code_block",
			Pattern: "(fenced_code_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "html_block",
			Pattern: "(html_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "indented_code_block",
			Pattern: "(indented_code_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "info_string",
			Pattern: "(info_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "inline",
			Pattern: "(inline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "language",
			Pattern: "(language)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "link_destination",
			Pattern: "(link_destination)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "link_label",
			Pattern: "(link_label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "link_reference_definition",
			Pattern: "(link_reference_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "link_title",
			Pattern: "(link_title)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "list",
			Pattern: "(list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "list_item",
			Pattern: "(list_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "list_marker_dot",
			Pattern: "(list_marker_dot)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "list_marker_minus",
			Pattern: "(list_marker_minus)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "list_marker_parenthesis",
			Pattern: "(list_marker_parenthesis)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "list_marker_plus",
			Pattern: "(list_marker_plus)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "list_marker_star",
			Pattern: "(list_marker_star)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "paragraph",
			Pattern: "(paragraph)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pipe_table",
			Pattern: "(pipe_table)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pipe_table_cell",
			Pattern: "(pipe_table_cell)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pipe_table_delimiter_cell",
			Pattern: "(pipe_table_delimiter_cell)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pipe_table_delimiter_row",
			Pattern: "(pipe_table_delimiter_row)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pipe_table_header",
			Pattern: "(pipe_table_header)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pipe_table_row",
			Pattern: "(pipe_table_row)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "section",
			Pattern: "(section)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "setext_heading",
			Pattern: "(setext_heading)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				Children: []string{

					"paragraph",

				},
				
			},
			
		},

		{
			Name: "task_list_marker_checked",
			Pattern: "(task_list_marker_checked)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "task_list_marker_unchecked",
			Pattern: "(task_list_marker_unchecked)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "thematic_break",
			Pattern: "(thematic_break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "_",
			Pattern: "(_)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "atx_h1_marker",
			Pattern: "(atx_h1_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "atx_h2_marker",
			Pattern: "(atx_h2_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "atx_h3_marker",
			Pattern: "(atx_h3_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "atx_h4_marker",
			Pattern: "(atx_h4_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "atx_h5_marker",
			Pattern: "(atx_h5_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "atx_h6_marker",
			Pattern: "(atx_h6_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "block_continuation",
			Pattern: "(block_continuation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_quote_marker",
			Pattern: "(block_quote_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "entity_reference",
			Pattern: "(entity_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "fenced_code_block_delimiter",
			Pattern: "(fenced_code_block_delimiter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "minus_metadata",
			Pattern: "(minus_metadata)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "numeric_character_reference",
			Pattern: "(numeric_character_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pipe_table_align_left",
			Pattern: "(pipe_table_align_left)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pipe_table_align_right",
			Pattern: "(pipe_table_align_right)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "plus_metadata",
			Pattern: "(plus_metadata)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "setext_h1_underline",
			Pattern: "(setext_h1_underline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "setext_h2_underline",
			Pattern: "(setext_h2_underline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &markdown_inlinePatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *markdown_inlinePatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *markdown_inlinePatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *markdown_inlinePatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *markdown_inlinePatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *markdown_inlinePatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// nimPatternMatcher provides pre-compiled pattern matching for nim
type nimPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newnimPatternMatcher() *nimPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "accent_quoted",
			Pattern: "(accent_quoted)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "argument_list",
			Pattern: "(argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "array_construction",
			Pattern: "(array_construction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "assembly_statement",
			Pattern: "(assembly_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"pragma_list",

				},
				
			},
			
		},

		{
			Name: "assignment",
			Pattern: "(assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"try",

					"tuple_construction",

					"tuple_type",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "bind_statement",
			Pattern: "(bind_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				Children: []string{

					"accent_quoted",

					"blank_identifier",

					"identifier",

					"statement_list",

				},
				
			},
			
		},

		{
			Name: "block_comment",
			Pattern: "(block_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_documentation_comment",
			Pattern: "(block_documentation_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "bracket_expression",
			Pattern: "(bracket_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				Children: []string{

					"accent_quoted",

					"argument_list",

					"array_construction",

					"blank_identifier",

					"bracket_expression",

					"call",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"generalized_string",

					"identifier",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"tuple_construction",

					"tuple_type",

					"var_type",

				},
				
			},
			
		},

		{
			Name: "break_statement",
			Pattern: "(break_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "call",
			Pattern: "(call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Break",

					"Call",

				},
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"bracket_expression",

					"call",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"generalized_string",

					"generic_argument_list",

					"identifier",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"tuple_construction",

					"tuple_type",

					"var_type",

				},
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"elif_branch",

					"else_branch",

					"enum_type",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"of_branch",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"try",

					"tuple_construction",

					"tuple_type",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "cast",
			Pattern: "(cast)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				Token: "self",
				
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"colon_expression",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"try",

					"tuple_construction",

					"tuple_type",

					"type_expression",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "char_literal",
			Pattern: "(char_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "colon_expression",
			Pattern: "(colon_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"try",

					"tuple_construction",

					"tuple_type",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "concept_declaration",
			Pattern: "(concept_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				Children: []string{

					"parameter_list",

					"refinement_list",

					"statement_list",

				},
				
			},
			
		},

		{
			Name: "conditional_declaration",
			Pattern: "(conditional_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"elif_branch",

					"else_branch",

					"enum_type",

					"field_declaration_list",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"try",

					"tuple_construction",

					"tuple_type",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "const_section",
			Pattern: "(const_section)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "continue_statement",
			Pattern: "(continue_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "converter_declaration",
			Pattern: "(converter_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				Children: []string{

					"accent_quoted",

					"blank_identifier",

					"exported_symbol",

					"generic_parameter_list",

					"identifier",

					"parameter_declaration_list",

					"pragma_list",

					"statement_list",

					"term_rewriting_pattern",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "curly_construction",
			Pattern: "(curly_construction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "curly_expression",
			Pattern: "(curly_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"accent_quoted",

					"argument_list",

					"array_construction",

					"blank_identifier",

					"bracket_expression",

					"call",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"generalized_string",

					"identifier",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"tuple_construction",

					"tuple_type",

					"var_type",

				},
				
			},
			
		},

		{
			Name: "defer",
			Pattern: "(defer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"statement_list",

				},
				
			},
			
		},

		{
			Name: "discard_statement",
			Pattern: "(discard_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "distinct_type",
			Pattern: "(distinct_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "do_block",
			Pattern: "(do_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"parameter_declaration_list",

					"pragma_list",

					"statement_list",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "documentation_comment",
			Pattern: "(documentation_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "dot_expression",
			Pattern: "(dot_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "DocString",
				Token: "self",
				Roles: []string{

					"Doc",

				},
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"bracket_expression",

					"call",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"generalized_string",

					"identifier",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"tuple_construction",

					"tuple_type",

					"var_type",

				},
				
			},
			
		},

		{
			Name: "dot_generic_call",
			Pattern: "(dot_generic_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"bracket_expression",

					"call",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"generalized_string",

					"generic_argument_list",

					"identifier",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"tuple_construction",

					"tuple_type",

					"var_type",

				},
				
			},
			
		},

		{
			Name: "elif_branch",
			Pattern: "(elif_branch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"field_declaration_list",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"statement_list",

					"try",

					"tuple_construction",

					"tuple_type",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "else_branch",
			Pattern: "(else_branch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"field_declaration_list",

					"statement_list",

				},
				
			},
			
		},

		{
			Name: "enum_declaration",
			Pattern: "(enum_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enum_field_declaration",
			Pattern: "(enum_field_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"try",

					"tuple_construction",

					"tuple_type",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "enum_type",
			Pattern: "(enum_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "equal_expression",
			Pattern: "(equal_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"try",

					"tuple_construction",

					"tuple_type",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "except_branch",
			Pattern: "(except_branch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression_list",

					"statement_list",

				},
				
			},
			
		},

		{
			Name: "except_clause",
			Pattern: "(except_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "export_statement",
			Pattern: "(export_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "exported_symbol",
			Pattern: "(exported_symbol)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "expression_list",
			Pattern: "(expression_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "field_declaration",
			Pattern: "(field_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"try",

					"tuple_construction",

					"tuple_type",

					"type_expression",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "field_declaration_list",
			Pattern: "(field_declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "finally_branch",
			Pattern: "(finally_branch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				Children: []string{

					"statement_list",

				},
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"statement_list",

					"symbol_declaration_list",

					"try",

					"tuple_construction",

					"tuple_type",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "func_declaration",
			Pattern: "(func_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"accent_quoted",

					"blank_identifier",

					"exported_symbol",

					"generic_parameter_list",

					"identifier",

					"parameter_declaration_list",

					"pragma_list",

					"statement_list",

					"term_rewriting_pattern",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "func_expression",
			Pattern: "(func_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"parameter_declaration_list",

					"pragma_list",

					"statement_list",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "generalized_string",
			Pattern: "(generalized_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"dot_expression",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "generic_argument_list",
			Pattern: "(generic_argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "generic_parameter_list",
			Pattern: "(generic_parameter_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"elif_branch",

					"else_branch",

					"enum_type",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"statement_list",

					"try",

					"tuple_construction",

					"tuple_type",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "import_from_statement",
			Pattern: "(import_from_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"try",

					"tuple_construction",

					"tuple_type",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "import_statement",
			Pattern: "(import_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "include_statement",
			Pattern: "(include_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "infix_expression",
			Pattern: "(infix_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"accent_quoted",

					"and",

					"array_construction",

					"as",

					"blank_identifier",

					"bracket_expression",

					"call",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"div",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"from",

					"generalized_string",

					"identifier",

					"in",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"is",

					"isnot",

					"iterator_type",

					"long_string_literal",

					"mod",

					"nil_literal",

					"notin",

					"object_type",

					"of",

					"operator",

					"or",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"shl",

					"shr",

					"tuple_construction",

					"tuple_type",

					"typeof",

					"var_type",

					"xor",

				},
				
			},
			
		},

		{
			Name: "interpreted_string_literal",
			Pattern: "(interpreted_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "iterator_declaration",
			Pattern: "(iterator_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"accent_quoted",

					"blank_identifier",

					"exported_symbol",

					"generic_parameter_list",

					"identifier",

					"parameter_declaration_list",

					"pragma_list",

					"statement_list",

					"term_rewriting_pattern",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "iterator_expression",
			Pattern: "(iterator_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"parameter_declaration_list",

					"pragma_list",

					"statement_list",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "iterator_type",
			Pattern: "(iterator_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"parameter_declaration_list",

					"pragma_list",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "let_section",
			Pattern: "(let_section)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "long_string_literal",
			Pattern: "(long_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "macro_declaration",
			Pattern: "(macro_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"accent_quoted",

					"blank_identifier",

					"exported_symbol",

					"generic_parameter_list",

					"identifier",

					"parameter_declaration_list",

					"pragma_list",

					"statement_list",

					"term_rewriting_pattern",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "method_declaration",
			Pattern: "(method_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"accent_quoted",

					"blank_identifier",

					"exported_symbol",

					"generic_parameter_list",

					"identifier",

					"parameter_declaration_list",

					"pragma_list",

					"statement_list",

					"term_rewriting_pattern",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "mixin_statement",
			Pattern: "(mixin_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "child:identifier",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "nil_literal",
			Pattern: "(nil_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "object_declaration",
			Pattern: "(object_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"pragma_list",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "object_type",
			Pattern: "(object_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "of_branch",
			Pattern: "(of_branch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression_list",

					"field_declaration_list",

					"statement_list",

				},
				
			},
			
		},

		{
			Name: "out_type",
			Pattern: "(out_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "parameter_declaration",
			Pattern: "(parameter_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"try",

					"tuple_construction",

					"tuple_type",

					"type_expression",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "parameter_declaration_list",
			Pattern: "(parameter_declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parameter_list",
			Pattern: "(parameter_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parenthesized",
			Pattern: "(parenthesized)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pointer_parameter",
			Pattern: "(pointer_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "pointer_type",
			Pattern: "(pointer_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pragma_expression",
			Pattern: "(pragma_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"bracket_expression",

					"call",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"generalized_string",

					"identifier",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"pragma_list",

					"prefix_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"tuple_construction",

					"tuple_type",

					"var_type",

				},
				
			},
			
		},

		{
			Name: "pragma_list",
			Pattern: "(pragma_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "pragma_statement",
			Pattern: "(pragma_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"statement_list",

				},
				
			},
			
		},

		{
			Name: "prefix_expression",
			Pattern: "(prefix_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"and",

					"as",

					"div",

					"from",

					"in",

					"is",

					"isnot",

					"mod",

					"not",

					"notin",

					"of",

					"operator",

					"or",

					"shl",

					"shr",

					"xor",

				},
				
			},
			
		},

		{
			Name: "proc_declaration",
			Pattern: "(proc_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"accent_quoted",

					"blank_identifier",

					"exported_symbol",

					"generic_parameter_list",

					"identifier",

					"parameter_declaration_list",

					"pragma_list",

					"statement_list",

					"term_rewriting_pattern",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "proc_expression",
			Pattern: "(proc_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"parameter_declaration_list",

					"pragma_list",

					"statement_list",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "proc_type",
			Pattern: "(proc_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"parameter_declaration_list",

					"pragma_list",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "raise_statement",
			Pattern: "(raise_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "raw_string_literal",
			Pattern: "(raw_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "ref_parameter",
			Pattern: "(ref_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "ref_type",
			Pattern: "(ref_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "refinement_list",
			Pattern: "(refinement_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "return_statement",
			Pattern: "(return_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "source_file",
			Pattern: "(source_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "statement_list",
			Pattern: "(statement_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "static_parameter",
			Pattern: "(static_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "static_statement",
			Pattern: "(static_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"statement_list",

				},
				
			},
			
		},

		{
			Name: "string_content",
			Pattern: "(string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "symbol_declaration",
			Pattern: "(symbol_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"accent_quoted",

					"blank_identifier",

					"exported_symbol",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "symbol_declaration_list",
			Pattern: "(symbol_declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "template_declaration",
			Pattern: "(template_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"accent_quoted",

					"blank_identifier",

					"exported_symbol",

					"generic_parameter_list",

					"identifier",

					"parameter_declaration_list",

					"pragma_list",

					"statement_list",

					"term_rewriting_pattern",

					"type_expression",

				},
				
			},
			
		},

		{
			Name: "term_rewriting_pattern",
			Pattern: "(term_rewriting_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				Children: []string{

					"statement_list",

				},
				
			},
			
		},

		{
			Name: "tuple_construction",
			Pattern: "(tuple_construction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "tuple_deconstruct_declaration",
			Pattern: "(tuple_deconstruct_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "tuple_type",
			Pattern: "(tuple_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				
				
			},
			
		},

		{
			Name: "type_declaration",
			Pattern: "(type_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_expression",
			Pattern: "(type_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_parameter",
			Pattern: "(type_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_section",
			Pattern: "(type_section)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_symbol_declaration",
			Pattern: "(type_symbol_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"accent_quoted",

					"blank_identifier",

					"exported_symbol",

					"identifier",

					"pragma_list",

				},
				
			},
			
		},

		{
			Name: "typeof",
			Pattern: "(typeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "using_section",
			Pattern: "(using_section)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "var_parameter",
			Pattern: "(var_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "var_section",
			Pattern: "(var_section)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "var_type",
			Pattern: "(var_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "variable_declaration",
			Pattern: "(variable_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"try",

					"tuple_construction",

					"tuple_type",

					"type_expression",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "variant_declaration",
			Pattern: "(variant_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"else_branch",

					"of_branch",

				},
				
			},
			
		},

		{
			Name: "variant_discriminator_declaration",
			Pattern: "(variant_discriminator_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"try",

					"tuple_construction",

					"tuple_type",

					"type_expression",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "when",
			Pattern: "(when)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"block",

					"bracket_expression",

					"call",

					"case",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"elif_branch",

					"else_branch",

					"enum_type",

					"float_literal",

					"for",

					"func_expression",

					"generalized_string",

					"identifier",

					"if",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_expression",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"statement_list",

					"try",

					"tuple_construction",

					"tuple_type",

					"var_type",

					"when",

				},
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"accent_quoted",

					"array_construction",

					"blank_identifier",

					"bracket_expression",

					"call",

					"cast",

					"char_literal",

					"curly_construction",

					"curly_expression",

					"custom_numeric_literal",

					"distinct_type",

					"dot_expression",

					"dot_generic_call",

					"enum_type",

					"float_literal",

					"generalized_string",

					"identifier",

					"infix_expression",

					"integer_literal",

					"interpreted_string_literal",

					"iterator_type",

					"long_string_literal",

					"nil_literal",

					"object_type",

					"out_type",

					"parenthesized",

					"pointer_type",

					"pragma_expression",

					"prefix_expression",

					"proc_type",

					"raw_string_literal",

					"ref_type",

					"statement_list",

					"tuple_construction",

					"tuple_type",

					"var_type",

				},
				
			},
			
		},

		{
			Name: "yield_statement",
			Pattern: "(yield_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "and",
			Pattern: "(and)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "as",
			Pattern: "(as)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "asm",
			Pattern: "(asm)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "bind",
			Pattern: "(bind)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "blank_identifier",
			Pattern: "(blank_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Body",

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "cast",
			Pattern: "(cast)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "comment_content",
			Pattern: "(comment_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "concept",
			Pattern: "(concept)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "const",
			Pattern: "(const)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "converter",
			Pattern: "(converter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "custom_numeric_literal",
			Pattern: "(custom_numeric_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "defer",
			Pattern: "(defer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "discard",
			Pattern: "(discard)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "distinct",
			Pattern: "(distinct)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "div",
			Pattern: "(div)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "elif",
			Pattern: "(elif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "except",
			Pattern: "(except)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "export",
			Pattern: "(export)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "finally",
			Pattern: "(finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "float_literal",
			Pattern: "(float_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "from",
			Pattern: "(from)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "func",
			Pattern: "(func)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "include",
			Pattern: "(include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "integer_literal",
			Pattern: "(integer_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "is",
			Pattern: "(is)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "isnot",
			Pattern: "(isnot)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "iterator",
			Pattern: "(iterator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "let",
			Pattern: "(let)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "macro",
			Pattern: "(macro)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "method",
			Pattern: "(method)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "mixin",
			Pattern: "(mixin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "mod",
			Pattern: "(mod)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "nil",
			Pattern: "(nil)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "not",
			Pattern: "(not)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "notin",
			Pattern: "(notin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "object",
			Pattern: "(object)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "of",
			Pattern: "(of)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "operator",
			Pattern: "(operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "or",
			Pattern: "(or)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "out",
			Pattern: "(out)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "proc",
			Pattern: "(proc)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ptr",
			Pattern: "(ptr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "raise",
			Pattern: "(raise)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ref",
			Pattern: "(ref)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "shl",
			Pattern: "(shl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "shr",
			Pattern: "(shr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "static",
			Pattern: "(static)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "template",
			Pattern: "(template)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "tuple",
			Pattern: "(tuple)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "using",
			Pattern: "(using)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "var",
			Pattern: "(var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "when",
			Pattern: "(when)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "xor",
			Pattern: "(xor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &nimPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *nimPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *nimPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *nimPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *nimPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *nimPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// nim_format_stringPatternMatcher provides pre-compiled pattern matching for nim_format_string
type nim_format_stringPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newnim_format_stringPatternMatcher() *nim_format_stringPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "double_curlies",
			Pattern: "(double_curlies)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "escaped_curly",
			Pattern: "(escaped_curly)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "format_specifiers",
			Pattern: "(format_specifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"colon",

					"fill_align",

					"hash",

					"min_width",

					"precision",

					"sign",

					"type",

					"zero",

				},
				
			},
			
		},

		{
			Name: "matching_curlies",
			Pattern: "(matching_curlies)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				Token: "self",
				Roles: []string{

					"Match",

				},
				Children: []string{

					"closing_curly",

					"equals",

					"format_specifiers",

					"nim_expression",

					"opening_curly",

				},
				
			},
			
		},

		{
			Name: "nim_expression",
			Pattern: "(nim_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"escaped_curly",

				},
				
			},
			
		},

		{
			Name: "source_file",
			Pattern: "(source_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_literal",
			Pattern: "(string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "closing_curly",
			Pattern: "(closing_curly)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "colon",
			Pattern: "(colon)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "equals",
			Pattern: "(equals)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "fill_align",
			Pattern: "(fill_align)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "hash",
			Pattern: "(hash)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "min_width",
			Pattern: "(min_width)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "opening_curly",
			Pattern: "(opening_curly)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "precision",
			Pattern: "(precision)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "sign",
			Pattern: "(sign)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "zero",
			Pattern: "(zero)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &nim_format_stringPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *nim_format_stringPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *nim_format_stringPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *nim_format_stringPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *nim_format_stringPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *nim_format_stringPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// phpPatternMatcher provides pre-compiled pattern matching for php
type phpPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newphpPatternMatcher() *phpPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "expression",
			Pattern: "(expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "literal",
			Pattern: "(literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "primary_expression",
			Pattern: "(primary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "statement",
			Pattern: "(statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "abstract_modifier",
			Pattern: "(abstract_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "anonymous_class",
			Pattern: "(anonymous_class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"attribute_list",

					"declaration_list",

				},
				
			},
			
		},

		{
			Name: "anonymous_function",
			Pattern: "(anonymous_function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Declaration",

					"Function",

					"Declaration",

				},
				Children: []string{

					"attribute_list",

					"bottom_type",

					"compound_statement",

					"formal_parameters",

					"reference_modifier",

					"static_modifier",

					"type",

				},
				
			},
			
		},

		{
			Name: "anonymous_function_use_clause",
			Pattern: "(anonymous_function_use_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "argument",
			Pattern: "(argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"name",

					"reference_modifier",

				},
				
			},
			
		},

		{
			Name: "arguments",
			Pattern: "(arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "array_creation_expression",
			Pattern: "(array_creation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "array_element_initializer",
			Pattern: "(array_element_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "arrow_function",
			Pattern: "(arrow_function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"attribute_list",

					"bottom_type",

					"expression",

					"formal_parameters",

					"reference_modifier",

					"static_modifier",

					"type",

				},
				
			},
			
		},

		{
			Name: "assignment_expression",
			Pattern: "(assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"cast_expression",

					"dynamic_variable_name",

					"expression",

					"function_call_expression",

					"list_literal",

					"member_access_expression",

					"member_call_expression",

					"nullsafe_member_access_expression",

					"nullsafe_member_call_expression",

					"scoped_call_expression",

					"scoped_property_access_expression",

					"subscript_expression",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "attribute",
			Pattern: "(attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Assignment",

					"Attribute",

				},
				Children: []string{

					"arguments",

				},
				
			},
			
		},

		{
			Name: "attribute_group",
			Pattern: "(attribute_group)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "attribute_list",
			Pattern: "(attribute_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "augmented_assignment_expression",
			Pattern: "(augmented_assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"cast_expression",

					"dynamic_variable_name",

					"expression",

					"function_call_expression",

					"member_access_expression",

					"member_call_expression",

					"nullsafe_member_access_expression",

					"nullsafe_member_call_expression",

					"scoped_call_expression",

					"scoped_property_access_expression",

					"subscript_expression",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "base_clause",
			Pattern: "(base_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"and",

					"dynamic_variable_name",

					"expression",

					"instanceof",

					"member_access_expression",

					"name",

					"nullsafe_member_access_expression",

					"or",

					"parenthesized_expression",

					"qualified_name",

					"relative_name",

					"scoped_property_access_expression",

					"subscript_expression",

					"variable_name",

					"xor",

				},
				
			},
			
		},

		{
			Name: "boolean",
			Pattern: "(boolean)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "BinaryOp",
				Token: "self",
				Roles: []string{

					"Operator",

				},
				
				
			},
			
		},

		{
			Name: "break_statement",
			Pattern: "(break_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "by_ref",
			Pattern: "(by_ref)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "case_statement",
			Pattern: "(case_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "cast_expression",
			Pattern: "(cast_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"cast_type",

					"clone_expression",

					"error_suppression_expression",

					"include_expression",

					"include_once_expression",

					"primary_expression",

					"unary_op_expression",

				},
				
			},
			
		},

		{
			Name: "cast_type",
			Pattern: "(cast_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				
				
				
				
			},
			
		},

		{
			Name: "catch_clause",
			Pattern: "(catch_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				Token: "self",
				Roles: []string{

					"Catch",

				},
				Children: []string{

					"compound_statement",

					"type_list",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "class_constant_access_expression",
			Pattern: "(class_constant_access_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "class_declaration",
			Pattern: "(class_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"attribute_list",

					"declaration_list",

					"name",

				},
				
			},
			
		},

		{
			Name: "class_interface_clause",
			Pattern: "(class_interface_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "clone_expression",
			Pattern: "(clone_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "colon_block",
			Pattern: "(colon_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "compound_statement",
			Pattern: "(compound_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "conditional_expression",
			Pattern: "(conditional_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "const_declaration",
			Pattern: "(const_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"attribute_list",

					"type",

				},
				
			},
			
		},

		{
			Name: "const_element",
			Pattern: "(const_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "continue_statement",
			Pattern: "(continue_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "declaration_list",
			Pattern: "(declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "declare_directive",
			Pattern: "(declare_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "declare_statement",
			Pattern: "(declare_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "default_statement",
			Pattern: "(default_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "disjunctive_normal_form_type",
			Pattern: "(disjunctive_normal_form_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "do_statement",
			Pattern: "(do_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "dynamic_variable_name",
			Pattern: "(dynamic_variable_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "echo_statement",
			Pattern: "(echo_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else_clause",
			Pattern: "(else_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"colon_block",

					"statement",

				},
				
			},
			
		},

		{
			Name: "else_if_clause",
			Pattern: "(else_if_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"colon_block",

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "empty_statement",
			Pattern: "(empty_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "encapsed_string",
			Pattern: "(encapsed_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum_case",
			Pattern: "(enum_case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"attribute_list",

					"expression",

					"name",

				},
				
			},
			
		},

		{
			Name: "enum_declaration",
			Pattern: "(enum_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Branch",

					"Enum",

					"Declaration",

				},
				Children: []string{

					"attribute_list",

					"enum_declaration_list",

					"name",

				},
				
			},
			
		},

		{
			Name: "enum_declaration_list",
			Pattern: "(enum_declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "error_suppression_expression",
			Pattern: "(error_suppression_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "child:identifier",
				
				
				
			},
			
		},

		{
			Name: "exit_statement",
			Pattern: "(exit_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expression_statement",
			Pattern: "(expression_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "final_modifier",
			Pattern: "(final_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "finally_clause",
			Pattern: "(finally_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				Children: []string{

					"compound_statement",

				},
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"expression",

					"sequence_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "foreach_statement",
			Pattern: "(foreach_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

					"Loop",

				},
				Children: []string{

					"colon_block",

					"statement",

				},
				
			},
			
		},

		{
			Name: "formal_parameters",
			Pattern: "(formal_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "function_call_expression",
			Pattern: "(function_call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"arguments",

					"array_creation_expression",

					"dynamic_variable_name",

					"encapsed_string",

					"function_call_expression",

					"heredoc",

					"member_call_expression",

					"name",

					"nowdoc",

					"nullsafe_member_call_expression",

					"object_creation_expression",

					"parenthesized_expression",

					"qualified_name",

					"relative_name",

					"scoped_call_expression",

					"string",

					"subscript_expression",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "function_definition",
			Pattern: "(function_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"attribute_list",

					"bottom_type",

					"compound_statement",

					"formal_parameters",

					"name",

					"type",

				},
				
			},
			
		},

		{
			Name: "function_static_declaration",
			Pattern: "(function_static_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "global_declaration",
			Pattern: "(global_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "goto_statement",
			Pattern: "(goto_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "heredoc",
			Pattern: "(heredoc)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"heredoc_body",

					"heredoc_end",

					"heredoc_start",

				},
				
			},
			
		},

		{
			Name: "heredoc_body",
			Pattern: "(heredoc_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"colon_block",

					"else_clause",

					"else_if_clause",

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "include_expression",
			Pattern: "(include_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				Roles: []string{

					"Condition",

				},
				
				
			},
			
		},

		{
			Name: "include_once_expression",
			Pattern: "(include_once_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "interface_declaration",
			Pattern: "(interface_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				Children: []string{

					"attribute_list",

					"declaration_list",

					"name",

				},
				
			},
			
		},

		{
			Name: "intersection_type",
			Pattern: "(intersection_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "list_literal",
			Pattern: "(list_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "match_block",
			Pattern: "(match_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "match_condition_list",
			Pattern: "(match_condition_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "match_conditional_expression",
			Pattern: "(match_conditional_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				
				Roles: []string{

					"Match",

				},
				Children: []string{

					"expression",

					"match_condition_list",

				},
				
			},
			
		},

		{
			Name: "match_default_expression",
			Pattern: "(match_default_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				Token: "self",
				Roles: []string{

					"Match",

				},
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "match_expression",
			Pattern: "(match_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				
				Roles: []string{

					"Match",

				},
				Children: []string{

					"match_block",

					"parenthesized_expression",

				},
				
			},
			
		},

		{
			Name: "member_access_expression",
			Pattern: "(member_access_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"array_creation_expression",

					"cast_expression",

					"class_constant_access_expression",

					"dynamic_variable_name",

					"encapsed_string",

					"expression",

					"function_call_expression",

					"heredoc",

					"member_access_expression",

					"member_call_expression",

					"name",

					"nowdoc",

					"nullsafe_member_access_expression",

					"nullsafe_member_call_expression",

					"object_creation_expression",

					"parenthesized_expression",

					"qualified_name",

					"relative_name",

					"scoped_call_expression",

					"scoped_property_access_expression",

					"string",

					"subscript_expression",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "member_call_expression",
			Pattern: "(member_call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"arguments",

					"array_creation_expression",

					"cast_expression",

					"class_constant_access_expression",

					"dynamic_variable_name",

					"encapsed_string",

					"expression",

					"function_call_expression",

					"heredoc",

					"member_access_expression",

					"member_call_expression",

					"name",

					"nowdoc",

					"nullsafe_member_access_expression",

					"nullsafe_member_call_expression",

					"object_creation_expression",

					"parenthesized_expression",

					"qualified_name",

					"relative_name",

					"scoped_call_expression",

					"scoped_property_access_expression",

					"string",

					"subscript_expression",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "method_declaration",
			Pattern: "(method_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"attribute_list",

					"bottom_type",

					"compound_statement",

					"formal_parameters",

					"name",

					"type",

				},
				
			},
			
		},

		{
			Name: "name",
			Pattern: "(name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "named_label_statement",
			Pattern: "(named_label_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "named_type",
			Pattern: "(named_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "namespace_definition",
			Pattern: "(namespace_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"compound_statement",

					"namespace_name",

				},
				
			},
			
		},

		{
			Name: "namespace_name",
			Pattern: "(namespace_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "namespace_use_clause",
			Pattern: "(namespace_use_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"const",

					"function",

					"name",

				},
				
			},
			
		},

		{
			Name: "namespace_use_declaration",
			Pattern: "(namespace_use_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				
				Roles: []string{

					"Module",

				},
				Children: []string{

					"const",

					"function",

					"namespace_use_group",

				},
				
			},
			
		},

		{
			Name: "namespace_use_group",
			Pattern: "(namespace_use_group)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "nowdoc",
			Pattern: "(nowdoc)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"heredoc_end",

					"heredoc_start",

					"nowdoc_body",

				},
				
			},
			
		},

		{
			Name: "nowdoc_body",
			Pattern: "(nowdoc_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "null",
			Pattern: "(null)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "nullsafe_member_access_expression",
			Pattern: "(nullsafe_member_access_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"array_creation_expression",

					"cast_expression",

					"class_constant_access_expression",

					"dynamic_variable_name",

					"encapsed_string",

					"expression",

					"function_call_expression",

					"heredoc",

					"member_access_expression",

					"member_call_expression",

					"name",

					"nowdoc",

					"nullsafe_member_access_expression",

					"nullsafe_member_call_expression",

					"object_creation_expression",

					"parenthesized_expression",

					"qualified_name",

					"relative_name",

					"scoped_call_expression",

					"scoped_property_access_expression",

					"string",

					"subscript_expression",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "nullsafe_member_call_expression",
			Pattern: "(nullsafe_member_call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"arguments",

					"array_creation_expression",

					"cast_expression",

					"class_constant_access_expression",

					"dynamic_variable_name",

					"encapsed_string",

					"expression",

					"function_call_expression",

					"heredoc",

					"member_access_expression",

					"member_call_expression",

					"name",

					"nowdoc",

					"nullsafe_member_access_expression",

					"nullsafe_member_call_expression",

					"object_creation_expression",

					"parenthesized_expression",

					"qualified_name",

					"relative_name",

					"scoped_call_expression",

					"scoped_property_access_expression",

					"string",

					"subscript_expression",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "object_creation_expression",
			Pattern: "(object_creation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "optional_type",
			Pattern: "(optional_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pair",
			Pattern: "(pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "primitive_type",
			Pattern: "(primitive_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "print_intrinsic",
			Pattern: "(print_intrinsic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "program",
			Pattern: "(program)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "property_declaration",
			Pattern: "(property_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"attribute_list",

					"type",

				},
				
			},
			
		},

		{
			Name: "property_element",
			Pattern: "(property_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"expression",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "property_hook",
			Pattern: "(property_hook)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"attribute_list",

					"compound_statement",

					"expression",

					"final_modifier",

					"formal_parameters",

					"reference_modifier",

				},
				
			},
			
		},

		{
			Name: "property_hook_list",
			Pattern: "(property_hook_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				Token: "self",
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "property_promotion_parameter",
			Pattern: "(property_promotion_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"attribute_list",

					"by_ref",

					"expression",

					"readonly_modifier",

					"type",

					"variable_name",

					"visibility_modifier",

				},
				
			},
			
		},

		{
			Name: "qualified_name",
			Pattern: "(qualified_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"namespace_name",

				},
				
			},
			
		},

		{
			Name: "readonly_modifier",
			Pattern: "(readonly_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "reference_assignment_expression",
			Pattern: "(reference_assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"cast_expression",

					"dynamic_variable_name",

					"expression",

					"function_call_expression",

					"list_literal",

					"member_access_expression",

					"member_call_expression",

					"nullsafe_member_access_expression",

					"nullsafe_member_call_expression",

					"scoped_call_expression",

					"scoped_property_access_expression",

					"subscript_expression",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "reference_modifier",
			Pattern: "(reference_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "relative_name",
			Pattern: "(relative_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"namespace",

					"namespace_name",

				},
				
			},
			
		},

		{
			Name: "relative_scope",
			Pattern: "(relative_scope)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "require_expression",
			Pattern: "(require_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "require_once_expression",
			Pattern: "(require_once_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return_statement",
			Pattern: "(return_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "scoped_call_expression",
			Pattern: "(scoped_call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"arguments",

					"array_creation_expression",

					"cast_expression",

					"class_constant_access_expression",

					"dynamic_variable_name",

					"encapsed_string",

					"expression",

					"function_call_expression",

					"heredoc",

					"member_access_expression",

					"member_call_expression",

					"name",

					"nowdoc",

					"nullsafe_member_access_expression",

					"nullsafe_member_call_expression",

					"object_creation_expression",

					"parenthesized_expression",

					"qualified_name",

					"relative_name",

					"relative_scope",

					"scoped_call_expression",

					"scoped_property_access_expression",

					"string",

					"subscript_expression",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "scoped_property_access_expression",
			Pattern: "(scoped_property_access_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"array_creation_expression",

					"cast_expression",

					"class_constant_access_expression",

					"dynamic_variable_name",

					"encapsed_string",

					"function_call_expression",

					"heredoc",

					"member_access_expression",

					"member_call_expression",

					"name",

					"nowdoc",

					"nullsafe_member_access_expression",

					"nullsafe_member_call_expression",

					"object_creation_expression",

					"parenthesized_expression",

					"qualified_name",

					"relative_name",

					"relative_scope",

					"scoped_call_expression",

					"scoped_property_access_expression",

					"string",

					"subscript_expression",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "sequence_expression",
			Pattern: "(sequence_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "shell_command_expression",
			Pattern: "(shell_command_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "simple_parameter",
			Pattern: "(simple_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"attribute_list",

					"expression",

					"reference_modifier",

					"type",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "static_modifier",
			Pattern: "(static_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "static_variable_declaration",
			Pattern: "(static_variable_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"expression",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "child:identifier",
				
				
				
			},
			
		},

		{
			Name: "string_content",
			Pattern: "(string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "subscript_expression",
			Pattern: "(subscript_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "switch_block",
			Pattern: "(switch_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "switch_statement",
			Pattern: "(switch_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"parenthesized_expression",

					"switch_block",

				},
				
			},
			
		},

		{
			Name: "throw_expression",
			Pattern: "(throw_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "trait_declaration",
			Pattern: "(trait_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"attribute_list",

					"declaration_list",

					"name",

				},
				
			},
			
		},

		{
			Name: "try_statement",
			Pattern: "(try_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				Children: []string{

					"compound_statement",

				},
				
			},
			
		},

		{
			Name: "type_list",
			Pattern: "(type_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unary_op_expression",
			Pattern: "(unary_op_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "UnaryOp",
				
				Roles: []string{

					"Operator",

				},
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "union_type",
			Pattern: "(union_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unset_statement",
			Pattern: "(unset_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "update_expression",
			Pattern: "(update_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"cast_expression",

					"dynamic_variable_name",

					"function_call_expression",

					"member_access_expression",

					"member_call_expression",

					"nullsafe_member_access_expression",

					"nullsafe_member_call_expression",

					"scoped_call_expression",

					"scoped_property_access_expression",

					"subscript_expression",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "use_as_clause",
			Pattern: "(use_as_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "use_declaration",
			Pattern: "(use_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "use_instead_of_clause",
			Pattern: "(use_instead_of_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "use_list",
			Pattern: "(use_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "variable_name",
			Pattern: "(variable_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "variadic_parameter",
			Pattern: "(variadic_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"attribute_list",

					"reference_modifier",

					"type",

					"variable_name",

				},
				
			},
			
		},

		{
			Name: "variadic_placeholder",
			Pattern: "(variadic_placeholder)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "variadic_unpacking",
			Pattern: "(variadic_unpacking)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "visibility_modifier",
			Pattern: "(visibility_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"colon_block",

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "yield_expression",
			Pattern: "(yield_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "abstract",
			Pattern: "(abstract)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "and",
			Pattern: "(and)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "array",
			Pattern: "(array)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "as",
			Pattern: "(as)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bool",
			Pattern: "(bool)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "bottom_type",
			Pattern: "(bottom_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "callable",
			Pattern: "(callable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "catch",
			Pattern: "(catch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "clone",
			Pattern: "(clone)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "const",
			Pattern: "(const)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "declare",
			Pattern: "(declare)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "echo",
			Pattern: "(echo)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "elseif",
			Pattern: "(elseif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "encoding",
			Pattern: "(encoding)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "enddeclare",
			Pattern: "(enddeclare)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "endfor",
			Pattern: "(endfor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "endforeach",
			Pattern: "(endforeach)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "endif",
			Pattern: "(endif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "endswitch",
			Pattern: "(endswitch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "endwhile",
			Pattern: "(endwhile)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "exit",
			Pattern: "(exit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "extends",
			Pattern: "(extends)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "final",
			Pattern: "(final)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "finally",
			Pattern: "(finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "float",
			Pattern: "(float)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "float",
			Pattern: "(float)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "fn",
			Pattern: "(fn)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "foreach",
			Pattern: "(foreach)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "from",
			Pattern: "(from)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "function",
			Pattern: "(function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "global",
			Pattern: "(global)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "goto",
			Pattern: "(goto)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "heredoc_end",
			Pattern: "(heredoc_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "heredoc_start",
			Pattern: "(heredoc_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "implements",
			Pattern: "(implements)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "include",
			Pattern: "(include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "include_once",
			Pattern: "(include_once)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "instanceof",
			Pattern: "(instanceof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "insteadof",
			Pattern: "(insteadof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "int",
			Pattern: "(int)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "integer",
			Pattern: "(integer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "interface",
			Pattern: "(interface)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "iterable",
			Pattern: "(iterable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "list",
			Pattern: "(list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "match",
			Pattern: "(match)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				
				Roles: []string{

					"Match",

				},
				
				
			},
			
		},

		{
			Name: "mixed",
			Pattern: "(mixed)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "namespace",
			Pattern: "(namespace)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "new",
			Pattern: "(new)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "nowdoc_string",
			Pattern: "(nowdoc_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "null",
			Pattern: "(null)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "operation",
			Pattern: "(operation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "or",
			Pattern: "(or)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "parent",
			Pattern: "(parent)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "php_tag",
			Pattern: "(php_tag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "print",
			Pattern: "(print)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "private",
			Pattern: "(private)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "protected",
			Pattern: "(protected)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "public",
			Pattern: "(public)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "readonly",
			Pattern: "(readonly)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "require",
			Pattern: "(require)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "require_once",
			Pattern: "(require_once)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "self",
			Pattern: "(self)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "static",
			Pattern: "(static)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "strict_types",
			Pattern: "(strict_types)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "switch",
			Pattern: "(switch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				Roles: []string{

					"Switch",

				},
				
				
			},
			
		},

		{
			Name: "throw",
			Pattern: "(throw)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				Token: "self",
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "ticks",
			Pattern: "(ticks)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "trait",
			Pattern: "(trait)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "unset",
			Pattern: "(unset)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "use",
			Pattern: "(use)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "var_modifier",
			Pattern: "(var_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "void",
			Pattern: "(void)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "xor",
			Pattern: "(xor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &phpPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *phpPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *phpPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *phpPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *phpPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *phpPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// propertiesPatternMatcher provides pre-compiled pattern matching for properties
type propertiesPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newpropertiesPatternMatcher() *propertiesPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "escape",
			Pattern: "(escape)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "file",
			Pattern: "(file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "index",
			Pattern: "(index)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				
				Roles: []string{

					"Index",

				},
				
				
			},
			
		},

		{
			Name: "key",
			Pattern: "(key)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "property",
			Pattern: "(property)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "secret",
			Pattern: "(secret)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "substitution",
			Pattern: "(substitution)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"escape",

					"substitution",

				},
				
			},
			
		},

		{
			Name: "value",
			Pattern: "(value)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &propertiesPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *propertiesPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *propertiesPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *propertiesPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *propertiesPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *propertiesPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// protoPatternMatcher provides pre-compiled pattern matching for proto
type protoPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newprotoPatternMatcher() *protoPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "block_lit",
			Pattern: "(block_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "bool",
			Pattern: "(bool)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "constant",
			Pattern: "(constant)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "edition",
			Pattern: "(edition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"string",

				},
				
			},
			
		},

		{
			Name: "empty_statement",
			Pattern: "(empty_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enum_body",
			Pattern: "(enum_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enum_field",
			Pattern: "(enum_field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Body",

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enum_name",
			Pattern: "(enum_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enum_value_option",
			Pattern: "(enum_value_option)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "extend",
			Pattern: "(extend)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extensions",
			Pattern: "(extensions)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field",
			Pattern: "(field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "field_number",
			Pattern: "(field_number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "field_option",
			Pattern: "(field_option)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "field_options",
			Pattern: "(field_options)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "full_ident",
			Pattern: "(full_ident)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"string",

				},
				
			},
			
		},

		{
			Name: "int_lit",
			Pattern: "(int_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "key_type",
			Pattern: "(key_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "map_field",
			Pattern: "(map_field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "message",
			Pattern: "(message)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "message_body",
			Pattern: "(message_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "message_name",
			Pattern: "(message_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "message_or_enum_type",
			Pattern: "(message_or_enum_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "oneof",
			Pattern: "(oneof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "oneof_field",
			Pattern: "(oneof_field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "option",
			Pattern: "(option)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "package",
			Pattern: "(package)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Package",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "range",
			Pattern: "(range)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ranges",
			Pattern: "(ranges)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "reserved",
			Pattern: "(reserved)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "reserved_field_names",
			Pattern: "(reserved_field_names)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "rpc",
			Pattern: "(rpc)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "rpc_name",
			Pattern: "(rpc_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "service",
			Pattern: "(service)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "service_name",
			Pattern: "(service_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "source_file",
			Pattern: "(source_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "syntax",
			Pattern: "(syntax)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bool",
			Pattern: "(bool)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "bytes",
			Pattern: "(bytes)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "decimal_lit",
			Pattern: "(decimal_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "double",
			Pattern: "(double)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "edition",
			Pattern: "(edition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extend",
			Pattern: "(extend)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "extensions",
			Pattern: "(extensions)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "fixed32",
			Pattern: "(fixed32)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "fixed64",
			Pattern: "(fixed64)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "float",
			Pattern: "(float)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "float_lit",
			Pattern: "(float_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "hex_lit",
			Pattern: "(hex_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "int32",
			Pattern: "(int32)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "int64",
			Pattern: "(int64)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "map",
			Pattern: "(map)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "max",
			Pattern: "(max)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "message",
			Pattern: "(message)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "octal_lit",
			Pattern: "(octal_lit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "oneof",
			Pattern: "(oneof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "option",
			Pattern: "(option)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "optional",
			Pattern: "(optional)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "package",
			Pattern: "(package)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Package",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "public",
			Pattern: "(public)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "repeated",
			Pattern: "(repeated)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "required",
			Pattern: "(required)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "reserved",
			Pattern: "(reserved)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "reserved_identifier",
			Pattern: "(reserved_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "returns",
			Pattern: "(returns)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "rpc",
			Pattern: "(rpc)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "service",
			Pattern: "(service)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "sfixed32",
			Pattern: "(sfixed32)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "sfixed64",
			Pattern: "(sfixed64)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "sint32",
			Pattern: "(sint32)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "sint64",
			Pattern: "(sint64)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "stream",
			Pattern: "(stream)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "syntax",
			Pattern: "(syntax)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "to",
			Pattern: "(to)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "uint32",
			Pattern: "(uint32)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "uint64",
			Pattern: "(uint64)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "weak",
			Pattern: "(weak)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &protoPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *protoPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *protoPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *protoPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *protoPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *protoPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// proximaPatternMatcher provides pre-compiled pattern matching for proxima
type proximaPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newproximaPatternMatcher() *proximaPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "arg_name",
			Pattern: "(arg_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "argument",
			Pattern: "(argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "document",
			Pattern: "(document)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "tag",
			Pattern: "(tag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "escaped_char",
			Pattern: "(escaped_char)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "tag_at",
			Pattern: "(tag_at)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "text",
			Pattern: "(text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &proximaPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *proximaPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *proximaPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *proximaPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *proximaPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *proximaPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// prqlPatternMatcher provides pre-compiled pattern matching for prql
type prqlPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newprqlPatternMatcher() *prqlPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "aggregate",
			Pattern: "(aggregate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "aggregate_operation",
			Pattern: "(aggregate_operation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "append",
			Pattern: "(append)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "assignment",
			Pattern: "(assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"binary_expression",

					"case",

					"date",

					"f_string",

					"field",

					"function_call",

					"keyword_average",

					"keyword_avg",

					"keyword_count_distinct",

					"keyword_max",

					"keyword_min",

					"keyword_stddev",

					"keyword_sum",

					"literal",

					"s_string",

					"time",

					"timestamp",

				},
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"binary_expression",

					"date",

					"f_string",

					"field",

					"literal",

					"s_string",

					"time",

					"timestamp",

				},
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Operator",

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "case_condition",
			Pattern: "(case_condition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"literal",

				},
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "conditions",
			Pattern: "(conditions)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "date",
			Pattern: "(date)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "decimal_number",
			Pattern: "(decimal_number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "derives",
			Pattern: "(derives)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "direction",
			Pattern: "(direction)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "f_string",
			Pattern: "(f_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field",
			Pattern: "(field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "filter",
			Pattern: "(filter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"binary_expression",

					"date",

					"f_string",

					"field",

					"literal",

					"s_string",

					"time",

					"timestamp",

				},
				
			},
			
		},

		{
			Name: "from",
			Pattern: "(from)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "from_text",
			Pattern: "(from_text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "function_call",
			Pattern: "(function_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "function_definition",
			Pattern: "(function_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Call",

					"Function",

					"Declaration",

				},
				Children: []string{

					"binary_expression",

					"identifier",

					"s_string",

				},
				
			},
			
		},

		{
			Name: "group",
			Pattern: "(group)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "integer",
			Pattern: "(integer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "joins",
			Pattern: "(joins)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"term",

				},
				
			},
			
		},

		{
			Name: "literal",
			Pattern: "(literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "literal_string",
			Pattern: "(literal_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "loop",
			Pattern: "(loop)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "module_call",
			Pattern: "(module_call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "parameter",
			Pattern: "(parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"identifier",

					"literal",

				},
				
			},
			
		},

		{
			Name: "pipeline",
			Pattern: "(pipeline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "program",
			Pattern: "(program)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "prql",
			Pattern: "(prql)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "File",
				Token: "self",
				
				Children: []string{

					"literal",

					"target",

				},
				
			},
			
		},

		{
			Name: "range",
			Pattern: "(range)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"date",

					"integer",

				},
				
			},
			
		},

		{
			Name: "s_string",
			Pattern: "(s_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "select",
			Pattern: "(select)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "sorts",
			Pattern: "(sorts)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "takes",
			Pattern: "(takes)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "target",
			Pattern: "(target)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "term",
			Pattern: "(term)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"assignment",

					"binary_expression",

					"date",

					"f_string",

					"field",

					"identifier",

					"literal",

					"s_string",

					"time",

					"timestamp",

				},
				
			},
			
		},

		{
			Name: "time",
			Pattern: "(time)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "timestamp",
			Pattern: "(timestamp)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "timezone",
			Pattern: "(timezone)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "transforms",
			Pattern: "(transforms)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "variable",
			Pattern: "(variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "window",
			Pattern: "(window)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "window_definitions",
			Pattern: "(window_definitions)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "T",
			Pattern: "(T)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "Z",
			Pattern: "(Z)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_",
			Pattern: "(_)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bang",
			Pattern: "(bang)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_aggregate",
			Pattern: "(keyword_aggregate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_append",
			Pattern: "(keyword_append)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_average",
			Pattern: "(keyword_average)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_avg",
			Pattern: "(keyword_avg)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_case",
			Pattern: "(keyword_case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "keyword_count",
			Pattern: "(keyword_count)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "keyword_count_distinct",
			Pattern: "(keyword_count_distinct)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_csv",
			Pattern: "(keyword_csv)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_derive",
			Pattern: "(keyword_derive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_expanding",
			Pattern: "(keyword_expanding)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_false",
			Pattern: "(keyword_false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_filter",
			Pattern: "(keyword_filter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_format",
			Pattern: "(keyword_format)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "keyword_from",
			Pattern: "(keyword_from)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_from_text",
			Pattern: "(keyword_from_text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_full",
			Pattern: "(keyword_full)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_group",
			Pattern: "(keyword_group)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_inner",
			Pattern: "(keyword_inner)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_intersect",
			Pattern: "(keyword_intersect)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_join",
			Pattern: "(keyword_join)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_json",
			Pattern: "(keyword_json)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_left",
			Pattern: "(keyword_left)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_let",
			Pattern: "(keyword_let)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_loop",
			Pattern: "(keyword_loop)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "keyword_max",
			Pattern: "(keyword_max)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_min",
			Pattern: "(keyword_min)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_null",
			Pattern: "(keyword_null)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_prql",
			Pattern: "(keyword_prql)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_rank",
			Pattern: "(keyword_rank)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_remove",
			Pattern: "(keyword_remove)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_right",
			Pattern: "(keyword_right)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_rolling",
			Pattern: "(keyword_rolling)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_rows",
			Pattern: "(keyword_rows)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_select",
			Pattern: "(keyword_select)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_side",
			Pattern: "(keyword_side)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_sort",
			Pattern: "(keyword_sort)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_stddev",
			Pattern: "(keyword_stddev)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_sum",
			Pattern: "(keyword_sum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_take",
			Pattern: "(keyword_take)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_target",
			Pattern: "(keyword_target)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_true",
			Pattern: "(keyword_true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyword_version",
			Pattern: "(keyword_version)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_window",
			Pattern: "(keyword_window)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pipe",
			Pattern: "(pipe)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &prqlPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *prqlPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *prqlPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *prqlPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *prqlPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *prqlPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// psvPatternMatcher provides pre-compiled pattern matching for psv
type psvPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newpsvPatternMatcher() *psvPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "boolean",
			Pattern: "(boolean)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "document",
			Pattern: "(document)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field",
			Pattern: "(field)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "float",
			Pattern: "(float)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "number",
			Pattern: "(number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "row",
			Pattern: "(row)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "text",
			Pattern: "(text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &psvPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *psvPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *psvPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *psvPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *psvPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *psvPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// pythonPatternMatcher provides pre-compiled pattern matching for python
type pythonPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newpythonPatternMatcher() *pythonPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "_compound_statement",
			Pattern: "(_compound_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_simple_statement",
			Pattern: "(_simple_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "expression",
			Pattern: "(expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "parameter",
			Pattern: "(parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "pattern",
			Pattern: "(pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "primary_expression",
			Pattern: "(primary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "aliased_import",
			Pattern: "(aliased_import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				Children: []string{

					"dotted_name",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "argument_list",
			Pattern: "(argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "as_pattern",
			Pattern: "(as_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"as_pattern_target",

				},
				
			},
			
		},

		{
			Name: "assert_statement",
			Pattern: "(assert_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "assignment",
			Pattern: "(assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"assignment",

					"augmented_assignment",

					"expression",

					"expression_list",

					"pattern",

					"pattern_list",

					"type",

					"yield",

				},
				
			},
			
		},

		{
			Name: "attribute",
			Pattern: "(attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				Children: []string{

					"identifier",

					"primary_expression",

				},
				
			},
			
		},

		{
			Name: "augmented_assignment",
			Pattern: "(augmented_assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"assignment",

					"augmented_assignment",

					"expression",

					"expression_list",

					"pattern",

					"pattern_list",

					"yield",

				},
				
			},
			
		},

		{
			Name: "await",
			Pattern: "(await)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "binary_operator",
			Pattern: "(binary_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "BinaryOp",
				
				Roles: []string{

					"Operator",

				},
				Children: []string{

					"primary_expression",

				},
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"case_clause",

				},
				
			},
			
		},

		{
			Name: "boolean_operator",
			Pattern: "(boolean_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"and",

					"expression",

					"or",

				},
				
			},
			
		},

		{
			Name: "break_statement",
			Pattern: "(break_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "call",
			Pattern: "(call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"argument_list",

					"generator_expression",

					"primary_expression",

				},
				
			},
			
		},

		{
			Name: "case_clause",
			Pattern: "(case_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"block",

					"if_clause",

				},
				
			},
			
		},

		{
			Name: "case_pattern",
			Pattern: "(case_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "chevron",
			Pattern: "(chevron)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "class_definition",
			Pattern: "(class_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"argument_list",

					"block",

					"identifier",

					"type_parameter",

				},
				
			},
			
		},

		{
			Name: "class_pattern",
			Pattern: "(class_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Declaration",

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "comparison_operator",
			Pattern: "(comparison_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"in",

					"is",

				},
				
			},
			
		},

		{
			Name: "complex_pattern",
			Pattern: "(complex_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "concatenated_string",
			Pattern: "(concatenated_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "conditional_expression",
			Pattern: "(conditional_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "constrained_type",
			Pattern: "(constrained_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "continue_statement",
			Pattern: "(continue_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "decorated_definition",
			Pattern: "(decorated_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"class_definition",

					"function_definition",

				},
				
			},
			
		},

		{
			Name: "decorator",
			Pattern: "(decorator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Decorator",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "default_parameter",
			Pattern: "(default_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"expression",

					"identifier",

					"tuple_pattern",

				},
				
			},
			
		},

		{
			Name: "delete_statement",
			Pattern: "(delete_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "dict_pattern",
			Pattern: "(dict_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Dict",
				
				
				Children: []string{

					"_",

					"case_pattern",

					"class_pattern",

					"complex_pattern",

					"concatenated_string",

					"dict_pattern",

					"dotted_name",

					"false",

					"float",

					"integer",

					"list_pattern",

					"none",

					"splat_pattern",

					"string",

					"true",

					"tuple_pattern",

					"union_pattern",

				},
				
			},
			
		},

		{
			Name: "dictionary",
			Pattern: "(dictionary)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Dict",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "dictionary_comprehension",
			Pattern: "(dictionary_comprehension)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Dict",
				
				
				Children: []string{

					"pair",

				},
				
			},
			
		},

		{
			Name: "dictionary_splat",
			Pattern: "(dictionary_splat)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Dict",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "dictionary_splat_pattern",
			Pattern: "(dictionary_splat_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Dict",
				
				
				
				
			},
			
		},

		{
			Name: "dotted_name",
			Pattern: "(dotted_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "elif_clause",
			Pattern: "(elif_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"block",

					"expression",

				},
				
			},
			
		},

		{
			Name: "else_clause",
			Pattern: "(else_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "except_clause",
			Pattern: "(except_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "except_group_clause",
			Pattern: "(except_group_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "exec_statement",
			Pattern: "(exec_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "expression_list",
			Pattern: "(expression_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "expression_statement",
			Pattern: "(expression_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "finally_clause",
			Pattern: "(finally_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "for_in_clause",
			Pattern: "(for_in_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"expression",

					"pattern",

					"pattern_list",

				},
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"block",

					"else_clause",

					"expression",

					"expression_list",

					"pattern",

					"pattern_list",

				},
				
			},
			
		},

		{
			Name: "format_expression",
			Pattern: "(format_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"expression_list",

					"format_specifier",

					"pattern_list",

					"type_conversion",

					"yield",

				},
				
			},
			
		},

		{
			Name: "format_specifier",
			Pattern: "(format_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "function_definition",
			Pattern: "(function_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"block",

					"identifier",

					"parameters",

					"type",

					"type_parameter",

				},
				
			},
			
		},

		{
			Name: "future_import_statement",
			Pattern: "(future_import_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Import",

				},
				Children: []string{

					"aliased_import",

					"dotted_name",

				},
				
			},
			
		},

		{
			Name: "generator_expression",
			Pattern: "(generator_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Generator",
				
				Roles: []string{

					"Generator",

				},
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "generic_type",
			Pattern: "(generic_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "global_statement",
			Pattern: "(global_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "if_clause",
			Pattern: "(if_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				Roles: []string{

					"Condition",

				},
				Children: []string{

					"block",

					"elif_clause",

					"else_clause",

					"expression",

				},
				
			},
			
		},

		{
			Name: "import_from_statement",
			Pattern: "(import_from_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"aliased_import",

					"dotted_name",

					"relative_import",

				},
				
			},
			
		},

		{
			Name: "import_prefix",
			Pattern: "(import_prefix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "import_statement",
			Pattern: "(import_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"aliased_import",

					"dotted_name",

				},
				
			},
			
		},

		{
			Name: "interpolation",
			Pattern: "(interpolation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"expression_list",

					"format_specifier",

					"pattern_list",

					"type_conversion",

					"yield",

				},
				
			},
			
		},

		{
			Name: "keyword_argument",
			Pattern: "(keyword_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "keyword_pattern",
			Pattern: "(keyword_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "keyword_separator",
			Pattern: "(keyword_separator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "lambda",
			Pattern: "(lambda)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				
				Roles: []string{

					"Lambda",

				},
				Children: []string{

					"expression",

					"lambda_parameters",

				},
				
			},
			
		},

		{
			Name: "lambda_parameters",
			Pattern: "(lambda_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "list",
			Pattern: "(list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "list_comprehension",
			Pattern: "(list_comprehension)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "list_pattern",
			Pattern: "(list_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "list_splat",
			Pattern: "(list_splat)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "list_splat_pattern",
			Pattern: "(list_splat_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "match_statement",
			Pattern: "(match_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				Token: "self",
				Roles: []string{

					"Match",

				},
				Children: []string{

					"block",

					"expression",

				},
				
			},
			
		},

		{
			Name: "member_type",
			Pattern: "(member_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "module",
			Pattern: "(module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "named_expression",
			Pattern: "(named_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "nonlocal_statement",
			Pattern: "(nonlocal_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "not_operator",
			Pattern: "(not_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "pair",
			Pattern: "(pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "parameters",
			Pattern: "(parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "parenthesized_list_splat",
			Pattern: "(parenthesized_list_splat)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "pass_statement",
			Pattern: "(pass_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pattern_list",
			Pattern: "(pattern_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "positional_separator",
			Pattern: "(positional_separator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "print_statement",
			Pattern: "(print_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "raise_statement",
			Pattern: "(raise_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "relative_import",
			Pattern: "(relative_import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return_statement",
			Pattern: "(return_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Import",

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "set",
			Pattern: "(set)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "set_comprehension",
			Pattern: "(set_comprehension)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "slice",
			Pattern: "(slice)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Slice",
				
				
				
				
			},
			
		},

		{
			Name: "splat_pattern",
			Pattern: "(splat_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "splat_type",
			Pattern: "(splat_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_content",
			Pattern: "(string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "subscript",
			Pattern: "(subscript)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

					"primary_expression",

					"slice",

				},
				
			},
			
		},

		{
			Name: "try_statement",
			Pattern: "(try_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "tuple",
			Pattern: "(tuple)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "tuple_pattern",
			Pattern: "(tuple_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_alias_statement",
			Pattern: "(type_alias_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"type",

				},
				
			},
			
		},

		{
			Name: "type_parameter",
			Pattern: "(type_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "typed_default_parameter",
			Pattern: "(typed_default_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"expression",

					"identifier",

					"type",

				},
				
			},
			
		},

		{
			Name: "typed_parameter",
			Pattern: "(typed_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Parameter",

				},
				Children: []string{

					"type",

				},
				
			},
			
		},

		{
			Name: "unary_operator",
			Pattern: "(unary_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "UnaryOp",
				
				Roles: []string{

					"Operator",

				},
				Children: []string{

					"primary_expression",

				},
				
			},
			
		},

		{
			Name: "union_pattern",
			Pattern: "(union_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "union_type",
			Pattern: "(union_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"block",

					"else_clause",

					"expression",

				},
				
			},
			
		},

		{
			Name: "wildcard_import",
			Pattern: "(wildcard_import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "with_clause",
			Pattern: "(with_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "with_item",
			Pattern: "(with_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "with_statement",
			Pattern: "(with_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "_",
			Pattern: "(_)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "__future__",
			Pattern: "(__future__)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "and",
			Pattern: "(and)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "as",
			Pattern: "(as)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "assert",
			Pattern: "(assert)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "async",
			Pattern: "(async)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "await",
			Pattern: "(await)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "def",
			Pattern: "(def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "del",
			Pattern: "(del)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "elif",
			Pattern: "(elif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ellipsis",
			Pattern: "(ellipsis)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "escape_interpolation",
			Pattern: "(escape_interpolation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "except",
			Pattern: "(except)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "exec",
			Pattern: "(exec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "finally",
			Pattern: "(finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "float",
			Pattern: "(float)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "from",
			Pattern: "(from)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "global",
			Pattern: "(global)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "integer",
			Pattern: "(integer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "is",
			Pattern: "(is)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "lambda",
			Pattern: "(lambda)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				
				Roles: []string{

					"Lambda",

				},
				
				
			},
			
		},

		{
			Name: "line_continuation",
			Pattern: "(line_continuation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "match",
			Pattern: "(match)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				
				Roles: []string{

					"Match",

				},
				
				
			},
			
		},

		{
			Name: "none",
			Pattern: "(none)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "nonlocal",
			Pattern: "(nonlocal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "not",
			Pattern: "(not)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "or",
			Pattern: "(or)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pass",
			Pattern: "(pass)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "print",
			Pattern: "(print)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "raise",
			Pattern: "(raise)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "string_end",
			Pattern: "(string_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_start",
			Pattern: "(string_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_conversion",
			Pattern: "(type_conversion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "with",
			Pattern: "(with)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &pythonPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *pythonPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *pythonPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *pythonPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *pythonPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *pythonPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// rubyPatternMatcher provides pre-compiled pattern matching for ruby
type rubyPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newrubyPatternMatcher() *rubyPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "_arg",
			Pattern: "(_arg)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_call_operator",
			Pattern: "(_call_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "_expression",
			Pattern: "(_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_lhs",
			Pattern: "(_lhs)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_method_name",
			Pattern: "(_method_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "_nonlocal_variable",
			Pattern: "(_nonlocal_variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "_pattern_constant",
			Pattern: "(_pattern_constant)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "_pattern_expr",
			Pattern: "(_pattern_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "_pattern_expr_basic",
			Pattern: "(_pattern_expr_basic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "_pattern_primitive",
			Pattern: "(_pattern_primitive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "_pattern_top_expr_body",
			Pattern: "(_pattern_top_expr_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "_primary",
			Pattern: "(_primary)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "_simple_numeric",
			Pattern: "(_simple_numeric)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_statement",
			Pattern: "(_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_variable",
			Pattern: "(_variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "alias",
			Pattern: "(alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"_method_name",

				},
				
			},
			
		},

		{
			Name: "alternative_pattern",
			Pattern: "(alternative_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"_pattern_expr_basic",

				},
				
			},
			
		},

		{
			Name: "argument_list",
			Pattern: "(argument_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "array",
			Pattern: "(array)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "array_pattern",
			Pattern: "(array_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"_pattern_constant",

				},
				
			},
			
		},

		{
			Name: "as_pattern",
			Pattern: "(as_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"_pattern_expr",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "assignment",
			Pattern: "(assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"_expression",

					"_lhs",

					"left_assignment_list",

					"rescue_modifier",

					"right_assignment_list",

					"splat_argument",

				},
				
			},
			
		},

		{
			Name: "bare_string",
			Pattern: "(bare_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bare_symbol",
			Pattern: "(bare_symbol)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "begin",
			Pattern: "(begin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "begin_block",
			Pattern: "(begin_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "binary",
			Pattern: "(binary)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"_simple_numeric",

					"and",

					"or",

				},
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"block_body",

					"block_parameters",

				},
				
			},
			
		},

		{
			Name: "block_argument",
			Pattern: "(block_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_body",
			Pattern: "(block_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_parameter",
			Pattern: "(block_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "block_parameters",
			Pattern: "(block_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Parameter",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "body_statement",
			Pattern: "(body_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "call",
			Pattern: "(call)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"_call_operator",

					"_primary",

					"_variable",

					"argument_list",

					"block",

					"do_block",

					"operator",

				},
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"_statement",

				},
				
			},
			
		},

		{
			Name: "case_match",
			Pattern: "(case_match)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"_statement",

					"else",

					"in_clause",

				},
				
			},
			
		},

		{
			Name: "chained_string",
			Pattern: "(chained_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"body_statement",

					"constant",

					"scope_resolution",

					"superclass",

				},
				
			},
			
		},

		{
			Name: "complex",
			Pattern: "(complex)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "conditional",
			Pattern: "(conditional)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_arg",

				},
				
			},
			
		},

		{
			Name: "constant",
			Pattern: "(constant)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "delimited_symbol",
			Pattern: "(delimited_symbol)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "destructured_left_assignment",
			Pattern: "(destructured_left_assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "destructured_parameter",
			Pattern: "(destructured_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "do_block",
			Pattern: "(do_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				Children: []string{

					"block_parameters",

					"body_statement",

				},
				
			},
			
		},

		{
			Name: "element_reference",
			Pattern: "(element_reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"_primary",

					"block",

					"do_block",

				},
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "elsif",
			Pattern: "(elsif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_statement",

					"else",

					"elsif",

					"then",

				},
				
			},
			
		},

		{
			Name: "empty_statement",
			Pattern: "(empty_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "end_block",
			Pattern: "(end_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "ensure",
			Pattern: "(ensure)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "exception_variable",
			Pattern: "(exception_variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "exceptions",
			Pattern: "(exceptions)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expression_reference_pattern",
			Pattern: "(expression_reference_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "find_pattern",
			Pattern: "(find_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"_pattern_constant",

				},
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"_lhs",

					"do",

					"in",

					"left_assignment_list",

				},
				
			},
			
		},

		{
			Name: "forward_argument",
			Pattern: "(forward_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "forward_parameter",
			Pattern: "(forward_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "hash",
			Pattern: "(hash)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "hash_key_symbol",
			Pattern: "(hash_key_symbol)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "hash_pattern",
			Pattern: "(hash_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"_pattern_constant",

				},
				
			},
			
		},

		{
			Name: "hash_splat_argument",
			Pattern: "(hash_splat_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "hash_splat_nil",
			Pattern: "(hash_splat_nil)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "hash_splat_parameter",
			Pattern: "(hash_splat_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "heredoc_body",
			Pattern: "(heredoc_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"_statement",

					"else",

					"elsif",

					"then",

				},
				
			},
			
		},

		{
			Name: "if_guard",
			Pattern: "(if_guard)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "if_modifier",
			Pattern: "(if_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"_expression",

					"_statement",

				},
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "in_clause",
			Pattern: "(in_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_pattern_top_expr_body",

					"if_guard",

					"then",

					"unless_guard",

				},
				
			},
			
		},

		{
			Name: "interpolation",
			Pattern: "(interpolation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyword_parameter",
			Pattern: "(keyword_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_arg",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "keyword_pattern",
			Pattern: "(keyword_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Pattern",

				},
				Children: []string{

					"_pattern_expr",

					"hash_key_symbol",

					"string",

				},
				
			},
			
		},

		{
			Name: "lambda",
			Pattern: "(lambda)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				
				Roles: []string{

					"Lambda",

				},
				Children: []string{

					"block",

					"do_block",

					"lambda_parameters",

				},
				
			},
			
		},

		{
			Name: "lambda_parameters",
			Pattern: "(lambda_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "left_assignment_list",
			Pattern: "(left_assignment_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				
				
			},
			
		},

		{
			Name: "match_pattern",
			Pattern: "(match_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"_arg",

					"_pattern_top_expr_body",

				},
				
			},
			
		},

		{
			Name: "method",
			Pattern: "(method)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"_arg",

					"_method_name",

					"body_statement",

					"method_parameters",

					"rescue_modifier",

				},
				
			},
			
		},

		{
			Name: "method_parameters",
			Pattern: "(method_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "module",
			Pattern: "(module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				Children: []string{

					"body_statement",

					"constant",

					"scope_resolution",

				},
				
			},
			
		},

		{
			Name: "next",
			Pattern: "(next)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "nil",
			Pattern: "(nil)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "operator",
			Pattern: "(operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "operator_assignment",
			Pattern: "(operator_assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"_expression",

					"_lhs",

					"rescue_modifier",

				},
				
			},
			
		},

		{
			Name: "optional_parameter",
			Pattern: "(optional_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_arg",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "pair",
			Pattern: "(pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_arg",

					"hash_key_symbol",

					"string",

				},
				
			},
			
		},

		{
			Name: "parenthesized_pattern",
			Pattern: "(parenthesized_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "parenthesized_statements",
			Pattern: "(parenthesized_statements)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pattern",
			Pattern: "(pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "program",
			Pattern: "(program)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "range",
			Pattern: "(range)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "File",
				Token: "self",
				
				Children: []string{

					"_arg",

					"_pattern_primitive",

				},
				
			},
			
		},

		{
			Name: "rational",
			Pattern: "(rational)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "redo",
			Pattern: "(redo)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "regex",
			Pattern: "(regex)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "rescue",
			Pattern: "(rescue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"exception_variable",

					"exceptions",

					"then",

				},
				
			},
			
		},

		{
			Name: "rescue_modifier",
			Pattern: "(rescue_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"_arg",

					"_expression",

					"_statement",

				},
				
			},
			
		},

		{
			Name: "rest_assignment",
			Pattern: "(rest_assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				
				
			},
			
		},

		{
			Name: "retry",
			Pattern: "(retry)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "right_assignment_list",
			Pattern: "(right_assignment_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				
				
			},
			
		},

		{
			Name: "scope_resolution",
			Pattern: "(scope_resolution)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"_pattern_constant",

					"_primary",

					"constant",

				},
				
			},
			
		},

		{
			Name: "setter",
			Pattern: "(setter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Setter",
				
				Roles: []string{

					"Setter",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "singleton_class",
			Pattern: "(singleton_class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"_arg",

					"body_statement",

				},
				
			},
			
		},

		{
			Name: "singleton_method",
			Pattern: "(singleton_method)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"_arg",

					"_method_name",

					"_variable",

					"body_statement",

					"method_parameters",

					"rescue_modifier",

				},
				
			},
			
		},

		{
			Name: "splat_argument",
			Pattern: "(splat_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "splat_parameter",
			Pattern: "(splat_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "string_array",
			Pattern: "(string_array)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "subshell",
			Pattern: "(subshell)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "superclass",
			Pattern: "(superclass)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "symbol_array",
			Pattern: "(symbol_array)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "test_pattern",
			Pattern: "(test_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"_arg",

					"_pattern_top_expr_body",

				},
				
			},
			
		},

		{
			Name: "then",
			Pattern: "(then)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unary",
			Pattern: "(unary)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"_simple_numeric",

					"not",

					"parenthesized_statements",

				},
				
			},
			
		},

		{
			Name: "undef",
			Pattern: "(undef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unless",
			Pattern: "(unless)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_statement",

					"else",

					"elsif",

					"then",

				},
				
			},
			
		},

		{
			Name: "unless_guard",
			Pattern: "(unless_guard)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "unless_modifier",
			Pattern: "(unless_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"_expression",

					"_statement",

				},
				
			},
			
		},

		{
			Name: "until",
			Pattern: "(until)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_statement",

					"do",

				},
				
			},
			
		},

		{
			Name: "until_modifier",
			Pattern: "(until_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"_expression",

					"_statement",

				},
				
			},
			
		},

		{
			Name: "variable_reference_pattern",
			Pattern: "(variable_reference_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"_nonlocal_variable",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "when",
			Pattern: "(when)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"pattern",

					"then",

				},
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"_statement",

					"do",

				},
				
			},
			
		},

		{
			Name: "while_modifier",
			Pattern: "(while_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"_expression",

					"_statement",

				},
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "BEGIN",
			Pattern: "(BEGIN)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "END",
			Pattern: "(END)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "alias",
			Pattern: "(alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "and",
			Pattern: "(and)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "begin",
			Pattern: "(begin)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "character",
			Pattern: "(character)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "class_variable",
			Pattern: "(class_variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "def",
			Pattern: "(def)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "elsif",
			Pattern: "(elsif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "encoding",
			Pattern: "(encoding)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "end",
			Pattern: "(end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ensure",
			Pattern: "(ensure)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "file",
			Pattern: "(file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "float",
			Pattern: "(float)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "File",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "global_variable",
			Pattern: "(global_variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "heredoc_beginning",
			Pattern: "(heredoc_beginning)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "heredoc_content",
			Pattern: "(heredoc_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "heredoc_end",
			Pattern: "(heredoc_end)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "i",
			Pattern: "(i)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "instance_variable",
			Pattern: "(instance_variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "integer",
			Pattern: "(integer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "line",
			Pattern: "(line)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "module",
			Pattern: "(module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "next",
			Pattern: "(next)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "nil",
			Pattern: "(nil)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "not",
			Pattern: "(not)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "or",
			Pattern: "(or)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "r",
			Pattern: "(r)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "redo",
			Pattern: "(redo)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "rescue",
			Pattern: "(rescue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "retry",
			Pattern: "(retry)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "ri",
			Pattern: "(ri)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "self",
			Pattern: "(self)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "simple_symbol",
			Pattern: "(simple_symbol)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_content",
			Pattern: "(string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "super",
			Pattern: "(super)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "then",
			Pattern: "(then)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "undef",
			Pattern: "(undef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "uninterpreted",
			Pattern: "(uninterpreted)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unless",
			Pattern: "(unless)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "until",
			Pattern: "(until)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "when",
			Pattern: "(when)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &rubyPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *rubyPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *rubyPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *rubyPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *rubyPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *rubyPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// rustPatternMatcher provides pre-compiled pattern matching for rust
type rustPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newrustPatternMatcher() *rustPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "_declaration_statement",
			Pattern: "(_declaration_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_expression",
			Pattern: "(_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_literal",
			Pattern: "(_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "_literal_pattern",
			Pattern: "(_literal_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "_pattern",
			Pattern: "(_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "_type",
			Pattern: "(_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "abstract_type",
			Pattern: "(abstract_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"bounded_type",

					"function_type",

					"generic_type",

					"removed_trait_bound",

					"scoped_type_identifier",

					"tuple_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "arguments",
			Pattern: "(arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "array_expression",
			Pattern: "(array_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "array_type",
			Pattern: "(array_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_expression",

					"_type",

				},
				
			},
			
		},

		{
			Name: "assignment_expression",
			Pattern: "(assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "associated_type",
			Pattern: "(associated_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"trait_bounds",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "async_block",
			Pattern: "(async_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "attribute",
			Pattern: "(attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				Children: []string{

					"_expression",

					"token_tree",

				},
				
			},
			
		},

		{
			Name: "attribute_item",
			Pattern: "(attribute_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "await_expression",
			Pattern: "(await_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "base_field_initializer",
			Pattern: "(base_field_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "BinaryOp",
				Token: "self",
				Roles: []string{

					"Operator",

				},
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_comment",
			Pattern: "(block_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

					"Body",

				},
				Children: []string{

					"doc_comment",

					"inner_doc_comment_marker",

					"outer_doc_comment_marker",

				},
				
			},
			
		},

		{
			Name: "boolean_literal",
			Pattern: "(boolean_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "bounded_type",
			Pattern: "(bounded_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "bracketed_type",
			Pattern: "(bracketed_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "break_expression",
			Pattern: "(break_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "call_expression",
			Pattern: "(call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"_literal",

					"arguments",

					"array_expression",

					"assignment_expression",

					"async_block",

					"await_expression",

					"binary_expression",

					"block",

					"break_expression",

					"call_expression",

					"closure_expression",

					"compound_assignment_expr",

					"const_block",

					"continue_expression",

					"field_expression",

					"for_expression",

					"gen_block",

					"generic_function",

					"identifier",

					"if_expression",

					"index_expression",

					"loop_expression",

					"macro_invocation",

					"match_expression",

					"metavariable",

					"parenthesized_expression",

					"reference_expression",

					"return_expression",

					"scoped_identifier",

					"self",

					"struct_expression",

					"try_block",

					"try_expression",

					"tuple_expression",

					"type_cast_expression",

					"unary_expression",

					"unit_expression",

					"unsafe_block",

					"while_expression",

					"yield_expression",

				},
				
			},
			
		},

		{
			Name: "captured_pattern",
			Pattern: "(captured_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Call",

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "closure_expression",
			Pattern: "(closure_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_",

					"_expression",

					"_type",

					"closure_parameters",

				},
				
			},
			
		},

		{
			Name: "closure_parameters",
			Pattern: "(closure_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "compound_assignment_expr",
			Pattern: "(compound_assignment_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "const_block",
			Pattern: "(const_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "const_item",
			Pattern: "(const_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"_type",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "const_parameter",
			Pattern: "(const_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_literal",

					"_type",

					"block",

					"identifier",

					"negative_literal",

				},
				
			},
			
		},

		{
			Name: "continue_expression",
			Pattern: "(continue_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "declaration_list",
			Pattern: "(declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "dynamic_type",
			Pattern: "(dynamic_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"function_type",

					"generic_type",

					"higher_ranked_trait_bound",

					"scoped_type_identifier",

					"tuple_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "else_clause",
			Pattern: "(else_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "empty_statement",
			Pattern: "(empty_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "enum_item",
			Pattern: "(enum_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"enum_variant_list",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "enum_variant",
			Pattern: "(enum_variant)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"_expression",

					"field_declaration_list",

					"identifier",

					"ordered_field_declaration_list",

				},
				
			},
			
		},

		{
			Name: "enum_variant_list",
			Pattern: "(enum_variant_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "expression_statement",
			Pattern: "(expression_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extern_crate_declaration",
			Pattern: "(extern_crate_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "extern_modifier",
			Pattern: "(extern_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "field_declaration",
			Pattern: "(field_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"_type",

					"field_identifier",

				},
				
			},
			
		},

		{
			Name: "field_declaration_list",
			Pattern: "(field_declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "field_expression",
			Pattern: "(field_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"_expression",

					"field_identifier",

					"integer_literal",

				},
				
			},
			
		},

		{
			Name: "field_initializer",
			Pattern: "(field_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"_expression",

					"field_identifier",

					"integer_literal",

				},
				
			},
			
		},

		{
			Name: "field_initializer_list",
			Pattern: "(field_initializer_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "field_pattern",
			Pattern: "(field_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"_pattern",

					"field_identifier",

					"shorthand_field_identifier",

				},
				
			},
			
		},

		{
			Name: "for_expression",
			Pattern: "(for_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"_expression",

					"_pattern",

					"block",

				},
				
			},
			
		},

		{
			Name: "for_lifetimes",
			Pattern: "(for_lifetimes)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "foreign_mod_item",
			Pattern: "(foreign_mod_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"declaration_list",

				},
				
			},
			
		},

		{
			Name: "fragment_specifier",
			Pattern: "(fragment_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "function_item",
			Pattern: "(function_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"_type",

					"block",

					"identifier",

					"metavariable",

					"parameters",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "function_modifiers",
			Pattern: "(function_modifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "function_signature_item",
			Pattern: "(function_signature_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"_type",

					"identifier",

					"metavariable",

					"parameters",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "function_type",
			Pattern: "(function_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"_type",

					"parameters",

					"scoped_type_identifier",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "gen_block",
			Pattern: "(gen_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "generic_function",
			Pattern: "(generic_function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"field_expression",

					"identifier",

					"scoped_identifier",

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "generic_pattern",
			Pattern: "(generic_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Pattern",

				},
				Children: []string{

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "generic_type",
			Pattern: "(generic_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

					"scoped_identifier",

					"scoped_type_identifier",

					"type_arguments",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "generic_type_with_turbofish",
			Pattern: "(generic_type_with_turbofish)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"scoped_identifier",

					"type_arguments",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "higher_ranked_trait_bound",
			Pattern: "(higher_ranked_trait_bound)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_type",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "if_expression",
			Pattern: "(if_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				Roles: []string{

					"Condition",

				},
				Children: []string{

					"_expression",

					"block",

					"else_clause",

					"let_chain",

					"let_condition",

				},
				
			},
			
		},

		{
			Name: "impl_item",
			Pattern: "(impl_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_type",

					"declaration_list",

					"generic_type",

					"scoped_type_identifier",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "index_expression",
			Pattern: "(index_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				Token: "self",
				Roles: []string{

					"Index",

				},
				
				
			},
			
		},

		{
			Name: "inner_attribute_item",
			Pattern: "(inner_attribute_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "inner_doc_comment_marker",
			Pattern: "(inner_doc_comment_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "label",
			Pattern: "(label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "let_chain",
			Pattern: "(let_chain)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "let_condition",
			Pattern: "(let_condition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"_pattern",

				},
				
			},
			
		},

		{
			Name: "let_declaration",
			Pattern: "(let_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_expression",

					"_pattern",

					"_type",

					"block",

				},
				
			},
			
		},

		{
			Name: "lifetime",
			Pattern: "(lifetime)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "lifetime_parameter",
			Pattern: "(lifetime_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"lifetime",

					"trait_bounds",

				},
				
			},
			
		},

		{
			Name: "line_comment",
			Pattern: "(line_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				Children: []string{

					"doc_comment",

					"inner_doc_comment_marker",

					"outer_doc_comment_marker",

				},
				
			},
			
		},

		{
			Name: "loop_expression",
			Pattern: "(loop_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Comment",

					"Loop",

				},
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "macro_definition",
			Pattern: "(macro_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "macro_invocation",
			Pattern: "(macro_invocation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "macro_rule",
			Pattern: "(macro_rule)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"token_tree",

					"token_tree_pattern",

				},
				
			},
			
		},

		{
			Name: "match_arm",
			Pattern: "(match_arm)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				Token: "self",
				Roles: []string{

					"Match",

				},
				Children: []string{

					"_expression",

					"match_pattern",

				},
				
			},
			
		},

		{
			Name: "match_block",
			Pattern: "(match_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "match_expression",
			Pattern: "(match_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				Token: "self",
				Roles: []string{

					"Body",

					"Match",

				},
				Children: []string{

					"_expression",

					"match_block",

				},
				
			},
			
		},

		{
			Name: "match_pattern",
			Pattern: "(match_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"_expression",

					"let_chain",

					"let_condition",

				},
				
			},
			
		},

		{
			Name: "mod_item",
			Pattern: "(mod_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				Children: []string{

					"declaration_list",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "mut_pattern",
			Pattern: "(mut_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "negative_literal",
			Pattern: "(negative_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "never_type",
			Pattern: "(never_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "or_pattern",
			Pattern: "(or_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "ordered_field_declaration_list",
			Pattern: "(ordered_field_declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"_type",

				},
				
			},
			
		},

		{
			Name: "outer_doc_comment_marker",
			Pattern: "(outer_doc_comment_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "parameter",
			Pattern: "(parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_pattern",

					"_type",

					"self",

				},
				
			},
			
		},

		{
			Name: "parameters",
			Pattern: "(parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pointer_type",
			Pattern: "(pointer_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_type",

				},
				
			},
			
		},

		{
			Name: "qualified_type",
			Pattern: "(qualified_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_type",

				},
				
			},
			
		},

		{
			Name: "range_expression",
			Pattern: "(range_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "range_pattern",
			Pattern: "(range_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"_literal_pattern",

					"crate",

					"identifier",

					"metavariable",

					"scoped_identifier",

					"self",

					"super",

				},
				
			},
			
		},

		{
			Name: "raw_string_literal",
			Pattern: "(raw_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "ref_pattern",
			Pattern: "(ref_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "reference_expression",
			Pattern: "(reference_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "reference_pattern",
			Pattern: "(reference_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "reference_type",
			Pattern: "(reference_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				Children: []string{

					"_type",

				},
				
			},
			
		},

		{
			Name: "remaining_field_pattern",
			Pattern: "(remaining_field_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "removed_trait_bound",
			Pattern: "(removed_trait_bound)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "return_expression",
			Pattern: "(return_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "scoped_identifier",
			Pattern: "(scoped_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"bracketed_type",

					"crate",

					"generic_type",

					"identifier",

					"metavariable",

					"scoped_identifier",

					"self",

					"super",

				},
				
			},
			
		},

		{
			Name: "scoped_type_identifier",
			Pattern: "(scoped_type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"bracketed_type",

					"crate",

					"generic_type",

					"identifier",

					"metavariable",

					"scoped_identifier",

					"self",

					"super",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "scoped_use_list",
			Pattern: "(scoped_use_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				Children: []string{

					"crate",

					"identifier",

					"metavariable",

					"scoped_identifier",

					"self",

					"super",

					"use_list",

				},
				
			},
			
		},

		{
			Name: "self_parameter",
			Pattern: "(self_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "shorthand_field_initializer",
			Pattern: "(shorthand_field_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "slice_pattern",
			Pattern: "(slice_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Slice",
				
				
				
				
			},
			
		},

		{
			Name: "source_file",
			Pattern: "(source_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "static_item",
			Pattern: "(static_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"_type",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "string_literal",
			Pattern: "(string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "struct_expression",
			Pattern: "(struct_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"field_initializer_list",

					"generic_type_with_turbofish",

					"scoped_type_identifier",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "struct_item",
			Pattern: "(struct_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"field_declaration_list",

					"ordered_field_declaration_list",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "struct_pattern",
			Pattern: "(struct_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"scoped_type_identifier",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "token_binding_pattern",
			Pattern: "(token_binding_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"fragment_specifier",

					"metavariable",

				},
				
			},
			
		},

		{
			Name: "token_repetition",
			Pattern: "(token_repetition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "token_repetition_pattern",
			Pattern: "(token_repetition_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "token_tree",
			Pattern: "(token_tree)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "token_tree_pattern",
			Pattern: "(token_tree_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "trait_bounds",
			Pattern: "(trait_bounds)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "trait_item",
			Pattern: "(trait_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"declaration_list",

					"trait_bounds",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "try_block",
			Pattern: "(try_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "try_expression",
			Pattern: "(try_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Body",

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "tuple_expression",
			Pattern: "(tuple_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				
				
			},
			
		},

		{
			Name: "tuple_pattern",
			Pattern: "(tuple_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "tuple_struct_pattern",
			Pattern: "(tuple_struct_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"generic_type",

					"identifier",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "tuple_type",
			Pattern: "(tuple_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_arguments",
			Pattern: "(type_arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_binding",
			Pattern: "(type_binding)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_type",

					"type_arguments",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "type_cast_expression",
			Pattern: "(type_cast_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				
				
				Children: []string{

					"_expression",

					"_type",

				},
				
			},
			
		},

		{
			Name: "type_item",
			Pattern: "(type_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_type",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "type_parameter",
			Pattern: "(type_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_type",

					"trait_bounds",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "type_parameters",
			Pattern: "(type_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "unary_expression",
			Pattern: "(unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "union_item",
			Pattern: "(union_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "UnaryOp",
				Token: "self",
				Roles: []string{

					"Operator",

				},
				Children: []string{

					"field_declaration_list",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "unit_expression",
			Pattern: "(unit_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unit_type",
			Pattern: "(unit_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unsafe_block",
			Pattern: "(unsafe_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "use_as_clause",
			Pattern: "(use_as_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"crate",

					"identifier",

					"metavariable",

					"scoped_identifier",

					"self",

					"super",

				},
				
			},
			
		},

		{
			Name: "use_bounds",
			Pattern: "(use_bounds)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "use_declaration",
			Pattern: "(use_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"crate",

					"identifier",

					"metavariable",

					"scoped_identifier",

					"scoped_use_list",

					"self",

					"super",

					"use_as_clause",

					"use_list",

					"use_wildcard",

				},
				
			},
			
		},

		{
			Name: "use_list",
			Pattern: "(use_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "use_wildcard",
			Pattern: "(use_wildcard)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "variadic_parameter",
			Pattern: "(variadic_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_pattern",

				},
				
			},
			
		},

		{
			Name: "visibility_modifier",
			Pattern: "(visibility_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "where_clause",
			Pattern: "(where_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "where_predicate",
			Pattern: "(where_predicate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"array_type",

					"generic_type",

					"higher_ranked_trait_bound",

					"lifetime",

					"pointer_type",

					"primitive_type",

					"reference_type",

					"scoped_type_identifier",

					"trait_bounds",

					"tuple_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "while_expression",
			Pattern: "(while_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"_expression",

					"block",

					"let_chain",

					"let_condition",

				},
				
			},
			
		},

		{
			Name: "yield_expression",
			Pattern: "(yield_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "_",
			Pattern: "(_)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "as",
			Pattern: "(as)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "async",
			Pattern: "(async)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "await",
			Pattern: "(await)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Body",

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "char_literal",
			Pattern: "(char_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "const",
			Pattern: "(const)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "crate",
			Pattern: "(crate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "doc_comment",
			Pattern: "(doc_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "dyn",
			Pattern: "(dyn)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "expr",
			Pattern: "(expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expr_2021",
			Pattern: "(expr_2021)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "extern",
			Pattern: "(extern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "field_identifier",
			Pattern: "(field_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "float_literal",
			Pattern: "(float_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Reference",

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "fn",
			Pattern: "(fn)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "gen",
			Pattern: "(gen)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ident",
			Pattern: "(ident)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				Roles: []string{

					"Condition",

				},
				
				
			},
			
		},

		{
			Name: "impl",
			Pattern: "(impl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "integer_literal",
			Pattern: "(integer_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "item",
			Pattern: "(item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "let",
			Pattern: "(let)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "lifetime",
			Pattern: "(lifetime)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "literal",
			Pattern: "(literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "loop",
			Pattern: "(loop)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "match",
			Pattern: "(match)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				
				Roles: []string{

					"Match",

				},
				
				
			},
			
		},

		{
			Name: "meta",
			Pattern: "(meta)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "metavariable",
			Pattern: "(metavariable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "mod",
			Pattern: "(mod)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "move",
			Pattern: "(move)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "mutable_specifier",
			Pattern: "(mutable_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pat",
			Pattern: "(pat)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "pat_param",
			Pattern: "(pat_param)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "path",
			Pattern: "(path)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "primitive_type",
			Pattern: "(primitive_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pub",
			Pattern: "(pub)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "raw",
			Pattern: "(raw)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ref",
			Pattern: "(ref)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "self",
			Pattern: "(self)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "shebang",
			Pattern: "(shebang)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "shorthand_field_identifier",
			Pattern: "(shorthand_field_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "static",
			Pattern: "(static)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "stmt",
			Pattern: "(stmt)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string_content",
			Pattern: "(string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "struct",
			Pattern: "(struct)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "super",
			Pattern: "(super)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "trait",
			Pattern: "(trait)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "tt",
			Pattern: "(tt)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ty",
			Pattern: "(ty)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_identifier",
			Pattern: "(type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "union",
			Pattern: "(union)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unsafe",
			Pattern: "(unsafe)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "use",
			Pattern: "(use)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "vis",
			Pattern: "(vis)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "where",
			Pattern: "(where)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &rustPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *rustPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *rustPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *rustPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *rustPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *rustPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// rust_with_rstmlPatternMatcher provides pre-compiled pattern matching for rust_with_rstml
type rust_with_rstmlPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newrust_with_rstmlPatternMatcher() *rust_with_rstmlPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "_declaration_statement",
			Pattern: "(_declaration_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_expression",
			Pattern: "(_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_literal",
			Pattern: "(_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "_literal_pattern",
			Pattern: "(_literal_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "_pattern",
			Pattern: "(_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "_type",
			Pattern: "(_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "abstract_type",
			Pattern: "(abstract_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"function_type",

					"generic_type",

					"removed_trait_bound",

					"scoped_type_identifier",

					"tuple_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "arguments",
			Pattern: "(arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "array_expression",
			Pattern: "(array_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "array_type",
			Pattern: "(array_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_expression",

					"_type",

				},
				
			},
			
		},

		{
			Name: "assignment_expression",
			Pattern: "(assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "associated_type",
			Pattern: "(associated_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"trait_bounds",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "async_block",
			Pattern: "(async_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "attribute",
			Pattern: "(attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Body",

					"Attribute",

				},
				Children: []string{

					"_expression",

					"token_tree",

				},
				
			},
			
		},

		{
			Name: "attribute_item",
			Pattern: "(attribute_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "await_expression",
			Pattern: "(await_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "base_field_initializer",
			Pattern: "(base_field_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_comment",
			Pattern: "(block_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

					"Body",

				},
				Children: []string{

					"doc_comment",

					"inner_doc_comment_marker",

					"outer_doc_comment_marker",

				},
				
			},
			
		},

		{
			Name: "boolean_literal",
			Pattern: "(boolean_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "bounded_type",
			Pattern: "(bounded_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "bracketed_type",
			Pattern: "(bracketed_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "break_expression",
			Pattern: "(break_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "call_expression",
			Pattern: "(call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"_literal",

					"arguments",

					"array_expression",

					"assignment_expression",

					"async_block",

					"await_expression",

					"binary_expression",

					"block",

					"break_expression",

					"call_expression",

					"closure_expression",

					"compound_assignment_expr",

					"const_block",

					"continue_expression",

					"field_expression",

					"for_expression",

					"generic_function",

					"identifier",

					"if_expression",

					"index_expression",

					"loop_expression",

					"macro_invocation",

					"match_expression",

					"metavariable",

					"parenthesized_expression",

					"reference_expression",

					"return_expression",

					"scoped_identifier",

					"self",

					"struct_expression",

					"try_block",

					"try_expression",

					"tuple_expression",

					"type_cast_expression",

					"unary_expression",

					"unit_expression",

					"unsafe_block",

					"while_expression",

					"yield_expression",

				},
				
			},
			
		},

		{
			Name: "captured_pattern",
			Pattern: "(captured_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Call",

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "close_tag",
			Pattern: "(close_tag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"node_identifier",

				},
				
			},
			
		},

		{
			Name: "closure_expression",
			Pattern: "(closure_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_",

					"_expression",

					"_type",

					"closure_parameters",

				},
				
			},
			
		},

		{
			Name: "closure_parameters",
			Pattern: "(closure_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "comment_node",
			Pattern: "(comment_node)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "compound_assignment_expr",
			Pattern: "(compound_assignment_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "const_block",
			Pattern: "(const_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "const_item",
			Pattern: "(const_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"_type",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "const_parameter",
			Pattern: "(const_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_type",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "constrained_type_parameter",
			Pattern: "(constrained_type_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"lifetime",

					"trait_bounds",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "continue_expression",
			Pattern: "(continue_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "declaration_list",
			Pattern: "(declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "delim_nodes",
			Pattern: "(delim_nodes)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "doctype_node",
			Pattern: "(doctype_node)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "dynamic_type",
			Pattern: "(dynamic_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"function_type",

					"generic_type",

					"higher_ranked_trait_bound",

					"scoped_type_identifier",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "element_node",
			Pattern: "(element_node)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"close_tag",

					"open_tag",

				},
				
			},
			
		},

		{
			Name: "else_clause",
			Pattern: "(else_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "empty_statement",
			Pattern: "(empty_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "enum_item",
			Pattern: "(enum_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"enum_variant_list",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "enum_variant",
			Pattern: "(enum_variant)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"_expression",

					"field_declaration_list",

					"identifier",

					"ordered_field_declaration_list",

				},
				
			},
			
		},

		{
			Name: "enum_variant_list",
			Pattern: "(enum_variant_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "expression_statement",
			Pattern: "(expression_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extern_crate_declaration",
			Pattern: "(extern_crate_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "extern_modifier",
			Pattern: "(extern_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "field_declaration",
			Pattern: "(field_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"_type",

					"field_identifier",

				},
				
			},
			
		},

		{
			Name: "field_declaration_list",
			Pattern: "(field_declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "field_expression",
			Pattern: "(field_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"_expression",

					"field_identifier",

					"integer_literal",

				},
				
			},
			
		},

		{
			Name: "field_initializer",
			Pattern: "(field_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"_expression",

					"field_identifier",

					"integer_literal",

				},
				
			},
			
		},

		{
			Name: "field_initializer_list",
			Pattern: "(field_initializer_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "field_pattern",
			Pattern: "(field_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"_pattern",

					"field_identifier",

					"shorthand_field_identifier",

				},
				
			},
			
		},

		{
			Name: "for_expression",
			Pattern: "(for_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"_expression",

					"_pattern",

					"block",

				},
				
			},
			
		},

		{
			Name: "for_lifetimes",
			Pattern: "(for_lifetimes)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "foreign_mod_item",
			Pattern: "(foreign_mod_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"declaration_list",

				},
				
			},
			
		},

		{
			Name: "fragment_specifier",
			Pattern: "(fragment_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "function_item",
			Pattern: "(function_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"_type",

					"block",

					"identifier",

					"metavariable",

					"parameters",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "function_modifiers",
			Pattern: "(function_modifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "function_signature_item",
			Pattern: "(function_signature_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"_type",

					"identifier",

					"metavariable",

					"parameters",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "function_type",
			Pattern: "(function_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"_type",

					"parameters",

					"scoped_type_identifier",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "generic_function",
			Pattern: "(generic_function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Function",

					"Declaration",

				},
				Children: []string{

					"field_expression",

					"identifier",

					"scoped_identifier",

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "generic_identifier",
			Pattern: "(generic_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				
				
				
			},
			
		},

		{
			Name: "generic_type",
			Pattern: "(generic_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				Children: []string{

					"identifier",

					"scoped_identifier",

					"scoped_type_identifier",

					"type_arguments",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "generic_type_with_turbofish",
			Pattern: "(generic_type_with_turbofish)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"scoped_identifier",

					"type_arguments",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "higher_ranked_trait_bound",
			Pattern: "(higher_ranked_trait_bound)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_type",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "if_expression",
			Pattern: "(if_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				Children: []string{

					"_expression",

					"block",

					"else_clause",

					"let_chain",

					"let_condition",

				},
				
			},
			
		},

		{
			Name: "impl_item",
			Pattern: "(impl_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_type",

					"declaration_list",

					"generic_type",

					"scoped_type_identifier",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "index_expression",
			Pattern: "(index_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				Token: "self",
				Roles: []string{

					"Index",

				},
				
				
			},
			
		},

		{
			Name: "inner_attribute_item",
			Pattern: "(inner_attribute_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "label",
			Pattern: "(label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "let_chain",
			Pattern: "(let_chain)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "let_condition",
			Pattern: "(let_condition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_expression",

					"_pattern",

				},
				
			},
			
		},

		{
			Name: "let_declaration",
			Pattern: "(let_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"_pattern",

					"_type",

					"block",

				},
				
			},
			
		},

		{
			Name: "lifetime",
			Pattern: "(lifetime)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "line_comment",
			Pattern: "(line_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				Children: []string{

					"doc_comment",

					"inner_doc_comment_marker",

					"outer_doc_comment_marker",

				},
				
			},
			
		},

		{
			Name: "loop_expression",
			Pattern: "(loop_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Comment",

					"Loop",

				},
				Children: []string{

					"block",

				},
				
			},
			
		},

		{
			Name: "macro_definition",
			Pattern: "(macro_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

				},
				
			},
			
		},

		{
			Name: "macro_invocation",
			Pattern: "(macro_invocation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "macro_rule",
			Pattern: "(macro_rule)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"token_tree",

					"token_tree_pattern",

				},
				
			},
			
		},

		{
			Name: "match_arm",
			Pattern: "(match_arm)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				Token: "self",
				Roles: []string{

					"Match",

				},
				Children: []string{

					"_expression",

					"match_pattern",

				},
				
			},
			
		},

		{
			Name: "match_block",
			Pattern: "(match_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "match_expression",
			Pattern: "(match_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				Token: "self",
				Roles: []string{

					"Body",

					"Match",

				},
				Children: []string{

					"_expression",

					"match_block",

				},
				
			},
			
		},

		{
			Name: "match_pattern",
			Pattern: "(match_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"_expression",

					"let_chain",

					"let_condition",

				},
				
			},
			
		},

		{
			Name: "mod_item",
			Pattern: "(mod_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				Children: []string{

					"declaration_list",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "mut_pattern",
			Pattern: "(mut_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "negative_literal",
			Pattern: "(negative_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "never_type",
			Pattern: "(never_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "node_attribute",
			Pattern: "(node_attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				Children: []string{

					"node_identifier",

					"rust_expression",

				},
				
			},
			
		},

		{
			Name: "node_identifier",
			Pattern: "(node_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "open_tag",
			Pattern: "(open_tag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				Children: []string{

					"block",

					"node_attribute",

					"node_identifier",

				},
				
			},
			
		},

		{
			Name: "optional_type_parameter",
			Pattern: "(optional_type_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_type",

					"constrained_type_parameter",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "or_pattern",
			Pattern: "(or_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "ordered_field_declaration_list",
			Pattern: "(ordered_field_declaration_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"_type",

				},
				
			},
			
		},

		{
			Name: "parameter",
			Pattern: "(parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_pattern",

					"_type",

					"self",

				},
				
			},
			
		},

		{
			Name: "parameters",
			Pattern: "(parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pointer_type",
			Pattern: "(pointer_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_type",

				},
				
			},
			
		},

		{
			Name: "qualified_type",
			Pattern: "(qualified_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_type",

				},
				
			},
			
		},

		{
			Name: "range_expression",
			Pattern: "(range_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "range_pattern",
			Pattern: "(range_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "raw_string_literal",
			Pattern: "(raw_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "ref_pattern",
			Pattern: "(ref_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Literal",

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "reference_expression",
			Pattern: "(reference_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

				},
				
			},
			
		},

		{
			Name: "reference_pattern",
			Pattern: "(reference_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "reference_type",
			Pattern: "(reference_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_type",

				},
				
			},
			
		},

		{
			Name: "remaining_field_pattern",
			Pattern: "(remaining_field_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "removed_trait_bound",
			Pattern: "(removed_trait_bound)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return_expression",
			Pattern: "(return_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "scoped_identifier",
			Pattern: "(scoped_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"bracketed_type",

					"crate",

					"generic_type",

					"identifier",

					"metavariable",

					"scoped_identifier",

					"self",

					"super",

				},
				
			},
			
		},

		{
			Name: "scoped_type_identifier",
			Pattern: "(scoped_type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				Children: []string{

					"bracketed_type",

					"crate",

					"generic_type",

					"identifier",

					"metavariable",

					"scoped_identifier",

					"self",

					"super",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "scoped_use_list",
			Pattern: "(scoped_use_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				Children: []string{

					"crate",

					"identifier",

					"metavariable",

					"scoped_identifier",

					"self",

					"super",

					"use_list",

				},
				
			},
			
		},

		{
			Name: "self_closing_element_node",
			Pattern: "(self_closing_element_node)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"block",

					"generic_identifier",

					"node_attribute",

					"node_identifier",

				},
				
			},
			
		},

		{
			Name: "self_parameter",
			Pattern: "(self_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "shorthand_field_initializer",
			Pattern: "(shorthand_field_initializer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "slice_pattern",
			Pattern: "(slice_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Slice",
				
				
				
				
			},
			
		},

		{
			Name: "source_file",
			Pattern: "(source_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "static_item",
			Pattern: "(static_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"_type",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "string_literal",
			Pattern: "(string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "struct_expression",
			Pattern: "(struct_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"field_initializer_list",

					"generic_type_with_turbofish",

					"scoped_type_identifier",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "struct_item",
			Pattern: "(struct_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"field_declaration_list",

					"ordered_field_declaration_list",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "struct_pattern",
			Pattern: "(struct_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"scoped_type_identifier",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "token_binding_pattern",
			Pattern: "(token_binding_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"fragment_specifier",

					"metavariable",

				},
				
			},
			
		},

		{
			Name: "token_repetition",
			Pattern: "(token_repetition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "token_repetition_pattern",
			Pattern: "(token_repetition_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "token_tree",
			Pattern: "(token_tree)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "token_tree_pattern",
			Pattern: "(token_tree_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "trait_bounds",
			Pattern: "(trait_bounds)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "trait_item",
			Pattern: "(trait_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"declaration_list",

					"trait_bounds",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "try_block",
			Pattern: "(try_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "try_expression",
			Pattern: "(try_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Body",

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "tuple_expression",
			Pattern: "(tuple_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				
				
			},
			
		},

		{
			Name: "tuple_pattern",
			Pattern: "(tuple_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "tuple_struct_pattern",
			Pattern: "(tuple_struct_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"generic_type",

					"identifier",

					"scoped_identifier",

				},
				
			},
			
		},

		{
			Name: "tuple_type",
			Pattern: "(tuple_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_arguments",
			Pattern: "(type_arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_binding",
			Pattern: "(type_binding)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_type",

					"type_arguments",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "type_cast_expression",
			Pattern: "(type_cast_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				
				
				Children: []string{

					"_expression",

					"_type",

				},
				
			},
			
		},

		{
			Name: "type_item",
			Pattern: "(type_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"_type",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "type_parameters",
			Pattern: "(type_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "unary_expression",
			Pattern: "(unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "union_item",
			Pattern: "(union_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"field_declaration_list",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "unit_expression",
			Pattern: "(unit_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unit_type",
			Pattern: "(unit_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unsafe_block",
			Pattern: "(unsafe_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "use_as_clause",
			Pattern: "(use_as_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"crate",

					"identifier",

					"metavariable",

					"scoped_identifier",

					"self",

					"super",

				},
				
			},
			
		},

		{
			Name: "use_declaration",
			Pattern: "(use_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"crate",

					"identifier",

					"metavariable",

					"scoped_identifier",

					"scoped_use_list",

					"self",

					"super",

					"use_as_clause",

					"use_list",

					"use_wildcard",

				},
				
			},
			
		},

		{
			Name: "use_list",
			Pattern: "(use_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "use_wildcard",
			Pattern: "(use_wildcard)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "variadic_parameter",
			Pattern: "(variadic_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"_pattern",

				},
				
			},
			
		},

		{
			Name: "visibility_modifier",
			Pattern: "(visibility_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "where_clause",
			Pattern: "(where_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "where_predicate",
			Pattern: "(where_predicate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"array_type",

					"generic_type",

					"higher_ranked_trait_bound",

					"lifetime",

					"pointer_type",

					"primitive_type",

					"reference_type",

					"scoped_type_identifier",

					"trait_bounds",

					"tuple_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "while_expression",
			Pattern: "(while_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"_expression",

					"block",

					"let_chain",

					"let_condition",

				},
				
			},
			
		},

		{
			Name: "yield_expression",
			Pattern: "(yield_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "_",
			Pattern: "(_)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "as",
			Pattern: "(as)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "async",
			Pattern: "(async)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "await",
			Pattern: "(await)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "block",
			Pattern: "(block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Body",

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "char_literal",
			Pattern: "(char_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "const",
			Pattern: "(const)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "crate",
			Pattern: "(crate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "doc_comment",
			Pattern: "(doc_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "dyn",
			Pattern: "(dyn)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "expr",
			Pattern: "(expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extern",
			Pattern: "(extern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "field_identifier",
			Pattern: "(field_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "float_literal",
			Pattern: "(float_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "fn",
			Pattern: "(fn)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "ident",
			Pattern: "(ident)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				Roles: []string{

					"Condition",

				},
				
				
			},
			
		},

		{
			Name: "impl",
			Pattern: "(impl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "inner_doc_comment_marker",
			Pattern: "(inner_doc_comment_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "integer_literal",
			Pattern: "(integer_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "item",
			Pattern: "(item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "let",
			Pattern: "(let)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "lifetime",
			Pattern: "(lifetime)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "literal",
			Pattern: "(literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "loop",
			Pattern: "(loop)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "match",
			Pattern: "(match)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				
				Roles: []string{

					"Match",

				},
				
				
			},
			
		},

		{
			Name: "meta",
			Pattern: "(meta)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "metavariable",
			Pattern: "(metavariable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "mod",
			Pattern: "(mod)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "move",
			Pattern: "(move)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "mutable_specifier",
			Pattern: "(mutable_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "outer_doc_comment_marker",
			Pattern: "(outer_doc_comment_marker)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "pat",
			Pattern: "(pat)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "path",
			Pattern: "(path)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "primitive_type",
			Pattern: "(primitive_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pub",
			Pattern: "(pub)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ref",
			Pattern: "(ref)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "self",
			Pattern: "(self)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "shebang",
			Pattern: "(shebang)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "shorthand_field_identifier",
			Pattern: "(shorthand_field_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "static",
			Pattern: "(static)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "stmt",
			Pattern: "(stmt)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_content",
			Pattern: "(string_content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "struct",
			Pattern: "(struct)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "super",
			Pattern: "(super)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "text_node",
			Pattern: "(text_node)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "trait",
			Pattern: "(trait)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "tt",
			Pattern: "(tt)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ty",
			Pattern: "(ty)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_identifier",
			Pattern: "(type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "union",
			Pattern: "(union)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "unsafe",
			Pattern: "(unsafe)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "use",
			Pattern: "(use)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "view",
			Pattern: "(view)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "vis",
			Pattern: "(vis)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "where",
			Pattern: "(where)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &rust_with_rstmlPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *rust_with_rstmlPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *rust_with_rstmlPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *rust_with_rstmlPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *rust_with_rstmlPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *rust_with_rstmlPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// ssh_configPatternMatcher provides pre-compiled pattern matching for ssh_config
type ssh_configPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newssh_configPatternMatcher() *ssh_configPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "bytes",
			Pattern: "(bytes)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "condition",
			Pattern: "(condition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"canonical",

					"exec",

					"final",

					"host",

					"localnetwork",

					"localuser",

					"originalhost",

					"pattern",

					"string",

					"tagged",

					"user",

				},
				
			},
			
		},

		{
			Name: "config",
			Pattern: "(config)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "host_declaration",
			Pattern: "(host_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"Host",

					"pattern",

				},
				
			},
			
		},

		{
			Name: "match_declaration",
			Pattern: "(match_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				
				Roles: []string{

					"Match",

				},
				Children: []string{

					"Match",

				},
				
			},
			
		},

		{
			Name: "number",
			Pattern: "(number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "parameter",
			Pattern: "(parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"AddKeysToAgent",

					"AddressFamily",

					"BatchMode",

					"BindAddress",

					"BindInterface",

					"CASignatureAlgorithms",

					"CanonicalDomains",

					"CanonicalizeFallbackLocal",

					"CanonicalizeHostname",

					"CanonicalizeMaxDots",

					"CanonicalizePermittedCNAMEs",

					"CertificateFile",

					"ChallengeResponseAuthentication",

					"CheckHostIP",

					"Ciphers",

					"ClearAllForwardings",

					"Compression",

					"ConnectTimeout",

					"ConnectionAttempts",

					"ControlMaster",

					"ControlPath",

					"ControlPersist",

					"DynamicForward",

					"EnableEscapeCommandline",

					"EnableSSHKeysign",

					"EscapeChar",

					"ExitOnForwardFailure",

					"FingerprintHash",

					"ForkAfterAuthentication",

					"ForwardAgent",

					"ForwardX11",

					"ForwardX11Timeout",

					"ForwardX11Trusted",

					"GSSAPIAuthentication",

					"GSSAPIDelegateCredentials",

					"GlobalKnownHostsFile",

					"HashKnownHosts",

					"HostKeyAlgorithms",

					"HostKeyAlias",

					"HostbasedAcceptedAlgorithms",

					"HostbasedAuthentication",

					"HostbasedKeyTypes",

					"Hostname",

					"IPQoS",

					"IdentitiesOnly",

					"IdentityAgent",

					"IdentityFile",

					"IgnoreUnknown",

					"Include",

					"KbdInteractiveAuthentication",

					"KexAlgorithms",

					"KnownHostsCommand",

					"LocalCommand",

					"LocalForward",

					"LogLevel",

					"LogVerbose",

					"MACs",

					"NoHostAuthenticationForLocalhost",

					"NumberOfPasswordPrompts",

					"PKCS11Provider",

					"PasswordAuthentication",

					"PermitLocalCommand",

					"PermitRemoteOpen",

					"Port",

					"PreferredAuthentications",

					"ProxyCommand",

					"ProxyJump",

					"ProxyUseFdpass",

					"PubkeyAcceptedAlgorithms",

					"PubkeyAcceptedKeyTypes",

					"PubkeyAuthentication",

					"RekeyLimit",

					"RemoteCommand",

					"RemoteForward",

					"RequestTTY",

					"RequiredRSASize",

					"RevokedHostKeys",

					"SSH_AUTH_SOCK",

					"SecurityKeyProvider",

					"SendEnv",

					"ServerAliveCountMax",

					"ServerAliveInterval",

					"SessionType",

					"SetEnv",

					"StdinNull",

					"StreamLocalBindMask",

					"StreamLocalBindUnlink",

					"StrictHostKeyChecking",

					"SyslogFacility",

					"TCPKeepAlive",

					"Tag",

					"Tunnel",

					"TunnelDevice",

					"UpdateHostKeys",

					"UseKeychain",

					"User",

					"UserKnownHostsFile",

					"VerifyHostKeyDNS",

					"VisualHostKey",

					"XAuthLocation",

					"always",

					"any",

					"ask",

					"authentication",

					"auto",

					"autoask",

					"bytes",

					"cipher",

					"confirm",

					"default",

					"ethernet",

					"facility",

					"force",

					"inet",

					"inet6",

					"ipqos",

					"kex",

					"key_sig",

					"mac",

					"md5",

					"no",

					"none",

					"number",

					"off",

					"pattern",

					"sha256",

					"sig",

					"string",

					"subsystem",

					"time",

					"unbound",

					"uri",

					"variable",

					"verbosity",

					"yes",

				},
				
			},
			
		},

		{
			Name: "pattern",
			Pattern: "(pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "time",
			Pattern: "(time)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "variable",
			Pattern: "(variable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "AddKeysToAgent",
			Pattern: "(AddKeysToAgent)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "AddressFamily",
			Pattern: "(AddressFamily)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "BatchMode",
			Pattern: "(BatchMode)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "BindAddress",
			Pattern: "(BindAddress)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "BindInterface",
			Pattern: "(BindInterface)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "CASignatureAlgorithms",
			Pattern: "(CASignatureAlgorithms)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "CanonicalDomains",
			Pattern: "(CanonicalDomains)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "CanonicalizeFallbackLocal",
			Pattern: "(CanonicalizeFallbackLocal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "CanonicalizeHostname",
			Pattern: "(CanonicalizeHostname)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "CanonicalizeMaxDots",
			Pattern: "(CanonicalizeMaxDots)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "CanonicalizePermittedCNAMEs",
			Pattern: "(CanonicalizePermittedCNAMEs)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "CertificateFile",
			Pattern: "(CertificateFile)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ChallengeResponseAuthentication",
			Pattern: "(ChallengeResponseAuthentication)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "CheckHostIP",
			Pattern: "(CheckHostIP)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "Ciphers",
			Pattern: "(Ciphers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ClearAllForwardings",
			Pattern: "(ClearAllForwardings)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "Compression",
			Pattern: "(Compression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ConnectTimeout",
			Pattern: "(ConnectTimeout)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ConnectionAttempts",
			Pattern: "(ConnectionAttempts)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ControlMaster",
			Pattern: "(ControlMaster)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ControlPath",
			Pattern: "(ControlPath)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ControlPersist",
			Pattern: "(ControlPersist)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "DynamicForward",
			Pattern: "(DynamicForward)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "EnableEscapeCommandline",
			Pattern: "(EnableEscapeCommandline)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "EnableSSHKeysign",
			Pattern: "(EnableSSHKeysign)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "EscapeChar",
			Pattern: "(EscapeChar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ExitOnForwardFailure",
			Pattern: "(ExitOnForwardFailure)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "FingerprintHash",
			Pattern: "(FingerprintHash)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ForkAfterAuthentication",
			Pattern: "(ForkAfterAuthentication)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "ForwardAgent",
			Pattern: "(ForwardAgent)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "ForwardX11",
			Pattern: "(ForwardX11)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "ForwardX11Timeout",
			Pattern: "(ForwardX11Timeout)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "ForwardX11Trusted",
			Pattern: "(ForwardX11Trusted)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "GSSAPIAuthentication",
			Pattern: "(GSSAPIAuthentication)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "GSSAPIDelegateCredentials",
			Pattern: "(GSSAPIDelegateCredentials)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "GlobalKnownHostsFile",
			Pattern: "(GlobalKnownHostsFile)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "HashKnownHosts",
			Pattern: "(HashKnownHosts)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "Host",
			Pattern: "(Host)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "HostKeyAlgorithms",
			Pattern: "(HostKeyAlgorithms)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "HostKeyAlias",
			Pattern: "(HostKeyAlias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "HostbasedAcceptedAlgorithms",
			Pattern: "(HostbasedAcceptedAlgorithms)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "HostbasedAuthentication",
			Pattern: "(HostbasedAuthentication)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "HostbasedKeyTypes",
			Pattern: "(HostbasedKeyTypes)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "Hostname",
			Pattern: "(Hostname)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "IPQoS",
			Pattern: "(IPQoS)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "IdentitiesOnly",
			Pattern: "(IdentitiesOnly)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "IdentityAgent",
			Pattern: "(IdentityAgent)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "IdentityFile",
			Pattern: "(IdentityFile)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "IgnoreUnknown",
			Pattern: "(IgnoreUnknown)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "Include",
			Pattern: "(Include)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "KbdInteractiveAuthentication",
			Pattern: "(KbdInteractiveAuthentication)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "KexAlgorithms",
			Pattern: "(KexAlgorithms)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "KnownHostsCommand",
			Pattern: "(KnownHostsCommand)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "LocalCommand",
			Pattern: "(LocalCommand)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "LocalForward",
			Pattern: "(LocalForward)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "LogLevel",
			Pattern: "(LogLevel)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "LogVerbose",
			Pattern: "(LogVerbose)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "MACs",
			Pattern: "(MACs)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "Match",
			Pattern: "(Match)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Match",
				Token: "self",
				Roles: []string{

					"Match",

				},
				
				
			},
			
		},

		{
			Name: "NoHostAuthenticationForLocalhost",
			Pattern: "(NoHostAuthenticationForLocalhost)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "NumberOfPasswordPrompts",
			Pattern: "(NumberOfPasswordPrompts)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "PKCS11Provider",
			Pattern: "(PKCS11Provider)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "PasswordAuthentication",
			Pattern: "(PasswordAuthentication)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "PermitLocalCommand",
			Pattern: "(PermitLocalCommand)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "PermitRemoteOpen",
			Pattern: "(PermitRemoteOpen)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "Port",
			Pattern: "(Port)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "PreferredAuthentications",
			Pattern: "(PreferredAuthentications)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ProxyCommand",
			Pattern: "(ProxyCommand)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ProxyJump",
			Pattern: "(ProxyJump)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ProxyUseFdpass",
			Pattern: "(ProxyUseFdpass)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "PubkeyAcceptedAlgorithms",
			Pattern: "(PubkeyAcceptedAlgorithms)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "PubkeyAcceptedKeyTypes",
			Pattern: "(PubkeyAcceptedKeyTypes)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "PubkeyAuthentication",
			Pattern: "(PubkeyAuthentication)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "RekeyLimit",
			Pattern: "(RekeyLimit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "RemoteCommand",
			Pattern: "(RemoteCommand)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "RemoteForward",
			Pattern: "(RemoteForward)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "RequestTTY",
			Pattern: "(RequestTTY)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "RequiredRSASize",
			Pattern: "(RequiredRSASize)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "RevokedHostKeys",
			Pattern: "(RevokedHostKeys)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "SSH_AUTH_SOCK",
			Pattern: "(SSH_AUTH_SOCK)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "SecurityKeyProvider",
			Pattern: "(SecurityKeyProvider)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "SendEnv",
			Pattern: "(SendEnv)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ServerAliveCountMax",
			Pattern: "(ServerAliveCountMax)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ServerAliveInterval",
			Pattern: "(ServerAliveInterval)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "SessionType",
			Pattern: "(SessionType)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "SetEnv",
			Pattern: "(SetEnv)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "StdinNull",
			Pattern: "(StdinNull)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "StreamLocalBindMask",
			Pattern: "(StreamLocalBindMask)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "StreamLocalBindUnlink",
			Pattern: "(StreamLocalBindUnlink)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "StrictHostKeyChecking",
			Pattern: "(StrictHostKeyChecking)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "SyslogFacility",
			Pattern: "(SyslogFacility)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "TCPKeepAlive",
			Pattern: "(TCPKeepAlive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "Tag",
			Pattern: "(Tag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "Tunnel",
			Pattern: "(Tunnel)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "TunnelDevice",
			Pattern: "(TunnelDevice)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "UpdateHostKeys",
			Pattern: "(UpdateHostKeys)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "UseKeychain",
			Pattern: "(UseKeychain)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "User",
			Pattern: "(User)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "UserKnownHostsFile",
			Pattern: "(UserKnownHostsFile)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "VerifyHostKeyDNS",
			Pattern: "(VerifyHostKeyDNS)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "VisualHostKey",
			Pattern: "(VisualHostKey)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "XAuthLocation",
			Pattern: "(XAuthLocation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "all",
			Pattern: "(all)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "always",
			Pattern: "(always)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "any",
			Pattern: "(any)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ask",
			Pattern: "(ask)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "authentication",
			Pattern: "(authentication)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "auto",
			Pattern: "(auto)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "autoask",
			Pattern: "(autoask)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "canonical",
			Pattern: "(canonical)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "cipher",
			Pattern: "(cipher)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "confirm",
			Pattern: "(confirm)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ethernet",
			Pattern: "(ethernet)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "exec",
			Pattern: "(exec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "facility",
			Pattern: "(facility)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "final",
			Pattern: "(final)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "force",
			Pattern: "(force)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "host",
			Pattern: "(host)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "inet",
			Pattern: "(inet)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "inet6",
			Pattern: "(inet6)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ipqos",
			Pattern: "(ipqos)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "kex",
			Pattern: "(kex)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "key_sig",
			Pattern: "(key_sig)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "localnetwork",
			Pattern: "(localnetwork)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "localuser",
			Pattern: "(localuser)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "mac",
			Pattern: "(mac)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "md5",
			Pattern: "(md5)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "no",
			Pattern: "(no)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "none",
			Pattern: "(none)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "off",
			Pattern: "(off)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "originalhost",
			Pattern: "(originalhost)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "sha256",
			Pattern: "(sha256)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "sig",
			Pattern: "(sig)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "subsystem",
			Pattern: "(subsystem)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "tagged",
			Pattern: "(tagged)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "token",
			Pattern: "(token)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unbound",
			Pattern: "(unbound)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "uri",
			Pattern: "(uri)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "user",
			Pattern: "(user)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "verbosity",
			Pattern: "(verbosity)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "yes",
			Pattern: "(yes)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &ssh_configPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *ssh_configPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *ssh_configPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *ssh_configPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *ssh_configPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *ssh_configPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// swiftPatternMatcher provides pre-compiled pattern matching for swift
type swiftPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newswiftPatternMatcher() *swiftPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "additive_expression",
			Pattern: "(additive_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "array_literal",
			Pattern: "(array_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "array_type",
			Pattern: "(array_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"suppressed_constraint",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "as_expression",
			Pattern: "(as_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"array_type",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"dictionary_type",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"existential_type",

					"fully_open_range",

					"function_type",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"metatype",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"opaque_type",

					"open_end_range_expression",

					"open_start_range_expression",

					"optional_type",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"protocol_composition_type",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"suppressed_constraint",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "as_operator",
			Pattern: "(as_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "assignment",
			Pattern: "(assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"directly_assignable_expression",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "associatedtype_declaration",
			Pattern: "(associatedtype_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"suppressed_constraint",

					"tuple_type",

					"type_identifier",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "attribute",
			Pattern: "(attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "child:identifier",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "availability_condition",
			Pattern: "(availability_condition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "await_expression",
			Pattern: "(await_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "bang",
			Pattern: "(bang)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bitwise_operation",
			Pattern: "(bitwise_operation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "boolean_literal",
			Pattern: "(boolean_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "call_expression",
			Pattern: "(call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Literal",

					"Call",

				},
				
				
			},
			
		},

		{
			Name: "call_suffix",
			Pattern: "(call_suffix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"simple_identifier",

				},
				
			},
			
		},

		{
			Name: "capture_list",
			Pattern: "(capture_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "capture_list_item",
			Pattern: "(capture_list_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "catch_block",
			Pattern: "(catch_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"pattern",

				},
				
			},
			
		},

		{
			Name: "check_expression",
			Pattern: "(check_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"array_type",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"dictionary_type",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"existential_type",

					"fully_open_range",

					"function_type",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"is",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"metatype",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"opaque_type",

					"open_end_range_expression",

					"open_start_range_expression",

					"optional_type",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"protocol_composition_type",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"suppressed_constraint",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "class_body",
			Pattern: "(class_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "class_declaration",
			Pattern: "(class_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"actor",

					"array_type",

					"class",

					"class_body",

					"dictionary_type",

					"enum",

					"enum_class_body",

					"existential_type",

					"extension",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"struct",

					"suppressed_constraint",

					"tuple_type",

					"type_identifier",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "comparison_expression",
			Pattern: "(comparison_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "child:identifier",
				Roles: []string{

					"Declaration",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "computed_getter",
			Pattern: "(computed_getter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Getter",
				
				Roles: []string{

					"Getter",

				},
				
				
			},
			
		},

		{
			Name: "computed_modify",
			Pattern: "(computed_modify)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "computed_property",
			Pattern: "(computed_property)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "computed_setter",
			Pattern: "(computed_setter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Setter",
				Token: "self",
				Roles: []string{

					"Setter",

				},
				
				
			},
			
		},

		{
			Name: "conjunction_expression",
			Pattern: "(conjunction_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "constructor_expression",
			Pattern: "(constructor_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"array_type",

					"dictionary_type",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "constructor_suffix",
			Pattern: "(constructor_suffix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"simple_identifier",

				},
				
			},
			
		},

		{
			Name: "control_transfer_statement",
			Pattern: "(control_transfer_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "custom_operator",
			Pattern: "(custom_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "deinit_declaration",
			Pattern: "(deinit_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"function_body",

				},
				
			},
			
		},

		{
			Name: "deprecated_operator_declaration_body",
			Pattern: "(deprecated_operator_declaration_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "diagnostic",
			Pattern: "(diagnostic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "dictionary_literal",
			Pattern: "(dictionary_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "dictionary_type",
			Pattern: "(dictionary_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Dict",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"suppressed_constraint",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "didset_clause",
			Pattern: "(didset_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "directive",
			Pattern: "(directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "directly_assignable_expression",
			Pattern: "(directly_assignable_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "disjunction_expression",
			Pattern: "(disjunction_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "do_statement",
			Pattern: "(do_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "enum_class_body",
			Pattern: "(enum_class_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "enum_entry",
			Pattern: "(enum_entry)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"enum_type_parameters",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "enum_type_parameters",
			Pattern: "(enum_type_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"suppressed_constraint",

					"tuple_type",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "equality_constraint",
			Pattern: "(equality_constraint)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"identifier",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"simple_identifier",

					"suppressed_constraint",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "equality_expression",
			Pattern: "(equality_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "existential_type",
			Pattern: "(existential_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "external_macro_definition",
			Pattern: "(external_macro_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"pattern",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "fully_open_range",
			Pattern: "(fully_open_range)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "function_body",
			Pattern: "(function_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "function_declaration",
			Pattern: "(function_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Body",

					"Function",

					"Declaration",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"array_type",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"dictionary_type",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"existential_type",

					"fully_open_range",

					"function_body",

					"function_type",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"metatype",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"opaque_type",

					"open_end_range_expression",

					"open_start_range_expression",

					"optional_type",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"protocol_composition_type",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"suppressed_constraint",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "function_modifier",
			Pattern: "(function_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "function_type",
			Pattern: "(function_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"suppressed_constraint",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "getter_specifier",
			Pattern: "(getter_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "guard_statement",
			Pattern: "(guard_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"array_type",

					"as",

					"as_expression",

					"assignment",

					"async",

					"availability_condition",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"case",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"dictionary_type",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"existential_type",

					"fully_open_range",

					"function_type",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"is",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"metatype",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"opaque_type",

					"open_end_range_expression",

					"open_start_range_expression",

					"optional_type",

					"pattern",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"protocol_composition_type",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"suppressed_constraint",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"tuple_type",

					"type_annotation",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

					"value_binding_pattern",

					"value_pack_expansion",

					"value_parameter_pack",

					"where_clause",

					"wildcard_pattern",

				},
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				Roles: []string{

					"Condition",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"array_type",

					"as",

					"as_expression",

					"assignment",

					"async",

					"availability_condition",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"case",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"dictionary_type",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"existential_type",

					"fully_open_range",

					"function_type",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"is",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"metatype",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"opaque_type",

					"open_end_range_expression",

					"open_start_range_expression",

					"optional_type",

					"pattern",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"protocol_composition_type",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"suppressed_constraint",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"tuple_type",

					"type_annotation",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

					"value_binding_pattern",

					"value_pack_expansion",

					"value_parameter_pack",

					"where_clause",

					"wildcard_pattern",

				},
				
			},
			
		},

		{
			Name: "import_declaration",
			Pattern: "(import_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "infix_expression",
			Pattern: "(infix_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "inheritance_constraint",
			Pattern: "(inheritance_constraint)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"identifier",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"simple_identifier",

					"suppressed_constraint",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "inheritance_modifier",
			Pattern: "(inheritance_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "inheritance_specifier",
			Pattern: "(inheritance_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"function_type",

					"suppressed_constraint",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "init_declaration",
			Pattern: "(init_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"function_body",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"init",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "interpolated_expression",
			Pattern: "(interpolated_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_argument_label",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "key_path_expression",
			Pattern: "(key_path_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "key_path_string_expression",
			Pattern: "(key_path_string_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "lambda_function_type",
			Pattern: "(lambda_function_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"suppressed_constraint",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "lambda_function_type_parameters",
			Pattern: "(lambda_function_type_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "lambda_literal",
			Pattern: "(lambda_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"capture_list",

					"lambda_function_type",

				},
				
			},
			
		},

		{
			Name: "lambda_parameter",
			Pattern: "(lambda_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"simple_identifier",

					"suppressed_constraint",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "line_str_text",
			Pattern: "(line_str_text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "line_string_literal",
			Pattern: "(line_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"interpolated_expression",

					"line_str_text",

					"str_escaped_char",

				},
				
			},
			
		},

		{
			Name: "macro_declaration",
			Pattern: "(macro_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_definition",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "macro_definition",
			Pattern: "(macro_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"external_macro_definition",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "macro_invocation",
			Pattern: "(macro_invocation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "member_modifier",
			Pattern: "(member_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "metatype",
			Pattern: "(metatype)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "modifiers",
			Pattern: "(modifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "modify_specifier",
			Pattern: "(modify_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "multi_line_str_text",
			Pattern: "(multi_line_str_text)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "multi_line_string_literal",
			Pattern: "(multi_line_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"interpolated_expression",

					"multi_line_str_text",

					"str_escaped_char",

				},
				
			},
			
		},

		{
			Name: "multiplicative_expression",
			Pattern: "(multiplicative_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "mutation_modifier",
			Pattern: "(mutation_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "navigation_expression",
			Pattern: "(navigation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"array_type",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"dictionary_type",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"existential_type",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"navigation_suffix",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"opaque_type",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"user_type",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "navigation_suffix",
			Pattern: "(navigation_suffix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"integer_literal",

					"simple_identifier",

				},
				
			},
			
		},

		{
			Name: "nil_coalescing_expression",
			Pattern: "(nil_coalescing_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "opaque_type",
			Pattern: "(opaque_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "open_end_range_expression",
			Pattern: "(open_end_range_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "open_start_range_expression",
			Pattern: "(open_start_range_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "operator_declaration",
			Pattern: "(operator_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "optional_type",
			Pattern: "(optional_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"array_type",

					"dictionary_type",

					"tuple_type",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "ownership_modifier",
			Pattern: "(ownership_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "parameter",
			Pattern: "(parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"simple_identifier",

					"suppressed_constraint",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "parameter_modifier",
			Pattern: "(parameter_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "parameter_modifiers",
			Pattern: "(parameter_modifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "pattern",
			Pattern: "(pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"simple_identifier",

					"suppressed_constraint",

					"tuple_type",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "playground_literal",
			Pattern: "(playground_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "postfix_expression",
			Pattern: "(postfix_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "precedence_group_attribute",
			Pattern: "(precedence_group_attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "precedence_group_attributes",
			Pattern: "(precedence_group_attributes)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "precedence_group_declaration",
			Pattern: "(precedence_group_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "prefix_expression",
			Pattern: "(prefix_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_expression",

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "property_behavior_modifier",
			Pattern: "(property_behavior_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "property_declaration",
			Pattern: "(property_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"computed_property",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"pattern",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "property_modifier",
			Pattern: "(property_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "protocol_body",
			Pattern: "(protocol_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"protocol_function_declaration",

				},
				
			},
			
		},

		{
			Name: "protocol_composition_type",
			Pattern: "(protocol_composition_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "protocol_declaration",
			Pattern: "(protocol_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"protocol",

					"protocol_body",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "protocol_function_declaration",
			Pattern: "(protocol_function_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"array_type",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"dictionary_type",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"existential_type",

					"fully_open_range",

					"function_type",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"metatype",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"opaque_type",

					"open_end_range_expression",

					"open_start_range_expression",

					"optional_type",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"protocol_composition_type",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"suppressed_constraint",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "protocol_property_declaration",
			Pattern: "(protocol_property_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"pattern",

				},
				
			},
			
		},

		{
			Name: "protocol_property_requirements",
			Pattern: "(protocol_property_requirements)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				Token: "self",
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "range_expression",
			Pattern: "(range_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "raw_str_interpolation",
			Pattern: "(raw_str_interpolation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"interpolated_expression",

				},
				
			},
			
		},

		{
			Name: "raw_string_literal",
			Pattern: "(raw_string_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				Children: []string{

					"raw_str_end_part",

					"raw_str_interpolation",

					"raw_str_part",

				},
				
			},
			
		},

		{
			Name: "regex_literal",
			Pattern: "(regex_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "repeat_while_statement",
			Pattern: "(repeat_while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"array_type",

					"as",

					"as_expression",

					"assignment",

					"async",

					"availability_condition",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"case",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"dictionary_type",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"existential_type",

					"fully_open_range",

					"function_type",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"is",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"metatype",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"opaque_type",

					"open_end_range_expression",

					"open_start_range_expression",

					"optional_type",

					"pattern",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"protocol_composition_type",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"suppressed_constraint",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"tuple_type",

					"type_annotation",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

					"value_binding_pattern",

					"value_pack_expansion",

					"value_parameter_pack",

					"where_clause",

					"wildcard_pattern",

				},
				
			},
			
		},

		{
			Name: "selector_expression",
			Pattern: "(selector_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "self_expression",
			Pattern: "(self_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "setter_specifier",
			Pattern: "(setter_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "shebang_line",
			Pattern: "(shebang_line)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "simple_identifier",
			Pattern: "(simple_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "source_file",
			Pattern: "(source_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "special_literal",
			Pattern: "(special_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "statements",
			Pattern: "(statements)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "str_escaped_char",
			Pattern: "(str_escaped_char)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "subscript_declaration",
			Pattern: "(subscript_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"array_type",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"dictionary_type",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"existential_type",

					"fully_open_range",

					"function_type",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"metatype",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"opaque_type",

					"open_end_range_expression",

					"open_start_range_expression",

					"optional_type",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"protocol_composition_type",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"suppressed_constraint",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "super_expression",
			Pattern: "(super_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "suppressed_constraint",
			Pattern: "(suppressed_constraint)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "switch_entry",
			Pattern: "(switch_entry)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "switch_pattern",
			Pattern: "(switch_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				
				
			},
			
		},

		{
			Name: "switch_statement",
			Pattern: "(switch_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "ternary_expression",
			Pattern: "(ternary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "throws",
			Pattern: "(throws)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				Token: "self",
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "try_expression",
			Pattern: "(try_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "try_operator",
			Pattern: "(try_operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "tuple_expression",
			Pattern: "(tuple_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "tuple_type",
			Pattern: "(tuple_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				Token: "self",
				
				Children: []string{

					"tuple_type_item",

				},
				
			},
			
		},

		{
			Name: "tuple_type_item",
			Pattern: "(tuple_type_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"simple_identifier",

					"suppressed_constraint",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "type_annotation",
			Pattern: "(type_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				Token: "self",
				Roles: []string{

					"Type",

				},
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"suppressed_constraint",

					"tuple_type",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "type_arguments",
			Pattern: "(type_arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"suppressed_constraint",

					"tuple_type",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "type_constraint",
			Pattern: "(type_constraint)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_constraints",
			Pattern: "(type_constraints)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_identifier",
			Pattern: "(type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_modifiers",
			Pattern: "(type_modifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "type_pack_expansion",
			Pattern: "(type_pack_expansion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_parameter",
			Pattern: "(type_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"suppressed_constraint",

					"tuple_type",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "type_parameter_modifiers",
			Pattern: "(type_parameter_modifiers)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_parameter_pack",
			Pattern: "(type_parameter_pack)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_parameters",
			Pattern: "(type_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "typealias_declaration",
			Pattern: "(typealias_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"array_type",

					"dictionary_type",

					"existential_type",

					"function_type",

					"metatype",

					"opaque_type",

					"optional_type",

					"protocol_composition_type",

					"suppressed_constraint",

					"tuple_type",

					"type_identifier",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

				},
				
			},
			
		},

		{
			Name: "user_type",
			Pattern: "(user_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "value_argument",
			Pattern: "(value_argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"additive_expression",

					"array_literal",

					"as_expression",

					"assignment",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"fully_open_range",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"open_end_range_expression",

					"open_start_range_expression",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"value_argument_label",

					"value_pack_expansion",

					"value_parameter_pack",

				},
				
			},
			
		},

		{
			Name: "value_argument_label",
			Pattern: "(value_argument_label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "value_arguments",
			Pattern: "(value_arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "value_binding_pattern",
			Pattern: "(value_binding_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"let",

					"var",

				},
				
			},
			
		},

		{
			Name: "value_pack_expansion",
			Pattern: "(value_pack_expansion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "value_parameter_pack",
			Pattern: "(value_parameter_pack)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "visibility_modifier",
			Pattern: "(visibility_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "where_clause",
			Pattern: "(where_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"additive_expression",

					"array_literal",

					"array_type",

					"as",

					"as_expression",

					"assignment",

					"async",

					"availability_condition",

					"await_expression",

					"bang",

					"bin_literal",

					"bitwise_operation",

					"boolean_literal",

					"call_expression",

					"case",

					"check_expression",

					"comparison_expression",

					"conjunction_expression",

					"constructor_expression",

					"custom_operator",

					"diagnostic",

					"dictionary_literal",

					"dictionary_type",

					"directive",

					"disjunction_expression",

					"equality_expression",

					"existential_type",

					"fully_open_range",

					"function_type",

					"hex_literal",

					"if_statement",

					"infix_expression",

					"integer_literal",

					"is",

					"key_path_expression",

					"key_path_string_expression",

					"lambda_literal",

					"line_string_literal",

					"macro_invocation",

					"metatype",

					"multi_line_string_literal",

					"multiplicative_expression",

					"navigation_expression",

					"nil",

					"nil_coalescing_expression",

					"oct_literal",

					"opaque_type",

					"open_end_range_expression",

					"open_start_range_expression",

					"optional_type",

					"pattern",

					"playground_literal",

					"postfix_expression",

					"prefix_expression",

					"protocol_composition_type",

					"range_expression",

					"raw_string_literal",

					"real_literal",

					"regex_literal",

					"selector_expression",

					"self_expression",

					"simple_identifier",

					"special_literal",

					"super_expression",

					"suppressed_constraint",

					"switch_statement",

					"ternary_expression",

					"try_expression",

					"tuple_expression",

					"tuple_type",

					"type_annotation",

					"type_modifiers",

					"type_pack_expansion",

					"type_parameter_pack",

					"user_type",

					"value_binding_pattern",

					"value_pack_expansion",

					"value_parameter_pack",

					"where_clause",

					"wildcard_pattern",

				},
				
			},
			
		},

		{
			Name: "willset_clause",
			Pattern: "(willset_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "willset_didset_block",
			Pattern: "(willset_didset_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "Protocol",
			Pattern: "(Protocol)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "Type",
			Pattern: "(Type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_expression",
			Pattern: "(_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_modify",
			Pattern: "(_modify)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "actor",
			Pattern: "(actor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "any",
			Pattern: "(any)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "arch",
			Pattern: "(arch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "as",
			Pattern: "(as)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "associatedtype",
			Pattern: "(associatedtype)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "async",
			Pattern: "(async)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "available",
			Pattern: "(available)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "await",
			Pattern: "(await)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "bin_literal",
			Pattern: "(bin_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "borrowing",
			Pattern: "(borrowing)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "canImport",
			Pattern: "(canImport)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "catch_keyword",
			Pattern: "(catch_keyword)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "colorLiteral",
			Pattern: "(colorLiteral)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "column",
			Pattern: "(column)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "compiler",
			Pattern: "(compiler)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "consuming",
			Pattern: "(consuming)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "convenience",
			Pattern: "(convenience)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "default_keyword",
			Pattern: "(default_keyword)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "deinit",
			Pattern: "(deinit)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "didSet",
			Pattern: "(didSet)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "distributed",
			Pattern: "(distributed)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "dsohandle",
			Pattern: "(dsohandle)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "dynamic",
			Pattern: "(dynamic)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "each",
			Pattern: "(each)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "extension",
			Pattern: "(extension)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "externalMacro",
			Pattern: "(externalMacro)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "fallthrough",
			Pattern: "(fallthrough)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "file",
			Pattern: "(file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "fileID",
			Pattern: "(fileID)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "fileLiteral",
			Pattern: "(fileLiteral)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "filePath",
			Pattern: "(filePath)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "fileprivate",
			Pattern: "(fileprivate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "final",
			Pattern: "(final)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "func",
			Pattern: "(func)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "function",
			Pattern: "(function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "get",
			Pattern: "(get)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "guard",
			Pattern: "(guard)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "hex_literal",
			Pattern: "(hex_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "imageLiteral",
			Pattern: "(imageLiteral)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "indirect",
			Pattern: "(indirect)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "infix",
			Pattern: "(infix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "init",
			Pattern: "(init)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "inout",
			Pattern: "(inout)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "integer_literal",
			Pattern: "(integer_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "internal",
			Pattern: "(internal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "is",
			Pattern: "(is)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "keyPath",
			Pattern: "(keyPath)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "lazy",
			Pattern: "(lazy)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "let",
			Pattern: "(let)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "line",
			Pattern: "(line)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "macro",
			Pattern: "(macro)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "multiline_comment",
			Pattern: "(multiline_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "mutating",
			Pattern: "(mutating)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "nil",
			Pattern: "(nil)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "nonisolated",
			Pattern: "(nonisolated)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "nonmutating",
			Pattern: "(nonmutating)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "oct_literal",
			Pattern: "(oct_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "open",
			Pattern: "(open)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "operator",
			Pattern: "(operator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "optional",
			Pattern: "(optional)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "os",
			Pattern: "(os)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "override",
			Pattern: "(override)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "package",
			Pattern: "(package)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Package",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "postfix",
			Pattern: "(postfix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "precedencegroup",
			Pattern: "(precedencegroup)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "prefix",
			Pattern: "(prefix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "private",
			Pattern: "(private)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "protocol",
			Pattern: "(protocol)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "public",
			Pattern: "(public)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "raw_str_continuing_indicator",
			Pattern: "(raw_str_continuing_indicator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "raw_str_end_part",
			Pattern: "(raw_str_end_part)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "raw_str_interpolation_start",
			Pattern: "(raw_str_interpolation_start)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "raw_str_part",
			Pattern: "(raw_str_part)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "real_literal",
			Pattern: "(real_literal)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "repeat",
			Pattern: "(repeat)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "required",
			Pattern: "(required)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "selector",
			Pattern: "(selector)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "self",
			Pattern: "(self)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "set",
			Pattern: "(set)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "some",
			Pattern: "(some)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "statement_label",
			Pattern: "(statement_label)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "static",
			Pattern: "(static)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "struct",
			Pattern: "(struct)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "subscript",
			Pattern: "(subscript)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "super",
			Pattern: "(super)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "swift",
			Pattern: "(swift)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "switch",
			Pattern: "(switch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "targetEnvironment",
			Pattern: "(targetEnvironment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "throw_keyword",
			Pattern: "(throw_keyword)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				Token: "self",
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "typealias",
			Pattern: "(typealias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "u",
			Pattern: "(u)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unavailable",
			Pattern: "(unavailable)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unowned",
			Pattern: "(unowned)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "var",
			Pattern: "(var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "weak",
			Pattern: "(weak)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "where_keyword",
			Pattern: "(where_keyword)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "wildcard_pattern",
			Pattern: "(wildcard_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "willSet",
			Pattern: "(willSet)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &swiftPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *swiftPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *swiftPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *swiftPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *swiftPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *swiftPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// tclPatternMatcher provides pre-compiled pattern matching for tcl
type tclPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newtclPatternMatcher() *tclPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "argument",
			Pattern: "(argument)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"braced_word",

					"quoted_word",

					"simple_word",

				},
				
			},
			
		},

		{
			Name: "arguments",
			Pattern: "(arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "array_index",
			Pattern: "(array_index)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				
				Roles: []string{

					"Index",

				},
				
				
			},
			
		},

		{
			Name: "binop_expr",
			Pattern: "(binop_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "braced_word",
			Pattern: "(braced_word)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "braced_word_simple",
			Pattern: "(braced_word_simple)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "catch",
			Pattern: "(catch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "command",
			Pattern: "(command)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"array_index",

					"braced_word",

					"command_substitution",

					"escaped_character",

					"quoted_word",

					"simple_word",

					"unpack",

					"variable_substitution",

					"word_list",

				},
				
			},
			
		},

		{
			Name: "command_substitution",
			Pattern: "(command_substitution)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"array_index",

					"braced_word",

					"command_substitution",

					"escaped_character",

					"quoted_word",

					"simple_word",

					"unpack",

					"variable_substitution",

				},
				
			},
			
		},

		{
			Name: "elseif",
			Pattern: "(elseif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"array_index",

					"braced_word",

					"command_substitution",

					"escaped_character",

					"expr",

					"quoted_word",

					"simple_word",

					"unpack",

					"variable_substitution",

				},
				
			},
			
		},

		{
			Name: "expr",
			Pattern: "(expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "expr_cmd",
			Pattern: "(expr_cmd)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "finally",
			Pattern: "(finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "foreach",
			Pattern: "(foreach)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "global",
			Pattern: "(global)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "id",
			Pattern: "(id)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"array_index",

					"braced_word",

					"command_substitution",

					"else",

					"elseif",

					"escaped_character",

					"expr",

					"quoted_word",

					"simple_word",

					"unpack",

					"variable_substitution",

				},
				
			},
			
		},

		{
			Name: "namespace",
			Pattern: "(namespace)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "procedure",
			Pattern: "(procedure)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"arguments",

					"array_index",

					"braced_word",

					"command_substitution",

					"escaped_character",

					"quoted_word",

					"simple_word",

					"unpack",

					"variable_substitution",

				},
				
			},
			
		},

		{
			Name: "quoted_word",
			Pattern: "(quoted_word)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "regexp",
			Pattern: "(regexp)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "set",
			Pattern: "(set)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "source_file",
			Pattern: "(source_file)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ternary_expr",
			Pattern: "(ternary_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "unary_expr",
			Pattern: "(unary_expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "variable_substitution",
			Pattern: "(variable_substitution)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "word_list",
			Pattern: "(word_list)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "catch",
			Pattern: "(catch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "elseif",
			Pattern: "(elseif)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "eq",
			Pattern: "(eq)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "error",
			Pattern: "(error)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "escaped_character",
			Pattern: "(escaped_character)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expr",
			Pattern: "(expr)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "finally",
			Pattern: "(finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "foreach",
			Pattern: "(foreach)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "global",
			Pattern: "(global)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "namespace",
			Pattern: "(namespace)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "ne",
			Pattern: "(ne)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ni",
			Pattern: "(ni)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "number",
			Pattern: "(number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "on",
			Pattern: "(on)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "proc",
			Pattern: "(proc)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "regexp",
			Pattern: "(regexp)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "set",
			Pattern: "(set)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

		{
			Name: "simple_word",
			Pattern: "(simple_word)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "unpack",
			Pattern: "(unpack)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &tclPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *tclPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *tclPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *tclPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *tclPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *tclPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// tomlPatternMatcher provides pre-compiled pattern matching for toml
type tomlPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newtomlPatternMatcher() *tomlPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "array",
			Pattern: "(array)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "document",
			Pattern: "(document)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "dotted_key",
			Pattern: "(dotted_key)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "float",
			Pattern: "(float)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "inline_table",
			Pattern: "(inline_table)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "integer",
			Pattern: "(integer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pair",
			Pattern: "(pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "quoted_key",
			Pattern: "(quoted_key)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "table",
			Pattern: "(table)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "table_array_element",
			Pattern: "(table_array_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "bare_key",
			Pattern: "(bare_key)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "boolean",
			Pattern: "(boolean)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "local_date",
			Pattern: "(local_date)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "local_date_time",
			Pattern: "(local_date_time)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "local_time",
			Pattern: "(local_time)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "offset_date_time",
			Pattern: "(offset_date_time)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &tomlPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *tomlPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *tomlPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *tomlPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *tomlPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *tomlPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// tsxPatternMatcher provides pre-compiled pattern matching for tsx
type tsxPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newtsxPatternMatcher() *tsxPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "declaration",
			Pattern: "(declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expression",
			Pattern: "(expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pattern",
			Pattern: "(pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "primary_expression",
			Pattern: "(primary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "primary_type",
			Pattern: "(primary_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "statement",
			Pattern: "(statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "abstract_class_declaration",
			Pattern: "(abstract_class_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"class_body",

					"decorator",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "abstract_method_signature",
			Pattern: "(abstract_method_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"asserts_annotation",

					"computed_property_name",

					"formal_parameters",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "accessibility_modifier",
			Pattern: "(accessibility_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "adding_type_annotation",
			Pattern: "(adding_type_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				
				Roles: []string{

					"Type",

				},
				
				
			},
			
		},

		{
			Name: "ambient_declaration",
			Pattern: "(ambient_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "arguments",
			Pattern: "(arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "array",
			Pattern: "(array)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "array_pattern",
			Pattern: "(array_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "array_type",
			Pattern: "(array_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "arrow_function",
			Pattern: "(arrow_function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"asserts_annotation",

					"expression",

					"formal_parameters",

					"identifier",

					"statement_block",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "as_expression",
			Pattern: "(as_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "asserts",
			Pattern: "(asserts)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "asserts_annotation",
			Pattern: "(asserts_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "assignment_expression",
			Pattern: "(assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"array_pattern",

					"expression",

					"identifier",

					"member_expression",

					"non_null_expression",

					"object_pattern",

					"parenthesized_expression",

					"subscript_expression",

					"undefined",

				},
				
			},
			
		},

		{
			Name: "assignment_pattern",
			Pattern: "(assignment_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

					"Assignment",

				},
				Children: []string{

					"expression",

					"pattern",

				},
				
			},
			
		},

		{
			Name: "augmented_assignment_expression",
			Pattern: "(augmented_assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"expression",

					"identifier",

					"member_expression",

					"non_null_expression",

					"parenthesized_expression",

					"subscript_expression",

				},
				
			},
			
		},

		{
			Name: "await_expression",
			Pattern: "(await_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"in",

					"instanceof",

					"private_property_identifier",

				},
				
			},
			
		},

		{
			Name: "break_statement",
			Pattern: "(break_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Operator",

					"Break",

				},
				Children: []string{

					"statement_identifier",

				},
				
			},
			
		},

		{
			Name: "call_expression",
			Pattern: "(call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"arguments",

					"expression",

					"import",

					"template_string",

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "call_signature",
			Pattern: "(call_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

					"Call",

				},
				Children: []string{

					"asserts_annotation",

					"formal_parameters",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "catch_clause",
			Pattern: "(catch_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				Children: []string{

					"array_pattern",

					"identifier",

					"object_pattern",

					"statement_block",

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"class_body",

					"decorator",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "class_body",
			Pattern: "(class_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"decorator",

				},
				
			},
			
		},

		{
			Name: "class_declaration",
			Pattern: "(class_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Body",

					"Class",

					"Declaration",

				},
				Children: []string{

					"class_body",

					"decorator",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "class_heritage",
			Pattern: "(class_heritage)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "class_static_block",
			Pattern: "(class_static_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "computed_property_name",
			Pattern: "(computed_property_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "conditional_type",
			Pattern: "(conditional_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"type",

				},
				
			},
			
		},

		{
			Name: "constraint",
			Pattern: "(constraint)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "construct_signature",
			Pattern: "(construct_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"formal_parameters",

					"type_annotation",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "constructor_type",
			Pattern: "(constructor_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"formal_parameters",

					"type",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "continue_statement",
			Pattern: "(continue_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				Children: []string{

					"statement_identifier",

				},
				
			},
			
		},

		{
			Name: "debugger_statement",
			Pattern: "(debugger_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "decorator",
			Pattern: "(decorator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Decorator",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "default_type",
			Pattern: "(default_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "do_statement",
			Pattern: "(do_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "else_clause",
			Pattern: "(else_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "empty_statement",
			Pattern: "(empty_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum_assignment",
			Pattern: "(enum_assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"computed_property_name",

					"expression",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "enum_body",
			Pattern: "(enum_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"computed_property_name",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "enum_declaration",
			Pattern: "(enum_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"enum_body",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "existential_type",
			Pattern: "(existential_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "child:identifier",
				Roles: []string{

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "export_clause",
			Pattern: "(export_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "export_specifier",
			Pattern: "(export_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "export_statement",
			Pattern: "(export_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"declaration",

					"decorator",

					"expression",

					"string",

				},
				
			},
			
		},

		{
			Name: "expression_statement",
			Pattern: "(expression_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "extends_clause",
			Pattern: "(extends_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "extends_type_clause",
			Pattern: "(extends_type_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"generic_type",

					"nested_type_identifier",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "finally_clause",
			Pattern: "(finally_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				
				Roles: []string{

					"Finally",

				},
				Children: []string{

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "flow_maybe_type",
			Pattern: "(flow_maybe_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "for_in_statement",
			Pattern: "(for_in_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"array_pattern",

					"const",

					"expression",

					"identifier",

					"in",

					"let",

					"member_expression",

					"non_null_expression",

					"object_pattern",

					"of",

					"parenthesized_expression",

					"sequence_expression",

					"statement",

					"subscript_expression",

					"undefined",

					"var",

				},
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"empty_statement",

					"expression",

					"lexical_declaration",

					"sequence_expression",

					"statement",

					"variable_declaration",

				},
				
			},
			
		},

		{
			Name: "formal_parameters",
			Pattern: "(formal_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "function_declaration",
			Pattern: "(function_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"asserts_annotation",

					"formal_parameters",

					"identifier",

					"statement_block",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "function_expression",
			Pattern: "(function_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"asserts_annotation",

					"formal_parameters",

					"identifier",

					"statement_block",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "function_signature",
			Pattern: "(function_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"asserts_annotation",

					"formal_parameters",

					"identifier",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "function_type",
			Pattern: "(function_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"asserts",

					"formal_parameters",

					"type",

					"type_parameters",

					"type_predicate",

				},
				
			},
			
		},

		{
			Name: "generator_function",
			Pattern: "(generator_function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Function",

					"Declaration",

				},
				Children: []string{

					"asserts_annotation",

					"formal_parameters",

					"identifier",

					"statement_block",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "generator_function_declaration",
			Pattern: "(generator_function_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"asserts_annotation",

					"formal_parameters",

					"identifier",

					"statement_block",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "generic_type",
			Pattern: "(generic_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "child:identifier",
				
				Children: []string{

					"nested_type_identifier",

					"type_arguments",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				Roles: []string{

					"Condition",

				},
				Children: []string{

					"else_clause",

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "implements_clause",
			Pattern: "(implements_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_alias",
			Pattern: "(import_alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_attribute",
			Pattern: "(import_attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_clause",
			Pattern: "(import_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_require_clause",
			Pattern: "(import_require_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"string",

				},
				
			},
			
		},

		{
			Name: "import_specifier",
			Pattern: "(import_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "import_statement",
			Pattern: "(import_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"string",

				},
				
			},
			
		},

		{
			Name: "index_signature",
			Pattern: "(index_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				
				Roles: []string{

					"Index",

				},
				Children: []string{

					"adding_type_annotation",

					"identifier",

					"omitting_type_annotation",

					"opting_type_annotation",

					"type",

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "index_type_query",
			Pattern: "(index_type_query)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				Token: "self",
				Roles: []string{

					"Index",

				},
				
				
			},
			
		},

		{
			Name: "infer_type",
			Pattern: "(infer_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "instantiation_expression",
			Pattern: "(instantiation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

					"import",

					"member_expression",

					"subscript_expression",

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "interface_body",
			Pattern: "(interface_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "interface_declaration",
			Pattern: "(interface_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Body",

					"Interface",

					"Declaration",

				},
				Children: []string{

					"interface_body",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "internal_module",
			Pattern: "(internal_module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				Children: []string{

					"identifier",

					"nested_identifier",

					"statement_block",

					"string",

				},
				
			},
			
		},

		{
			Name: "intersection_type",
			Pattern: "(intersection_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "labeled_statement",
			Pattern: "(labeled_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"statement",

					"statement_identifier",

				},
				
			},
			
		},

		{
			Name: "lexical_declaration",
			Pattern: "(lexical_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"const",

					"let",

				},
				
			},
			
		},

		{
			Name: "literal_type",
			Pattern: "(literal_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "lookup_type",
			Pattern: "(lookup_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "mapped_type_clause",
			Pattern: "(mapped_type_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "member_expression",
			Pattern: "(member_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

					"import",

					"optional_chain",

					"private_property_identifier",

					"property_identifier",

				},
				
			},
			
		},

		{
			Name: "meta_property",
			Pattern: "(meta_property)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "method_definition",
			Pattern: "(method_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"asserts_annotation",

					"computed_property_name",

					"formal_parameters",

					"number",

					"private_property_identifier",

					"property_identifier",

					"statement_block",

					"string",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "method_signature",
			Pattern: "(method_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"asserts_annotation",

					"computed_property_name",

					"formal_parameters",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "module",
			Pattern: "(module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"identifier",

					"nested_identifier",

					"statement_block",

					"string",

				},
				
			},
			
		},

		{
			Name: "named_imports",
			Pattern: "(named_imports)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "namespace_export",
			Pattern: "(namespace_export)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "namespace_import",
			Pattern: "(namespace_import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "nested_identifier",
			Pattern: "(nested_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"identifier",

					"member_expression",

					"property_identifier",

				},
				
			},
			
		},

		{
			Name: "nested_type_identifier",
			Pattern: "(nested_type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"identifier",

					"nested_identifier",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "new_expression",
			Pattern: "(new_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				Children: []string{

					"arguments",

					"primary_expression",

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "non_null_expression",
			Pattern: "(non_null_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "object",
			Pattern: "(object)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "object_assignment_pattern",
			Pattern: "(object_assignment_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"array_pattern",

					"expression",

					"object_pattern",

					"shorthand_property_identifier_pattern",

				},
				
			},
			
		},

		{
			Name: "object_pattern",
			Pattern: "(object_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "object_type",
			Pattern: "(object_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "omitting_type_annotation",
			Pattern: "(omitting_type_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				Token: "self",
				Roles: []string{

					"Type",

				},
				
				
			},
			
		},

		{
			Name: "opting_type_annotation",
			Pattern: "(opting_type_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				
				Roles: []string{

					"Type",

				},
				
				
			},
			
		},

		{
			Name: "optional_chain",
			Pattern: "(optional_chain)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "optional_parameter",
			Pattern: "(optional_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"decorator",

					"expression",

					"identifier",

					"pattern",

					"this",

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "optional_type",
			Pattern: "(optional_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "override_modifier",
			Pattern: "(override_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "pair",
			Pattern: "(pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"computed_property_name",

					"expression",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "pair_pattern",
			Pattern: "(pair_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"assignment_pattern",

					"computed_property_name",

					"number",

					"pattern",

					"private_property_identifier",

					"property_identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				Children: []string{

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "parenthesized_type",
			Pattern: "(parenthesized_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "predefined_type",
			Pattern: "(predefined_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "program",
			Pattern: "(program)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "property_signature",
			Pattern: "(property_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"computed_property_name",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "public_field_definition",
			Pattern: "(public_field_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"computed_property_name",

					"decorator",

					"expression",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "readonly_type",
			Pattern: "(readonly_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "regex",
			Pattern: "(regex)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"regex_flags",

					"regex_pattern",

				},
				
			},
			
		},

		{
			Name: "required_parameter",
			Pattern: "(required_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"decorator",

					"expression",

					"identifier",

					"pattern",

					"rest_pattern",

					"this",

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "rest_pattern",
			Pattern: "(rest_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "rest_type",
			Pattern: "(rest_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "return_statement",
			Pattern: "(return_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "satisfies_expression",
			Pattern: "(satisfies_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "sequence_expression",
			Pattern: "(sequence_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "spread_element",
			Pattern: "(spread_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Spread",
				Token: "self",
				Roles: []string{

					"Spread",

				},
				
				
			},
			
		},

		{
			Name: "statement_block",
			Pattern: "(statement_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "subscript_expression",
			Pattern: "(subscript_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"number",

					"optional_chain",

					"predefined_type",

					"sequence_expression",

					"string",

				},
				
			},
			
		},

		{
			Name: "switch_body",
			Pattern: "(switch_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "switch_case",
			Pattern: "(switch_case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				Children: []string{

					"expression",

					"sequence_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "switch_default",
			Pattern: "(switch_default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"statement",

				},
				
			},
			
		},

		{
			Name: "switch_statement",
			Pattern: "(switch_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				Children: []string{

					"parenthesized_expression",

					"switch_body",

				},
				
			},
			
		},

		{
			Name: "template_literal_type",
			Pattern: "(template_literal_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Branch",

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "template_string",
			Pattern: "(template_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "template_substitution",
			Pattern: "(template_substitution)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "template_type",
			Pattern: "(template_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ternary_expression",
			Pattern: "(ternary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "throw_statement",
			Pattern: "(throw_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "try_statement",
			Pattern: "(try_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				Children: []string{

					"catch_clause",

					"finally_clause",

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "tuple_type",
			Pattern: "(tuple_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				
				
			},
			
		},

		{
			Name: "type_alias_declaration",
			Pattern: "(type_alias_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"type",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "type_annotation",
			Pattern: "(type_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				
				Roles: []string{

					"Type",

				},
				
				
			},
			
		},

		{
			Name: "type_arguments",
			Pattern: "(type_arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_assertion",
			Pattern: "(type_assertion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_parameter",
			Pattern: "(type_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"constraint",

					"default_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "type_parameters",
			Pattern: "(type_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_predicate",
			Pattern: "(type_predicate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

					"this",

					"type",

				},
				
			},
			
		},

		{
			Name: "type_predicate_annotation",
			Pattern: "(type_predicate_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_query",
			Pattern: "(type_query)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unary_expression",
			Pattern: "(unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"delete",

					"expression",

					"number",

					"typeof",

					"void",

				},
				
			},
			
		},

		{
			Name: "union_type",
			Pattern: "(union_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "UnaryOp",
				Token: "self",
				Roles: []string{

					"Operator",

				},
				
				
			},
			
		},

		{
			Name: "update_expression",
			Pattern: "(update_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "variable_declaration",
			Pattern: "(variable_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "variable_declarator",
			Pattern: "(variable_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"array_pattern",

					"expression",

					"identifier",

					"object_pattern",

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "with_statement",
			Pattern: "(with_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "yield_expression",
			Pattern: "(yield_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "abstract",
			Pattern: "(abstract)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "accessor",
			Pattern: "(accessor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "any",
			Pattern: "(any)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "as",
			Pattern: "(as)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "assert",
			Pattern: "(assert)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "asserts",
			Pattern: "(asserts)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "async",
			Pattern: "(async)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "await",
			Pattern: "(await)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "boolean",
			Pattern: "(boolean)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "catch",
			Pattern: "(catch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				Token: "self",
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "const",
			Pattern: "(const)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "debugger",
			Pattern: "(debugger)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "declare",
			Pattern: "(declare)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "delete",
			Pattern: "(delete)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "export",
			Pattern: "(export)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extends",
			Pattern: "(extends)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "finally",
			Pattern: "(finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "from",
			Pattern: "(from)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "function",
			Pattern: "(function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "get",
			Pattern: "(get)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "global",
			Pattern: "(global)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "hash_bang_line",
			Pattern: "(hash_bang_line)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "html_comment",
			Pattern: "(html_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "implements",
			Pattern: "(implements)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "infer",
			Pattern: "(infer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "instanceof",
			Pattern: "(instanceof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "interface",
			Pattern: "(interface)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "is",
			Pattern: "(is)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyof",
			Pattern: "(keyof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "let",
			Pattern: "(let)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "meta",
			Pattern: "(meta)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "module",
			Pattern: "(module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "namespace",
			Pattern: "(namespace)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "never",
			Pattern: "(never)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "new",
			Pattern: "(new)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "null",
			Pattern: "(null)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "number",
			Pattern: "(number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "number",
			Pattern: "(number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "object",
			Pattern: "(object)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "of",
			Pattern: "(of)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "override",
			Pattern: "(override)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "private",
			Pattern: "(private)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "private_property_identifier",
			Pattern: "(private_property_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "property_identifier",
			Pattern: "(property_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "protected",
			Pattern: "(protected)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "public",
			Pattern: "(public)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "readonly",
			Pattern: "(readonly)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "regex_flags",
			Pattern: "(regex_flags)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "regex_pattern",
			Pattern: "(regex_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "require",
			Pattern: "(require)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "satisfies",
			Pattern: "(satisfies)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "set",
			Pattern: "(set)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "shorthand_property_identifier",
			Pattern: "(shorthand_property_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "shorthand_property_identifier_pattern",
			Pattern: "(shorthand_property_identifier_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "statement_identifier",
			Pattern: "(statement_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "static",
			Pattern: "(static)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string_fragment",
			Pattern: "(string_fragment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "super",
			Pattern: "(super)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "switch",
			Pattern: "(switch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "symbol",
			Pattern: "(symbol)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "target",
			Pattern: "(target)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "this",
			Pattern: "(this)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "this_type",
			Pattern: "(this_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "throw",
			Pattern: "(throw)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_identifier",
			Pattern: "(type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "typeof",
			Pattern: "(typeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "undefined",
			Pattern: "(undefined)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unknown",
			Pattern: "(unknown)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "using",
			Pattern: "(using)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "var",
			Pattern: "(var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "void",
			Pattern: "(void)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "with",
			Pattern: "(with)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &tsxPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *tsxPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *tsxPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *tsxPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *tsxPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *tsxPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// typescriptPatternMatcher provides pre-compiled pattern matching for typescript
type typescriptPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newtypescriptPatternMatcher() *typescriptPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "declaration",
			Pattern: "(declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "expression",
			Pattern: "(expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "pattern",
			Pattern: "(pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "primary_expression",
			Pattern: "(primary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "primary_type",
			Pattern: "(primary_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "statement",
			Pattern: "(statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "abstract_class_declaration",
			Pattern: "(abstract_class_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"class_body",

					"decorator",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "abstract_method_signature",
			Pattern: "(abstract_method_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"asserts_annotation",

					"computed_property_name",

					"formal_parameters",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "accessibility_modifier",
			Pattern: "(accessibility_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "adding_type_annotation",
			Pattern: "(adding_type_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				
				Roles: []string{

					"Type",

				},
				
				
			},
			
		},

		{
			Name: "ambient_declaration",
			Pattern: "(ambient_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "arguments",
			Pattern: "(arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "array",
			Pattern: "(array)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "array_pattern",
			Pattern: "(array_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "array_type",
			Pattern: "(array_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "arrow_function",
			Pattern: "(arrow_function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Lambda",
				
				Roles: []string{

					"Lambda",

				},
				Children: []string{

					"asserts_annotation",

					"expression",

					"formal_parameters",

					"identifier",

					"statement_block",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "as_expression",
			Pattern: "(as_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Cast",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "asserts",
			Pattern: "(asserts)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "asserts_annotation",
			Pattern: "(asserts_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "assignment_expression",
			Pattern: "(assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"array_pattern",

					"expression",

					"identifier",

					"member_expression",

					"non_null_expression",

					"object_pattern",

					"parenthesized_expression",

					"subscript_expression",

					"undefined",

				},
				
			},
			
		},

		{
			Name: "assignment_pattern",
			Pattern: "(assignment_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				Token: "self",
				Roles: []string{

					"Assignment",

					"Assignment",

				},
				Children: []string{

					"expression",

					"pattern",

				},
				
			},
			
		},

		{
			Name: "augmented_assignment_expression",
			Pattern: "(augmented_assignment_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"expression",

					"identifier",

					"member_expression",

					"non_null_expression",

					"parenthesized_expression",

					"subscript_expression",

				},
				
			},
			
		},

		{
			Name: "await_expression",
			Pattern: "(await_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "binary_expression",
			Pattern: "(binary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"in",

					"instanceof",

					"private_property_identifier",

				},
				
			},
			
		},

		{
			Name: "break_statement",
			Pattern: "(break_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Operator",

					"Break",

				},
				Children: []string{

					"statement_identifier",

				},
				
			},
			
		},

		{
			Name: "call_expression",
			Pattern: "(call_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				
				Roles: []string{

					"Call",

				},
				Children: []string{

					"arguments",

					"expression",

					"import",

					"template_string",

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "call_signature",
			Pattern: "(call_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Call",
				Token: "self",
				Roles: []string{

					"Call",

					"Call",

				},
				Children: []string{

					"asserts_annotation",

					"formal_parameters",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "catch_clause",
			Pattern: "(catch_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				
				Roles: []string{

					"Catch",

				},
				Children: []string{

					"array_pattern",

					"identifier",

					"object_pattern",

					"statement_block",

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"class_body",

					"decorator",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "class_body",
			Pattern: "(class_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"decorator",

				},
				
			},
			
		},

		{
			Name: "class_declaration",
			Pattern: "(class_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Body",

					"Class",

					"Declaration",

				},
				Children: []string{

					"class_body",

					"decorator",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "class_heritage",
			Pattern: "(class_heritage)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "class_static_block",
			Pattern: "(class_static_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				Token: "self",
				Roles: []string{

					"Class",

					"Declaration",

				},
				Children: []string{

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "computed_property_name",
			Pattern: "(computed_property_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "conditional_type",
			Pattern: "(conditional_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"type",

				},
				
			},
			
		},

		{
			Name: "constraint",
			Pattern: "(constraint)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "construct_signature",
			Pattern: "(construct_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				Token: "self",
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"formal_parameters",

					"type_annotation",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "constructor_type",
			Pattern: "(constructor_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Struct",
				
				Roles: []string{

					"Struct",

					"Declaration",

				},
				Children: []string{

					"formal_parameters",

					"type",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "continue_statement",
			Pattern: "(continue_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				Children: []string{

					"statement_identifier",

				},
				
			},
			
		},

		{
			Name: "debugger_statement",
			Pattern: "(debugger_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "decorator",
			Pattern: "(decorator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Decorator",
				Token: "self",
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "default_type",
			Pattern: "(default_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "do_statement",
			Pattern: "(do_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "else_clause",
			Pattern: "(else_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "empty_statement",
			Pattern: "(empty_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum_assignment",
			Pattern: "(enum_assignment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"computed_property_name",

					"expression",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "enum_body",
			Pattern: "(enum_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"computed_property_name",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "enum_declaration",
			Pattern: "(enum_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				Children: []string{

					"enum_body",

					"identifier",

				},
				
			},
			
		},

		{
			Name: "existential_type",
			Pattern: "(existential_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "child:identifier",
				Roles: []string{

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "export_clause",
			Pattern: "(export_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "export_specifier",
			Pattern: "(export_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "export_statement",
			Pattern: "(export_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"declaration",

					"decorator",

					"expression",

					"string",

				},
				
			},
			
		},

		{
			Name: "expression_statement",
			Pattern: "(expression_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "extends_clause",
			Pattern: "(extends_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "extends_type_clause",
			Pattern: "(extends_type_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"generic_type",

					"nested_type_identifier",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "finally_clause",
			Pattern: "(finally_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				
				Roles: []string{

					"Finally",

				},
				Children: []string{

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "flow_maybe_type",
			Pattern: "(flow_maybe_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "for_in_statement",
			Pattern: "(for_in_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"array_pattern",

					"const",

					"expression",

					"identifier",

					"in",

					"let",

					"member_expression",

					"non_null_expression",

					"object_pattern",

					"of",

					"parenthesized_expression",

					"sequence_expression",

					"statement",

					"subscript_expression",

					"undefined",

					"var",

				},
				
			},
			
		},

		{
			Name: "for_statement",
			Pattern: "(for_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"empty_statement",

					"expression",

					"lexical_declaration",

					"sequence_expression",

					"statement",

					"variable_declaration",

				},
				
			},
			
		},

		{
			Name: "formal_parameters",
			Pattern: "(formal_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "function_declaration",
			Pattern: "(function_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"asserts_annotation",

					"formal_parameters",

					"identifier",

					"statement_block",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "function_expression",
			Pattern: "(function_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"asserts_annotation",

					"formal_parameters",

					"identifier",

					"statement_block",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "function_signature",
			Pattern: "(function_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"asserts_annotation",

					"formal_parameters",

					"identifier",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "function_type",
			Pattern: "(function_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"asserts",

					"formal_parameters",

					"type",

					"type_parameters",

					"type_predicate",

				},
				
			},
			
		},

		{
			Name: "generator_function",
			Pattern: "(generator_function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Function",

					"Declaration",

				},
				Children: []string{

					"asserts_annotation",

					"formal_parameters",

					"identifier",

					"statement_block",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "generator_function_declaration",
			Pattern: "(generator_function_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				Children: []string{

					"asserts_annotation",

					"formal_parameters",

					"identifier",

					"statement_block",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "generic_type",
			Pattern: "(generic_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "child:identifier",
				
				Children: []string{

					"nested_type_identifier",

					"type_arguments",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "identifier",
			Pattern: "(identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "if_statement",
			Pattern: "(if_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				Token: "self",
				Roles: []string{

					"Condition",

				},
				Children: []string{

					"else_clause",

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "implements_clause",
			Pattern: "(implements_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_alias",
			Pattern: "(import_alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_attribute",
			Pattern: "(import_attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_clause",
			Pattern: "(import_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "import_require_clause",
			Pattern: "(import_require_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"string",

				},
				
			},
			
		},

		{
			Name: "import_specifier",
			Pattern: "(import_specifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "import_statement",
			Pattern: "(import_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"string",

				},
				
			},
			
		},

		{
			Name: "index_signature",
			Pattern: "(index_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				
				Roles: []string{

					"Index",

				},
				Children: []string{

					"adding_type_annotation",

					"identifier",

					"omitting_type_annotation",

					"opting_type_annotation",

					"type",

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "index_type_query",
			Pattern: "(index_type_query)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Index",
				Token: "self",
				Roles: []string{

					"Index",

				},
				
				
			},
			
		},

		{
			Name: "infer_type",
			Pattern: "(infer_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "instantiation_expression",
			Pattern: "(instantiation_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

					"import",

					"member_expression",

					"subscript_expression",

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "interface_body",
			Pattern: "(interface_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "interface_declaration",
			Pattern: "(interface_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Body",

					"Interface",

					"Declaration",

				},
				Children: []string{

					"interface_body",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "internal_module",
			Pattern: "(internal_module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				Children: []string{

					"identifier",

					"nested_identifier",

					"statement_block",

					"string",

				},
				
			},
			
		},

		{
			Name: "intersection_type",
			Pattern: "(intersection_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "labeled_statement",
			Pattern: "(labeled_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"statement",

					"statement_identifier",

				},
				
			},
			
		},

		{
			Name: "lexical_declaration",
			Pattern: "(lexical_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"const",

					"let",

				},
				
			},
			
		},

		{
			Name: "literal_type",
			Pattern: "(literal_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "lookup_type",
			Pattern: "(lookup_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "mapped_type_clause",
			Pattern: "(mapped_type_clause)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "member_expression",
			Pattern: "(member_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

					"import",

					"optional_chain",

					"private_property_identifier",

					"property_identifier",

				},
				
			},
			
		},

		{
			Name: "meta_property",
			Pattern: "(meta_property)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				
				Roles: []string{

					"Member",

				},
				
				
			},
			
		},

		{
			Name: "method_definition",
			Pattern: "(method_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				Token: "self",
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"asserts_annotation",

					"computed_property_name",

					"formal_parameters",

					"number",

					"private_property_identifier",

					"property_identifier",

					"statement_block",

					"string",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "method_signature",
			Pattern: "(method_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Method",
				
				Roles: []string{

					"Function",

					"Declaration",

					"Member",

				},
				Children: []string{

					"asserts_annotation",

					"computed_property_name",

					"formal_parameters",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

					"type_annotation",

					"type_parameters",

					"type_predicate_annotation",

				},
				
			},
			
		},

		{
			Name: "module",
			Pattern: "(module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				Token: "self",
				Roles: []string{

					"Module",

				},
				Children: []string{

					"identifier",

					"nested_identifier",

					"statement_block",

					"string",

				},
				
			},
			
		},

		{
			Name: "named_imports",
			Pattern: "(named_imports)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "namespace_export",
			Pattern: "(namespace_export)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "namespace_import",
			Pattern: "(namespace_import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "nested_identifier",
			Pattern: "(nested_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				Children: []string{

					"identifier",

					"member_expression",

					"property_identifier",

				},
				
			},
			
		},

		{
			Name: "nested_type_identifier",
			Pattern: "(nested_type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				Children: []string{

					"identifier",

					"nested_identifier",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "new_expression",
			Pattern: "(new_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				Children: []string{

					"arguments",

					"primary_expression",

					"type_arguments",

				},
				
			},
			
		},

		{
			Name: "non_null_expression",
			Pattern: "(non_null_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "object",
			Pattern: "(object)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "object_assignment_pattern",
			Pattern: "(object_assignment_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Assignment",
				
				Roles: []string{

					"Assignment",

				},
				Children: []string{

					"array_pattern",

					"expression",

					"object_pattern",

					"shorthand_property_identifier_pattern",

				},
				
			},
			
		},

		{
			Name: "object_pattern",
			Pattern: "(object_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "object_type",
			Pattern: "(object_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "omitting_type_annotation",
			Pattern: "(omitting_type_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				Token: "self",
				Roles: []string{

					"Type",

				},
				
				
			},
			
		},

		{
			Name: "opting_type_annotation",
			Pattern: "(opting_type_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				
				Roles: []string{

					"Type",

				},
				
				
			},
			
		},

		{
			Name: "optional_chain",
			Pattern: "(optional_chain)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "optional_parameter",
			Pattern: "(optional_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"decorator",

					"expression",

					"identifier",

					"pattern",

					"this",

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "optional_type",
			Pattern: "(optional_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "override_modifier",
			Pattern: "(override_modifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "pair",
			Pattern: "(pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"computed_property_name",

					"expression",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "pair_pattern",
			Pattern: "(pair_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				Children: []string{

					"assignment_pattern",

					"computed_property_name",

					"number",

					"pattern",

					"private_property_identifier",

					"property_identifier",

					"string",

				},
				
			},
			
		},

		{
			Name: "parenthesized_expression",
			Pattern: "(parenthesized_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				Children: []string{

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "parenthesized_type",
			Pattern: "(parenthesized_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "predefined_type",
			Pattern: "(predefined_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "program",
			Pattern: "(program)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "property_signature",
			Pattern: "(property_signature)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Property",
				Token: "self",
				Roles: []string{

					"Member",

				},
				Children: []string{

					"computed_property_name",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "public_field_definition",
			Pattern: "(public_field_definition)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Field",
				
				Roles: []string{

					"Member",

				},
				Children: []string{

					"computed_property_name",

					"decorator",

					"expression",

					"number",

					"private_property_identifier",

					"property_identifier",

					"string",

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "readonly_type",
			Pattern: "(readonly_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "regex",
			Pattern: "(regex)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"regex_flags",

					"regex_pattern",

				},
				
			},
			
		},

		{
			Name: "required_parameter",
			Pattern: "(required_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"decorator",

					"expression",

					"identifier",

					"pattern",

					"rest_pattern",

					"this",

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "rest_pattern",
			Pattern: "(rest_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "rest_type",
			Pattern: "(rest_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "return_statement",
			Pattern: "(return_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "satisfies_expression",
			Pattern: "(satisfies_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "sequence_expression",
			Pattern: "(sequence_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "spread_element",
			Pattern: "(spread_element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Spread",
				Token: "self",
				Roles: []string{

					"Spread",

				},
				
				
			},
			
		},

		{
			Name: "statement_block",
			Pattern: "(statement_block)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "subscript_expression",
			Pattern: "(subscript_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

					"number",

					"optional_chain",

					"predefined_type",

					"sequence_expression",

					"string",

				},
				
			},
			
		},

		{
			Name: "switch_body",
			Pattern: "(switch_body)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "switch_case",
			Pattern: "(switch_case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				Children: []string{

					"expression",

					"sequence_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "switch_default",
			Pattern: "(switch_default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				Roles: []string{

					"Branch",

				},
				Children: []string{

					"statement",

				},
				
			},
			
		},

		{
			Name: "switch_statement",
			Pattern: "(switch_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				
				
				Children: []string{

					"parenthesized_expression",

					"switch_body",

				},
				
			},
			
		},

		{
			Name: "template_literal_type",
			Pattern: "(template_literal_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Branch",

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "template_string",
			Pattern: "(template_string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "template_substitution",
			Pattern: "(template_substitution)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "template_type",
			Pattern: "(template_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ternary_expression",
			Pattern: "(ternary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "throw_statement",
			Pattern: "(throw_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "try_statement",
			Pattern: "(try_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				Token: "self",
				Roles: []string{

					"Try",

				},
				Children: []string{

					"catch_clause",

					"finally_clause",

					"statement_block",

				},
				
			},
			
		},

		{
			Name: "tuple_type",
			Pattern: "(tuple_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Tuple",
				
				
				
				
			},
			
		},

		{
			Name: "type_alias_declaration",
			Pattern: "(type_alias_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"type",

					"type_identifier",

					"type_parameters",

				},
				
			},
			
		},

		{
			Name: "type_annotation",
			Pattern: "(type_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				
				Roles: []string{

					"Type",

				},
				
				
			},
			
		},

		{
			Name: "type_arguments",
			Pattern: "(type_arguments)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_assertion",
			Pattern: "(type_assertion)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_parameter",
			Pattern: "(type_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				Children: []string{

					"constraint",

					"default_type",

					"type_identifier",

				},
				
			},
			
		},

		{
			Name: "type_parameters",
			Pattern: "(type_parameters)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "type_predicate",
			Pattern: "(type_predicate)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"identifier",

					"this",

					"type",

				},
				
			},
			
		},

		{
			Name: "type_predicate_annotation",
			Pattern: "(type_predicate_annotation)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "type_query",
			Pattern: "(type_query)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "TypeAnnotation",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "unary_expression",
			Pattern: "(unary_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"delete",

					"expression",

					"number",

					"typeof",

					"void",

				},
				
			},
			
		},

		{
			Name: "union_type",
			Pattern: "(union_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "UnaryOp",
				Token: "self",
				Roles: []string{

					"Operator",

				},
				
				
			},
			
		},

		{
			Name: "update_expression",
			Pattern: "(update_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"expression",

				},
				
			},
			
		},

		{
			Name: "variable_declaration",
			Pattern: "(variable_declaration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				Token: "self",
				Roles: []string{

					"Variable",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "variable_declarator",
			Pattern: "(variable_declarator)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Variable",
				
				Roles: []string{

					"Variable",

					"Declaration",

				},
				Children: []string{

					"array_pattern",

					"expression",

					"identifier",

					"object_pattern",

					"type_annotation",

				},
				
			},
			
		},

		{
			Name: "while_statement",
			Pattern: "(while_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "with_statement",
			Pattern: "(with_statement)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"parenthesized_expression",

					"statement",

				},
				
			},
			
		},

		{
			Name: "yield_expression",
			Pattern: "(yield_expression)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

		{
			Name: "abstract",
			Pattern: "(abstract)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "accessor",
			Pattern: "(accessor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "any",
			Pattern: "(any)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "as",
			Pattern: "(as)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "assert",
			Pattern: "(assert)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "asserts",
			Pattern: "(asserts)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "async",
			Pattern: "(async)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "await",
			Pattern: "(await)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Await",
				Token: "self",
				Roles: []string{

					"Await",

				},
				
				
			},
			
		},

		{
			Name: "boolean",
			Pattern: "(boolean)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "break",
			Pattern: "(break)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Break",
				Token: "self",
				Roles: []string{

					"Break",

				},
				
				
			},
			
		},

		{
			Name: "case",
			Pattern: "(case)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Case",
				
				Roles: []string{

					"Branch",

				},
				
				
			},
			
		},

		{
			Name: "catch",
			Pattern: "(catch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Catch",
				Token: "self",
				Roles: []string{

					"Catch",

				},
				
				
			},
			
		},

		{
			Name: "class",
			Pattern: "(class)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Class",
				
				Roles: []string{

					"Class",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "const",
			Pattern: "(const)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "continue",
			Pattern: "(continue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Continue",
				Token: "self",
				Roles: []string{

					"Continue",

				},
				
				
			},
			
		},

		{
			Name: "debugger",
			Pattern: "(debugger)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "declare",
			Pattern: "(declare)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "default",
			Pattern: "(default)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "delete",
			Pattern: "(delete)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "do",
			Pattern: "(do)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "else",
			Pattern: "(else)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "enum",
			Pattern: "(enum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "export",
			Pattern: "(export)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "extends",
			Pattern: "(extends)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "false",
			Pattern: "(false)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "finally",
			Pattern: "(finally)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Finally",
				Token: "self",
				Roles: []string{

					"Finally",

				},
				
				
			},
			
		},

		{
			Name: "for",
			Pattern: "(for)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "from",
			Pattern: "(from)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "function",
			Pattern: "(function)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Function",
				
				Roles: []string{

					"Function",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "get",
			Pattern: "(get)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "global",
			Pattern: "(global)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "hash_bang_line",
			Pattern: "(hash_bang_line)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "html_comment",
			Pattern: "(html_comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "if",
			Pattern: "(if)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "implements",
			Pattern: "(implements)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "import",
			Pattern: "(import)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Import",
				Token: "self",
				Roles: []string{

					"Import",

				},
				
				
			},
			
		},

		{
			Name: "in",
			Pattern: "(in)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "infer",
			Pattern: "(infer)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "instanceof",
			Pattern: "(instanceof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "interface",
			Pattern: "(interface)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Interface",
				Token: "self",
				Roles: []string{

					"Interface",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "is",
			Pattern: "(is)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "keyof",
			Pattern: "(keyof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "let",
			Pattern: "(let)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "meta",
			Pattern: "(meta)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "module",
			Pattern: "(module)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Module",
				
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "namespace",
			Pattern: "(namespace)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Namespace",
				Token: "self",
				Roles: []string{

					"Module",

				},
				
				
			},
			
		},

		{
			Name: "never",
			Pattern: "(never)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "new",
			Pattern: "(new)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "null",
			Pattern: "(null)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "number",
			Pattern: "(number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "number",
			Pattern: "(number)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "object",
			Pattern: "(object)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "of",
			Pattern: "(of)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "override",
			Pattern: "(override)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "private",
			Pattern: "(private)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "private_property_identifier",
			Pattern: "(private_property_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "property_identifier",
			Pattern: "(property_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "protected",
			Pattern: "(protected)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "public",
			Pattern: "(public)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "readonly",
			Pattern: "(readonly)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "regex_flags",
			Pattern: "(regex_flags)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "regex_pattern",
			Pattern: "(regex_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Pattern",
				Token: "self",
				Roles: []string{

					"Pattern",

				},
				
				
			},
			
		},

		{
			Name: "require",
			Pattern: "(require)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "return",
			Pattern: "(return)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Return",
				Token: "self",
				Roles: []string{

					"Return",

				},
				
				
			},
			
		},

		{
			Name: "satisfies",
			Pattern: "(satisfies)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "set",
			Pattern: "(set)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Set",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "shorthand_property_identifier",
			Pattern: "(shorthand_property_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "shorthand_property_identifier_pattern",
			Pattern: "(shorthand_property_identifier_pattern)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "statement_identifier",
			Pattern: "(statement_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "If",
				
				
				
				
			},
			
		},

		{
			Name: "static",
			Pattern: "(static)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				Token: "self",
				Roles: []string{

					"Reference",

				},
				
				
			},
			
		},

		{
			Name: "string",
			Pattern: "(string)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "string_fragment",
			Pattern: "(string_fragment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "super",
			Pattern: "(super)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "switch",
			Pattern: "(switch)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Switch",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "symbol",
			Pattern: "(symbol)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "target",
			Pattern: "(target)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "this",
			Pattern: "(this)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "this_type",
			Pattern: "(this_type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "throw",
			Pattern: "(throw)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Throw",
				
				Roles: []string{

					"Throw",

				},
				
				
			},
			
		},

		{
			Name: "true",
			Pattern: "(true)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "try",
			Pattern: "(try)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Try",
				
				Roles: []string{

					"Try",

				},
				
				
			},
			
		},

		{
			Name: "type",
			Pattern: "(type)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "type_identifier",
			Pattern: "(type_identifier)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Identifier",
				
				Roles: []string{

					"Name",

				},
				
				
			},
			
		},

		{
			Name: "typeof",
			Pattern: "(typeof)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "undefined",
			Pattern: "(undefined)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "unknown",
			Pattern: "(unknown)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "using",
			Pattern: "(using)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "var",
			Pattern: "(var)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "void",
			Pattern: "(void)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "while",
			Pattern: "(while)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Loop",
				Token: "self",
				Roles: []string{

					"Loop",

				},
				
				
			},
			
		},

		{
			Name: "with",
			Pattern: "(with)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "yield",
			Pattern: "(yield)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Yield",
				Token: "self",
				Roles: []string{

					"Yield",

				},
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &typescriptPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *typescriptPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *typescriptPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *typescriptPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *typescriptPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *typescriptPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// xmlPatternMatcher provides pre-compiled pattern matching for xml
type xmlPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newxmlPatternMatcher() *xmlPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "_AttType",
			Pattern: "(_AttType)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "_EntityDecl",
			Pattern: "(_EntityDecl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_EnumeratedType",
			Pattern: "(_EnumeratedType)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "_Reference",
			Pattern: "(_Reference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "_markupdecl",
			Pattern: "(_markupdecl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "AttDef",
			Pattern: "(AttDef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "AttValue",
			Pattern: "(AttValue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_Reference",

				},
				
			},
			
		},

		{
			Name: "AttlistDecl",
			Pattern: "(AttlistDecl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "Attribute",
			Pattern: "(Attribute)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Attribute",
				
				Roles: []string{

					"Attribute",

				},
				
				
			},
			
		},

		{
			Name: "CDSect",
			Pattern: "(CDSect)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "CDStart",
			Pattern: "(CDStart)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "CharRef",
			Pattern: "(CharRef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "DefaultDecl",
			Pattern: "(DefaultDecl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ETag",
			Pattern: "(ETag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "EmptyElemTag",
			Pattern: "(EmptyElemTag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "EntityRef",
			Pattern: "(EntityRef)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "EntityValue",
			Pattern: "(EntityValue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"PEReference",

					"_Reference",

				},
				
			},
			
		},

		{
			Name: "Enumeration",
			Pattern: "(Enumeration)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Enum",
				Token: "self",
				Roles: []string{

					"Enum",

					"Declaration",

				},
				
				
			},
			
		},

		{
			Name: "ExternalID",
			Pattern: "(ExternalID)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "GEDecl",
			Pattern: "(GEDecl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "Mixed",
			Pattern: "(Mixed)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "NDataDecl",
			Pattern: "(NDataDecl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "NotationDecl",
			Pattern: "(NotationDecl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "NotationType",
			Pattern: "(NotationType)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "PEDecl",
			Pattern: "(PEDecl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "PEReference",
			Pattern: "(PEReference)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "PI",
			Pattern: "(PI)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "PseudoAtt",
			Pattern: "(PseudoAtt)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "PseudoAttValue",
			Pattern: "(PseudoAttValue)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"_Reference",

				},
				
			},
			
		},

		{
			Name: "PubidLiteral",
			Pattern: "(PubidLiteral)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				Token: "self",
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "PublicID",
			Pattern: "(PublicID)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "STag",
			Pattern: "(STag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "StringType",
			Pattern: "(StringType)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "StyleSheetPI",
			Pattern: "(StyleSheetPI)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "SystemLiteral",
			Pattern: "(SystemLiteral)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Literal",
				
				Roles: []string{

					"Literal",

				},
				
				
			},
			
		},

		{
			Name: "XMLDecl",
			Pattern: "(XMLDecl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "XmlModelPI",
			Pattern: "(XmlModelPI)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "children",
			Pattern: "(children)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "content",
			Pattern: "(content)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "contentspec",
			Pattern: "(contentspec)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "doctypedecl",
			Pattern: "(doctypedecl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "document",
			Pattern: "(document)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				Children: []string{

					"element",

				},
				
			},
			
		},

		{
			Name: "element",
			Pattern: "(element)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "elementdecl",
			Pattern: "(elementdecl)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "prolog",
			Pattern: "(prolog)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "ANY",
			Pattern: "(ANY)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ATTLIST",
			Pattern: "(ATTLIST)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "List",
				
				
				
				
			},
			
		},

		{
			Name: "CDATA",
			Pattern: "(CDATA)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "CData",
			Pattern: "(CData)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "CharData",
			Pattern: "(CharData)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "Comment",
			Pattern: "(Comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "DOCTYPE",
			Pattern: "(DOCTYPE)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ELEMENT",
			Pattern: "(ELEMENT)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "EMPTY",
			Pattern: "(EMPTY)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "ENTITY",
			Pattern: "(ENTITY)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "EncName",
			Pattern: "(EncName)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "NDATA",
			Pattern: "(NDATA)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "NOTATION",
			Pattern: "(NOTATION)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "Name",
			Pattern: "(Name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "Nmtoken",
			Pattern: "(Nmtoken)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "PITarget",
			Pattern: "(PITarget)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "PUBLIC",
			Pattern: "(PUBLIC)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "SYSTEM",
			Pattern: "(SYSTEM)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "TokenizedType",
			Pattern: "(TokenizedType)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "URI",
			Pattern: "(URI)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "VersionNum",
			Pattern: "(VersionNum)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "encoding",
			Pattern: "(encoding)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "no",
			Pattern: "(no)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "standalone",
			Pattern: "(standalone)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "version",
			Pattern: "(version)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "xml",
			Pattern: "(xml)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "yes",
			Pattern: "(yes)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &xmlPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *xmlPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *xmlPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *xmlPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *xmlPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *xmlPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}

// yamlPatternMatcher provides pre-compiled pattern matching for yaml
type yamlPatternMatcher struct {
	patterns map[string]mapping.MappingRule
	ruleIndex map[string]int
	rules []mapping.MappingRule
}

func newyamlPatternMatcher() *yamlPatternMatcher {
	rules := []mapping.MappingRule{

		{
			Name: "alias",
			Pattern: "(alias)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "anchor",
			Pattern: "(anchor)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "block_mapping",
			Pattern: "(block_mapping)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_mapping_pair",
			Pattern: "(block_mapping_pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				Children: []string{

					"block_node",

					"flow_node",

				},
				
			},
			
		},

		{
			Name: "block_node",
			Pattern: "(block_node)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_scalar",
			Pattern: "(block_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_sequence",
			Pattern: "(block_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "block_sequence_item",
			Pattern: "(block_sequence_item)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Block",
				Token: "self",
				Roles: []string{

					"Body",

				},
				
				
			},
			
		},

		{
			Name: "document",
			Pattern: "(document)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "double_quote_scalar",
			Pattern: "(double_quote_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "flow_mapping",
			Pattern: "(flow_mapping)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "flow_node",
			Pattern: "(flow_node)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "flow_pair",
			Pattern: "(flow_pair)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				Children: []string{

					"flow_node",

				},
				
			},
			
		},

		{
			Name: "flow_sequence",
			Pattern: "(flow_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "plain_scalar",
			Pattern: "(plain_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "reserved_directive",
			Pattern: "(reserved_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "single_quote_scalar",
			Pattern: "(single_quote_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "stream",
			Pattern: "(stream)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "tag_directive",
			Pattern: "(tag_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "yaml_directive",
			Pattern: "(yaml_directive)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "alias_name",
			Pattern: "(alias_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "anchor_name",
			Pattern: "(anchor_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "boolean_scalar",
			Pattern: "(boolean_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "comment",
			Pattern: "(comment)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Comment",
				Token: "self",
				Roles: []string{

					"Comment",

				},
				
				
			},
			
		},

		{
			Name: "directive_name",
			Pattern: "(directive_name)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "directive_parameter",
			Pattern: "(directive_parameter)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Parameter",
				Token: "self",
				Roles: []string{

					"Parameter",

				},
				
				
			},
			
		},

		{
			Name: "escape_sequence",
			Pattern: "(escape_sequence)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "float_scalar",
			Pattern: "(float_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "integer_scalar",
			Pattern: "(integer_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "null_scalar",
			Pattern: "(null_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "string_scalar",
			Pattern: "(string_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "tag",
			Pattern: "(tag)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "tag_handle",
			Pattern: "(tag_handle)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "tag_prefix",
			Pattern: "(tag_prefix)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

		{
			Name: "timestamp_scalar",
			Pattern: "(timestamp_scalar)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				
				
				
				
			},
			
		},

		{
			Name: "yaml_version",
			Pattern: "(yaml_version)",
			
			UASTSpec: mapping.UASTSpec{
				Type: "Synthetic",
				Token: "self",
				
				
				
			},
			
		},

	}

	patterns := make(map[string]mapping.MappingRule)
	ruleIndex := make(map[string]int)
	
	for i, rule := range rules {
		patterns[rule.Name] = rule
		ruleIndex[rule.Name] = i
	}

	return &yamlPatternMatcher{
		patterns: patterns,
		ruleIndex: ruleIndex,
		rules: rules,
	}
}

func (m *yamlPatternMatcher) MatchPattern(patternName string) (mapping.MappingRule, bool) {
	rule, exists := m.patterns[patternName]
	return rule, exists
}

func (m *yamlPatternMatcher) GetRuleByIndex(index int) (mapping.MappingRule, bool) {
	if index < 0 || index >= len(m.rules) {
		return mapping.MappingRule{}, false
	}
	return m.rules[index], true
}

func (m *yamlPatternMatcher) GetRuleIndex(patternName string) (int, bool) {
	index, exists := m.ruleIndex[patternName]
	return index, exists
}

func (m *yamlPatternMatcher) GetAllPatterns() map[string]mapping.MappingRule {
	return m.patterns
}

func (m *yamlPatternMatcher) GetRulesCount() int {
	return len(m.rules)
}


// OPTIMIZATION 2: Fast pattern matcher registry
var patternMatchers = map[string]interface{}{

	"ansible": newansiblePatternMatcher(),

	"bash": newbashPatternMatcher(),

	"c": newcPatternMatcher(),

	"c_sharp": newc_sharpPatternMatcher(),

	"clojure": newclojurePatternMatcher(),

	"cmake": newcmakePatternMatcher(),

	"commonlisp": newcommonlispPatternMatcher(),

	"cpp": newcppPatternMatcher(),

	"crystal": newcrystalPatternMatcher(),

	"css": newcssPatternMatcher(),

	"csv": newcsvPatternMatcher(),

	"dart": newdartPatternMatcher(),

	"dockerfile": newdockerfilePatternMatcher(),

	"dotenv": newdotenvPatternMatcher(),

	"elixir": newelixirPatternMatcher(),

	"elm": newelmPatternMatcher(),

	"fish": newfishPatternMatcher(),

	"fortran": newfortranPatternMatcher(),

	"git_config": newgit_configPatternMatcher(),

	"gitattributes": newgitattributesPatternMatcher(),

	"gitignore": newgitignorePatternMatcher(),

	"go": newgoPatternMatcher(),

	"gosum": newgosumPatternMatcher(),

	"gotmpl": newgotmplPatternMatcher(),

	"gowork": newgoworkPatternMatcher(),

	"hcl": newhclPatternMatcher(),

	"helm": newhelmPatternMatcher(),

	"html": newhtmlPatternMatcher(),

	"ini": newiniPatternMatcher(),

	"java": newjavaPatternMatcher(),

	"javascript": newjavascriptPatternMatcher(),

	"json": newjsonPatternMatcher(),

	"kotlin": newkotlinPatternMatcher(),

	"latex": newlatexPatternMatcher(),

	"lua": newluaPatternMatcher(),

	"make": newmakePatternMatcher(),

	"markdown": newmarkdownPatternMatcher(),

	"markdown_inline": newmarkdown_inlinePatternMatcher(),

	"nim": newnimPatternMatcher(),

	"nim_format_string": newnim_format_stringPatternMatcher(),

	"php": newphpPatternMatcher(),

	"properties": newpropertiesPatternMatcher(),

	"proto": newprotoPatternMatcher(),

	"proxima": newproximaPatternMatcher(),

	"prql": newprqlPatternMatcher(),

	"psv": newpsvPatternMatcher(),

	"python": newpythonPatternMatcher(),

	"ruby": newrubyPatternMatcher(),

	"rust": newrustPatternMatcher(),

	"rust_with_rstml": newrust_with_rstmlPatternMatcher(),

	"ssh_config": newssh_configPatternMatcher(),

	"swift": newswiftPatternMatcher(),

	"tcl": newtclPatternMatcher(),

	"toml": newtomlPatternMatcher(),

	"tsx": newtsxPatternMatcher(),

	"typescript": newtypescriptPatternMatcher(),

	"xml": newxmlPatternMatcher(),

	"yaml": newyamlPatternMatcher(),

}

// GetPatternMatcher returns a pre-compiled pattern matcher for the given language
func GetPatternMatcher(language string) interface{} {
	return patternMatchers[language]
}

// OPTIMIZATION 3: Compile-time validation functions

func validateansibleRules() error {
	matcher := newansiblePatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("ansible: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("ansible: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatebashRules() error {
	matcher := newbashPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("bash: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("bash: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatecRules() error {
	matcher := newcPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("c: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("c: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatec_sharpRules() error {
	matcher := newc_sharpPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("c_sharp: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("c_sharp: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validateclojureRules() error {
	matcher := newclojurePatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("clojure: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("clojure: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatecmakeRules() error {
	matcher := newcmakePatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("cmake: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("cmake: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatecommonlispRules() error {
	matcher := newcommonlispPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("commonlisp: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("commonlisp: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatecppRules() error {
	matcher := newcppPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("cpp: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("cpp: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatecrystalRules() error {
	matcher := newcrystalPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("crystal: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("crystal: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatecssRules() error {
	matcher := newcssPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("css: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("css: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatecsvRules() error {
	matcher := newcsvPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("csv: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("csv: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatedartRules() error {
	matcher := newdartPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("dart: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("dart: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatedockerfileRules() error {
	matcher := newdockerfilePatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("dockerfile: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("dockerfile: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatedotenvRules() error {
	matcher := newdotenvPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("dotenv: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("dotenv: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validateelixirRules() error {
	matcher := newelixirPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("elixir: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("elixir: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validateelmRules() error {
	matcher := newelmPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("elm: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("elm: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatefishRules() error {
	matcher := newfishPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("fish: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("fish: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatefortranRules() error {
	matcher := newfortranPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("fortran: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("fortran: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validategit_configRules() error {
	matcher := newgit_configPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("git_config: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("git_config: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validategitattributesRules() error {
	matcher := newgitattributesPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("gitattributes: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("gitattributes: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validategitignoreRules() error {
	matcher := newgitignorePatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("gitignore: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("gitignore: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validategoRules() error {
	matcher := newgoPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("go: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("go: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validategosumRules() error {
	matcher := newgosumPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("gosum: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("gosum: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validategotmplRules() error {
	matcher := newgotmplPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("gotmpl: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("gotmpl: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validategoworkRules() error {
	matcher := newgoworkPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("gowork: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("gowork: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatehclRules() error {
	matcher := newhclPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("hcl: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("hcl: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatehelmRules() error {
	matcher := newhelmPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("helm: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("helm: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatehtmlRules() error {
	matcher := newhtmlPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("html: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("html: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validateiniRules() error {
	matcher := newiniPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("ini: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("ini: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatejavaRules() error {
	matcher := newjavaPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("java: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("java: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatejavascriptRules() error {
	matcher := newjavascriptPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("javascript: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("javascript: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatejsonRules() error {
	matcher := newjsonPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("json: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("json: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatekotlinRules() error {
	matcher := newkotlinPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("kotlin: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("kotlin: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatelatexRules() error {
	matcher := newlatexPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("latex: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("latex: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validateluaRules() error {
	matcher := newluaPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("lua: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("lua: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatemakeRules() error {
	matcher := newmakePatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("make: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("make: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatemarkdownRules() error {
	matcher := newmarkdownPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("markdown: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("markdown: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatemarkdown_inlineRules() error {
	matcher := newmarkdown_inlinePatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("markdown_inline: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("markdown_inline: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatenimRules() error {
	matcher := newnimPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("nim: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("nim: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatenim_format_stringRules() error {
	matcher := newnim_format_stringPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("nim_format_string: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("nim_format_string: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatephpRules() error {
	matcher := newphpPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("php: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("php: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatepropertiesRules() error {
	matcher := newpropertiesPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("properties: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("properties: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validateprotoRules() error {
	matcher := newprotoPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("proto: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("proto: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validateproximaRules() error {
	matcher := newproximaPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("proxima: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("proxima: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validateprqlRules() error {
	matcher := newprqlPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("prql: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("prql: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatepsvRules() error {
	matcher := newpsvPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("psv: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("psv: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatepythonRules() error {
	matcher := newpythonPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("python: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("python: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validaterubyRules() error {
	matcher := newrubyPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("ruby: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("ruby: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validaterustRules() error {
	matcher := newrustPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("rust: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("rust: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validaterust_with_rstmlRules() error {
	matcher := newrust_with_rstmlPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("rust_with_rstml: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("rust_with_rstml: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatessh_configRules() error {
	matcher := newssh_configPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("ssh_config: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("ssh_config: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validateswiftRules() error {
	matcher := newswiftPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("swift: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("swift: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatetclRules() error {
	matcher := newtclPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("tcl: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("tcl: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatetomlRules() error {
	matcher := newtomlPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("toml: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("toml: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatetsxRules() error {
	matcher := newtsxPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("tsx: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("tsx: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatetypescriptRules() error {
	matcher := newtypescriptPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("typescript: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("typescript: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validatexmlRules() error {
	matcher := newxmlPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("xml: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("xml: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}

func validateyamlRules() error {
	matcher := newyamlPatternMatcher()
	
	// Validate rule inheritance
	for _, rule := range matcher.rules {
		if rule.Extends != "" {
			if _, exists := matcher.patterns[rule.Extends]; !exists {
				return fmt.Errorf("yaml: rule '%s' extends non-existent rule '%s'", rule.Name, rule.Extends)
			}
		}
		
		// Validate UAST spec
		if rule.UASTSpec.Type == "" {
			return fmt.Errorf("yaml: rule '%s' has empty UAST type", rule.Name)
		}
	}
	
	return nil
}


// OPTIMIZATION 4: Performance metrics
var patternMatchMetrics = struct {
	matches map[string]int64
	misses  map[string]int64
}{
	matches: make(map[string]int64),
	misses:  make(map[string]int64),
}

func RecordPatternMatch(language, pattern string, matched bool) {
	key := language + ":" + pattern
	if matched {
		patternMatchMetrics.matches[key]++
	} else {
		patternMatchMetrics.misses[key]++
	}
}

func GetPatternMatchStats() map[string]int64 {
	stats := make(map[string]int64)
	for k, v := range patternMatchMetrics.matches {
		stats[k+"_matches"] = v
	}
	for k, v := range patternMatchMetrics.misses {
		stats[k+"_misses"] = v
	}
	return stats
}
