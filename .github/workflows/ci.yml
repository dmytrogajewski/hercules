name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.24, 1.25]
        platform: [ubuntu-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Run linter
      run: |
        go install golang.org/x/lint/golint@latest
        golint -set_exit_status ./...

    - name: Run tests
      run: |
        CGO_ENABLED=0 go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        go tool cover -html=coverage.txt -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: false
        tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ matrix.platform }}

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: test

    services:
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build Hercules
      run: |
        CGO_ENABLED=0 go build -o hercules ./cmd/hercules

    - name: Create test config
      run: |
        cat > config.yaml << EOF
        server:
          port: 8080
          host: "0.0.0.0"
        cache:
          enabled: true
          backend: "s3"
          s3_bucket: "hercules-cache"
          s3_region: "us-east-1"
          s3_endpoint: "http://localhost:9000"
          s3_prefix: "test"
          ttl: "1h"
          aws_access_key_id: "minioadmin"
          aws_secret_access_key: "minioadmin"
        analysis:
          max_concurrent_analyses: 2
          timeout: "5m"
        EOF

    - name: Start Hercules server
      run: |
        ./hercules server --config config.yaml &
        sleep 10

    - name: Test health endpoint
      run: |
        curl -f http://localhost:8080/health

    - name: Test API endpoints
      run: |
        # Test analyses list
        curl -f http://localhost:8080/api/v1/analyses
        
        # Test analysis submission
        curl -X POST http://localhost:8080/api/v1/analyze \
          -H "Content-Type: application/json" \
          -d '{
            "repository": "https://github.com/dmytrogajewski/hercules",
            "analyses": ["burndown"],
            "options": {}
          }'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, integration-test, docker-build]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binaries
      run: |
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-w -s" -o hercules-linux-amd64 ./cmd/hercules
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-w -s" -o hercules-linux-arm64 ./cmd/hercules
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-w -s" -o hercules-darwin-amd64 ./cmd/hercules
        GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-w -s" -o hercules-darwin-arm64 ./cmd/hercules
        GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-w -s" -o hercules-windows-amd64.exe ./cmd/hercules

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          hercules-linux-amd64
          hercules-linux-arm64
          hercules-darwin-amd64
          hercules-darwin-arm64
          hercules-windows-amd64.exe
        generate_release_notes: true
        draft: false
        prerelease: false 